<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>字符串 on cqqqwq 的小站</title><link>https://blog.cqqqwq.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><description>Recent content in 字符串 on cqqqwq 的小站</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor><webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster><copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright><lastBuildDate>Sun, 10 Mar 2019 12:25:53 +0000</lastBuildDate><sy:updatePeriod>daily</sy:updatePeriod><atom:link href="https://blog.cqqqwq.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/index.xml" rel="self" type="application/rss+xml"/><item><title>「国家集训队」最长双回文子串-回文自动机</title><link>https://blog.cqqqwq.com/posts/luogu-4555/</link><pubDate>Sun, 10 Mar 2019 12:25:53 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sun, 10 Mar 2019 12:25:53 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/luogu-4555/</guid><description>&lt;p>输入长度为 $n$ 的串 $S$ ，求 $S$ 的最长双回文子串 $T$,即可将 $T$ 分为两部分$X$ ， $Y$ ， （ $∣X∣,∣Y∣ \geq 1$ ）且 $X$ 和 $Y$ 都是回文串。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>回文自动机</category><category>OI</category><category>题解</category><category>国家集训队</category></item><item><title>「CF232D」Fence-后缀数组+主席树</title><link>https://blog.cqqqwq.com/posts/cf232d/</link><pubDate>Mon, 04 Feb 2019 17:48:34 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 04 Feb 2019 17:48:34 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/cf232d/</guid><description>&lt;p>给定长度为 $n$ 的整数序列 $h[n]$ ，有 $Q$ 个询问，每次给出 $l_1,r_1$ ，​询问有多少对 $l_2,r_2$ ，满足以下条件:&lt;/p>
&lt;ol>
&lt;li>$r_2 – l_2 = r_1 – l_1$&lt;/li>
&lt;li>区间 $[l_1, r_1]$ 与区间 $[l_2, r_2]$ 没有交集&lt;/li>
&lt;li>对于任意 $i \in [0,r_1 – l_1]$ ，满足 $h[l_1 + i] + h[l_2 + i] = h[l_1] + h[l_2]$&lt;/li>
&lt;/ol></description><dc:creator>cqqqwq</dc:creator><category>后缀数组</category><category>主席树</category><category>字符串</category><category>数据结构</category><category>OI</category><category>题解</category><category>Codeforces</category></item><item><title>「CTSC2012」熟悉的文章-广义后缀自动机</title><link>https://blog.cqqqwq.com/posts/ctsc2012-familiar/</link><pubDate>Fri, 18 Jan 2019 22:51:41 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 18 Jan 2019 22:51:41 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/ctsc2012-familiar/</guid><description>&lt;p>为了有说服力地向阿米巴展示阿米巴的作文是多么让人觉得“眼熟”，小强想出了一个评定作文 “熟悉程度”的量化指标：$L_0$ .小强首先将作文转化成一个 $01$ 串。之后，小强搜集了各路名家的文章，同样分别转化成 $01$ 串后，整理出一个包含了 $M$ 个 $01$ 串的“ 标准作文库 ”。&lt;/p>
&lt;p>小强认为：如果一个 $01$ 串长度不少于 $L$ 且在 标准作文库 中的某个串里出现过（即，它是 标准作文库 的 某个串 的一个 连续子串 ），那么它是“ 熟悉 ”的。对于一篇作文（一个 $01$ 串）A，如果能够把 A 分割成若干段子串，其中“ 熟悉 ” 的子串的 长度总和 不少于 A 总长度的 $90%$，那么称 A 是 “ 熟悉的文章 ”。 $L_0$ 是能够让 $A$ 成为 “ 熟悉的文章 ” 的 所有 $L$ 的最大值 （如果不存在这样的 $L$ ，那么规定 $L_0 = 0$ ）。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀自动机</category><category>OI</category><category>题解</category><category>WC/CTSC/APIO</category></item><item><title>「CF86C」Genetic engineering-AC自动机+dp</title><link>https://blog.cqqqwq.com/posts/cf86c/</link><pubDate>Wed, 09 Jan 2019 19:18:07 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 09 Jan 2019 19:18:07 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/cf86c/</guid><description>&lt;p>我们定义一个 DNA 序列为仅有 &lt;code>ATCG&lt;/code> 四个字母的字符串。&lt;/p>
&lt;p>给出 $m(1 \le m \le 10)$ 个 DNA 序列模式串 $s_i$，每个长度均不超过 $10$ ，我们定义一个 DNA 序列 $w$ 是好的，当且仅当对于 $w$ 的每一个位置 $i$ ，都存在至少一个模式串 $s_j$ ， 使得 $w[l&amp;hellip;r] = s_j$（ $w[l&amp;hellip;r]$ 表示一个原字符串的一个子串） ， 其中 $1 \le l \le i \le r \le |w|$（ $|w|$ 为 DNA序列 $w$ 的长度） 。&lt;/p>
&lt;p>请你计算出所有长度为 $n(1 \le n \le 1000)$ 的好的 DNA 序列的个数。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>动态规划</category><category>AC自动机</category><category>OI</category><category>题解</category><category>Codeforces</category></item><item><title>「CF452E」Three strings-后缀数组</title><link>https://blog.cqqqwq.com/posts/cf452e/</link><pubDate>Mon, 31 Dec 2018 16:03:47 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 31 Dec 2018 16:03:47 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/cf452e/</guid><description>&lt;p>给出三个仅由小写字母构成的串 $A, B, C$ ，对于每个 $L \in [1, \min(len_A,len_B,len_C)]$ ，求满足$A[a,a+L-1] = B[b,b+L-1] = C[c,c+L-1]$ 的三元组 $(a,b,c)$ 的数量。&lt;/p>
&lt;p>答案对 $1000000007 (10 ^ 9 + 7)$ 取模，字符总数小于 $3 \times 10^5$。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>Codeforces</category></item><item><title>「JSOI2007」字符加密-后缀数组</title><link>https://blog.cqqqwq.com/posts/jsoi2007-character/</link><pubDate>Tue, 11 Sep 2018 21:13:17 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 11 Sep 2018 21:13:17 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/jsoi2007-character/</guid><description>&lt;p>喜欢钻研问题的 $JS$ 同学，最近又迷上了对加密方法的思考。一天，他突然想出了一种他认为是终极的加密办法：把需要加密的信息排成一圈，显然，它们有很多种不同的读法。&lt;/p>
&lt;p>例如 &lt;code>JSOI07&lt;/code> ，可以读作： &lt;code>JSOI07&lt;/code> &lt;code>SOI07J&lt;/code> &lt;code>OI07JS&lt;/code> &lt;code>I07JSO&lt;/code> &lt;code>07JSOI&lt;/code> &lt;code>7JSOI0&lt;/code> ，把它们按照字符串的大小排序：&lt;/p>
&lt;ul>
&lt;li>&lt;code>07JSOI&lt;/code>&lt;/li>
&lt;li>&lt;code>7JSOI0&lt;/code>&lt;/li>
&lt;li>&lt;code>I07JSO&lt;/code>&lt;/li>
&lt;li>&lt;code>JSOI07&lt;/code>&lt;/li>
&lt;li>&lt;code>OI07JS&lt;/code>&lt;/li>
&lt;li>&lt;code>SOI07J&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>读出最后一列字符：&lt;code>I0O7SJ&lt;/code>，就是加密后的字符串。 但是，如果想加密的字符串实在太长，你能写一个程序完成这个任务吗？&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「HNOI2004」L语言-AC自动机</title><link>https://blog.cqqqwq.com/posts/hnoi2004-language/</link><pubDate>Sun, 09 Sep 2018 20:11:35 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sun, 09 Sep 2018 20:11:35 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/hnoi2004-language/</guid><description>&lt;p>一段文章 $T$ 是由若干小写字母构成。一个单词 $W$ 也是由若干小写字母构成。一个字典 $D$ 是若干个单词的集合。我们称一段文章 $T$ 在某个字典 $D$ 下是可以被理解的，是指如果文章 $T$ 可以被分成若干部分，且每一个部分都是字典 $D$ 中的单词。&lt;/p>
&lt;p>给定一个字典 $D$ ，你的程序需要判断若干段文章在字典 $D$ 下是否能够被理解。并给出其在字典 $D$ 下能够被理解的最长前缀的位置。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>AC自动机</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「BZOJ4278」[ONTAK2015]Tasowanie-后缀数组</title><link>https://blog.cqqqwq.com/posts/bzoj4278-tasowanie/</link><pubDate>Tue, 14 Aug 2018 19:56:00 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 14 Aug 2018 19:56:00 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/bzoj4278-tasowanie/</guid><description>&lt;p>给定两个数字串 $A$ 和 $B$ ，通过将 $A$ 和 $B$ 进行二路归并得到一个新的数字串 $T$ ，请找到字典序最小的 $T$ 。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>后缀数组</category><category>字符串</category><category>OI</category><category>题解</category><category>BZOJ</category></item><item><title>「POI2006」Periods of Words-KMP</title><link>https://blog.cqqqwq.com/posts/poi2006-okr/</link><pubDate>Tue, 14 Aug 2018 19:50:59 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 14 Aug 2018 19:50:59 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/poi2006-okr/</guid><description>&lt;p>一个串是有限个小写字符的序列,特别的,一个空序列也可以是一个串. 一个串 $P$ 是串 $A$ 的前缀, 当且仅当存在串 $B$ , 使得 $A = PB$. 如果 $P \neq A$ 并且 $P$ 不是一个空串,那么我们说 $P$ 是 $A$ 的一个 $proper$ 前缀. 定义 $Q$ 是 $A$ 的周期, 当且仅当 $Q$ 是 $A$ 的一个 $proper$ 前缀并且 $A$ 是 $QQ$ 的前缀(不一定要是 $proper$ 前缀).&lt;/p>
&lt;p>比如串 $abab$ 和 $ababab$ 都是串 $abababa$ 的周期. 串 $A$ 的最大周期就是它最长的一个周期或者是一个空串(当 $A$ 没有周期的时候), 比如说, $ababab$ 的最大周期是 $abab$ . 串 $abc$ 的最大周期是空串. 给出一个串,求出它所有前缀的最大周期长度之和.&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>KMP</category><category>OI</category><category>题解</category><category>各国OI</category></item><item><title>「JSOI2007」文本生成器-AC自动机+dp</title><link>https://blog.cqqqwq.com/posts/jsoi2007-generator/</link><pubDate>Sat, 11 Aug 2018 19:27:37 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 11 Aug 2018 19:27:37 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/jsoi2007-generator/</guid><description>&lt;p>可读版题意：&lt;/p>
&lt;p>给定 $n$ 个仅包含大写字母的模板串，求所有的长度为 $M$ 且仅包含大写字母的不同字符串中，有多少个包含至少一个模板串。答案对 $10007$ 取模。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>AC自动机</category><category>动态规划</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「POI2010」Antisymmetry-后缀数组</title><link>https://blog.cqqqwq.com/posts/poi2010-antisymmetry/</link><pubDate>Sat, 11 Aug 2018 19:25:24 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 11 Aug 2018 19:25:24 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/poi2010-antisymmetry/</guid><description>&lt;p>对于一个 $0/1$ 字符串，如果将这个字符串 $0$ 和 $1$ 取反后，再将整个串反过来和原串一样，就称作“反对称”字符串。比如 $00001111$ 和 $010101$ 就是反对称的， $1001$ 就不是。&lt;/p>
&lt;p>现在给出一个长度为 $n$ 的 $0/1$ 字符串，求它有多少个子串是反对称的。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>各国OI</category></item><item><title>「TJOI2013」单词-后缀数组+二分</title><link>https://blog.cqqqwq.com/posts/tjoi2013-word/</link><pubDate>Sat, 11 Aug 2018 19:24:27 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 11 Aug 2018 19:24:27 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/tjoi2013-word/</guid><description>&lt;p>可读版题意：&lt;/p>
&lt;p>给定 $n$ 个字符串，第 $i$ 个字符串的长度为 $M_i$ ，求每个字符串在所有字符串中出现的次数。&lt;/p>
&lt;p>数据范围：$n \leq 100,\ M = \sum M_i \leq 10^6$.&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「POI2000」病毒-AC自动机</title><link>https://blog.cqqqwq.com/posts/poi2000-virus/</link><pubDate>Thu, 09 Aug 2018 11:03:59 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 09 Aug 2018 11:03:59 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/poi2000-virus/</guid><description>&lt;p>二进制病毒审查委员会最近发现了如下的规律：某些确定的二进制串是病毒的代码。如果某段代码中不存在任何一段病毒代码，那么我们就称这段代码是安全的。现在委员会已经找出了所有的病毒代码段，试问，是否存在一个无限长的安全的二进制代码。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>AC自动机</category><category>字符串</category><category>图论</category><category>OI</category><category>题解</category><category>各国OI</category></item><item><title>「NOI2015」品酒大会-后缀数组</title><link>https://blog.cqqqwq.com/posts/noi2015-savour/</link><pubDate>Fri, 03 Aug 2018 19:40:39 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 03 Aug 2018 19:40:39 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/noi2015-savour/</guid><description>&lt;p>简单版题意：&lt;/p>
&lt;p>给定一个长度为 $n$ 的字符串，和一个长度为 $n$ 的数列 ${a_n}$ ，求对于 $r$ 从 $0$ 到 $n-1$ ，所有满足 $1 \leq p &amp;lt; q \leq n$ 且 $lcp(p,q) \geq r$ 的数对个数以及满足上述条件的数对中 $a_p \times a_q$ 的最大值。（ $a_i$ 可以为负数）&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>并查集</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「HAOI2016」找相同字符-后缀数组+单调栈</title><link>https://blog.cqqqwq.com/posts/haoi2016-same/</link><pubDate>Wed, 04 Jul 2018 20:39:30 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 04 Jul 2018 20:39:30 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/haoi2016-same/</guid><description>&lt;p>给定两个字符串，求出在两个字符串中各取出一个子串使得这两个子串相同的方案数。当这两个子串中只要有一个取得位置不同时，两个方案不同。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>单调栈</category><category>后缀数组</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「NOI2016」优秀的拆分-后缀数组</title><link>https://blog.cqqqwq.com/posts/noi2016-split/</link><pubDate>Wed, 04 Jul 2018 20:38:39 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 04 Jul 2018 20:38:39 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/noi2016-split/</guid><description>&lt;p>如果一个字符串可以被拆分为 $AABB$ 的形式，其中 $A$ 和 $B$ 是任意非空字符串，则我们称该字符串的这种拆分是优秀的。一个字符串可能没有优秀的拆分，也可能存在不止一种优秀的拆分。&lt;/p>
&lt;p>现在给出一个长度为 $n$ 的字符串 $S$ ，我们需要求出，在它&lt;strong>所有&lt;/strong>子串的&lt;strong>所有&lt;/strong>拆分方式中，优秀拆分的总个数。这里的子串是指字符串中连续的一段。&lt;/p>
&lt;p>以下事项需要注意：&lt;/p>
&lt;ul>
&lt;li>出现在不同位置的相同子串，我们认为是不同的子串，它们的优秀拆分均会被记入答案。&lt;/li>
&lt;li>在一个拆分中，允许出现 $A = B$。例如 $cccc$ 存在拆分 $A = B = c$。&lt;/li>
&lt;li>字符串本身也是它的一个子串。&lt;/li>
&lt;/ul></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「TJOI2017」DNA-后缀数组</title><link>https://blog.cqqqwq.com/posts/tjoi2017-dna/</link><pubDate>Sat, 23 Jun 2018 20:43:31 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 23 Jun 2018 20:43:31 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/tjoi2017-dna/</guid><description>&lt;p>加里敦大学的生物研究所发现了决定人喜不喜欢吃藕的基因序列 $S$ ,有这个序列的碱基序列就会表现出喜欢吃藕的性状，但是研究人员发现对碱基序列 $S$ ,任意修改其中不超过 $3$ 个碱基，依然能够表现出吃藕的性状。现在研究人员想知道这个基因在 DNA 链 $S0$ 上的位置。所以你需要统计在一个表现出吃藕性状的人的 DNA 序列 $S0$ 上，有多少个连续子串可能是该基因，即有多少个 $S0$ 的连续子串修改小于等于三个字母能够变成 $S$ 。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>AC自动机学习笔记</title><link>https://blog.cqqqwq.com/posts/notes-ac_automaton/</link><pubDate>Thu, 05 Apr 2018 17:10:36 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 05 Apr 2018 17:10:36 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/notes-ac_automaton/</guid><description>&lt;p>&lt;code>Aho–Corasick&lt;/code>算法，常叫做AC自动机。是一种字符串多模式串匹配算法。能在线性时间内完成多个模式串对一个查询串的匹配。&lt;/p>
&lt;blockquote>
&lt;p>能自动AC哦。&lt;/p>
&lt;/blockquote></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>AC自动机</category><category>模板</category><category>OI</category><category>学习笔记</category></item><item><title>「NOI2014」动物园-KMP</title><link>https://blog.cqqqwq.com/posts/noi2014-zoo/</link><pubDate>Thu, 05 Apr 2018 16:55:40 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 05 Apr 2018 16:55:40 +0000</atom:modified><guid>https://blog.cqqqwq.com/posts/noi2014-zoo/</guid><description>&lt;p>给定一个字符串 $S$ ，求出 $num$ 数组——对于字符串 $S$ 的前 $i$ 个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作 $num[i]$ 。&lt;/p>
&lt;p>特别地，为了避免大量的输出，你不需要输出 $num[i]$ 分别是多少，你只需要输出所有 $(num[i]+1)$ 的乘积，对 $10^9+7$ 取模的结果即可。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>KMP</category><category>OI</category><category>题解</category><category>NOI</category></item></channel></rss>