{"pages":[{"title":"","text":"{\"name\":\"Chen's Blog\",\"short_name\":\"Chen's Blog\",\"icons\":[{\"src\":\"/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/android-chrome-512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"theme_color\":\"#ff0000\",\"background_color\":\"#ff0000\",\"display\":\"standalone\"}","link":"/manifest.json"},{"title":"关于我","text":"Stay simple. Stay naïve. 恭喜你！发现了一个蒟蒻的Blog。 某高中开始学OI的蒟蒻。现就读北京某高中高二。 不定期更新。 NOIP2017省二滚粗 BJWC2018爆零滚粗 BJOI2018爆零滚粗 NOIP2018省一滚粗 BJWC2018？取消了 BJOI2019？ （NOI2019）？ (≧▽≦)/ 联系方式： qiqianchen@126.com qiqianchen@gmail.com","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"留言板","text":"所有你想对我说的东西。","link":"/board/index.html"},{"title":"友情链接","text":"如果有想加的神犇欢迎留言。 .md-links { min-height: calc(100% - 120px - 5pc - 6em); text-align: center; width: 65%; min-width: 300px; max-width: 500px; margin: auto; margin-top: 0em; line-height: 5px; } .md-links-item { background: #fff; box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .2), 0 1px 5px 0 rgba(0, 0, 0, .12); height: 60px; line-height: 15px; margin: 20px 0; padding: 1px 2px 14px 0px; transition: box-shadow 0.25s; } .md-links a { color: #333; text-decoration: none; } .md-links li { list-style: none; } .md-links-item img { float: left; box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 11px -2px rgba(0, 0, 0, .2), 0 1px 5px 0 rgba(0, 0, 0, .12); } .md-links-item:hover { box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3); cursor: pointer; } .md-links-title { font-size: 20px; line-height: 35px; } Chen's Blog 记录时光与梦想 OIers memset0 一个有思想的博客 Ning-Mew 对我的OI有很大帮助的神犇虽然他们可能并不知道。 xehoth 明日は明日の风が吹く Menci 眉眼如初，岁月如故 hzwer","link":"/links/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"2018 AprWeek2","text":"2018年四月 第二周 2018.4.2-2018.4.8 按理说明天或者后天写貌似更符合一周写一篇的周期，但明明已经周日，而且这一周也挺有意义的，所以今天就来写一写吧，也作为生活正常起来的一个标志。 正文上一篇总结也就是一个假期前的事情。这个假期其实还是蛮充实的。 前两天主要是在家里写作业，第三天接着去BJOI集训。从开始到现在集（hua训（shui了几次，心情还是不错的。 感觉每次去某个比赛或者集训啥的，都能收获不少的正反馈。想NOIP的时候连Dijkstra都不会写，想冬令营的时候还完全听不懂什么是费用流，而现在也能切比较简单的费用流的省选题了。虽然这次去集训还是听不太懂什么点分治、数学乱七八糟的，但我相信我还是会学到的。 仔细回想的话，离冬令营都过去两个半月了。这两个半月其实也没学什么…平衡树、图论、一点字符串…仅此而已。时间不会等人，一切都是要抓紧的。 今天出去春游了。玩的还算开心，和同学一起逛逛园子，赏赏花，也算一件乐事。转眼期中就要到了。时间过的真快啊。 下一周会比较忙。目前的计划是两道树链剖分，三四道平衡树，三四道费用流。估计不太能全做完，能做多少是多少吧。 一万年太久 只争朝夕 来源：Ninsou [pixiv] TodoList上周完成 AC自动机模版 ✔ 完成 \bSplay若干题 ✘ 不存在的 倒是看了不少遍自己的代码 任务清单 ✔ 稳步完成（雾 下周完成 任务清单*10 复习历史 &amp;&amp; 政治 测试15min敲完Splay","link":"/20180408-2018-AprWeek2/"},{"title":"2018 FebWeek1","text":"2018年二月 第一周 2018.1.29-2018.2.4 正文这一周好像没干什么事情。 学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板…过几天做几道关于最大流什么的题吧。 还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题…争取下周做几道稍微难些的莫队吧。 寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。 不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。 TodoList这周完成 实现AC自动机 ✘ 优先级目前不够高 学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写… 写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了…地理作业是什么… 至少写一篇题解发到这里 ✔目前有三篇啦 出去玩\\(≧▽≦)/ ✔成功啦 实现了一个最大流膜版… ✔（图论太难了 下周完成 完成莫队算法学习笔记（普通 待修改 强制在线 树上 写…语文作业… 接着学网络流 费用流 接着做题啦","link":"/20180205-2018-FebWeek1/"},{"title":"2018 AprWeek1","text":"2018年四月 第一周 2018.3.26-2018.4.1 正文上一周以及这一周的周末一大堆烂事，所以总结也就周三才勉强写成。 今天下雪了。四月的雪，似乎比寒冬腊月的还更加的冷酷一些。 昨天也下雪了，其实倒不如说是雨夹雪。穿着单薄的校服，淋着雨，先是从体育课回班，再是从学校回家。真的很冷，很冷。 今天多穿了一层外套，回家的时候还是淋着雨。虽然不是很冷，但心呐，还是不住的寒。生物、地理的爆炸是比冰粒子打在脸上更疼，比雨溅到鞋里更凉的事情。 为什么要学竞赛，学竞赛值吗？以前能毫不犹豫的回答，现在决心恐怕是越来越少了吧。 预计假期会发一篇AC自动机的学习笔记。 也不想说那么多期望什么的。明知道不可能，说了去骗谁呢。 来源：泡雪 | うらな [pixiv] TodoList这周完成 网络流 &amp;&amp; 费用流的模型 &amp;&amp; 习题 ✔ 一点？ 码课件！怼分块… ✔ 讲了课 在晚自习上认真的写作业… ✔ 感冒一周…都没怎么去晚自习 保证$1$天$1$道Luogu 省选- 及以上\b难度\b题目 ✘这周果然咕了 学习FFT并过掉模版P3803 ✘ 不存在的 下周完成 AC自动机模版 \bSplay若干题 任务清单","link":"/20180404-2018-AprWeek1/"},{"title":"2018 FebWeek2","text":"2018年二月 第二周 2018.2.5-2018.2.11 正文这一周没干什么事…这么一想忽然就颓废了… 写了几道并查集，写了几道二分图，写了几道图和树的题。仿佛就是毫无目的的一般。不过还是把看了很久的几道并查集的题给A了。还是蛮激动的。 抱了洛谷的网课，于是体会到了一上午学平衡树、主席树、树套树的酸爽。好多的东西还没来得及实现，只好等一等了。不过倒是深刻意识到了自己的蒟蒻。啧啧。 春节就快要到了。良宵佳节，不如好好补补作业。 TodoList这周完成 完成莫队算法学习笔记 ✔ 写了一篇 写…语文作业… ✔写了一点 接着学网络流 费用流 ✘并没有写费用流 接着做题啦 ✔做了几道水题… 下周完成 写完语文寒假作业！！！我觉得上面的事情够充满整整一周了嗯。","link":"/20180211-2018-FebWeek2/"},{"title":"2018 FebWeek3","text":"2018年二月 第三周 2018.2.12-2018.2.18 正文又是一个颓废的一周。啧啧。 这一周更是颓废着写作业，学了不知道有没有一点东西。写了一个$Treap$从早上调到晚上，然后才苟下来这么一道题。 实在是被作业所困很深。不过这一周开发了几个新技能。CF，LOJ，P站之类（咦这什么鬼。这也算是苦中偷趣。一切还是很有趣很有趣的。 回顾寒假，学了不少东西，但是更多的还是在各种奇怪的地方（比如玩手机的什么）浪费了不少的时间。以后也应该好好的珍惜时间，多写作业，多写程序，多学算法嘛。开始寒假的时候，还立下了洛谷AC300的Flag…然后…GG…这个寒假最多也就到60题了…而且省选级别的题也没做几道。 想到一句话： 身后有余忘缩手 眼前无路想回头 愿自己能够\b\b安然过到高三吧。 最近真的很忙。很抱歉。 来源：Pixiv TodoList这周完成 学了差分约束和强连通分量 ✔ 图论真可怕 写了一道无旋转Treap ✔ 太难啦 写完语文寒假作业 ✘ 失败…失败了… 下周完成 苟完…作业… 活到开学… 学…费用流…","link":"/20180218-2018-FebWeek3/"},{"title":"2018 JanWeek2","text":"2018年一月 第二周 2018.1.7-2018.1.14 写在前面莫名的就突然有一种做一做总结的欲望。想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。 正文转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。 TodoList这周完成无 下周 复习&amp;考好期末 考完试学： Trie Treap 出没出完的题 准备好冬令营旅游","link":"/20180113-2018-JanWeek2/"},{"title":"2018 FebWeek4","text":"2018年二月 第四周 2018.2.19-2018.2.25 正文开学了。 该总结一下寒假了。 寒假刷题： 为了篇幅短小，只把不是水题的题放在这里。 Luogu刷题：状压dp： P1879 [USACO06NOV]玉米田Corn Fields P1896 [SCOI2005]互不侵犯King P1433 吃奶酪 P2704 [NOI2001]炮兵阵地 dp： P2577 [ZJOI2005]午餐 线段树： P2894 [USACO08FEB]酒店Hotel P1438 无聊的数列 P1558 色板游戏 T21778 过年 平衡树： P2073 送花 P2596 [ZJOI2006]书架 P1486 [NOI2004]郁闷的出纳员 P2234 [HNOI2002]营业额统计 P2286 [HNOI2004]宠物收养场 P3165 [CQOI2014]排序机械臂 P2042 [NOI2005]维护数列 并查集： P1396 营救 P1536 村村通 P1525 关押罪犯 P2024 食物链 P1197 [JSOI2008]星球大战 P1196 [NOI2002]银河英雄传说 最短路： P1342 请柬 P1629 邮递员送信 P1608 路径统计 生成树： P1195 口袋的天空 P2820 局域网 P1194 买礼物 差分约束： P1993 小 K 的农场 强连通分量： P1726 上白泽慧音 网络流： P2055 [ZJOI2009]假期的宿舍 P1231 教辅的组成 P2756 飞行员配对方案问题 P1345 [USACO5.4]奶牛的电信Telecowmunication 其他图论： P1268 树的重量 P1113 杂务 P3183 [HAOI2016]食物链 单调队列： P2032 扫描 莫队： P2709 小B的询问 P1972 [SDOI2009]HH的项链 P1494 [国家集训队]小Z的袜子 二分： P1314 聪明的质监员 数论： P1082 同余方程 模板： P3379 【模板】最近公共祖先（LCA） P3375 【模板】KM`P字符串匹配 P3369 【模板】普通平衡树（Treap/SBT） P3865 【模板】ST表 P3382 【模板】三分法 P3370 【模板】字符串哈希 P3391 【模板】文艺平衡树（Splay） P3376 【模板】网络最大流 P3386 【模板】二分图匹配 P3385 【模板】负环 一些水题： P1083 借教室 P1168 中位数 P4231 三步必杀 P1116 车厢重组 Codeforce： #462 #463 #464 （写完感觉好少啊） 活过报到了，耶！不过开学第一周也不是好熬过去的呢。 话说第一次考试考了rank1，然而出题人没做这套题，所以权当rank2吧。革命尚未成功，要直视和巨佬在图论、dp上的差距和距离，这个学期主要就要发展图论，dp，数学等方面的知识。 \b\b寒假后期感觉有点心有余而力不足，反而显得\b平时上学的时候学习效率更高。真是奇怪呢。不过这也在一方面上反映了\b\b寒假作业的毒瘤。毒瘤！ 不过课内的学习也不能放下，只好再压榨一点时间了。学习好也就这点不好，两边都难割舍，害怕毁掉课内，也害怕一年竞赛一场空。 「没有成绩时 学习不停止」 \b新学期，自勉，共勉。 TodoList下周完成 学费用流 活过这周 好好学课内啊 这学期完成（大略） 图论 树链剖分及相关 网络流相关 费用流 差分约束 缩点相关 … 数据结构 高级数据结构（veb啥的） … 字符串相关 数学 扩欧 逆元 FFT等多项式 … 奇奇怪怪的算法 博弈 研究春令营的课 （一时想不到了 还有啥啊） 说多不多，说少不少。","link":"/20180225-2018-FebWeek4/"},{"title":"2018 JanWeek3","text":"2018年一月 第三周 2018.1.15-2018.1.21 正文这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。 TodoList这周完成 考好期末 ✔考的还不错 考完试学： Trie ✘根本没学 Treap ✘还没有实现 出没出完的题 ✘还是懒得出题 准备好冬令营旅游 ✔旅游目前顺利 下周 愉快的度过冬令营 结课考试不爆0 每天保证3-5道的刷题效率 顺便写点寒假作业","link":"/20180120-2018-JanWeek3/"},{"title":"2018 JanWeek4","text":"2018年一月 第四周2018.1.22-2018.1.28 正文其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。 转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。 不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。 这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。 学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。 然后高中生活就过去了。 TodoList这周完成 考完试学： Trie ✔成功学习 Treap ✔成功实现 出没出完的题 ✔颓了一道膜版交上去了 愉快的度过冬令营 ✔旅游很顺利 愉快 结课考试不爆0 ✔5分哈哈哈 每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右 顺便写点寒假作业 ✔强行水完了化学和一半的物理作业 下周 实现AC自动机 学会fhq Treap或者Splay 写完至少物理、地理、一小半数学的寒假作业 至少写一篇题解发到这里（待选主题：线段树，状压dp 出去玩\\(≧▽≦)/","link":"/20180128-2018-JanWeek4/"},{"title":"2018 MarWeek1","text":"2018年三月 第一周 2018.2.26-2018.3.4 正文侥幸混过第一周。 这一周说起来还是在寒假的颓废状态中。平时的作业少，周末的作业多，大概就是开学初的特点。 今天讲了下$zkw$线段树，然后这个果真耗掉了我小半个周末的时间。啧啧。话说讲课真的是累，超级累。 三月份听说有省选？那就又可以去混一混了。考试能不爆零就好。 听说，这一个学期很短，不过15周的时间。\b这十五周过去，接下来很快就要NOIP了呀。NOIP这个东西，不能炸啊。先定一个小目标…$480+$？？？不过以以往的经验来看，小目标一般都是能实现的。比如小升初，比如中考，比如分班，比如省选冬令营的考试（雾）。 虽然我立的$flag$很有可能以一种玄学的方法实现。 不过，能实现就很不错了呢。 但无论如何，不能轻浮啊。 脚踏实地 仰望星空 TodoList此周完成 侥幸度过开学第一周 第一次在OI讲台上讲课 做了两道缩点的水题 做了两道$dp$的水题 下周完成 颓$dp$ 费用流 树链剖分（以上两个这周必须过了模版！！！ \b加紧的赶点进度（课内&amp;&amp;课外","link":"/20180303-2018-MarWeek1/"},{"title":"2018 MarWeek2","text":"2018年三月 第二周 2018.3.5-2018.3.11 正文开学的第二周。一切渐渐进入上学的节奏。 颓废。这一周开始的时候可以说是真的颓废，课内数学物理变得越来越难，甚至课上的题有的都做不出来。回家，也不怎么想写作业，只是颓代码或者颓知乎。后几天慢慢的好了一点。作业稍多，倒也是免于不少杂念。这两天刷题的也稍稍多了点。总之，一切还是向好发展的吧。 周末的作业不少，更是有不少奇怪的东西（忽然想起来还要背不少的课文），的确不太舒爽。周六一天都在Coding，幸亏作业不多。 这周末APIO的一道题搞了个很气的95分。虽然我写的就是个暴力吧，但好歹时间复杂度优越啊，凭什么就剩下一个点空间爆炸呢…凭什么啊！！！ 下周又是新的一周。然而下周一$Deadline$的好多作业还没有做完，真是GG。好像下下下周又要讲课？？？我明明就是一个什么都不会的蒟蒻啊。还得现学，心真累。 没想到，$oscar$神犇居然是我校选手，是不是就是这几天一直就坐在我们隔壁机房的神犇啊。看朋友圈说什么冬令营Ag滚粗，也不知道我的OI生涯会不会有机会走到能至少看到一眼Ag的那一步？？？估计不太现实吧。 忽然也就想到初三的时候，十次月考，每次考完成绩分析的时候都会往放历次大考成绩单的信封里塞一张稿纸，每张上面只写了几个字：“革命尚未成功，同志仍需努力。” 最有趣的是考完中考，我还是往里面塞了一张稿纸：“革命已经成功，同志仍需努力。” \b当然，我现在只是希望，一年后，我也是能这样的吧。 细细想来初三，发生的很多事情真是如梦似幻，如梦似幻啊。 感觉最近挺累的。视力也越来越有些不好了。 诶。 来源：Wikipedia TodoList此周完成 颓$dp$ ✘ 这一周课上开始颓图论了… 费用流 ✔大概算了吧…会写简单EK+SPFA了… 树链剖分 ✔ 成功写了好几道模版 \b加紧的赶点进度 ¿大约吧 一些奇奇怪怪的图论 下周完成 最小费用最大流模版 dp试炼场！！！ 顺便学习一下高级的dp\b优化 准备讲课（怎么着自己也得学会吧 \b保证$1$天$1$道Luogu 省选- 及以上\b难度\b题目","link":"/20180310-2018-MarWeek2/"},{"title":"2018 MarWeek3","text":"2018年三月 第三周 2018.3.12-2018.3.18 正文转眼都过去三周了啊。 一切渐入正轨吧。但是最近总是感觉课内学习做到的题超级的难。不知道是老师变态呢，还是我变弱了呢…而且有的时候还不想写作业。恐怕是药丸。以后上课还是应该好好听讲啊。 暂且不管吧。但是现在还面临着一个比较尴尬的事情：如果做一些五三之类的大水练习册觉得无聊，可是做像什么小绿本小蓝本需要的时间又太多。 啊。下定决心。要刷题，刷题。不管是数学、物理，还是信息。对于目前来看，只有刷题才能让自己从颓废中出去了。 两周之后还要讲课。我还不会。感觉gg。 有的时候，我也在想，如果我没有选择OI，那我现在的生活会是一个什么样子的。 如果没有选择OI，那么现在，我多半是在打物理竞赛。最近上物理自招的课，却也觉得物理也比较有趣，而且物理毕竟是高考学科，比信息学也有一定的好处。 但怎么说呢，我觉得选择OI就是命吧。 在初三的时候，我还没有学过关于程序设计的任何知识（说来真是后悔哈。那个时候，学校的计算机课学的是Scratch的编程。想想也真的是不可思议。当时的我就用着那个可怜的图形界面的编程，自己写了好多有趣的程序。而且那个时候，虽然我还不知道任何关于什么递归啊，栈的概念，硬生生写了好几周，写出了一个能够解数独的程序。 一切，也许都是注定的吧。诶。不应该说这么多的。 北京下雪了呢。四个多月没有下过雨，也没有下过雪，今天终于得见。俗话说，瑞雪兆丰年。可我看着这雪，倒一点不像是丰年的兆头。 来源:Painterly snow | mclelun [pixiv] TodoList此周完成 最小费用最大流模版 ✔终于颓了模版！ dp试炼场！！！✘ 荒废 准备讲课（怎么着自己也得学会吧 ✘ 还有两周 \b保证$1$天$1$道Luogu 省选- 及以上\b难度\b题目 ✔ 省选-好像也不是很难 下周完成 图论关于连通分量、网络流、费用流的习题 刷题可以适当的少一点 学习更用心些吧 课上认真听课 看完《老人与海》 做一点物理小绿本的题","link":"/20180317-2018-MarWeek3/"},{"title":"2018 MarWeek4","text":"2018年三月 第四周 2018.3.19-2018.3.25 正文三月的最后一周。事情也不算少。周末有点事情，所以周一才发了出来。 逸夫楼前的桃花开了。一年一度，到今年应当也是第四年了。想在这所学校里，不知度过了多少的青春岁月啊。每一年，这棵桃树都会盛放。虽说今年晚了一些，但是该来的总会来的。 你若盛开，鲜花自来。 夏天真的要到了。口口声声的跟某人说了一个冬天，而等天气一天天的暖和起来，眼看着夏天就要来了，却真的感到痛彻的无能为力。 最近总感觉学习有点不顺利。这几周没有什么考试，不能检验状态。但是以前还没有留意，今天一仔细回顾作业，就发现真的错了不少，跟以前的自己差了很多。我也在反思，这到底是为什么…或许是上课不认真？或许是精力付出的不够？或许只是一时马虎？暂且也不太清楚。 感觉情况不容太多的乐观。但偏偏事情还是不少。OI在一个关键的时期，课内还有问题。付出的不够，收获也会缩水。我真的很想付出时间，尤其是OI，但真的，如果一天能掰成48个小时去用，如果，也许一切都会好一点吧。 马上就四月了。感觉NOIP马上好像就要到了。离NOIP2018还有229天。 忽然就想到，在离中考229天的时候，我在干些什么。那个时候应该还没有什么“考试欲来”的气氛，周末还能找个人玩玩，满市乱转。还记得在中考还有255天的时候，我在西直门的地铁站拍下一张照片发到了朋友圈，配上了中考倒数日。那个时候也许只是好玩，但现在虽说离NOIP还有200多天，但等到暑假能放开刷题的时候，时间恐怕也就一百天左右了。 去年我校省队貌似只有六个人。等到高二退役，排掉两三个变态，我真的就能排进全年级前三吗？任重而道远啊。 需要加倍的努力了，不管是在课内还是OI。 最近越写越长了，恳请各位的原谅。 来源:沁心 | 闭上眼听雨声 [pixiv] TodoList本周完成 图论关于连通分量、网络流、费用流的习题 ✔ 做了一些… 刷题可以适当的少一点 ✔ 差不多吧 学习更用心些吧 课上认真听课 ✔ 坚定的在课上没写什么作业 看完《老人与海》✔成功 虽然不记得什么了 做一点物理小绿本的题 ✔认真读了读并且坐了几道例题 保证$1$天$1$道Luogu 省选- 及以上\b难度\b题目 ✔正好七道… 下周完成 网络流 &amp;&amp; 费用流的模型 &amp;&amp; 习题 码课件！怼分块… 在晚自习上认真的写作业… 保证$1$天$1$道Luogu 省选- 及以上\b难度\b题目 （这周可能要咕 学习FFT并过掉模版P3803","link":"/20180325-2018-MarWeek4/"},{"title":"2018 MayWeek1","text":"2018年五月 第一周 2018.4.30-2018.5.6 正文这一周其实没干什么事情。 期中平静的过去了，学习却永远不会停止。物理开了选修3-1，数学开始了解析几何，生物也进入了进化区域的学习。 最近其实感觉压力很大。数学的解析真的不简单，虽然只是算算算但是还是对于技巧的要求比较高。以前没有接触过，很心累。 听说北京的高考方案出了。对我这样的人谈不上非常有利，但我认为如果我去拼一拼的话也不是不可以忍受的一个制度，毕竟按北京市大排名对我们这样的学校还是有一定的优势的。但是谈何易，行何难啊。 最近不停的在问自己：到底能不能在竞赛上取得成绩？需要付出自己的全部吗？ 有的时候，内心笃定；有的时候，却很犹疑。 无论如何，半年之后，一切分晓。 来源：Dear Earth | pixiv Todolist本周刷题 [SDOI2006]保安站岗 树形dp [POI2007]MEG-Megalopolis dfs序 + 树状数组 [NOI2011]道路修建 dfs + 暴力 [NOI2012]美食节 [SDOI2009]晨跑 费用流 [NOIP2017]时间复杂度 模拟 [ZJOI2007]棋盘制作 dp 最小路径覆盖问题 网络流 二分图 [Luogu P3919]【模板】可持久化数组 可持久化线段树 [Luogu P3381]【模板】最小费用最大流 费用流的原始对偶算法 [Luogu P3834] 【模板】可持久化线段树 1 [POI2014]KUR-Couriers 可持久化权值线段树（主席树） 本周完成 若干dp的题目 ✔ 关于Splay的课件 ✘ LCT模板题 ✘ 下周目标 可持久化系列 平衡树课件 一天一道 Luogu 省选-以上的题目","link":"/20180505-2018-MayWeek1/"},{"title":"2018 MayWeek2","text":"2018年五月 第二周 2018.5.7-2018.5.13 正文这周其实很平淡。没有什么特殊的事情。 只不过比较颓废。期中刚过，就只剩下一个月就要期末考试。虽然听说不难，但七科都不是本校出题，还是有点慌的。这一周还有就是被各种乱七八糟的活动烦个半死。不喜欢这种感觉。我想，我还是更喜欢啥都不管。比起没有权力，还是没有义务比较惬意。不过话说回来，主要还是这个东西太烦人，又要搞什么图片文字说明这个学期做了啥大事…可真的没什么大事可做啊…真是令人无话可说（绝望脸 这几周一直有点迷茫。到底选什么科…到底学竞赛还是主攻课内…都是问题。不过时间大约还是够的吧。现在还是在自己喜欢的方向多去拼一拼吧，毕竟，人生不再啊。 生竞明天初赛。他们还有两次机会，我只有一次。 距离NOIP2018还有5个月30天 我相信，明年再来看的时候，我一定能说出：我为了梦想，拼搏过。 汶川大地震10周年。愿逝者安息，生者坚强。 Todolist本周刷题 [SDOI2013]直径 树的直径 [湖南集训]谈笑风生 主席树／dfs [Luogu P4178] Tree 点分治 [Luogu P2633] Count on a tree 树上主席树 [Luogu P2617] Dynamic Rankings 树状数组+可持久化线段树 [SDOI2008]洞穴勘测 LCT [Luogu P3690]【模板】Link Cut Tree LCT [SDOI2008]郁闷的小J 平衡树 [NOIP2017]跳房子 单调队列 本周完成 可持久化系列 ✔一点 平衡树课件 ✔一点 一天一道 Luogu 省选-以上的题目 ✔大概够吧 下周目标 LCT的较高端应用 后缀数组的$SA-IS$、倍增算法 可持久化系列 一天一道 Luogu 省选-以上的题目","link":"/20180512-2018-MayWeek2/"},{"title":"2018 MayWeek3","text":"二〇一八年五月 第三周 2018.5.14-2018.5.20 正文一周无事。 期中也过去了不止一周了，还有三周就要期末了。（nc的学期规划 这一周真的没有什么新闻。学习了超过两周的SA-IS终于敲出来了，耶！不过xehoth大神的常数着实可怕…我目前还想不到什么好的可以再优化内存使用的办法了…巨佬的常数只有我的1/2…真是令人绝望。 打了一次luogu月赛，在令人绝望的卡顿中做题，在FST之前居然获得了第三的排名…真是令人惊讶。看来打CF着实能锻炼人的xjb猜结论的能力… 最近北京经常下雨，这一周就被雨堵在各种地方好几次，不过下下大雨总比闷着好几天要好到不知道哪里去了。 今天5.20。自己祝自己快乐。 来源:pixiv Todolist本周刷题 [SDOI2011]消防 树的直径+单调队列 [Luogu P3809] 【模板】后缀排序 SA-IS算法 [HNOI2009]梦幻布丁 平衡树（set）启发式合并 [ZJOI2012]旅游 对偶图+树的直径 [Luogu P2195] HXY造公园 树的直径 [HAOI2007]理想的正方形 二维单调队列 [HNOI2010]弹飞绵羊 LCT [CQOI2015]任务查询系统 主席树+扫描线 [SDOI2013]森林 树上主席树+启发式合并 [LGR-047]洛谷5月月赛 A:取石子-简单博弈 B:偷上网-随机化 D:太极剑-随机化+贪心（非正解） 本周完成 LCT的较高端应用 ✘目前只会垃圾应用 后缀数组的$SA-IS$、倍增算法 ✔倍增算法还是没学 可持久化系列 ✔2*超级大主席树 一天一道 Luogu 省选-以上的题目 ✔9道 下周完成 后缀数组试炼场（老师留的）2-3题 温习AC自动机并补上学习笔记 补课件… 一天一道 Luogu 省选-以上的题目","link":"/20180520-2018-MayWeek3/"},{"title":"2018 MayWeek4&5","text":"二〇一八年五月 第四至五周 2018.5.21-2018.6.3 从此以后，总结改为两周一篇，一月两到三篇，命名方式为「xxxx年 x月上（下）」。 但事实上我尽量还是每周写一次，只不过把两篇合成一篇罢了。 正文这两周很忙，所以我到了这一周才有时间总结一下这两周的学习和生活。 其实我都快忘了上周做了写什么，那就只说说这一周吧。 如果我没记错的话，这一周考了若干次统练。其实我最反感的就是贵校把统练堆到最后一周的行为，真的让人一周都无法安宁。首先是复习生物，考完生物复习历史地理，然后又复习化学政治啥啥，强迫你在这一周进行大规模的复习。真的很烦。而且这一周我的绝大多数时间都用在了做Splay的ppt上，真的非常痛苦。抱着一个配置不高的笔记本做ppt到50+的酸爽，真的让人绝望啊。 所幸这周末终于讲完了，所幸一切又有了喘息的机会。 选科，是第二个话题。学校里，大家见面，除了“您太强了”，第二句话就是“您选什么科”？大家各有各的想法。有的人认为自己毫无退路，只好选上理化生，有的人纠结再三，还是选了理化生，有的人本来意向坚定，但被老师一说，又开始犹豫起来。 总之吧，一同乱象。有的人说的很好：中国人，最擅长的就是忙一些没有什么用的事情，而且乐在其中。我想，这大概就是典型的案例吧。 选完科之后也不太平。机读卡一交上去，学校仿佛也会慌。大家都不知道会发生什么，也不知道学校的目的是什么。 如果让我用几个字来概括这件事情的话，我恐怕只能说：“纯粹瞎搞。” TodoList这两周刷题 [LNOI2014]LCA 树链剖分 【模板】普通平衡树（Treap/SBT） Splay版 [SCOI2013]多项式的运算 Splay维护区间 [HNOI2012]永无乡 Splay启发式合并 [SDOI2008]Sandy的卡片 后缀数组 [ZJOI2012]灾难 LCA + 并查集 [SDOI2014]旅行 动态开点线段树+树链剖分 [SCOI2016]萌萌哒 神级并查集 【模板】可持久化并查集 可持久化线段树 上周完成 后缀数组试炼场（老师留的）2-3题 ✘1道 温习AC自动机并补上学习笔记 ✘大失败 补课件… ✔成功.jpeg 一天一道 Luogu 省选-以上的题目 ✔2周10道 下周完成 学习SA-IS的简单实现 学习后缀自动机SAM 做一些简单的dp题目 好好复习期末 补觉","link":"/20180602-2018-MayWeek4-5/"},{"title":"2018年6月·下","text":"二零一八年六月下2018.6.18-2018.7.1 第一周 2018.6.18-2018.6.24 正文这一周只上了四天课，却还讲了好几天的期末考试卷子，可以说是很混乱了。在这混乱中也算能偷得不少欢乐，带着我走过这样一个压力很大的期末。 这周二回去上课，发了期末考试的成绩。考的不是非常理想，也说不好跟卷子出的简单有没有关系。不过这次考试也不排名。可隐患总会徘徊在生活的暗处，在不注意的时候给你一个措手不及的打击。 这一周主要在复习物理自招课的考试。每当这个时候，班里总会出现一学期一度的复习热潮，仿佛整个班都在学物理竞赛，可以说是非常搞笑了。 「要是这么学自招，怎么学都没有用！」——某巨佬如是说道。 我对此感到一百分的认同。 周六我班考了一学期以来的第一次OI的考试，其实我感觉…这个考试密度太低了2333这么学下去怕不是只能靠CF度日…然后打CF还要爆肝…这就非常尴尬了。 考试考了rk2。不过有个julao没有来。按理说我应当可以考的更好。但是我感觉我能做的题也都差不多做到了。没有办法了。如果这样的话，今年省一都堪忧啊。 一切本可以更好，只是看你愿不愿意去争取。 这周看到一篇江苏省委书记关于高考改革的发言稿，感觉说的很中肯，比较符合实际，摘录一两句放在下面。 我们考虑问题，绝不能脱离江苏的实际，不能将折腾当改革。浙江新方案搞6选3，有20多种组合，太多了，学生大量跑班，师资跟不上，教室不够用，我们不要高估学生的能力，让学生到处跑班。不能拿孩子做试验品，一定要对标中央，坚持教育规律、人民立场，对历史和人民负责。 熬夜到四点看德国的球，幸运的赢了。最后Kroos打进那个任意球的时候，真的顿时就懵了。 Mia San Mia. 本周刷题 【模板】高斯消元法 [TJOI2017]DNA 后缀数组 [CQOI2016]手机号码 数位dp [HNOI2001]产品加工 简单dp [SCOI2009]生日礼物 单调队列 [LGR-048] 洛谷6月月赛 「生物」能量流动 「物理」平抛运动 「化学」相对分子质量 Codeforces Round #491 (Div.2) A.If at first you don’t succeed…(Accepted) B.Getting an A(Accepted) C.Candies(FST) - Accepted D.Bishwock(Hacked) - Accepted E.Bus Number(Accepted) Todolist上周完成 继续学习SA-IS的简单实现 ✔ 学完 学习后缀自动机SAM ✔ 大概懂了一点点？ 考好期末 ✘ boom 本周目标 做一定的后缀数组的题（优秀的拆分、品酒…） 过掉后缀自动机SAM 模版题 和 其简单应用 复习学业水平合格性考试 第二周 2018.6.25-2018.7.1 正文这周在家里自习。 也许是压力太大了吧，这周过的有点放纵。周六考试，考了rk2。周日在家里睡觉。周一去了八大处玩，还又一次溜了那个有趣的滑道2333333。周二周三看上去在复习，事实上在折腾这个博客的重建。周四周五好不容易开始复习了，然后被安利了个游戏玩的不可自拔。于是这周7天的放假就这么过去了。 我也不怎么觉得这个学期的压力很大。大约是这个学期太短了吧。这个学期，晚上我大多留在学校自习。在学校自习虽然能够明显提高学习的效率，但是对于精力的消耗也是不可避免的。而且它或许让我感觉，回家就要玩，在学校就应该好好玩命写作业？这可不是一个好兆头。 不过假期的补课是很长久的，我也大约不用担心这一点。 颓废一周，不算很长，也不算很短吧。这一周也没干什么。要我说的话，唯一的意义或许就在于调整了这几周的疲态，初步适应了放假的节奏，并且深刻意识到学习方面的工作不能在家里完成。好期待暑假的时光呢，又可以做许多有趣的事情了。所以我假期该去哪里自习呢…不过这也不太关键了。 北京最近经常下雨。而这也正好意味着每天都是闷热无比的，所幸与A.C.相伴，一切还都过的来。 就在我写下这句话的时候，窗外刚好闪过一丝雷声。 最近看一个同学的作文，深刻地从中感觉到那种自卑和绝望。 在她的作文里面，大多都是一个被各种人所看不起的女孩，通过各种方式，寻找到自己的价值之类。但仔细去看，就会觉得，这里面所有负面的情感，好像都是从心底挖出来似的，而那些正面的价值，好像倒是贴在上面，看起来一个皆大欢喜的故事，在我看起来，那层绝望的阴霾似乎怎么都没有褪去。 我不知道这是好还是不好；我不知道是我过分揣测还是她的心理本就如此。人心是很复杂的啊。但据我的观察，大约她的那种内心深处的不好的情绪，在日常生活中也像是在一层薄薄的外套下躲藏，一旦有了什么刺激，就会不受控制的涌出。 我真的，没有太多体会过对自己的深深的绝望感，或许有过，但我说过我是一个健忘的人，所以大概也不记得了。 我不知道我能做什么，也不知道我做了什么之后会发生什么样的结果。 人心莫测啊。我尽我所能去读，可毕竟我还太年轻，太天真。 “北海啊，你还差得远，这么说是因为我现在还能轻易地理解你。能让我理解，说明你的思想还简单，还不够深，等到我看不透搞不懂你，而你能轻易理解我的那一天，你才算真正长大了。” 图源知乎 妹子实在太好看了 忍不住就放到这里了 侵权的话请联系 TodoList本周刷题 [POI2014]PTA-Little Bird 单调队列 [Luogu P2698]花盆 单调队列 [NOI2016]优秀的拆分 后缀数组 [Luogu P1402]酒店之王 网络流 【模板】后缀自动机啊啊啊颓废了一周就做了5道题 本周完成 做一定的后缀数组的题（优秀的拆分、品酒…）✔ 1过 2不会 过掉后缀自动机SAM 模版题 和 其简单应用 ✔ 模版题过 复习学业水平合格性考试 ✘ 考试是什么23333 下周完成 每天一道luogu 省选- 及以上的题目 做后缀自动机、后缀数组题各1道 学习斜率优化dp/四边形不等式优化dp","link":"/20180630-2018June-Late/"},{"title":"2018年七月·下","text":"二零一八年七月下2018.7.16-2018.7.29 第一周 正文这周颓废继续qwq。感觉要写不完作业了，却还花好多时间打游戏。简直药丸。 这周学了不少东西，也做了不少题。 假期的生活，其实是非常无聊，又非常有趣的。无聊是没有了督促，一切会变得非常怠惰；而有趣则是可以随心所欲，做自己想做的事情。可现在，上课仍在继续，一切似乎都很按照routine前行，可是，真的缺少那种严格的督促，比如：“今天做完这6道题”“今天写完三国演义15回的总结”。没有。于是就颓废了。 其实我最近一直在想，很多时候一个权威（或者说信念？）的建立也是很有必要的。至少，它可以给你一个在内心无比强大的动力，不至于让你无所事事，怠惰懒倦。比如说，老师对作业的催促其实不是很严厉，但是“老师”这几个字所带来的“权威”却让你在大多数时候能够提升效率，完成作业。大概就是这个道理。 本周刷题 【模板】左偏树（可并堆） 【模板】有理数取余 [SHOI2002]百事世界杯之旅 简单期望 [HNOI2013]游走 期望方程 [SHOI2012]随机树 期望dp [Luogu P1593]因子和 简单数论 [HAOI2012]高速公路 期望 + 线段树 [Luogu P1390]公约数的和 简单数论 [NOIP2016]换教室 期望dp [JLOI2015]城池攻占 左偏树 [APIO2012]派遣 左偏树 [Luogu P1456]Monkey King 左偏树 Todolist本周完成 整理数学笔记 ✘ 没有 三模数NTT ✘ 还没写完 数学&amp;dp题目 * 5 ✔ 大概够？ 下周目标 三模数NTT 复习LCT并做一两道题 莫比乌斯反演 第二周 正文这周其实就是上课、模拟赛、NOIp、讲题qaq。太无聊了。不写了。 本周刷题 【模板】矩阵快速幂 【模板】二维凸包 【模板】快速排序 基数排序 NOIp2016:蚯蚓，愤怒的小鸟 [CF893F]Subtree Minimum Query 线段树合并 [POI2011]Tree Rotations 线段树合并 [CEOI2004]锯木厂选址 [HNOI2008]玩具装箱TOY [APIO2010]特别行动队 斜率优化dp [SCOI2016]背单词 Trie树+贪心 [ZJOI2012]网络 LCT [APIO2018]新家 线段树","link":"/20180729-2018July-Late/"},{"title":"AC自动机学习笔记","text":"Aho–Corasick算法，常叫做AC自动机。是一种字符串多模式串匹配算法。能在线性时间内完成多个模式串对一个查询串的匹配。 能自动AC哦。 To be finished. 思想树型结构建树查询其他实现基本一些改进代码例题","link":"/20180405-ac_automaton-notes/"},{"title":"2018年七月·上","text":"二零一八年七月上2018.7.2-2018.7.15 第一周：2018.7.2-2018.7.8 正文这一周随便考了个试，然后就接着颓废。 合格考大约就是这个样子。没有什么人认真做，没有什么人认真复习，也没有什么人检查到最后一分钟。第一场大家还拘束一点，坐到最后一分钟，到了后面的时候大家就纷纷提前半个小时交卷该干啥干啥去了。没啥用。教委要想大家都及格的话还走这个套路，多无聊。 考试考了三天。然后休息一天之后接着考试，一周中的四天就这么过去了。然后周四周五上两天课，讲讲卷子，好像什么都没发生过的就接着往后讲了2333 于是就到了周末。周六晚上下了一场很大的雨。 在电脑里看着世界杯，窗外的雨声时大时小，偶尔还淹没在解说员的声音里，但毫无疑问，这的确是一场大雨。 雨纷纷扬扬的下着，不过并不能带走哪怕一点暑意。窗外的空气仍然裹挟着热意扑打在脸上。 也不知道为什么，从来没有像现在，如此喜欢，又如此厌恶夏天。但还是要珍惜夏天的。毕竟，如果秋天到了，那么，一切都快要结束了。 本周刷题 【模板】二逼平衡树（树套树） 【模板】多项式乘法（FFT） 【模板】乘法逆元 [SCOI2010]股票交易 单调队列 [HAOI2016]找相同字符 后缀数组又是一个颓废的一周2333 Todolist本周完成 每天一道luogu 省选- 及以上的题目 ✔除去考试差不多吧 做后缀自动机、后缀数组题各1道 ✘ 没有 学习斜率优化dp/四边形不等式优化dp ✘ 没有 学习了很多数学 下周目标 学习dp的优化 做后缀自动机、后缀数组题各1道 数论中的NTT 第二周：2018.7.9-2018.7.15 正文放假了！ 不过上课还是继续的呢qwq 这一周的上课主要就是做模拟题、讲数学之类的2333。终于把数学的坑填上了一小部分诶，不过省选的数学还是差不少的。考试大概在班里rk2-3左右浮动，可是这个不够啊。我校乐观估计明年也只能有一个省队的名额，如果不能稳稳rk1去拿什么跟人竞争呢qwq。 凑了一套题，差点被人A穿。最后数据还出锅真是令人伤心。打不过早六的小朋友已成定局，这可怎么办呢…不如退役。 事情很多，就少写点吧。 本周刷题 【模板】卢卡斯定理 【模板】多项式乘法（FFT) NTT [ZJOI2014]力 FFT [NOIP2012] 开车旅行 [NOIP2013] 货车运输 [NOIP2013] 火柴排队 CF55D Beautiful numbers 数位dp Todolist本周完成 学习dp的优化 ✘ 没有 做后缀自动机、后缀数组题各1道 ✘没有 数论中的NTT ✔ 出题 下周目标 整理数学笔记 三模数NTT 数学&amp;dp题目*5","link":"/20180715-2018July-Early/"},{"title":"2018年六月·上","text":"二零一八年六月上2018.6.3-2018.6.17 第一周正文 总结会缩水一些篇幅，因为我发现…我写的实在是太多了… 这周就是放了个高考假。高考假期就只有两件事情：颓题，颓作业。 高考假里面所有的竞赛课补了三次课…于是就在三师的教室里听着早四的铃声一起上了三天的课。不过我个人觉得三师的电脑比高中楼机房的键盘好使…大概就是这个样子。在我写下这篇文章的时候，假期已经快要过完了，于是只有四天就要到期末考试了…然后还没有开始复习… 只能说，祈求这次期末考试不会影响到我的OI生活吧。 本周刷题 [HAOI2015]树上染色 [Luogu P1273]有线电视网 树上背包 [SCOI2015]小凸玩密室 [HAOI2009]毛毛虫 树形dp [CQOI2011]动态逆序对 [Luogu P3810]三维偏序 CDQ分治 [ZJOI2013]K大数查询 整体二分 [SCOI2007]压缩 [JSOI2007]祖码 区间dp Todolist本周完成 学习SA-IS的简单实现 ✘ 还没学完 学习后缀自动机SAM ✘没学会… 做一些简单的dp题目 ✔一些 好好复习期末 ✘大约期末是要炸了 补觉 ✔ 放假好啊… 下周目标 继续学习SA-IS的简单实现 学习后缀自动机SAM 考好期末 第二周正文 这一周是考试周。 混乱的六月已然进入了最繁忙的时间段。高三的同学们考完高考，已经不在学校。曾经路过高三的楼层。平日繁华的楼层此时已是孤寂一片，只有零星个班的灯还开着，苍白的洒在斑驳的大理石地面上。 曾经路过六楼的机房。除了小屋里面的四位高二学长之外，也就没有什么人了。背着书包走过暗淡的走廊，真的突然就惆怅起来。 等我到了高二，恐怕也是很难有机会坐到这个小屋子里的。就算坐到这个屋子里，真的就能获得什么吗？到最后恐怕只有一纸废约，一场大梦，一身毛病，和不忍直视的课内成绩。何况最有可能的却是故事在第一句话就戛然而止了。 你得有实力，才能去谈梦想。 本周刷题 [NOI2014] 魔法森林 LCT [JSOI2016] 最佳团队 0/1 分数规划 + 树形dp Todolist上周完成 继续学习SA-IS的简单实现 ✘ 没学完 学习后缀自动机SAM ✔ 大概懂了一点点？ 考好期末 ✘ boom 本周目标 继续学习SA-IS的简单实现并完成实现 ✘ 没学完 过掉后缀自动机SAM 模版题 和 其简单应用 学习高端dp 完成语文作业","link":"/20180615-2018June-Early/"},{"title":"BJOI2018游记","text":"爆零滚粗。 集训在考试之前先有两个周末的集训。 第一个周末是让我印象最为深刻的。开始没仔细看说明，结果一不小心就跑到了北师大附属实验。急忙打车，跑回到首师大附中，还好没有迟到。 第一天上午的题非常有趣。T1比较简单，也成为了我四次考试以来唯一A掉的一道题。T2 sumsum好像是奇怪的点分治，还没有学过，所以自然也就不会做，甚至最后连暴力都懒得打。不过好像十分弱智的暴力也能过到60分？？也没有想到。T3是提答题，第一次做到，非常有趣。这个提答还是比较友善的，手玩竟然能有四十多分，可以说是很友善了。第一天就这么过去了，排了一个三四十名的名次。 第二天就比较难了，竟然是三道数学题…于是我一道都不会做…做是不会做的，还把网给断了，于是就很绝望的去瞎搞。T1好像是个找规律+构造，T2不记得了…T3正解貌似也是构造…然而我在大佬的指点下写了个随机化，竟然搞到了三十多分，令人惊讶。 两天的集训就这么结束了。也没有听懂什么，周末好几次险些写不完作业… Day1Day1不太想说什么。 T1好像是个线段树，不过正解是三个set，不知道为什么写的暴力稀里糊涂的就爆0了。 T2是一道找规律的题目。然而蒟蒻如我像这种东西肯定是分析不出来的…随便推了个规律…然而发现一大堆反例，令人发指… T3貌似最简单。就是一个简单的LCA+前缀和查询，然而…没想到竟然挂在了取模上…这也一方面体现出了我的对拍人眼执行diff命令的不可靠，一方面也涨了知识：取模意义下的前缀和一定要加足够的$p$！！！要不然就WA*n了…出题人瞎随机的数据出了点锅，暴力$O(n^2)$的算法居然在平衡的树上跑到了$O(n \\log{n})$，然后…就过了？？？啊啊啊我要学.bat对拍！！！ 第一天期望得分140，实际得分10。 Day2正式考试的第二天。第一天就只有10分，所以考试之前有点慌，昨天讲的有上下界的网络流还不怎么会，而去年一道网络流都没有考过，考试前匆匆茫茫的看了看，希望能用到。 然而，然而喜出望外的是，我最近一个多月学的东西，全部都没有考到。反而是考了一些奇奇怪怪的东西。 T1是个提交答案题，琢磨一番样例之后发现自己连样例都推不出来，瞎玩了10分就看第二题。 T2跟集训第一周的题很像，好像是徐明宽巨佬在考场上想出了某种特殊情况的解法…然后就出成了题。貌似40分的$O(n^2)$暴力很好想，然而我只写了个$O(n^3)$的二十分暴力。最后还被出题人坑了一分都没有…伤心… T3看了一眼…概率是啥？？？咋对分数取模来着…期望怎么算啊…不会啊…于是放弃。 于是就陷入了颓废的状态。感觉中间三个小时过的特别的快，前后一个小时就非常的漫长…漫长到心态爆炸。 第二天期望得分30，最后得分8分。 讲完题等成绩的时候，出现了省队巨佬连连玩扫雷，大家纷纷围观，以及巨佬玩我不知道名字的Windows游戏的壮观景象。 最后我校有了四个省队，所有去的高二 + dmy全都进了省队。 Day2 dmy竟然AK了！第二名140分！总评dmy比第二名高了80分！害怕… 最后今年初三有三个省队，高一三个省队，剩下的全都是高二。 任务十分的艰巨啊。如果想要进到省队，不仅要打败高一，还要打败更为恐怖的初三。有的时候也在追问，我真的有天赋吗？真的能付得起这样的时间、精力的支出吗？如果今年的联赛和明年的省选季要停课的话，能接受失败的打击吗？ 如果其中任何一个的答案是否，我想这门竞赛或许也就没有必要去继续了吧。 所幸，现在，我还认为这三个答案全都是True。 如果明年的NOIP在发挥正常的情况下没有拿到450+，我想我就应该退役了。也不必再去耗它更多的半年，徒费时间，徒费神思。 这次的考试也折射出一定的问题。虽然我比较长于代码实现，但是在思维上明显还是和巨佬有一定的差距。巨佬在现场没准可以现推结论，而我记住结论的情况下还是连暴力都没有敲出最优复杂度，令人窒息。而且思维上也很怠惰，明明10分就是2.5个积点却不想去写…下次千万不能有这样的情况…而且就是有的时候暴力代码写起来甚至都需要半个小时，还是有点长了。 不管如何，这剩下的200天也要努力吧，不能让一年的努力白费啊。近一段时间打算学一下点分治、动态树、后缀数组、AC自动机啥的算法，以及刷一刷网络流二十四题和一些更多的数据结构题吧。远期目标还有就是一些基本的数学…比如高斯消元，FFT，矩阵，期望啥的。 明年再战。希望明年的明天或者后天，我能够要么坦然的面对，要么昂起头，继续前进。","link":"/20180415-bjoi2018-trip/"},{"title":"Dinic学习笔记","text":"Dinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \\times m)$，但大多数情况下会远远优于此时间复杂度。 基本概念从Menci神犇的博客复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。 容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。 流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。 剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。 反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。 残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。 增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。 增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。 层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。 层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。 思路用文字叙述大概如下： 12341. 建立以出发点为源点的层次图（即源点到各店的距离）2. 在层次图&amp;残量网络中寻找增广路，并增广流量3. 重复2直到找不到增广路4. 重复123直到不存在层次图 实现建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。具体实现的时候也有一定的技巧，在代码里面有注释。 反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。 有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。 代码以Luogu P3376为例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;struct Edge{ int from,to,flow,cap; int next;}edge[201000];int fir[10100],dis[10100],cur[10100];int n,m,s,t,tot = 2;//tot从2开始是最舒服的，既可以直接异或，后面的终止条件也不用想来想去。bool bfs(){ queue&lt;int&gt; q; memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(fir));//清空当前边 q.push(s);dis[s] = 1; while(!q.empty()){ int nown = q.front();q.pop(); for(int nowe = fir[nown];nowe!=0;nowe = edge[nowe].next){ int v = edge[nowe].to; if(dis[v] == 0 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow){ //两个条件：未遍历而且边可以增广 dis[v] = dis[nown]+1; q.push(v); //由于我们只沿最短路增广，所以这里就可以直接break掉了。 if(v == t) return dis[t]; } } } return dis[t];}int dfs(int nown,int limit = 0x3f3f3f3f){ //找到终点或没得可找 这个优化很重要 if(nown == t || limit == 0) return limit; for(int &amp;nowe = cur[nown];nowe!=0;nowe = edge[nowe].next){ //这里有当前弧优化 int v = edge[nowe].to; if(dis[v] == dis[nown]+1 &amp;&amp; edge[nowe].flow &lt; edge[nowe].cap){ //满足层次图条件(沿着最短路) int f = dfs(v,min(edge[nowe].cap-edge[nowe].flow,limit)); if(f&gt;0){ //更改当前边 edge[nowe].flow+=f; edge[nowe^1].flow-=f; return f; } } } return 0;}int dinic(){ int ans = 0,f; while(bfs()){//bfs是步骤1 while( (f = dfs(s)) &gt; 0)//dfs是步骤2 ans+=f; } return ans;}void addedge(int a,int b,int c){ edge[tot].from = a;edge[tot].to = b; edge[tot].cap = c;edge[tot].flow = 0; edge[tot].next = fir[a];fir[a] = tot; tot++;}int main(){ scanf(\"%d %d %d %d\",&amp;n,&amp;m,&amp;s,&amp;t); for(int i = 0;i&lt;m;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(a,b,c); addedge(b,a,0);//需要加反向边 } printf(\"%d\\n\",dinic()); return 0;}","link":"/20180208-dinic-notes/"},{"title":"OI大事记","text":"一些里程碑 2017-10-17 21:00 Luogu AC*1 2017-10-23 08:50 Luogu 第一次蓝名 2017-10-29 10:05 Luogu 第一次绿名 2017-11-01 20:07 Luogu AC*50 2017-11-11 ~ 12 NOIp2017 tg观光游省二 2017-11-25 11:51 Luogu AC*100 2017-11-29 17:55 Luogu 第一次橙名 2017-12-17 22:28 Luogu AC*150 2017-12-22 21:03 Luogu 提交*500 2018-01-03 19:16 Luogu 第一次红名 2018-01-20 20:34 Luogu AC*200 2018-01-20 ~ 27 BJWC2018旅游 2018-02-14 15:44 Luogu AC*250 2018-02-23 13:47 Luogu 提交*1k 2018-04-05 16:45 Luogu AC*300 2018-04-01 ~ 15 BJOI2018旅游 2018-06-30 19:42 Luogu AC*400 2018-08-28 17:35 Luogu AC*500 2018-11-10~11 NOIp2018 省一滚粗 2018-11-25 22:46 Luogu AC*600 2018-12-15 Codeforces 第一次紫名","link":"/20171213-milestone/"},{"title":"2018 AprWeek3&4","text":"2018年四月 第三到四周 2018.4.9-2018.4.22 正文上一篇总结是两周之前的事情了。上周由于去省选了，差点连作业都写不完，所以只好先好歹赶完一篇游记发了，周总结有没的写了。 上周其实还是做了不少事情的。每天都在晚自习刷题莫，也算是刷了不少题，还是有好多仍然不会做的题。考试里面被考了一次点分治，于是就想着要学这个东西。上一周没有什么事情，也记不太清了。 这一周也很坎坷。从上周日省选回来，到这周五放学，我都没有再怎么碰过电脑，沉迷学习。唯一跟OI有关的事情就是在路上看了一周的点分治，终于把模版给写会了，然而并没有什么卵用…该不会的还是不会，于是现在还是在想着一道题，然而马上又要去滚去复习了… 好像WF北大拿了金牌？祝贺北大。也不知道，我在大学的时候会不会有机会去参加这个有趣的竞赛呢… 这一周比较麻木，就是不停的复习，并且淹没在卷子的苦海中。所以也没有什么感慨好发，也就随便写写，也可以节省点时间。 在屋里敲着键盘的时候，屋外的雨已经连绵了整整一个上午。雨水把天地都罩上了一层灰纱，向窗外看去，只有一片白茫茫的水雾。人们只好打着伞，躲着雨和地上的水，踽踽前行。再过一会，再过一会，雨终究是会停的。太阳终究是会出来的。 TodoList上周完成 任务清单*10 ✔ 大约6-7道？ 复习历史 &amp;&amp; 政治 ✔ 还凑活吧 测试15min敲完Splay ✘ 不存在的 这周完成 点分治*2 学习LCT 补档AC自动机&amp;&amp;点分治","link":"/20180421-2018-AprWeek3-4/"},{"title":"Splay学习笔记","text":"伸展树（Splay Tree）是一种二叉查找树，它能在$O(log n)$内完成插入、查找和删除操作。它是由丹尼尔·斯立特(Daniel Sleator)和罗伯特·塔扬(Robert Tarjan)在1985年发明的。其也可以维护区间信息，当作类似线段树的数据结构。 233后面再补。 最近做了个ppt。先扔上来，以后再补。 附件tarjan原始论文：","link":"/20180602-Splay-note/"},{"title":"2018 AprWeek5","text":"2018年四月 第五周 2018.4.23-2018.4.29 正文\b这一周可以说是很漫长了。周一复习，周二周三考期中，周四奇葩的接着回家复习，周五接着考试，今天就把卷子讲了。 先说考试。 这次期中考试可以说是相当扯淡了。第一天不考语文，而在理化生的考试里全天梦游，的确损失了不少的不应当的分数，也是这次考试考的不太好的一个原因。第二天还是不太在状态，而且语文和英语的新的试卷结构一时也不太适应，所以就相当的难受，主要的扣分也都从这天产生。最后一天上午的两科总体上感觉还不错，但是还是有一些莫名其妙的地方丢分。 发现每次大考，出成绩简直都是一场惊惊惊惊惊惊惊惊惊惊惊喜惊的体验。出分之后自己算了算，比年级第一低了50分，心里顿时凉凉。然而竟没有料到，九科排名的容错性这么的好…不过危机还是很大的…高考的情况下语数英的分数还是非常的不友善的。前路漫浩浩。 这一周其实也就不过于考试，考试。 今天终于结束了几乎所有关于期中考试的一切，背着五一作业走路回家。北京的夏天真的到了，在漫长冬天的记忆里似乎仍是全秃的枝桠也被绿色簇拥了起来，天空更是一种充满暖意的澄澈的蓝色。街上的行人衣衫渐渐轻薄，而空气也渐渐打破了那由冬天的寒冷设下的枷锁。忽然也就想到数学考试最后两分钟解出最后一道大题的畅快，那种如释重负的感觉。 时间真快啊。 来源： 17:30|mocha[pixiv] Todolist本周刷题 [NOI2009]二叉查找树 区间dp [HEOI2016/TJOI2016]游戏 二分图匹配 [HNOI2010]合唱队 区间dp [NOI2009]变换序列 二分图／网络流 [SCOI2010]连续攻击游戏 二分图 [Luogu P3765]总统选举 平衡树&amp;线段树 [Luogu P2664]树上游戏 点分治 本周完成 专心考试 本项不存在的 下周目标 若干dp的题目 关于Splay的课件 LCT模板题","link":"/20180428-2018-AprWeek5/"},{"title":"“长大”","text":"或许，我一直认为我早就长大了吧。 那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。 一度，我竟真的以为我长大了。 那些记忆已经很模糊了，而近几天发生的事情却还历历在目。 看到某位同学的随笔，某位同学的批语，又想到了好多。 最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。 最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。 “这不是能随心所欲的年纪。”说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。 这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。 曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？ 或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。 不如先滚去把作业写完。 另祝各位2018吉祥快乐，万事如意。","link":"/20180103-grow/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Some other featuresCode123a = eval(input())b = eval(input())print(a+b) Math$$x^2+y^2=1\\\\\\sin^2 x + \\cos^2 x = 1\\\\E = mc^2\\\\a_i = a_{i-1} + a_{i-2}$$ Fold12345678#include &lt;stdio.h&gt;int main(){ int a,b; scanf(&quot;%d %d&quot;,&amp;a,&amp;b); printf(&quot;%d\\n&quot;,a+b); return 0;} Spoiler2333 test for spoiler","link":"/20171201-Hello-world/"},{"title":"「AHOI2008」紧急集合-LCA","text":"给出一颗 $n$ 个节点的无权树， $m$ 次询问，每次给出三个点编号为 $a$ ， $b$ ， $c$ ，询问到这三个点距离最小的点的编号以及其距离和。 链接Luogu P4281 题解首先，如果每次询问都只有两个点，这个问题就很简单，只要是树上的路径上的点就可以，寻找树上的路径其实就是寻找 $LCA$ 的过程。这可以启发我们对于三个点的情况的思考。 如果这里有三个点，我们来认真的思考一下。经过上一问的启发，我们来思考一下能不能运用 $LCA$ 来解决这道题。 我们可以发现，树上三个点的三对 $LCA$ 一定有两个是相同的。这是一件想想的话比较显然的事情。必然能够找到某个节点，让三个点中的两个在一侧，一个在另一侧。而这个点就是两个公共的 $LCA$ 。思考的再深入些（并且结合瞎蒙），我们会发现这个相同的 $LCA$ 肯定是深度最小的一个 $LCA$ 。 这里，我们首先可以显而易见的发现，这个点必须在三个点互相通达的路径上。 我们再思考一下 $LCA$ 与路径和的关系。假设我们知道 $a$ 和 $b$ 的 $LCA$ 是 $x$ ，而且 $x$ 是上述的3个 $LCA$ 中深度最大的那个，那么可以发现从 $x$ 到 $a$ 的距离加上从 $x$ 到 $b$ 的距离一定是最小的。根据上面的结论，我们知道 $a$ ， $c$ 和 $b$ ， $c$ 的 $LCA$ 点 $y$ 一定在一个点上，而且这个 $y$ 一定比 $x$ 深度小。 那么这个时候，我们会发现此时 $a$ ， $b$ ， $c$ 到 $x$ 的距离和是最小的。证明的话可以这么想：如果 $x’$ 比 $x$ 高，那么虽然 $c$ 到 $x$ 的距离减小了 $w$ ，但是 $a$ ， $b$ 到 $x’$ 的距离均增大了 $w$ ，显然距离和增大。如果 $x’$ 比 $x$ 低，有一个节点到 $x’$ 的距离减小了 $w$ ，剩下两个节点到 $x’$ 的距离均增大了 $w$ ，显然距离和也增大。 所以我们就找到了到三个点距离和最小的点：这三个点的三对 $LCA$ 中，深度大的那两个LCA就是答案。 我们在求 $LCA$ 之前，可以先预处理出深度$dep$，那么从节点 $u$ 到 $v$ 的路径长度就是$dis = dep[u] + dep[v] - 2*dep[lca(u,v)]$。运用这个式子分别算出 $a$ , $b$ , $c$ 到 $a1$ , $b1$ , $c1$（三个 $LCA$ ）的距离，最后发现总的 $dis$ 居然是轮换式：$ans = dep[a]+dep[b]+dep[c]-dep[a1]-dep[b1]-dep[c1]$， 所以就不用分类讨论了。 $LCA$ 我用了树链剖分来求，顺带处理深度。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include &lt;cstdio&gt;#include &lt;cctype&gt;#include &lt;vector&gt;using namespace std;namespace fast_io { inline char read() { static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))== s)?-1:*s++) : *s++; } inline void read(int &amp;x) { static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) { if (c == '-') iosig = true; if (c == -1) return; } for (x = 0; isdigit(c); c = read()) x = ((x+(x&lt;&lt;2))&lt;&lt;1) + (c ^ '0'); if (iosig) x = -x; } const int OUT_LEN = 1000000;char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) { if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf; *ooh++ = c; } inline void print(int x) { static int buf[30], cnt; if (x == 0) print('0'); else { if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); } } inline void flush() { fwrite(obuf, 1, ooh - obuf, stdout); }}using namespace fast_io;const int MAXN = 510000;vector&lt;int&gt; edge[MAXN];int n,m;int dep[MAXN],siz[MAXN],fa[MAXN],son[MAXN],top[MAXN],id[MAXN],cnt = 1;//添加从a到b的无向边void addedge(int a,int b){ edge[a].push_back(b); edge[b].push_back(a);}//树链剖分的第一个dfsvoid dfs1(int nown,int f,int depth){ siz[nown] = 1,fa[nown] = f,dep[nown] = depth; int maxsum = -1;son[nown] = 0; for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == f) continue; dfs1(to,nown,depth+1); if(siz[to] &gt; maxsum) maxsum = siz[to],son[nown] = to; siz[nown] += siz[to]; }}//树链剖分的第二个dfsvoid dfs2(int nown,int topf){ id[nown] = cnt++;top[nown] = topf; if(son[nown] == 0) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == fa[nown]|| to == son[nown]) continue; dfs2(to,to); }}//求a,b两点的LCAint lca(int a,int b){ while(top[a]!=top[b]){ if(dep[top[a]] &lt; dep[top[b]]) swap(a,b); a = fa[top[a]]; } if(dep[a] &lt; dep[b]) swap(a,b); return b;}//初始化以及dfsvoid init(){ read(n),read(m); int a,b; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b); addedge(a,b); } dfs1(1,0,1); dfs2(1,1);}//回应询问void solve(){ int a,b,c,a1,b1,c1,ans,dis; for(int i = 1;i&lt;=m;i++){ read(a),read(b),read(c); //a1,b1,c1的意义见下 a1 = lca(a,b),b1 = lca(b,c),c1 = lca(c,a); dis = 0; if(a1 == b1) ans = c1; else if(b1 == c1) ans = a1; else if(c1 == a1) ans = b1; //计算dis的公式 dis = dep[a] + dep[b] + dep[c] - dep[a1] - dep[b1] - dep[c1]; print(ans),print(' '),print(dis),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180323-AHOI2008-emergency/"},{"title":"「APIO2008」免费道路-生成树+并查集","text":"给定一个 $n$ 个点，$m$ 条边的无向图，每条边有两种权值： $0$ 或者 $1$ 。 先询问能不能找出一个生成树，使得其中恰有 $k$ 条 $0$ 边，若存在，输出任意一个方案，否则输出 no solution 。 链接Luogu P3623 题解不太会其实。首先将 $0$ 边作为大边，然后做一次最小生成树，得到必须加入的最少的 $0$ 边，此时如果这个 $0$ 边的数目大于 k ，那么就无解； 然后我们先将所有的 $0$ 边尝试加入，如果能满足不成环且最后恰好能到 $k$ 条边，就加入剩下的 $1$ 边，构成生成树即可。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int MAXN = 110000;int n,m,k;struct Edge{ int from,to,len;}edge[MAXN];bool cmp(Edge a,Edge b){ return a.len &lt; b.len;}int f[MAXN];void init(int n){ for(int i = 1;i&lt;=n;i++) f[i] = i;}int find(int x){ return f[x] == x?x:f[x] = find(f[x]);}void solve(){ static Edge ans[MAXN]; int tot = 0; init(n); sort(edge+1,edge+m+1,cmp); for(int i = 1;i&lt;=m;i++){ Edge &amp;e = edge[i]; int fx = find(e.from),fy = find(e.to); if(fx != fy){ f[fx] = fy; if(e.len == 1){ tot++; ans[tot] = e; } } if(e.len == 1){ e.len = -1; } } init(n); sort(edge+1,edge+m+1,cmp); if(tot &gt; k){ printf(\"no solution\\n\"); return; } for(int i = 1;i&lt;=tot;i++){ int fx = find(ans[i].from),fy = find(ans[i].to); //printf(\"%d %d\\n\",ans[i].from,ans[i].to); f[fx] = fy; } for(int i = 1;i&lt;=m;i++){ Edge &amp;e = edge[i]; if(tot == n-1) break; int fx = find(e.from),fy = find(e.to); if(tot == k &amp;&amp; e.len == -1) continue; if(tot &lt; k &amp;&amp; e.len != -1){ printf(\"no solution\\n\"); return; } if(fx != fy){ f[fx] = fy; ans[++tot] = e; } } if(tot!=n-1){ printf(\"no solution\\n\"); return; } for(int i = 1;i&lt;=n-1;i++){ printf(\"%d %d %d\\n\",ans[i].from,ans[i].to,1-abs(ans[i].len)); }}void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k); for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;edge[i].from,&amp;edge[i].to,&amp;edge[i].len); edge[i].len^=1; }}int main(){ init(); solve(); return 0;}","link":"/20180818-APIO2008-road/"},{"title":"「APIO2012」派遣-左偏树","text":"给定一棵有根树，每个点有一个代价 $C_i$ ，权值 $L_i$ ，要求从这个树某个节点 $k$ 的子树（包含该节点）选取若干个节点，使得选取节点的个数乘上节点 $k$ 的权值最大，且这若干个节点的代价和不超过给定的限制 $M$ 。 链接Luogu P1552 题解可以用一定的贪心的思想。 如果确定了一个根结点 $k$ ，那么我们的问题就转化成在 $M$ 的限制内，取最多的节点。 对于每个节点，如果我们知道它的子节点的最优的满足 $M$ 的限制的若干节点，那么可以证明合并之后的所有最优节点肯定都只会来自于子节点的最优节点。这是非常显然的。 所以我们用左偏树（大根堆）合并，对于每个节点pop掉最大的若干个节点使其符合限制，然后尝试更新答案。 然后子树合并得到根结点的情况，dfs处理即可。 最后时间复杂度大概是 $O(n \\log n)$ 。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;typedef long long ll;const int MAXN = 200000;namespace MH{ll v[MAXN],sum[MAXN],siz[MAXN];int l[MAXN],r[MAXN],d[MAXN];void push_up(int x){ if(!x) return; sum[x] = sum[l[x]] + v[x] + sum[r[x]]; siz[x] = siz[l[x]] + 1 + siz[r[x]]; }int merge(int x,int y){ if(x == y) return x; if(!x || !y) return x+y; if(v[x] &lt; v[y]) swap(x,y); r[x] = merge(r[x],y); if(d[l[x]] &lt; d[r[x]]) swap(l[x],r[x]); d[x] = d[r[x]] + 1; push_up(x); return x;}int del(int x){ int t = merge(l[x],r[x]); sum[x] = v[x],l[x] = r[x] = d[x] = 0; return t;}ll top(int x){ return v[x];}void init(int n,ll *num){ for(int i = 1;i&lt;=n;i++){ v[i] = sum[i] = num[i],siz[i] = 1,l[i] = r[i] = d[i] = 0; }}void print(int n){ printf(\"----------------------\\n\"); for(int i = 1;i&lt;=n;i++){ printf(\"%d: v:%lld sum:%lld siz:%lld son:%d %d d:%d\\n\",i,v[i],sum[i],siz[i],l[i],r[i],d[i]); } printf(\"----------------------\\n\");}}int n,m,root;ll fans;vector&lt;int&gt; edge[MAXN];int f[MAXN];ll s[MAXN], l[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); root = n + 1; for(int i = 1;i&lt;=n;i++){ scanf(\"%d %lld %lld\",&amp;f[i],&amp;s[i],&amp;l[i]); if(f[i] == 0) f[i] = root; } for(int i = 1;i&lt;=n;i++) edge[f[i]].push_back(i); fans = -1; MH::init(n,s);}int dfs(int x){ int ans = x,tmp; for(int i = 0;i&lt;edge[x].size();i++){ int v = edge[x][i]; tmp = dfs(v); ans = MH::merge(ans,tmp); } while(MH::sum[ans] &gt; m &amp;&amp; ans!=0) ans = MH::del(ans); fans = max(fans,l[x] * MH::siz[ans]); return ans;}int main(){ init(); dfs(root); printf(\"%lld\\n\",fans); return 0;}","link":"/20180721-APIO2012-dispatching/"},{"title":"「APIO2014」序列分割-动态规划-斜率优化","text":"你正在玩一个关于长度为 $n$ 的非负整数序列的游戏。这个游戏中你需要把序列分成 $k + 1$ 个非空的块。为了得到 $k + 1$ 块，你需要重复下面的操作 $k$ 次： 选择一个有超过一个元素的块（初始时你只有一块，即整个序列） 选择两个相邻元素把这个块从中间分开，得到两个非空的块。 每次操作后你将获得那两个新产生的块的元素和的乘积的分数。你想要最大化最后的总得分。 链接Luogu P3648$$a(b+c) + bc = ab+ac+bc = (a+b)c + ab \\rightarrow \\text{三个数怎么切结果都一样}\\\\a(b+c+d) + (bc+cd+ad) = ab + ac + ad + bc + bd + cd = (a+b+c)d + (ab+bc+ac)$$这个式子再推广的话，就告诉我们：切割方案的分数只与切割的位置有关。 令 $dp[i][w]$ 为前 $i$ 个数字切割w次能拿到的最小值 所以我们可以写出状态转移方程：$$dp[i][w] = \\max_{j=1}^{i-1}(dp[j][w-1] + sum[j] \\times (sum[i]-sum[j]))$$然后如果 $k$ 比 $j$ 优秀，则有：$$dp[j][w-1] + sum[j] \\times (sum[i]-sum[j]) &lt; dp[k][w-1] + sum[k] \\times (sum[i]-sum[k])\\\\\\frac{(dp[j][w-1]-{sum[j]}^2)-(dp[k][w-1]-{sum[k]}^2)}{sum[j]-sum[k]} &gt; -sum[i]\\\\$$现在我们需要考虑 $sum[j] = sum[k]$ 的情况，我们注意到这个时候应该是 $ k$ 一定是不比 $j$ 坏的，但是我们由于要输出方案中，不能切在开头的位置，所以我们要尽量往后切，就必须令 $k$ 比 $j$ 优，就应该让这个式子返回无穷大。 因为 $sum$ 是单调的，就可以单调队列维护凸包了。 输出路径的话，就直接维护一个决策点，沿着决策点往回跳，然后输出就可以了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#define ld long double#define ll long longusing namespace std;const int MAXN = 110000;int n,k;ll num[MAXN],sum[MAXN],a[MAXN],b[MAXN];int last[MAXN][210];ll *dp,*now;ld calc(int i,int j){ if(sum[i] == sum[j]) return 1e18; return (ld)(dp[i]-sum[i]*sum[i]-dp[j]+sum[j]*sum[j])/(ld)(sum[i]-sum[j]);}void init(){ scanf(\"%d %d\",&amp;n,&amp;k); for(int i = 1;i&lt;=n;i++){ scanf(\"%lld\",&amp;sum[i]); sum[i] += sum[i-1]; }}void solve(){ static int q[MAXN]; dp = a,now = b; int fi = 0,la = 0; for(int x = 1;x&lt;=k;x++){ fi = la = 0;q[0] = 0; for(int i = 1;i&lt;=n;i++){ while(fi &lt; la &amp;&amp; calc(q[fi],q[fi+1]) &gt;= -sum[i]) fi++; now[i] = dp[q[fi]] + (sum[i]-sum[q[fi]])*sum[q[fi]]; last[i][x] = q[fi]; while(fi &lt; la &amp;&amp; calc(q[la-1],q[la]) &lt;= calc(q[la],i)) la--; q[++la] = i; } swap(dp,now); } printf(\"%lld\\n\",dp[n]); for(int i = k,t = n;i&gt;=1;--i){ printf(\"%d \",last[t][i]); t = last[t][i]; } printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20180824-APIO2014-sequence/"},{"title":"「AHOI2013」作业-莫队","text":"给定了一个长度为 $n$ 的数列和 $m$ 个询问。 每个询问给定数列的一个区间 $[l,r]$ ，你要回答两个问题： 该区间内大于等于 $a$ ，小于等于 $b$ 的数的个数， 所有大于等于 $a$ ，小于等于 $b$ 的，且在该区间中出现过的数值的个数。 链接Luogu P4396 题解接近莫队模版题… 这个题的关键在于，你维护每一个数出现的 $times[i]$ 和是否出现 $vis[i]$ 都可以做到 $O(1)$ 更新，但是这个时候你要 $O(1)$ 查询这两个的数列的 $[a,b]$ 区间内的和就比较困难。 我们想到可以用树状数组来维护，但是这样的话 $O( (n+m) \\sqrt n \\log n)$ 的复杂度有点虚… 注意到我们总共有 $O((n+m) \\sqrt n)$ 次修改，但只有 $O(m)$ 次查询，所以我们如果维护一个支持 $O(1)$ 单点修改， $O(1)$ 单点求和， $O(\\sqrt n)$ 区间求和的值域分块，那么复杂度就降到 $O((n+m) \\sqrt n)$ ，充分可过。 注意需要离散化。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;map&gt;using namespace std;const int MAXN = 110000,MAXQ = 4000;struct FQ{ int num[MAXN],sumn[MAXQ],n,Q; int block[MAXN],lb[MAXQ],rb[MAXQ]; void init(int _n){ memset(num,0,sizeof(num)); memset(block,0,sizeof(block)); memset(lb,0,sizeof(lb)); memset(rb,0,sizeof(rb)); memset(sumn,0,sizeof(sumn)); n = _n,Q = sqrt(n)+1; for(int i = 1;i&lt;=n;i++){ block[i] = (i/Q)+1; if(block[i] != block[i-1]){ lb[block[i]] = i; rb[block[i-1]] = i-1; } } rb[block[n]] = n; } void build(int n,int *_num = NULL){ init(n); if(_num){ for(int i = 1;i&lt;=n;i++){ num[i] = _num[i]; sumn[block[i]] += num[i]; } } } void update(int pos,int v){ num[pos] += v; sumn[block[pos]] += v; } int query(int l,int r){ int ll = block[l],rr = block[r],ans = 0; if(l &gt; r) return 0; if(ll == rr){ for(int i = l;i&lt;=r;i++) ans += num[i]; return ans; } else{ for(int i = ll + 1;i&lt;rr;i++) ans += sumn[i]; for(int i = l;i&lt;=rb[ll];i++) ans += num[i]; for(int i = lb[rr];i&lt;=r;i++) ans += num[i]; } return ans; }}A,B;int n,m,Q;int num[MAXN];int back[MAXN];int ans1[MAXN],ans2[MAXN];map&lt;int,int&gt; S;struct Query{ int id,l,r,a,b;}q[MAXN];bool cmp(Query &amp;_a,Query &amp;_b){ if(_a.l/Q == _b.l/Q) return _a.r &lt; _b.r; else return _a.l/Q &lt; _b.l/Q;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); Q = sqrt(n)+1; for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;num[i]); S[num[i]] = 0; } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d %d\",&amp;q[i].l,&amp;q[i].r,&amp;q[i].a,&amp;q[i].b); q[i].id = i; } int cnt = 0; for(map&lt;int,int&gt;::iterator it = S.begin();it!=S.end();it++){ it-&gt;second = ++cnt; back[cnt] = it-&gt;first; } for(int i = 1;i&lt;=n;i++){ num[i] = S[num[i]]; } for(int i = 1;i&lt;=m;i++){ q[i].a = lower_bound(back+1,back+cnt+1,q[i].a) - (back); q[i].b = upper_bound(back+1,back+cnt+1,q[i].b) - (back+1); } sort(q+1,q+m+1,cmp);}void add(int pos){ if(A.query(num[pos],num[pos]) == 0) B.update(num[pos],1); A.update(num[pos],1);}void del(int pos){ A.update(num[pos],-1); if(A.query(num[pos],num[pos]) == 0) B.update(num[pos],-1);}void solve(){ A.build(n),B.build(n); int L = 1,R = 0; for(int i = 1;i&lt;=m;i++){ while(q[i].l &lt; L) add(--L); while(R &lt; q[i].r) add(++R); while(L &lt; q[i].l) del(L++); while(q[i].r &lt; R) del(R--); ans1[q[i].id] = A.query(q[i].a,q[i].b); ans2[q[i].id] = B.query(q[i].a,q[i].b); } for(int i = 1;i&lt;=m;i++){ printf(\"%d %d\\n\",ans1[i],ans2[i]); }}int main(){ init(); solve(); return 0;}","link":"/20180915-AHOI2013-homework/"},{"title":"「BJOI2014」大融合-LCT","text":"小强要在 $N$ 个孤立的星球上建立起一套通信系统。这套通信系统就是连接 $N$ 个点的一个树。 这个树的边是一条一条添加上去的。在某个时刻，一条边的负载就是它所在的当前能够 联通的树上路过它的简单路径的数量。 现在，你的任务就是随着边的添加，动态的回答小强对于某些边的负载的询问。 链接Luogu P4219 题解我们发现其实就是边两端的点的个数乘起来就可以了。 我们在普通 LCT 的基础上多维护一个 $vsiz$ ，表示虚子树的 $siz$ 的大小之和。 我们发现这个 $vsiz$ 的维护只需要在 access 和 link 函数里面完成，在这两个函数里面修改微小的一点，注意虚子树的增减即可。 答案就是两个点对应的虚子树的 $vsiz + 1$ 再乘到一起即可，因为查询的两个点是连在一起的。 时间复杂度 : $O(n \\log n)$ LCT 细节一定注意！ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 110000;namespace LCT{ int c[MAXN][2],f[MAXN],siz[MAXN],vsiz[MAXN];bool r[MAXN]; bool noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;} void rev(int x){swap(c[x][0],c[x][1]),r[x]^=1;} void push_down(int x){if(r[x]) rev(c[x][0]),rev(c[x][1]),r[x] = 0;} void push_all(int x){ static int S[MAXN];S[0] = 0; S[++S[0]] = x; while(noroot(x)) x = f[x],S[++S[0]] = x; for(int i = S[0];i&gt;=1;--i) push_down(S[i]); } void push_up(int x){ siz[x] = siz[c[x][0]] + siz[c[x][1]] + vsiz[x] + 1; } void init(int n){for(int i = 1;i&lt;=n;i++) push_up(i);} void rotate(int x){ int y = f[x],z = f[y],t = c[y][1] == x,w = (c[x][1-t]); if(noroot(y)) c[z][c[z][1]==y] = x; c[y][t] = w,c[x][1-t] = y; if(w) f[w] = y; f[y] = x,f[x] = z; push_up(y),push_up(x); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1] == x) ^ (c[z][1] == y) ? rotate(x) : rotate(y); }rotate(x); } } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x); vsiz[x] += siz[c[x][1]]; vsiz[x] -= siz[c[x][1] = y]; // 考虑到新接上来的 y 的 f[y] 一定是 x ， 相当于减去一堆虚子树 // push_up(x); 我们注意到 siz[x] 事实上不会变 } } void makeroot(int x){access(x),splay(x),rev(x);} void split(int x,int y){makeroot(x),access(y),splay(y);} void link(int x,int y){ split(x,y); f[x] = y,vsiz[y] += siz[x]; push_up(y); } ll query(int x,int y){ split(x,y); ll a = vsiz[x]+1,b = vsiz[y]+1;// 非子树 siz 就 win 了 return a * b; }}int n,q;void init(){ scanf(\"%d %d\",&amp;n,&amp;q); LCT::init(n);}void solve(){ for(int i = 1;i&lt;=q;i++){ char s[5];int x,y; scanf(\"%s %d %d\",s,&amp;x,&amp;y); if(s[0] == 'A') LCT::link(x,y); else printf(\"%lld\\n\",LCT::query(x,y)); }}int main(){ init(); solve(); return 0;}","link":"/20190311-BJOI2014-mixture/"},{"title":"「BOI2007」Mokia-CDQ分治套CDQ分治","text":"在定位系统中，世界被认为是一个 $W \\times W$ 的正方形区域，由 $1 \\times 1$ 的方格组成。每个方格都有一个坐标 $(x,y)$ ， $1 \\leq x,y \\leq W$。 有三种命令，意义如下： 0 W 初始化一个全零矩阵。本命令仅开始时出现一次。 1 x y A 向方格(x,y)中添加A个用户。A是正整数。 2 X1 Y1 X2 Y2 查询 $X1 \\leq x \\leq X_2$ ， $Y_1 \\leq y \\leq Y_2$ 所规定的矩形中的用户数量 3 无参数 结束程序。本命令仅结束时出现一次。 链接Luogu P4390 题解二维动态数点问题。 有很多种解法，树套树，$\\text{CDQ}$ 分治 + 树状数组，$\\text{CDQ}$ 分治套 $\\text{CDQ}$ 分治。 这里选择了最后一种方法，练习一下 $\\text{CDQ}$ 分治。 首先要明确，第 $x$ 个维度的 $\\text{CDQ}$ 分治解决的是所有在前 $x-1$ 次分治中划分的（左/右）都相同的询问中，左-&gt;右的贡献。 在这里叙述一下 $\\text{CDQ}$ 套 $\\text{CDQ}$ 解决三维偏序问题（也可以推广到更高维的一个过程）： 以三维偏序为例子，我们的三元组令其为 $(a,b,c)$ 。 预处理（相当于消掉一个维度）： 对第一维 $a$ 进行排序 对第一维分治 CDQ1d(L,R)： 对第一维 $a$ 进行分治，递归处理 CDQ1d(L,mid) 和 CDQ1d(mid,R) 按第二维 $b$ 进行归并，此时不计算答案，只记录在这次分治中，该询问/修改属于左半区间 $\\text{LEFT}$ 或者 右半区间 $\\text{RIGHT}$ 。 复制一份归并后的该区间 $[l,r]$ 的询问数组，用其进行第二维的分治。 对第二维分治 CDQ2d(L,R)： 对第二维 $b$ 进行分治，递归处理 CDQ2d(L,mid) 和 CDQ2d(mid,R) 按第三维 $c$ 进行归并，此时需要计算答案，记录一个临时变量 $\\text{tmp}$ （树状数组）。如果归并左侧新加入的查询/修改在之前维度的分治中均属于左半区间 $\\text{LEFT}$ ，则给 $\\text{tmp}$ （树状数组）做对应的修改； 如果归并右侧新加入的查询/修改在之前维度的分治中均属于右半区间 $\\text{RIGHT}$ ，则计算相关贡献。 可以发现，这个递归是可以再次嵌套的，只有最外面一维是需要计算贡献的，前面只要记录每一维的 $\\text{LEFT}$ 或 $\\text{RIGHT}$，在最后计算即可。 事实上，我们在最后一层递归需要计算的只有 $(\\text{LEFT},…,\\text{LEFT},x_1)$ 对 $(\\text{RIGHT},..,\\text{RIGHT},x_2)$ 的贡献。 为什么这样就可以计算完全呢？ 我们考虑到，如果在前 $x-1$ 个维度其有任意一个维度被划分到了一个区间，那么他们就会共同进入一次分治，那么这两个询问/查询之间的影响就会在子问题里面被解决，所以我们这样做的正确性是可以保证的。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;using namespace std;const int MAXN = 300000;int n,qaq;struct T{ int id,op,a,b,add,ans,part; //add = 1/-1 T(){ id = op = a = b = add = ans = part = 0; } T(int _id,int _op,int _a,int _b,int _add,int _ans = 0,int _p = 0){ id = _id,op = _op,a = _a,b = _b,add = _add,ans = _ans,part = _p; }}t[MAXN];int tot;int ans[MAXN],vis[MAXN];int cdq[MAXN],tmp1d[MAXN],tmp2d[MAXN];const int LEFT = 0,RIGHT = 1;void CDQ2d(int *w,int l,int r){//对第二维(a) 分治，对第三维 (b) 合并 // 这里给出序列 w 的时候应该其第一维坐标 (a) 已经有序 if(l == r) return; int mid = (l+r)&gt;&gt;1; CDQ2d(w,l,mid),CDQ2d(w,mid+1,r);//递归解决子问题 int L = l,R = mid+1,c = l;//现在左边第二维全部小于右边 int tmp = 0; // 跨越维度的分治只需要考虑 (L,b1) 对 (R,b2) 的影响，剩余的在1d的分治里面已经解决 // 更高维度的分治同理，只需要考虑 (L,...,L,b1) 对 (R,...,R,b2) 的影响； // 第一维相同的在 1d 里面解决，第二维相同的在 2d 里面解决 while(c &lt;= r){// 对第三维度进行归并排序 if(R &gt; r || (L&lt;=mid &amp;&amp; t[w[L]].b &lt;= t[w[R]].b)){ if(t[w[L]].part == LEFT &amp;&amp; t[w[L]].op == 1) tmp += t[w[L]].add; tmp2d[c++] = w[L++]; } else{ if(t[w[R]].part == RIGHT &amp;&amp; t[w[R]].op == 2) t[w[R]].ans += tmp; tmp2d[c++] = w[R++]; } } for(int i = l;i&lt;=r;i++) w[i] = tmp2d[i];}void CDQ1d(int *w,int l,int r){//对第一维（隐去）分治，对第二维合并 if(l == r) return; int mid = (l+r)&gt;&gt;1; CDQ1d(w,l,mid),CDQ1d(w,mid+1,r);// 递归解决子问题 int L = l,R = mid+1,c = l; while(c &lt;= r){ if(R &gt; r || (L &lt;= mid &amp;&amp; t[w[L]].a &lt;= t[w[R]].a))// 对第二维进行归并 t[w[L]].part = LEFT,tmp1d[c++] = w[L++]; else t[w[R]].part = RIGHT,tmp1d[c++] = w[R++]; } for(int i = l;i&lt;=r;i++) w[i] = tmp1d[i];// tmp1d相当于复制的一份 CDQ2d(tmp1d,l,r);}void init(){ scanf(\"%d %d\",&amp;qaq,&amp;n); for(int i = 1;;i++){ int op,x,y,x1,y1,v; scanf(\"%d\",&amp;op); if(op == 3){break;} if(op == 1){ scanf(\"%d %d %d\",&amp;x,&amp;y,&amp;v); t[++tot] = T(i,1,x,y,v); } else if(op == 2){ vis[i] = 1; scanf(\"%d %d %d %d\",&amp;x,&amp;y,&amp;x1,&amp;y1); t[++tot] = T(i,2,x-1,y-1,1); t[++tot] = T(i,2,x-1,y1,-1); t[++tot] = T(i,2,x1,y-1,-1); t[++tot] = T(i,2,x1,y1,1); } else{return;} }}void solve(){ for(int i = 1;i&lt;=tot;i++){ cdq[i] = i; } CDQ1d(cdq,1,tot); for(int i = 1;i&lt;=tot;i++){ if(vis[t[i].id]) ans[t[i].id] += t[i].add * t[i].ans; } for(int i = 1;i&lt;=tot;i++){ if(vis[i]){ printf(\"%d\\n\",ans[i]); } }}int main(){ init(); solve(); return 0;}","link":"/20180917-BOI2007-Mokia/"},{"title":"「BZOJ4278」[ONTAK2015]Tasowanie-后缀数组","text":"给定两个数字串 $A$ 和 $B$ ，通过将 $A$ 和 $B$ 进行二路归并得到一个新的数字串 $T$ ，请找到字典序最小的 $T$ 。 链接BZOJ（离线题面）data（数据） 题解如果前面两个字符不同，显然选取小的一个。 分情况讨论，我们可以发现，如果相同，那么就应该取目前后缀字典序较小的一个。 所以事实上就是取后缀字典序比较小的。 此题亦可hash二分。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;cstdio&gt;using namespace std;const int MAXN = 410000;namespace SA{int s[MAXN],sa[MAXN],ht[MAXN],rk[MAXN],x[MAXN],y[MAXN];int cnt[MAXN];void get_sa(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] != s[sa[i-1]]?++m:m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k = j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i] - j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]] != y[sa[i-1]] || y[sa[i]+j] != y[sa[i-1]+j])?++m:m; }}void build(int n,int* str){ int m = 1002;str[n++] = 0; for(int i = 0;i&lt;n;i++) s[i] = str[i]; get_sa(n,m);}bool cmp(int i,int j){ return rk[i+1] &lt; rk[j+1];}}int n;int u,v;int a[MAXN],b[MAXN],t[MAXN],ans[MAXN];void init(){ scanf(\"%d\",&amp;u); for(int i = 0;i&lt;u;i++) scanf(\"%d\",&amp;a[i]); scanf(\"%d\",&amp;v); for(int i = 0;i&lt;v;i++) scanf(\"%d\",&amp;b[i]); for(int i = 0;i&lt;u;i++) t[n++] = a[i]; t[n++] = 0; for(int i = 0;i&lt;v;i++) t[n++] = b[i]; SA::build(n,t);}void solve(){ int l = 0,r = 0,t = 0; while(t &lt;= u+v){ // printf(\"l:%d,%d r:%d,%d\\n\",l,a[l],r,b[r]); if(l == u) ans[t++] = b[r++]; else if(r == v) ans[t++] = a[l++]; else{ if(a[l]==b[r]) ans[t++] = SA::cmp(l,u+1+r)?a[l++]:b[r++]; else ans[t++] = a[l] &lt; b[r]?a[l++]:b[r++]; } } for(int i = 0;i&lt;u+v;i++) printf(\"%d \",ans[i]); printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20180814-BZOJ4278-Tasowanie/"},{"title":"「CF103E」Buying Sets-霍尔定理-网络流-最小权闭合子图","text":"我们有 $n$ 个集合，第 $i$ 个集合有 $m_i$ 个数（$1$ 到 $n$ 中的整数），权值为 $w_i$ 。 现在请你从中选出 $k$ （$k$ 为任意 $0$ 到 $n$ 中的整数）个集合，满足这 $k$ 个集合的并集的大小为 $k$ ，询问这 $k$ 个集合的权值和最小值。 保证从这 $n$ 选出任意 $x$ 个集合，他们的并集大小不小于 $k$ 。 链接Codeforces 题解熟悉二分图那套理论的同学很快就会发现，题目中给出的条件：任意 $k(1 \\le k \\le n)$ 个集合的并集的大小都不小于 $k$ ，可以转化成霍尔定理的一方面的表述。 我们建立一个二分图 $G_1$ ，左边放上所有的集合，右边放上所有的数，把左侧每个集合向其拥有的数连一条边，那么这个时候，根据霍尔定理，这个二分图存在一个左侧所有节点都在匹配中的匹配（这个图中右侧也只有 $n$ 个节点，所以事实上是一个完美匹配）。 所以每一个集合 $i$ 都可以对应到一个数 $c_i$ ， 且任意两个数的 $c_i$ 都不相同。 这个时候我们发现，任意选 $k$ 个集合，我们都可以得到这 $k$ 个集合并集的一个子集，就是由这 $k$ 个集合的 $c_i$ 构成的集合。这个时候我们已经不能有任何其他的数加入，如果我们选择了第 $i$ 个集合，那么我们对于第 $i$ 个集合，对于除了 $c_i$ 的元素 $t$ ，我们都必须选择 $c_j = t$ 的 $j$ 集合，才能保证不多出来元素。 这个时候，我们就有了一个新模型， 仔细观察的话，就会发现其实是一个最小权闭合子图的模型，可以用最小割模型来解决，网上也有许多资料，在这里就不重复了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 610,inf = 0x3f3f3f3f;int n,w[MAXN];vector&lt;int&gt; G[MAXN];struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXN*MAXN*2];int fir[MAXN],ecnt = 2;int addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]}; fir[b] = ecnt++; return ecnt - 2;}int dis[MAXN];queue&lt;int&gt; q;bool bfs(int s,int t){ memset(dis,0,sizeof(dis)); while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int nown = q.front();q.pop(); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dis[v] == 0 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow){ dis[v] = dis[nown] + 1; q.push(v); } } } return dis[t] != 0;}int dfs(int nown,int t,int limit = inf){ if(nown == t || limit == 0) return limit; int sumf = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dis[v] == dis[nown] + 1 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow){ int f = dfs(v,t,min(limit,edge[nowe].cap - edge[nowe].flow)); if(f){ edge[nowe].flow += f,edge[nowe^1].flow -= f; sumf += f,limit -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ int m; scanf(\"%d\",&amp;m); while(m--){ int x;scanf(\"%d\",&amp;x); G[i].push_back(x); } } for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;w[i]);}vector&lt;int&gt; E[MAXN];int c[MAXN],back[MAXN];void get_matching(){ int S = 0,T = 2*n+1; for(int i = 1;i&lt;=n;i++){ addedge(S,i,1),addedge(i+n,T,1); for(auto j : G[i]) E[i].push_back(addedge(i,j+n,1)); } dinic(S,T); for(int i = 1;i&lt;=n;i++){ for(unsigned x = 0;x &lt; G[i].size();x++){ if(edge[E[i][x]].flow == 1){ c[i] = G[i][x]; back[G[i][x]] = i; break; } } }}void solve(){ get_matching(); ecnt = 2;memset(fir,0,sizeof(fir)); int S = n+1,T = S+1; int ans = 0; for(int i = 1;i&lt;=n;i++){ w[i] = -w[i]; if(w[i] &gt; 0) addedge(S,i, w[i]),ans += w[i]; else addedge(i,T,-w[i]); } for(int i = 1;i&lt;=n;i++){ for(auto j : G[i])if(j != c[i]) addedge(i,back[j],inf); } ans -= dinic(S,T); printf(\"%d\\n\",-ans);}int main(){ init(); solve(); return 0;}","link":"/20190202-CF103E/"},{"title":"「CF160E」Buses and People-线段树","text":"Bertown 大街可以抽象为一条数轴。在数轴上有 $10^9$ 个巴士站。站点按照它们在数轴上的顺序从 $1$ 到 $10^9$ 的整数编号。这个城市有 $n$ 辆公共汽车。每天第 $i$ 个公共汽车从 $s_i$ 位置出发，到 $f_i$ 位置停止（ $s_i &lt; f_i$ ），它在所有位于 $s_i$ 与 $f_i$ 的中间站点停靠并且仅在晚上返回。公共汽车在时间 $t_i$ 开始行驶，并且它也在时间 $t_i$ 完成行驶（行驶、停靠都是瞬间的）。所有公共汽车的开始时间 $t_i$ 都不同。公交车有无限的容量。 Bertown 有很多居民。今天第 $i$ 个人要从 $l_i$ 位置出发到 $r_i$ 位置结束（ $l_i &lt; r_i$ ）；第 $i$ 个人在时间 $b_i$ 进入他的出发位置（ $l_i$ ）。一方面，每个人都希望尽快到达目的地，另一方面，他不想换乘公交车。 也就是：为第 $i$ 个人挑选的公交汽车 $j$ ，满足 $s_j≤l_i$, $r_i≤f_j$ 和 $b_i≤t_j$ 的条件下，$t_j$ 最小。 你的任务是确定每个人今天是否可以到达目的地，如果可以，找到每个人将乘坐的公交车的号码，不可以则输出 $-1$ 。 题解我只想到了一个sb的线段树套set的 $O(n \\log^2 n)$ 的做法，但 tutorial 给出了一个 $O((n+m) \\log (n+m))$ 的优秀做法。 我们在这里从 $t$ 从小往大处理，按时间顺序加入每个人；加入车的时候只需要判断哪些人可以被这个车带走，然后这个车就是这些人的答案。 我们考虑使用一个线段树维护这个所有人。我们根据 $l[i]$ 从小到大建立这个树，每个位置放置一个人，维护区间的 $r[i]$ 最小值及出现位置。 当我们加入一个 $s_i,f_i$ 的车的时候，我们只需要在所有 $l[i]$ 大于 $s[i]$ 的部分中，找到一个 $r[i]$ 最小的人，把它删掉，然后持续到找不到这个人即可。最后还在树里面的都是无法乘车的人。 这个方法很好啊，比我树套树不知道高到哪里去了… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;typedef pair&lt;int,int&gt; pii;const int MAXN = 210000;struct B{ int l,r,t,id; bool operator &lt; (const B &amp;x)const{return t &lt; x.t;}}bus[MAXN],p[MAXN];bool cmp(B &amp;x,B &amp;y){return x.l &lt; y.l;}struct Node{ int minn,pos,id; bool operator &lt; (const Node &amp;x)const{return minn &lt; x.minn;}};int n,m;pii LL[MAXN];namespace SegTree{ Node t[MAXN&lt;&lt;2]; #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)/2) void build(int nown,int l,int r,int *id){ if(l == r){ t[nown] = (Node){inf,l,id[l]}; } else{ build(lson,l,mid,id),build(rson,mid+1,r,id); t[nown] = min(t[lson],t[rson]); } } void update(int nown,int l,int r,int pos,int v){//change v if(l == r) t[nown].minn = v; else{ if(pos &lt;= mid) update(lson,l,mid,pos,v); if(pos &gt;= mid+1) update(rson,mid+1,r,pos,v); t[nown] = min(t[lson],t[rson]); } } Node query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr) return t[nown]; else{ Node ans = (Node){inf,0,0}; if(ql &lt;= mid) ans = min(ans,query(lson,l,mid,ql,qr)); if(qr &gt;= mid+1) ans = min(ans,query(rson,mid+1,r,ql,qr)); return ans; } } #undef lson #undef rson #undef mid}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d %d\",&amp;bus[i].l,&amp;bus[i].r,&amp;bus[i].t); bus[i].id = i; } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;p[i].l,&amp;p[i].r,&amp;p[i].t); LL[i] = make_pair(p[i].l,i); p[i].id = i; } sort(LL+1,LL+m+1); sort(p+1,p+m+1),sort(bus+1,bus+n+1);}int xx[MAXN];int tmp[MAXN],pos[MAXN],ans[MAXN];void build(){ for(int i = 1;i&lt;=m;i++) tmp[i] = LL[i].second,xx[i] = LL[i].first,pos[LL[i].second] = i; SegTree::build(1,1,m,tmp);}void add_person(int now){ SegTree::update(1,1,m,pos[p[now].id],p[now].r);}void add_bus(int now){ int L = lower_bound(xx+1,xx+m+1,bus[now].l) - xx; if(L == m+1) return; while(true){ Node t = SegTree::query(1,1,m,L,m); if(t.minn &gt; bus[now].r) break; else{ ans[t.id] = bus[now].id; SegTree::update(1,1,m,t.pos,inf); } }}void solve(){ int nx = 1,ny = 1; while(true){ if(nx == (n+1)) break; if((nx != n+1 &amp;&amp; ny == m+1) || bus[nx].t &lt; p[ny].t ) add_bus(nx++);// 新加入人？新加入车？ else add_person(ny++); } for(int i = 1;i&lt;=m;i++) printf(\"%d \",ans[i] == 0?-1:ans[i]); printf(\"\\n\");}int main(){ init(); build(); solve(); return 0;}","link":"/20181224-CF160E/"},{"title":"「CF115E」Linear Kingdom Races-dp+线段树优化","text":"你是一个赛车比赛的组织者，想在线性王国中安排一些比赛。 线性王国有 $n$ 条连续的从左到右的道路。道路从左到右依次编号为从 $1$ 到 $n$ ，因此道路按照升序排列。在这些道路上可能会有几场比赛，每一场比赛都将使用这些道路的某个连续的子序列。而且，如果某场比赛举行了，你将获得一定数额的金钱。没有比赛在时间上重叠，所以每一段道路可以在多个比赛中使用。 不幸的是，所有道路的状况都不佳，需要修理。每条路都有与之相关的维修费用，你需要支付这笔费用来修理道路。只有在某场比赛中需要使用的所有道路都进行了修复，才能进行比赛。你的任务是修复道路并使你的利润最大化。你的利润被定义为你从比赛中获得的总金额减去你花在修理道路上的钱。请注意，您可以决定不修任何道路，并获得利润 $0$ 。 输出你能获得的最大利润。 链接Codeforces 题解考虑动态规划。我们令 $dp[i][j]$ 为只考虑前 $i$ 个路，上一个没修的路在 $j$ 位置处的答案。 我们显然有以下状态转移： $$dp[i][j] = \\left \\{\\begin{aligned}{}dp[i-1][j] - c[i] + p[i][j]&amp;,j &lt; i\\\\max(dp[i-1][k])&amp;,j = i\\\\\\end{aligned}\\right.$$ 其中 $p[i][j]$ 由所有左端点在 $j$ 右侧，右端点在 $i$ 的赛道构成，事实上我们可以每个赛道的贡献出现在其左端点左侧，所以是一个区间加。 我们考虑如何快速转移，针对第一个操作，只要支持区间加减即可。对于第二个只要支持区间最值查询，那么我们一个线段树就可以解决了。 有趣的优化… 时间复杂度：$O(n \\log n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3f3f3f3f3f#define ll long longusing namespace std;const int MAXN = 210000;int n,m;ll num[MAXN];namespace SegTree{ #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) ll maxn[MAXN&lt;&lt;2],addn[MAXN&lt;&lt;2]; void add(int nown,ll v){ maxn[nown] += v,addn[nown] += v; } void push_down(int nown){ if(addn[nown] != 0){ add(lson,addn[nown]),add(rson,addn[nown]); addn[nown] = 0; } } void update(int nown,int l,int r,int ql,int qr,ll v){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ add(nown,v); } else{ push_down(nown); if(ql &lt;= mid) update(lson,l,mid,ql,qr,v); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,v); maxn[nown] = max(maxn[lson],maxn[rson]); } } ll query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ return maxn[nown]; } else{ push_down(nown); ll ans = -inf; if(ql &lt;= mid) ans = max(ans,query(lson,l,mid,ql,qr)); if(qr &gt;= mid+1) ans = max(ans,query(rson,mid+1,r,ql,qr)); return ans; } } void _set(int nown,int l,int r,int pos,ll v){ if(l == r){ maxn[nown] = v; } else{ push_down(nown); if(pos &lt;= mid) _set(lson,l,mid,pos,v); if(pos &gt;= mid+1) _set(rson,mid+1,r,pos,v); maxn[nown] = max(maxn[lson],maxn[rson]); } }}typedef pair&lt;ll,ll&gt; pll;vector&lt;pll&gt; V[MAXN];//first-&gt;pos,second-&gt;valvoid init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%lld\",&amp;num[i]); } for(int i = 1;i&lt;=m;i++){ ll a,b,c; scanf(\"%lld %lld %lld\",&amp;a,&amp;b,&amp;c); V[b].push_back(make_pair(a,c)); }}void solve(){ // 线段树范围 [0,n] SegTree::update(1,0,n,0,n,-inf); SegTree::_set(1,0,n,0,0); for(int i = 1;i&lt;=n;i++){ ll tmp = SegTree::query(1,0,n,0,i-1); // printf(\"%d:%d\\n\",i,tmp); SegTree::_set(1,0,n,i,tmp); SegTree::update(1,0,n,0,i-1,-num[i]); for(int j = 0;j&lt;int(V[i].size());j++){ ll L = V[i][j].first, val = V[i][j].second; SegTree::update(1,0,n,0,L-1,val); } } printf(\"%lld\\n\",SegTree::query(1,0,n,0,n));}int main(){ init(); solve(); return 0;}","link":"/20181223-CF115E/"},{"title":"「CF208E」Blood Cousins-线段树合并","text":"给你一片森林，每次询问一个点与多少个点拥有共同的 $K$ 级祖先 题解用倍增处理出 $k$ 级祖先，然后离线所有询问到一个数对： $(x,d)$ 表示需要查询在 $x$ 为根的子树中深度为 $d$ 的节点个数，每个询问的答案就是这个节点个数减 $1$ 。 我们可以用线段树合并解决这个问题。 时间复杂度 $O((n+m) \\log n)$ ，空间复杂度 $O(n \\log n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000,logn = 20;struct Edge{ int v,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}namespace SegTree{ int sumn[MAXN*logn*5],ls[MAXN*logn*5],rs[MAXN*logn*5],cnt = 0; #define mid ((l+r)&gt;&gt;1) void update(int &amp;nown,int l,int r,int pos,int v){ if(!nown) nown = ++cnt; if(l == r) sumn[nown] += v; else{ if(pos &lt;= mid) update(ls[nown],l,mid,pos,v); if(pos &gt;= mid+1) update(rs[nown],mid+1,r,pos,v); sumn[nown] = sumn[ls[nown]] + sumn[rs[nown]]; } } int query(int nown,int l,int r,int pos){ if(!nown) return 0; if(l == r) return sumn[nown]; else{ if(pos &lt;= mid) return query(ls[nown],l,mid,pos); else return query(rs[nown],mid+1,r,pos); } } void merge(int &amp;lt,int rt,int l,int r){ if(lt == 0 || rt == 0){lt = lt + rt;return;} if(l == r) sumn[lt] += sumn[rt]; else{ merge(ls[lt],ls[rt],l,mid); merge(rs[lt],rs[rt],mid+1,r); sumn[lt] = sumn[ls[lt]] + sumn[rs[lt]]; } }}int n,m;int fa[MAXN][logn],dep[MAXN];struct Q{int d,id;};vector&lt;Q&gt; q[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;fa[i][0]); if(fa[i][0] != 0) addedge(fa[i][0],i); }}void dfs0(int nown,int depth){ dep[nown] = depth; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].v; dfs0(v,depth+1); } }int find_kth(int x,int k){ int t = dep[x] - k; for(int i = logn-1;i&gt;=0;i--){ if(dep[fa[x][i]] &gt;= t) x = fa[x][i]; } return x;}void build(){ for(int j = 1;j&lt;logn;j++) for(int i = 1;i&lt;=n;i++) fa[i][j] = fa[fa[i][j-1]][j-1]; for(int i = 1;i&lt;=n;i++) if(fa[i][0] == 0) dfs0(i,1);}int ans[MAXN];void pre_calc(){ scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ int v,p; scanf(\"%d %d\",&amp;v,&amp;p); int x = find_kth(v,p); if(x == 0) continue; q[x].push_back((Q){dep[x]+p,i}); }}int rt[MAXN];void dfs1(int nown){ SegTree::update(rt[nown],1,n,dep[nown],1); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].v; dfs1(v); SegTree::merge(rt[nown],rt[v],1,n); } for(unsigned i = 0;i&lt;q[nown].size();i++){ int id = q[nown][i].id,dd = q[nown][i].d; if(dd &gt; n) continue; ans[id] = SegTree::query(rt[nown],1,n,dd) - 1; }}void solve(){ for(int i = 1;i&lt;=n;i++) if(fa[i][0] == 0) dfs1(i); for(int i = 1;i&lt;=m;i++) printf(\"%d \",ans[i]); printf(\"\\n\");}int main(){ init(); build(); pre_calc(); solve(); return 0;}","link":"/20181225-CF208E/"},{"title":"「CF232D」Fence-后缀数组+主席树","text":"给定长度为 $n$ 的整数序列 $h[n]$ ，有 $Q$ 个询问，每次给出 $l_1,r_1$ ，​询问有多少对 $l_2,r_2$ ，满足以下条件: $r_2 – l_2 = r_1 – l_1$ 区间 $[l_1, r_1]$ 与区间 $[l_2, r_2]$ 没有交集 对于任意 $i \\in [0,r_1 – l_1]$ ，满足 $h[l_1 + i] + h[l_2 + i] = h[l_1] + h[l_2]$ 链接Codeforces 题解注意到第三个条件可以转化成$$h[l_1 + i + 1] + h[l_2 + i + 1] = h[l_1 + i] + h[l_2 + i],\\ i \\in [0,r_i-l_i-1]$$ 也就是$$h[l_1 + i + 1] - h[l_1 + i] = - (h[l_2 + i + 1] - h[l_2 + i])\\ i \\in [0,r_i-l_i-1]$$ 我们令 $g[i] = h[i+1] - h[i]$，那么第三个条件的表述就变为： $$g[l_1+i] = -g[l_2+i]\\ i \\in [0,r_i-l_i-1]$$ 如果我们令 $len = r_i-l_i-1$ ，那么条件变成： $$g[l_1…l_1+len] = - g[l_2…l_2+len]$$ 后缀数组处理之后，就变成了一个二维数点的问题，随便怎么搞一搞就可以了。 这里用了主席树实现。要特判 $l = r$ 的情况，答案是 $n-1$ 。注意要排除掉相交的情况，需要加一减一，这个地方比较容易错… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 210000,LOGN = 20;namespace SA{ int s[MAXN],sa[MAXN],ht[MAXN],x[MAXN],y[MAXN],rk[MAXN],cnt[MAXN]; void get_sa(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] == s[sa[i-1]]?m:++m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k = j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i] - j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]] == y[sa[i-1]] &amp;&amp; y[sa[i]+j] == y[sa[i-1]+j]?m:++m); } } void get_height(int n){ for(int i = 0,h = ht[0] = 0;i&lt;n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n &amp;&amp; j+h&lt;n &amp;&amp; s[i+h] == s[j+h]) h++; ht[rk[i]] = h; if(h) --h; } } void solve(int n,int m,int *a){ for(int i = 0;i&lt;n;i++) s[i] = a[i]; s[n++] = 0; get_sa(n,m),get_height(n); }}namespace ST{ int minn[MAXN][LOGN]; void init(int n,int *a){ for(int i = 1;i&lt;=n;i++) minn[i][0] = a[i]; for(int j = 1;j&lt;LOGN;j++) for(int i = 1;i + (1&lt;&lt;(j-1)) &lt;= n;i++) minn[i][j] = min(minn[i][j-1],minn[i+(1&lt;&lt;(j-1))][j-1]); } int query(int l,int r){ int t = log2(r-l+1); return min(minn[l][t],minn[r-(1&lt;&lt;t)+1][t]); }}int _q(int l,int r){ return l == r ? inf : ST::query(l+1,r);}int rt[MAXN];namespace CMT{ int ls[MAXN*LOGN],rs[MAXN*LOGN],sumn[MAXN*LOGN],cnt; #define mid ((l+r)/2) void insert(int &amp;nown,int pre,int l,int r,int pos,int v){ nown = ++cnt;ls[nown] = ls[pre],rs[nown] = rs[pre],sumn[nown] = sumn[pre]; if(l == r) sumn[nown] += v; else{ if(pos &lt;= mid) insert(ls[nown],ls[pre],l,mid,pos,v); if(pos &gt;= mid+1) insert(rs[nown],rs[pre],mid+1,r,pos,v); sumn[nown] = sumn[ls[nown]] + sumn[rs[nown]]; } } int query(int nown,int l,int r,int ql,int qr){ if(!nown) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr) return sumn[nown]; else{ int ans = 0; if(ql &lt;= mid) ans += query(ls[nown],l,mid,ql,qr); if(qr &gt;= mid+1) ans += query(rs[nown],mid+1,r,ql,qr); return ans; } } #undef mid}map&lt;int,int&gt; S;int n,len,m,q,h[MAXN],g[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 0;i&lt;n;i++){ scanf(\"%d\",&amp;h[i]); if(i) g[i-1] = h[i] - h[i-1]; } g[n-1] = h[n]-h[n-1],g[n] = 2e9+1; len = 2*n+1; for(int i = 1;i&lt;=n;i++) g[n+i] = -g[i-1]; for(int i = 0;i&lt;len;i++) S[g[i]] = 0; for(auto it = S.begin();it != S.end();it++) it-&gt;second = ++m; m++; for(int i = 0;i&lt;len;i++) g[i] = S[g[i]];}int query_cmt(int lb,int rb,int l,int r){ return CMT::query(rt[rb],0,len,l,r) - CMT::query(rt[lb-1],0,len,l,r);}int query(int L,int R){ if(L == R) return n-1; int pos = SA::rk[L],l = R-L,lb,rb; int LL = 0,RR = pos; while(LL != RR){ int mid = (LL+RR)/2; if(_q(mid,pos) &gt;= l) RR = mid; else LL = mid+1; } lb = LL; LL = pos,RR = len; while(LL != RR){ int mid = (LL+RR+1)/2; if(_q(pos,mid) &gt;= l) LL = mid; else RR = mid-1; } rb = LL; return query_cmt(lb,rb,n+1,len) - query_cmt(lb,rb,max(n+1,n+L-l+1),n+R+1); return 0;}void solve(){ SA::solve(len,m,g),ST::init(len,SA::ht); for(int i = 1;i&lt;len;i++) CMT::insert(rt[i],rt[i-1],0,len,SA::sa[i],1); scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++){ int l,r; scanf(\"%d %d\",&amp;l,&amp;r); printf(\"%d\\n\",query(l-1,r-1)); }}int main(){ init(); solve(); return 0;}","link":"/20190204-CF232D/"},{"title":"「CF256E」Lucky Arrays-简单线段树","text":"给定一个长度为 $n(1 \\le n \\le 77777)$ 的数列 $a$ ，初始的时候全为 0。 给出一个 $3 \\times 3$ 的矩阵 $w_{i,j}$ ，$w_{i,j} = 1$ 时代表 $(i,j)$ 这个有序数对为和谐的数对，否则 $(i,j)$ 不为一个和谐数对。 一个数列 $a$ 是和谐的当且仅当对于所有的 $1\\le i \\le n-1$ ， $(a_i,a_{i+1})$ 均为和谐数对。 有 $m(1\\le m \\le 77777)$ 次修改和询问，每次给出两个整数 $v_i,t_i$，将 $a_{v_i} (1 \\le v_i \\le n)$ 修改为 $t_i(0\\le t_i \\le 3)$。 每次修改后都询问，如果将数列里所有的 $0$ 都替换为任意 $1$ 到 $3$ 之间的整数（不同位置的 $0$ 可以替换为不同的数），那么最后产生的和谐的数列有多少种。每次修改后的查询并不会使数列发生任何改变。 答案对 $777777777$ 取模。 链接Codeforces 题解我们维护一个线段树，每个区间上都维护一个 $f[i][j]$ 代表这个区间左端点数字为 $i$ 的时候，右端点为 $j$ 的时候，满足以上条件的方案数。 合并直接枚举两边各九种组合合并即可。 时间复杂度 $O(n \\log n \\times 81)$ ，貌似可以过。 我想了一个麻烦死的线性动态 $dp$，好像也可以做，时间复杂度应该是 一样的，但不想写了… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include &lt;bits/stdc++.h&gt;#define ll long long #define mod 777777777LLusing namespace std;const int MAXN = 80000;int w[3][3];namespace SegTree{ struct Node{ ll f[3][3]; Node(){ f[0][0] = f[0][1] = f[0][2] = 0; f[1][0] = f[1][1] = f[1][2] = 0; f[2][0] = f[2][1] = f[2][2] = 0; } void clear(){ f[0][0] = f[0][1] = f[0][2] = 0; f[1][0] = f[1][1] = f[1][2] = 0; f[2][0] = f[2][1] = f[2][2] = 0; } ll *operator [](const int x){return f[x];} }tree[MAXN*4]; #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) Node merge(Node &amp;l,Node &amp;r){ Node ans; for(int i = 0;i&lt;3;i++){ for(int j = 0;j&lt;3;j++){ for(int x = 0;x&lt;3;x++){ for(int y = 0;y&lt;3;y++){ ans[i][j] += w[x][y] * l[i][x] * r[y][j]; } } ans[i][j] %= mod; } } return ans; } void build(int nown,int l,int r){ if(l == r){ tree[nown].clear(); tree[nown][0][0] = tree[nown][1][1] = tree[nown][2][2] = 1; } else{ build(lson,l,mid),build(rson,mid+1,r); tree[nown] = merge(tree[lson],tree[rson]); } } void update(int nown,int l,int r,int pos,int v){ // printf(\"%d %d %d\\n\",l,r,pos); if(l == r){ tree[nown].clear(); if(v == 0){tree[nown][0][0] = tree[nown][1][1] = tree[nown][2][2] = 1;} else {tree[nown][v-1][v-1] = 1;} // printf(\"!!\\n\"); } else{ if(pos &lt;= mid) update(lson,l,mid,pos,v); if(pos &gt;= mid+1) update(rson,mid+1,r,pos,v); tree[nown] = merge(tree[lson],tree[rson]); // printf(\"a:%d %d %d\\n\",l,r,pos); } } ll query(){ ll ans = 0; for(int i = 0;i&lt;3;i++){ for(int j = 0;j&lt;3;j++){ ans += tree[1][i][j]; } } return ans % mod; }}int n,m;void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 0;i&lt;3;i++){ for(int j = 0;j&lt;3;j++){ scanf(\"%d\",&amp;w[i][j]); } } SegTree::build(1,1,n);}void solve(){ for(int i = 1;i&lt;=m;i++){ int p,v; scanf(\"%d %d\",&amp;p,&amp;v); SegTree::update(1,1,n,p,v); printf(\"%lld\\n\",SegTree::query()); }}int main(){ init(); solve(); return 0;}","link":"/20181227-CF256E/"},{"title":"「CF212D」Cutting a Fence-简单数据结构","text":"给定一个长度为 $n$ 的数列 $a_1,a_2,…,a_n$，定义 $f(x,k) = \\min_{i=0}^{k-1} (a_{x+i})$ ，请对于每一个 $k = 1$ 到 $n$ ，求出 $\\sum_{i=1}^{n-k+1} f(i,k)$ 的值。 链接Codeforces 题解我拥有一个非常丑陋的做法（ 我们维护一个并查集，然后我们从大往小加入每个数 $a[i]$，每次插入 $a[i]$ 都尝试与 $i$ 左边/右边的集合合并。 我们发现，合并的区间中间有一个区间最小的数 $a[i]$ ，那么我们发现会新出现一些区间，它们的最小值均为 $a[i]$ 。假设左边的集合大小为 $L$，右边的集合大小为 $R$，那么我们新增的区间就是： 加上长度为 $L+R+1$ 的区间的所有子区间，最小值为 $a[i]$ 减去长度分别为 $L$ 和 $R$ 的区间的所有子区间，最小值为 $a[i]$ 我们发现长度为 $x$ 的区间的子区间事实上是： 长度为 $1$ 的子区间： $x$ 个 长度为 $2$ 的子区间： $x-1$ 个 $\\cdots$ 长度为 $x-1$ 的子区间：$2$ 个 长度为 $x$ 的子区间： $1$ 个 事实上是一个等差数列…所以如果我们维护差分值的话，就相当于一个某位置单点加 $x$，其余位置区间减 $1$ 的操作 ..？（事实上还要乘上一个 $a[i]$） 第一个操作我们维护一个差分数组，第二个操作我们维护一个二阶差分数组，这个题大概就可以做了？ 最后线性递推出所有的答案即可。 常数巨大无比警告…大约是 $O(n \\alpha(n))$ ..？ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int MAXN = 1100000;namespace BCJ{ int f[MAXN],siz[MAXN]; void init(int n){ for(int i = 1;i&lt;=n;i++) f[i] = i,siz[i] = 1; } int find(int x){ return f[x] == x?x:f[x] = find(f[x]); } void merge(int x,int y){ int fx = find(x),fy = find(y); if(fx == fy) return; f[fx] = fy; siz[fy] += siz[fx]; } int getsize(int x){return siz[find(x)];}}int n,m;int num[MAXN],s[MAXN],vis[MAXN];int c1[MAXN],c2[MAXN],ans[MAXN];bool cmp(int a,int b){return num[a] &gt; num[b];}void init(){ scanf(\"%lld\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%lld\",&amp;num[i]); } BCJ::init(n);}void addc(int x,int v,int val){ if(x == 0) return; // printf(\"add: x:%lld val:%lld v:%lld\\n\",x,val,v); c1[1] += v*x*val; c2[1] -= v*1*val,c2[x+1] += v*1*val;}void calc(){ for(int i = 1;i&lt;=n;i++) s[i] = i; sort(s+1,s+n+1,cmp); for(int i = 1;i&lt;=n;i++){ int t = s[i]; vis[t] = 1; int L = 0,R = 0; if(vis[t-1]) L = BCJ::getsize(t-1),BCJ::merge(t,t-1); if(vis[t+1]) R = BCJ::getsize(t+1),BCJ::merge(t,t+1); addc(L+R+1,1,num[t]),addc(L,-1,num[t]),addc(R,-1,num[t]); }}void solve(){ for(int i = 1;i&lt;=n;i++) c2[i] = c2[i-1] + c2[i]; for(int i = 1;i&lt;=n;i++) c2[i] = c2[i-1] + c2[i]; for(int i = 1;i&lt;=n;i++) c1[i] = c1[i-1] + c1[i]; ans[1] = c1[1]; for(int i = 1;i&lt;=n;i++) ans[i+1] = c1[i] + c2[i]; scanf(\"%lld\",&amp;m); for(int i = 1;i&lt;=m;i++){ int t; scanf(\"%lld\",&amp;t); printf(\"%.10lf\\n\",double(ans[t])/(n-t+1)); }}signed main(){ init(); calc(); solve(); return 0;}","link":"/20181226-CF212D/"},{"title":"「CF321E」Ciel and Gondolas-wqs二分+决策单调性","text":"Ciel 狐狸在游乐园里排队等待上摩天轮。现在有 $n$ 个人按编号顺次在队列里，有 $m$ 条船，第 $i$ 条船到时，前 $q_{i}$ 个人可以上船。保证 $\\sum q_i = n$。 人总是不愿意和陌生人上同一条船的，当第 $i$ 个人与第 $j$ 个人处于同一条船上时，会产生 $u_{i,j}$ 的沮丧值。请你求出最小的沮丧值和。一条船上的人两两都会产生沮丧值，不会计算这个沮丧值两次。 链接Codeforces 题解我们注意到我们有一个简单的转移方程： $$dp[i][j] = \\min_{1 \\le p &lt; i}(dp[p][j-1] + g(p+1,j))$$ 其中 $g(i,j)$ 表示从 $i$ 到 $j$ 中选中所有人需要耗费的代价。 这个东西的复杂度是 $O(n^2m)$ ， 我们可以用决策单调性优化到 $O(nm \\log n)$ ，但是这个不足以过掉该题，我们可以使用 wqs 二分 + 决策单调性优化到 $O(n \\log n \\log m)$ 。 需要注意的是这里的代价应当是负的，也就是我们需要加上代价。（差不多啦 需要读入优化。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;bits/stdc++.h&gt;using namespace std; namespace fast_io { inline char read(){static const int IN_LEN=1000000;static char buf[IN_LEN],*s,*t;return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))==s)?-1:*s++) : *s++;} inline void read(int &amp;x){static bool iosig;static char c;for (iosig=false,c=read();!isdigit(c);c=read()){if(c=='-')iosig=true;if(c==-1)return;}for(x=0;isdigit(c);c=read())x=((x+(x&lt;&lt;2))&lt;&lt;1)+(c^'0');if(iosig)x=-x;}}using namespace fast_io; const int MAXN = 4100; int n,m;char tmp[MAXN*2];int a[MAXN][MAXN],s[MAXN][MAXN];// 前 i 个与前 j 个的答案 int G(int x,int y){// 第 x 个到第 y 个的答案，x &lt;= y return (s[y][y] - 2 * s[x-1][y] + s[x-1][x-1])/2;} int dp[MAXN],siz[MAXN],fi,la;struct Node{ int p,l,r; Node(int _p = 0,int _l = 0,int _r = 0){p = _p,l = _l,r = _r;}}; Node q[MAXN];//[fi,la] void reset(){dp[0] = siz[0] = la = 0;fi = 1;} int cal(int now,int last,int k){return dp[last] + G(last+1,now) + k;} int check(int k){// k 为代价，每个都加上一个 k ，因为斜率是负数 // 不限分段个数，考虑 dp[i] 为前 i 个分若干段的最小值，每分一段要加一个 k x reset(); q[++la] = Node(0,1,n); for(int i = 1;i&lt;=n;i++){ while(fi &lt; la &amp;&amp; q[fi].r &lt; i) fi++; dp[i] = cal(i,q[fi].p,k),siz[i] = siz[q[fi].p] + 1; // 为什么对新来的这么不友好？？？ if(cal(n,q[la].p,k) &lt;= cal(n,i,k)) continue; while(fi &lt; la &amp;&amp; cal(q[la].l,q[la].p,k) &gt; cal(q[la].l,i,k)) la--; int L = q[la].l,R = q[la].r + 1;// 二分决策点 while(L!=R){ int mid = (L+R)/2; if(cal(mid,q[la].p,k) &gt; cal(mid,i,k)) R = mid; else L = mid+1; } q[la].r = L-1; q[++la] = Node(i,L,n); } // 最优分几段？ return siz[n];} void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=n;j++){ read(a[i][j]); s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j]; }} void solve(){ int L = 0,R = s[n][n]; while(L != R){ int mid = (L+R)/2; if(check(mid) &lt;= m) R = mid; else L = mid+1; } check(L); printf(\"%d\\n\",dp[n] - L*m);} int main(){ init(); solve(); return 0;}","link":"/20190212-CF321E/"},{"title":"「CF353E」 Antichain-乱搞","text":"给定一个长度为 $n$ 的 $01$ 序列，第 $i$ 位是 $0$ 代表 节点 $i$ 到节点 $i \\bmod n + 1$ 有一条有向边，第 $i$ 位是 $1$ 代表 节点 $i \\bmod n + 1$ 到节点 i 有一条有向边。 我们称一个节点对 $(u,v)$ 是妙的当且仅当不存在 $u$ 到 $v$ 和 $v$ 到 $u$ 的路径任何两者之一。 现在你要从这个图里面挑出一个集合，使得集合中任意两个不同的节点 $u$ 和 $v$ 之间构成的节点对 $(u,v)$ 都是妙的。 请你输出这个集合的大小的最大值。 链接Codeforces 题解不会做，看了题解也不会做…看懂题解是不可能看懂的，只好去看看代码过过日子。 于是研究了一番 rng_58 的代码，大概搞懂了这个题。 我们把这n个点复制一倍，放在一条直线上。我们把具有相同方向的称为一个连续段，其长度为连续的边的数量，然后我们找到一个位置切掉这个序列，相当于断环为链，然后我们发现这个东西可以贪心解决了。 我们如果遇到一个长度大于等于 2 的，我们就把答案+1，然后在两个长度大于等于 2 的之间，全都是长度大于等于 1 的，我们发现这样的话，为了不影响到长度大于等于 2 的，我们能取的个数就是 $\\frac{len}{2}$ 。然后就可以计算答案了。 如果不存在长度大于等于 2 的序列，那么我们的答案就是 $\\frac{n}{2}$ 贪心的去想一想，很有正确的道理。 时间复杂度： $O(n)$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;#define ui unsigned using namespace std;ui n,st;string s,t;int main(){ cin &gt;&gt; s;n = s.length(); s = s+s; for(ui i = 1;i&lt;s.length();i++){ if(s[i] != s[i-1]){st = i;break;} } s = s.substr(st,n); int ans = 0; for(ui i = 0;i &lt; s.length();){ for(ui j = i+1;;j++){ if(j == s.length() || s[j] != s[i]){ t.push_back(j - i == 1?'1':'2'); i = j; break; } } } int M = t.length(); t = t + t; for(int i = 1;i&lt;=M;i++){ if(i == M || t[i] != t[i-1]){ t = t.substr(i,M); break; } } for(ui i = 0;i&lt;t.length();){ for(ui j = i+1;;j++){ if(j == t.length() || t[j] != t[i]){ ans += (j-i) / (t[i]=='1'?2:1); i = j; break; } } } cout &lt;&lt; ans &lt;&lt; endl; return 0;}","link":"/20190302-CF353E/"},{"title":"「CF311B」Cats Transport-斜率优化dp","text":"Zxr960115 是一个大农场主。他养了 $m$ 只可爱的猫子,雇佣了 $p$ 个铲屎官。这里有一条又直又长的道路穿过了农场，有 $n$ 个山丘坐落在道路周围，编号自左往右从1到n。山丘 $i$ 与山丘 $i-1$ 的距离是 $d_i$ 米。铲屎官们住在 $1$ 号山丘。 一天，猫子们外出玩耍。猫子 $i$ 去山丘 $h_i$ 游玩，在 $t_i$ 时间结束他的游玩，然后在山丘 $h_i$ 傻等铲屎官。铲屎官们必须把所有的猫子带上。每个铲屎官都会从 $1$ 走到 $n$ 号山丘，可以不花费时间的把所有路途上游玩结束的猫子带上。每个铲屎官的速度为一米每单位时间，并且足够强壮来带上任意数量的猫子。 你的任务是安排每个铲屎官出发的时间，最小化猫子们等待的时间之和。 链接Codeforces 题解我们令$$D[i] = \\sum_{j=2}^i d[j]$$ 那我们可以吧所有的 $t[i]$ 减去 $D[h[i]]$ ，得到一个新的 $t[i]$ ，那么如果一个饲养员在 $t \\le t[i]$ 之前出发，就能够收集到这个猫，猫的等待时间为 $t[i] - t$。 我们再令$$T[i] = \\sum_{j = 1}^{i-1} t[j]$$ 我们把猫按照新获得 $t[i]$ 排序之后，我们如果令 $dp[i][j]$ 为恰好取到前 $i$ 只猫，用去 $j$ 个饲养员时候的最小代价。 很明显有如下转移： $$dp[i][w] = \\max_{0 \\le j \\le i-1}(dp[j][w-1] + t[i]\\times (i-j) - (T[i] - T[j]))$$ 我们当 $j \\le k$时，$k$ 比 $j$ 优等价于： $$dp[j][w-1] + t[i]\\times (i-j) - T[i] + T[j] \\ge dp[k][w-1] + t[i]\\times (i-k) - T[i] + T[k]\\\\dp[j][w-1] - t[i]\\times j + T[j] \\ge dp[k][w-1] - t[i]\\times k + T[k]\\\\dp[j][w-1] + T[j] -dp[k][w-1] - T[k] \\ge t[i]\\times j - t[i]\\times k \\\\dp[j][w-1] + T[j] -dp[k][w-1] - T[k] \\ge t[i]\\times (j - k) \\\\\\frac{dp[j][w-1] + T[j] -dp[k][w-1] - T[k]}{(j - k)} \\le t[i] \\\\\\frac{Y(j) - Y(k)}{X(j)-X(k)} \\le t[i]$$ $t[i]$ 单调递增，那么我们一旦 $k$ 比 $j$ 优，那么 $k$ 就在之后会一直比 $j$ 优，我们就可以用单调队列（维护一个单调递增的队列？）优化这个问题，事实上是维护一个凸包..？ 时间复杂度 $O(n + mp)$。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;#define ll long long#define inf 1e18using namespace std;const int MAXN = 110000;int n,m,p;int d[MAXN],h[MAXN],t[MAXN];ll T[MAXN];void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;p); for(int i = 2;i&lt;=n;i++){ scanf(\"%d\",&amp;d[i]); d[i] += d[i-1]; } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;h[i],&amp;t[i]); t[i] -= d[h[i]]; } sort(t+1,t+m+1); for(int i = 1;i&lt;=m;i++){ T[i] = T[i-1] + t[i]; }}ll a[MAXN],b[MAXN];ll *dp,*last;int q[MAXN],fi,la;double caly(int x){return last[x] + T[x];}double calc(int j,int k){return (caly(j) - caly(k))/(j-k);}ll caldp(int i,int j){ return last[j] + 1LL * t[i] * (i-j) - (T[i] - T[j]);}void solve(){ dp = a,last = b; for(int i = 0;i&lt;=m;i++) dp[i] = inf; dp[0] = 0; for(int w = 1;w&lt;=p;w++){ fi = la = 0; q[0] = 0; swap(dp,last); for(int i = 1;i&lt;=m;i++){ while(fi &lt; la &amp;&amp; calc(q[fi],q[fi+1]) &lt;= t[i]) fi++; dp[i] = caldp(i,q[fi]); while(fi &lt; la &amp;&amp; calc(q[la-1],q[la]) &gt;= calc(q[la],i)) la--; q[++la] = i; } } printf(\"%lld\\n\",dp[m]);}int main(){ init(); solve(); return 0;}","link":"/20181227-CF311B/"},{"title":"「CF400E」Inna and Binary Logic-简单数据结构","text":"Inna 有一个一个长度为 $n$ 的数列 $a_1 [1],a_1 [2],\\dots,a_1 [n]$。 她会进行如下操作，分为 $n$ 个阶段：在第一阶段，Inna 从数组 $a_1$中写出所有数字，在第 $i$ 个 $(i \\ge 2)$ 阶段 Inna 会写出数组的所有元素 $a_i$ ，由 $n - i + 1$ 个整数组成; 数组 $a_i$ 的第 $k$ 个数定义如下：$a_{i} [k] = a_{i-1} [k] \\mathrm{AND} a_{i-1} [k + 1]$ 。 这里 $\\mathrm{AND}$ 是二进制的逐位与运算。 Dima 决定检验 Inna 的技能。 他要求 Inna 改变阵列，进行练习并说出她在当前练习中写出的所有元素的总和，即： $$\\sum_{i=1}^n \\sum_{j=1}^{n-i+1} a_i[j]$$ 请帮助Inna回答问题！ 链接Codeforces 题解每位贡献独立，方便合并，一看就要分位考虑嘛。 我们分位考虑后，就只剩下只包含0/1，每次把一个位置 0-&gt;1 或者 1-&gt;0 ，然后重新计算这一位的贡献。 事实上，我们在一位的情况下，我们只要计算出多少长度在 $[1,n]$ 的区间包含至少 $1$ 个 $0$。 我们考虑用唯一性确定这个事情（用最先出现的 $0$ 计算贡献），就是左端点从上一个 $0$ 到这个 $0$ 的区间，右端点在这个 $0$ 以右的区间。 用 set 维护每个0出现的位置，每次修改计算下贡献就好了。 时间复杂度是 $O(n \\log n \\log V)$ 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;#define int long longusing namespace std;const int MAXN = 210000,logn = 21;int n,m,ANS = 0;int num[MAXN];set&lt;int&gt; S[logn];// 维护0出现的位置int getpre(int pos,int x){// 小于 pos 的第一个 x auto it = S[x].lower_bound(pos); return *(--it);}int getnex(int pos,int x){// 大于 pos 的第一个 x auto it = S[x].upper_bound(pos); return *it; }int calc(int now,int last,int x){ return (now-last) * (n-now+1) * (1LL&lt;&lt;x);}void update(int p,int v){ for(int i = 0;i&lt;logn;i++){ int tmp = (v&amp;(1&lt;&lt;i))!=0; if(tmp != (int)(S[i].count(p))) continue; int last = getpre(p,i),nex = getnex(p,i); if(!tmp){ ANS += calc(nex,last,i); ANS -= calc(nex,p,i);ANS -= calc(p,last,i); S[i].insert(p); } else{ ANS -= calc(nex,last,i); ANS += calc(nex,p,i);ANS += calc(p,last,i); S[i].erase(p); } }}void init(){ scanf(\"%lld %lld\",&amp;n,&amp;m); for(int x = 0;x&lt;logn;x++) for(int i = 1;i&lt;=n;i++) S[x].insert(i); for(int i = 0;i&lt;logn;i++) S[i].insert(0),S[i].insert(n+1); for(int i = 1;i&lt;=n;i++){ scanf(\"%lld\",&amp;num[i]); update(i,num[i]); }}void solve(){ int v,p; for(int i = 1;i&lt;=m;i++){ scanf(\"%lld %lld\",&amp;p,&amp;v); update(p,v); printf(\"%lld\\n\",ANS); }}signed main(){ init(); solve(); return 0;}","link":"/20181231-CF400E/"},{"title":"「CF369E」Valera and Queries-线段树","text":"有 $n$ 条线段，分别为 $[l_i,r_i]$ 。 有 $m$ 个询问，分别为 $cnt_i,p_1,p_2,…,p_{cnt_i}$ 对于每个询问，输出有多少线段至少覆盖这 $cnt_i$ ​个点中的一个。（$\\sum cnt_i \\le 3 \\cdot 10^5$） 链接Codeforces 题解我们可以考虑一个点的贡献会出现在哪些区间。 我们最大的问题是每个区间可能被多个点在内，我们如果按照每个点在内（左端点在左，右端点在右）的话，会重复统计一些区间。 我们考虑用唯一性确定这个贡献，用最左侧的点给区间计算贡献。所以我们每个点可能生发出贡献的区间是从左边的上一个点右边一直到这个点右边最右侧位置。 我们可以考虑用扫描线计算这个东西，我们考虑对每次给出的点排序，然后扫描线维护即可。我们可以维护两个BIT/线段树，然后查询区间和即可。 需要 KD Tree 或者树套树或者 CDQ 分治来完成二维数点的任务。 可以线段树套vector解决这个问题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 310000;int n,m,cnt = 0;struct Line{ int l,r; bool operator &lt; (const Line x)const{ if(l != x.l) return l &lt; x.l; else return r &lt; x.r; }}a[MAXN];int t[MAXN],back[MAXN];map&lt;int,int&gt; S;void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d\",&amp;a[i].l,&amp;a[i].r); S[a[i].l] = 0; } sort(a+1,a+n+1); for(auto it = S.begin();it!=S.end();it++){ it-&gt;second = ++cnt; back[cnt] = it-&gt;first; }}namespace SegTree{ vector&lt;int&gt; v[MAXN&lt;&lt;2]; #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) void build(int nown,int l,int r,int *a){ for(int i = l;i&lt;=r;i++) v[nown].push_back(a[i]); sort(v[nown].begin(),v[nown].end()); if(l == r) return; else build(lson,l,mid,a),build(rson,mid+1,r,a); } int a,b; void query(int nown,int l,int r,int ql,int qr,int &amp;ans){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ ans += upper_bound(v[nown].begin(),v[nown].end(),b) - lower_bound(v[nown].begin(),v[nown].end(),a); } else{ if(ql &lt;= mid) query(lson,l,mid,ql,qr,ans); if(qr &gt;= mid+1) query(rson,mid+1,r,ql,qr,ans); } } int query(int n,int x1,int x2,int y1,int y2){ if(x1 &gt; x2) return 0; a = y1,b = y2; int ans = 0; query(1,1,n,x1,x2,ans); return ans; }}void build(){ static int tmp[MAXN]; for(int i = 1;i&lt;=n;i++){ tmp[i] = a[i].r; } for(int i = 1;i&lt;=n;i++){ t[i] = back[S[a[i].l]]; } SegTree::build(1,1,n,tmp);}int s[MAXN];int getval(int x){ return upper_bound(t+1,t+n+1,x) - t;}void solve_case(){ int p; scanf(\"%d\",&amp;p); for(int i = 1;i&lt;=p;i++) scanf(\"%d\",&amp;s[i]); sort(s+1,s+p+1); s[0] = -1e9; int ans = 0; for(int i = 1;i&lt;=p;i++){ ans += SegTree::query(n,getval(s[i-1]),getval(s[i])-1,s[i],1e9); } printf(\"%d\\n\",ans);}void solve(){ for(int i = 1;i&lt;=m;i++){ solve_case(); }}int main(){ init(); build(); solve(); return 0;}","link":"/20181229-CF369E/"},{"title":"「CF452E」Three strings-后缀数组","text":"给出三个仅由小写字母构成的串 $A, B, C$ ，对于每个 $L \\in [1, \\min(len_A,len_B,len_C)]$ ，求满足$A[a,a+L-1] = B[b,b+L-1] = C[c,c+L-1]$ 的三元组 $(a,b,c)$ 的数量。 答案对$1000000007 (10 ^ 9 + 7)$ 取模，字符总数小于 $3\\times10^5$。 链接Codeforces 题解把三个串接在一起（中间有间隔符），上后缀数组，求出 $ht$ 数组，然后用并查集按照 $ht$ 从大到小合并，合并过程中维护区间中属于第一个、第二个、第三个字符串的位置个数，然后合并时更新贡献即可。 时间复杂度 $O(n \\log n)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int mod = 1e9+7;const int MAXN = 340000;namespace SA{ int s[MAXN],sa[MAXN],cnt[MAXN],rk[MAXN],x[MAXN],y[MAXN],ht[MAXN]; void get_sa(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i=n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] == s[sa[i-1]]?m:++m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i=0,k=j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i]-j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i =n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]] == y[sa[i-1]] &amp;&amp; y[sa[i]+j] == y[sa[i-1]+j])?m:++m; } } void getheight(int n){ for(int i = 0,h = ht[0] = 0;i&lt;n;i++){ int j = sa[rk[i]-1]; while(i+h &lt; n &amp;&amp; j+h &lt; n &amp;&amp; s[i+h] == s[j+h]) h++; ht[rk[i]] = h; if(h) h--; } } void solve(int *str,int n){ for(int i = 0;i&lt;n;i++) s[i] = str[i]; get_sa(++n,200); getheight(n); }}ll ANS = 0,ans[MAXN];namespace BCJ{ int f[MAXN],num[MAXN][4]; void init(int n,int *own){ for(int i = 0;i&lt;=n;i++) f[i] = i,num[i][own[i]] = 1; } int find(int x){ return f[x] == x?x:f[x] = find(f[x]); } int cal(int x){ return 1LL * num[x][1] * num[x][2] * num[x][3] % mod; } void merge(int x,int y){ int fx = find(x),fy = find(y); if(fx == fy) return; ANS -= cal(fx),ANS -= cal(fy); f[fx] = fy; for(int i = 1;i&lt;=3;i++) num[fy][i] += num[fx][i]; ANS += cal(fy); ANS = (ANS%mod); if(ANS &lt; 0) ANS += mod; }}int ss;int S[MAXN];int own[MAXN];void addchar(int c,int x = 0){own[ss] = x;S[ss] = c;ss++;} int l1,l2,l3;char s1[MAXN],s2[MAXN],s3[MAXN];void init(){ scanf(\"%s\",s1);l1 = strlen(s1); scanf(\"%s\",s2);l2 = strlen(s2); scanf(\"%s\",s3);l3 = strlen(s3); for(int i = 0;i&lt;l1;i++) addchar(s1[i],1); addchar('z'+1); for(int i = 0;i&lt;l2;i++) addchar(s2[i],2); addchar('z'+2); for(int i = 0;i&lt;l3;i++) addchar(s3[i],3); addchar('z'+3);}struct Node{ int pos,v; bool operator &lt; (const Node &amp;x)const{ return v &gt; x.v; }};vector&lt;Node&gt; v;void solve(){ BCJ::init(ss+1,own); SA::solve(S,ss); for(int i = 1;i&lt;ss+1;i++){ v.push_back((Node){i,SA::ht[i]}); } sort(v.begin(),v.end()); int now = 0; int t = min(l1,min(l2,l3)); for(int i = t;i&gt;=1;--i){ while(now &lt; int(v.size())-1 &amp;&amp; v[now].v &gt;= i){ int tmp = v[now].pos; BCJ::merge(SA::sa[tmp],SA::sa[tmp-1]); now++; } ans[i] = ANS; } for(int i = 1;i&lt;=t;i++){ printf(\"%lld \",ans[i]); } printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20181231-CF452E/"},{"title":"「CF379F」New Year Tree-树的直径-倍增","text":"你是一个程序猿，现在有一棵新年树（并不是传统的带着叶子的树）——它有四个节点： $1$ ，$2$ ，$3$ ，$4$ . 其中$2$ ，$3$ ，$4$ 的父亲都是 $1$ . 新年里，程序猿们往往会做一些有趣的事情。你则选择以往这棵树上加节点来取乐。 一个添加节点的操作是这样的： 找到树上的一个叶子结点 $v$ . 设现在树上有 $n$ 个节点，那么你现在会加入两个节点$n+1$ 和 $n+2$ ，它们都会成为 $v$ 的儿子. 你的任务是在做 $q$ 次这样的操作，并在每做完一次后计算一次树的直径。来吧，我们一起来解决这道新年问题吧！ 链接Codeforces 伪题解我们考虑树形dp计算树的直径的过程。 我们如果令 $f[i]$ 为以 $i$ 为根的子树中最长的链的长度，$g[i]$ 为以 $i$ 为根的子树中的直径长度（过根节点），那么就有如下转移： $$f[v] = \\max(f[v_1] + f[v_2]) + 1\\\\g[v] = f[v_1] + f[v_2] + 2$$ 如果我们令 $dep[v]$ 为 $v$ 的深度，那么我们可以将第一个改写如下： $$f[v] = \\max_{v_i \\text{ is in the subtree of } v}(dep[v_i]) - dep[v]$$ 我们可以用倍增在 $O(\\log n)$ 的时间内找到第一个不需要更新的位置，然后在倍增上用 $O(\\log n)$ 的时间内更新 $f$ 值，计算得到 $delta$（每次深度只增加1，所以一定会只有一个delta），然后将 $g$ 修改维护即可。 看了 Tutorial 之后有些自闭，题解给出了一个非常轻松愉悦的办法。 题解我们思考 $\\text{dfs}$ 计算直径的过程，从一个节点找到最远的一个节点，这个节点一定是直径的一个端点，然后我们再进行一遍 $\\text{dfs}$ 最远点就是直径的另一个的端点。 所以我们考虑从根节点进行第一次 $\\text{dfs}$ ，找到最远的第一个节点（事实上是深度最大的节点之一皆可）。 如果我们给一个节点新建了两个子节点，我们发现它们的父亲是当前最远的节点，那么答案一定增加且只增加了 $1$； 否则，答案只有可能被当前最远的节点和新增加的节点之间的距离更新。 那么就可以倍增维护 $\\text{LCA}$ 计算树上距离，在 $O(n \\log n)$ 的时间内解决这个问题。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1001000,logn = 22;int q;int f[MAXN][logn],dep[MAXN],t[MAXN];int lca(int x,int y){ if(dep[x] &lt; dep[y]) swap(x,y); for(int i = logn-1;i&gt;=0;--i){ if(dep[f[x][i]] &gt;= dep[y]) x = f[x][i]; } if(x == y) return x; for(int i = logn-1;i&gt;=0;--i){ if(f[x][i] != f[y][i]) x = f[x][i],y = f[y][i]; } return f[x][0];}void addnode(int x,int fa){ f[x][0] = fa,dep[x] = dep[fa]+1; for(int i = 1;i&lt;logn;i++){ f[x][i] = f[f[x][i-1]][i-1]; }}int caldis(int x,int y){ return dep[x] + dep[y] - 2 * dep[lca(x,y)];}void init(){ scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++) scanf(\"%d\",&amp;t[i]);}void solve(){ dep[1] = 1,dep[2] = dep[3] = dep[4] = 2; f[2][0] = f[3][0] = f[4][0] = 1; int maxdep = 2,maxnode = 2,ans = 2,n = 4; for(int i = 1;i&lt;=q;i++){ int x = t[i]; addnode(++n,x),addnode(++n,x); if(dep[x] == maxdep){ maxdep++,maxnode = n,ans++; } else{ ans = max(ans,caldis(maxnode,n)); } printf(\"%d\\n\",ans); }}int main(){ init(); solve(); return 0;}","link":"/20181230-CF379F/"},{"title":"「CF476E」Dreamoon and Strings-动态规划","text":"Dreamoon 有一个字符串 $s$ 和一个模式串 $p$，他会先从 $s$ 中删除恰好 $x$ 个字符来产生一个新的字符串 $s’$ 。然后他会计算 $occ(s’,p)$，即从 $s’$ 中能找到的等于 pp 的不相交的子串数量的最大值。他想让 $occ(s’,p)$ 的值尽可能大。 更形式地说，让我们用 $ans(x)$ 表示所有可以从 $s$ 中删去恰好 $x$ 个字符得到的 $s’$ 中 $occ(s’,p)$ 的最大值。Dreamoon 想要知道对于所有的 $x$ $(0 \\leq x \\leq |s|)$， $ans(x)$ 的值。 题解这题我用了一个极其麻烦的 $dp$，需要记录四个数组，有一大堆细节，我简略的说下。 $f[i][j]$ 表示在 $s$ 串前 $i$ 位，当前匹配到 $p$ 串第 $j$ 位，$p$ 串最靠右时，第一位的位置。 $h[i]$ 表示在 $s$ 串前 $i$ 位，匹配一个完整的 $p$ 串，$p$ 串最靠右时，需要使这个子序列变成子串的最小代价。 $g[i][j]$ 表示在 $s$ 串的前 $i$ 位，前面出现完整的 $j$ 次 $p$ 串时，第一次出现的 $p$ 串最靠右时，第一次出现的 $p$ 串的第一个位置。 $p[i][j]$ 表示如上条件下的代价是多少。 计算出如上四个数组之后，我们计算出 $\\text{minlen}[i]$ ，意为搞出 $i$ 个 $p$ 串的最小代价。 然后对于每一个 $i$ ，当 $t \\in [\\text{minlen}[i-1],\\text{minlen[i]-1]}$ ， $ans(t) = i$ 。后面还有一些就是逆序的递增数列，如 $…444333222111000$ ，长度取决于最大能搞出来多少个。 反正超级麻烦，但是过掉了2333 时间复杂度和空间复杂度都是 $O(n^2)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 2100;int n,m;char s[MAXN],t[MAXN];int last[MAXN][30];int f[MAXN][MAXN],h[MAXN];int g[MAXN][MAXN],p[MAXN][MAXN];void init(){ scanf(\"%s\",s+1),scanf(\"%s\",t+1); n = strlen(s+1),m = strlen(t+1);}void build(){ static int l[30]; for(int i = 1;i&lt;=n;i++){ for(int c = 0;c&lt;26;c++) last[i][c] = l[c]; l[s[i]-'a'] = i; }}void solve(){ h[0] = 0x3f3f3f3f; for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=m;j++){ if(s[i] == t[j]){ f[i][j] = (j == 1?i:f[i-1][j-1]); if(j == m) h[i] = (i - f[i][m] + 1 - m); } else{ f[i][j] = f[i-1][j]; if(j == m) h[i] = h[i-1]; } if(f[i][j] == f[i-1][j]) h[i] = min(h[i],h[i-1]); } } static int minl[MAXN],ans[MAXN],maxn = 0; memset(minl,0x3f,sizeof(minl)); for(int j = 1;j&lt;=n;j++){ for(int i = 1;i&lt;=n;i++){ if(f[i][m]){ g[i][j] = (j == 1?f[i][m]:g[f[i][m]-1][j-1]); p[i][j] = (j == 1?h[i] :p[f[i][m]-1][j-1] + h[i]); } else{ g[i][j] = g[i-1][j]; p[i][j] = p[i-1][j]; } if(g[i-1][j]) p[i][j] = min(p[i][j],p[i-1][j]); if(g[i][j]){ minl[j] = min(minl[j],p[i][j]); maxn = max(maxn,j); if(p[i][j] == 0) ans[0] = max(ans[0],j); } } } minl[0] = 1,minl[n+1] = 0x3f3f3f3f; for(int i = 1;i&lt;=n;i++){ for(int x = minl[i-1];x &lt;= min(minl[i]-1,n);x++) ans[x] = i-1; } for(int i = n;i&gt;=1;--i){ if((n-i+1) &gt; maxn * (m)+1) break; ans[i] = ((i + m &gt; n)?0:ans[i+m]+1); } for(int i = 0;i&lt;=n;i++) printf(\"%d \",ans[i]); printf(\"\\n\");}int main(){ init(); build(); solve(); return 0;}","link":"/20190211-CF476E/"},{"title":"「CF486E」LIS of Sequence-简单数据结构","text":"给你一个长度为 $n$ 的序列 $a_1,a_2,…,a_n$ ，你需要把这 $n$ 个元素分成三类：$1,2,3$，每类的条件如下： 所有的最长上升子序列都不包含这个元素 有但非所有的最长上升子序列包含这个元素 所有的最长上升子序列都包含这个元素 链接Codeforces 题解由普通 $\\text{LIS}$ 的 $O(n \\log n)$ 算法扩展得到这个问题的 $O(n \\log n)$ 的解法。 在原来的 LIS 过程中，我们只维护 $f[i]$ 为某值时， $a_i$ 的值最小为多少。现在我们将这些 $a_i$ 通通扔到 $n$ 个 vector 里面（而不是取 $\\max$ ），可以发现，在每个 vector 里面，我们的 $a[i]$ 应当是单调递减的（我们将每个 vector 里面最后一个数当作普通 LIS 里面的数组的数）。 然后我们考虑如何计算方案数。 我们二分得到应当考虑的 $f[i]$ 的值，然后在这个 vector 里面二分得到一个位置，然后用另一个 vector 里面维护的前缀和计算得到这个能从多少种 $f[i]-1$ 的方案转移过来。最后我们要扫一遍全数组，得到全部的 LIS 条数。 为什么我们要计算方案数呢？因为这样可以计算出 $F1_i,F2_i$ （恰好以 $i$ 结尾、开始的最长 LIS 长度）， $G1_i,G2_i$ （上述 LIS 的个数）。这个时候我们就可以分类了。 我们把这个数列的最长长度称为 $\\mathrm{MAXLEN}$ ，总共的 LIS 条数记作 $\\mathrm{tot_cnt}$ 如果 $F1[i] + F2[i] - 1 &lt; \\mathrm{MAXLEN}$，则该类型是 $1$ ； 如果 $G1[i] * G2[i] = \\mathrm{tot_cnt}$，则该类型是 $3$ ； 否则，该类型是 $2$ 。 这里的 $G$ 会很大，如何判断相等？本来想用自然溢出，后来考虑到因为都是乘法，很有可能在 $\\bmod 2^{64}$ 意义下同余，所以对一个大质数 $10^9+9$ 取模。（事实上这里两个取模甚至更多会更好，但数据并不是很强） 时间复杂度是 $O(n \\log n)$ 。 代码中间有一段复制的，所以事实上要写的也没多少呢… 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const ll mod = 1e9+9;const int MAXN = 210000;int n;int a[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]);}namespace Solve1{int f[MAXN],t[MAXN],now,MAXANS;vector&lt;int&gt; v[MAXN];vector&lt;ll&gt; sum[MAXN];ll g[MAXN],tot[MAXN];void output(int n,int *ff,ll *gg){ for(int i = 1;i&lt;=n;i++)ff[i] = f[i],gg[i] = g[i];}void solve(){ a[0] = 0,f[0] = 0,g[0] = 1,t[0] = 0; v[0].push_back(0),sum[0].push_back(1),tot[0] = 1; now = 0; for(int i = 1;i&lt;=n;i++){ int tmp = lower_bound(t,t+now+1,a[i]) - t; if(tmp == now+1) ++now; f[i] = tmp,t[tmp] = a[i]; int w = upper_bound(v[f[i]-1].begin(),v[f[i]-1].end(),a[i],greater&lt;int&gt;()) - v[f[i]-1].begin(); ll ans = w == 0?0:sum[f[i]-1][w-1]; ans = (tot[f[i]-1] - ans)%mod; g[i] = ans &lt; 0?ans+mod:ans; v[f[i]].push_back(a[i]); tot[f[i]] = (tot[f[i]] + g[i])%mod; sum[f[i]].push_back(tot[f[i]]); MAXANS = max(MAXANS,f[i]); }}}namespace Solve2{int f[MAXN],t[MAXN],now,MAXANS;vector&lt;int&gt; v[MAXN];vector&lt;ll&gt; sum[MAXN];ll g[MAXN],tot[MAXN];void output(int n,int *ff,ll *gg){ for(int i = 1;i&lt;=n;i++)ff[i] = f[i],gg[i] = g[i];}void solve(){ a[n+1] = 1e9,f[n+1] = 0,g[n+1] = 1,t[0] = 1e9; v[0].push_back(1e9),sum[0].push_back(1),tot[0] = 1; now = 0; for(int i = n;i&gt;=1;i--){// 这里相对上面有更改 int tmp = lower_bound(t,t+now+1,a[i],greater&lt;int&gt;()) - t;//这里相对上面有更改 if(tmp == now+1) ++now; f[i] = tmp,t[tmp] = a[i]; int w = upper_bound(v[f[i]-1].begin(),v[f[i]-1].end(),a[i]) - v[f[i]-1].begin();//这里相对上面有更改 ll ans = w == 0?0:sum[f[i]-1][w-1]; ans = (tot[f[i]-1] - ans)%mod; g[i] = ans &lt; 0?ans+mod:ans; v[f[i]].push_back(a[i]); tot[f[i]] = (tot[f[i]] + g[i])%mod; sum[f[i]].push_back(tot[f[i]]); MAXANS = max(MAXANS,f[i]); }}}int F1[MAXN],F2[MAXN];ll G1[MAXN],G2[MAXN];void solve(){ Solve1::solve(),Solve1::output(n,F1,G1); Solve2::solve(),Solve2::output(n,F2,G2); int maxans = Solve1::MAXANS;ll totans = 0; for(int i = 1;i&lt;=n;i++){ if(F1[i] == maxans) totans+=G1[i]; totans %= mod; } for(int i = 1;i&lt;=n;i++){ if(F1[i] + F2[i] - 1 &lt; maxans) printf(\"1\"); else if(G1[i] * G2[i] % mod == totans) printf(\"3\"); else printf(\"2\"); } printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20190101-CF486E/"},{"title":"「CF540E」Infinite Inversions-动态开点线段树","text":"现在有一个由所有正整数组成的无限递增序列： $p = {1,2,3,…}$ 。 对这个序列执行 $n$ 次交换操作。每次一个操作，给出两个整数 $a,b$，交换位置 $a$ 和 $b$ 处的元素。 你的任务是在所有操作结束后，输出最终序列的逆序对个数，即满足 $i &lt; j$ 且 $p_i &gt; p_j$ 的有序数对 $(i,j)$ 的数量。 链接Codeforces 题解我们发现，两个没有经过任何交换的位置之间是不可能产生逆序对的，可能产生逆序对的只有： 换的与没换的 换的与换的 所以我们只需要考虑被换的能产生的逆序对即可，可以发现这样统计是完全的。 我们考虑先用 $map$ 记录交换最后的结果和哪些位置有交换，这块非常简单，时间复杂度是 $O(n\\log n)$ 的。 我们接下来考虑最后数列的逆序对个数。 先考虑第一种情况：换的与没换的产生了逆序对。 对于每一个交换的数，我们考虑两种情况：在其前面，比其大，在其后面，比其大。 我们考虑到换的在1e9范围内比较小，可以开一个动态开点线段树维护哪些位置被x掉了，然后查询区间和就可以知道第一个问题的答案了。 我们考虑第二种情况：两个换了的产生了逆序对。 这种情况下，我们只需要考虑在前面的，比他大的个数即可，本质上是个二维数点问题。 维护扫描线，和动态开点线段树，可以在 $O(n \\log V)$ 时间内解决。 最后时间复杂度： $O(n (\\log V + \\log n))$，空间 $O(n \\log V)$ 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 101000,logn = 35;struct SegTree{ int sumn[MAXN*logn],ls[MAXN*logn],rs[MAXN*logn],cnt = 0; #define mid ((l+r)/2) void update(int &amp;nown,int l,int r,int pos,int v){ if(!nown) nown = ++cnt; if(l == r) sumn[nown] += v; else{ sumn[nown] += v; if(pos &lt;= mid) update(ls[nown],l,mid,pos,v); if(pos &gt;= mid+1) update(rs[nown],mid+1,r,pos,v); } } int query(int nown,int l,int r,int ql,int qr){ if(ql &gt; qr) return qr - ql + 1;//以便后面和负数区间对掉，其余部分最多只会差1，返回0没有锅 if(!nown) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr) return sumn[nown]; else{ int ans = 0; if(ql &lt;= mid) ans += query(ls[nown],l,mid,ql,qr); if(qr &gt;= mid+1) ans += query(rs[nown],mid+1,r,ql,qr); return ans; } }}T1,T2;int n,MAX = 1e9;map&lt;int,int&gt; S; // pos-&gt;valint getval(int x){return S.count(x)?S[x]:x;}void _swap(int a,int b){ int va = getval(a),vb = getval(b); S[a] = vb,S[b] = va;}void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); _swap(a,b); }}ll ans = 0;int rt1,rt2;void solve(){ for(auto it = S.begin();it!=S.end();it++){ T1.update(rt1,1,MAX,it-&gt;first,1); } for(auto it = S.begin();it!=S.end();it++){ int p = it-&gt;first,v = it-&gt;second; ans += ((p-1)-(v+1)+1) - T1.query(rt1,1,MAX,v+1,p-1);//前面比他大的 ans += ((v-1)-(p+1)+1) - T1.query(rt1,1,MAX,p+1,v-1);//后面比他小的 } for(auto it = S.begin();it!=S.end();it++){ int v = it-&gt;second; ans += T2.query(rt2,1,MAX,v+1,MAX); T2.update(rt2,1,MAX,v,1); } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20190101-CF540E/"},{"title":"「CF543C」Remembering Strings-状态压缩dp","text":"给定 $n$ 个长度均为 $m$ 的字符串，再给出一个 $n$ 行 $m$ 列的矩阵 $\\{a_{nm}\\}$。矩阵元素 $a_{ij}$ 代表把第 $i$ 个字符串第 j 个字符改成其它任意字符所需要的代价。 现在要求对于任意一个字符串，总存在某一位置 $j$ 使得该位置上的字符在任意其他字符串该位置的字符不同。 即为对于第 x 个字符串 ，有 $\\exists j \\in [1,m] , \\forall i \\in [1,n],s_{xj} \\neq s_{ij}$ 。 求把所有字符串修改成满足上述要求的字符串的最小代价是多少？ 数据范围： $1 \\le n,m \\le 20,1\\le a_{ij} \\le 10^6$ 。 题解我们发现，无论其他字符串是什么情况，我们总能找到在这一位没有用过的字符，这也是后面dp正确性的保障。 我们状态压缩一波，令 $dp[S]$ 表示在 $S$ 中为 $1$ 的这些都已经好记了的情况下，想要好记还需要多少代价。 我们注意到，它们的更改应当是不会干扰的（我都改到从没人用过的），所以我们每次都考虑最靠左的不是 $1$ 的位置，把它变成 $1$ 。我们依次考虑每列，我们有两种办法： 把这个字符串的这个字符改了 把这个字符串这个位置上所有拥有和它一样的字符的字符串的这个位置都改掉，只剩下一个 a 最大的 分类讨论转移即可。 时间复杂度 $O(m 2 ^ n)$ 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int N = 21,MAXN = (1&lt;&lt;N);int n,m,dp[MAXN];int a[N][N];char s[N][N];int ss[N][N],ms[N][N];// ss 与 s[i][j] 同列相同的集合列表, ms ... 减去最大的 void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++) scanf(\"%s\",s[i]+1); for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=m;j++) scanf(\"%d\",&amp;a[i][j]); for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=m;j++){ ss[i][j] = (1&lt;&lt;(i-1)); ms[i][j] = a[i][j];int sum = a[i][j]; for(int k = 1;k&lt;=n;k++)if(i != k){ if(s[i][j] == s[k][j]){ ss[i][j] |= (1&lt;&lt;(k-1)); ms[i][j] = max(a[k][j],ms[i][j]); sum += a[k][j]; } } ms[i][j] = sum - ms[i][j]; } }}int dfs(int S){ if(dp[S] &lt; inf) return dp[S]; if(S == (1&lt;&lt;n)-1) return 0; int ans = inf,low; for(int i = 1;i&lt;=n;i++){ if((S &amp; (1&lt;&lt;(i-1))) == 0){ low = i;break; } } for(int j = 1;j&lt;=m;j++) ans = min(ans,min( dfs(S|(1&lt;&lt;(low-1))) + a[low][j], dfs(S|ss[low][j]) + ms[low][j])); return dp[S] = ans;}int main(){ init(); memset(dp,0x3f,sizeof(dp)); printf(\"%d\\n\",dfs(0)); return 0;}","link":"/20190215-CF543C/"},{"title":"「CF542D」Superhero's Job - dp + 数论","text":"我们定义$$J(x) = \\sum_{d | x} [\\gcd(x,\\frac{x}{d}) = 1] d$$ 请你求出 $J(x) = A$ 有多少个 $x$ 满足条件。 链接Codeforces 题解我们可以发现，这个 $J(x)$ 是一个积性函数。 所以如果 $x = {p_1}^{k_1}{p_2}^{k_2}\\cdots{p_m}^{k_m}$ ，那么 $J(x) = J({p_1}^{k_1})J({p_2}^{k_2})\\cdots J({p_m}^{k_m}) = ({p_1}^{k_1}+1)({p_2}^{k_2}+1)({p_m}^{k_m}+1)$ 所以问题变成了我们有多少种对 $A$ 形如上面形式的不同分解。 我们考虑求出所有 $A$ 的约数，记为 $d_1,d_2,…,d_n$ 。我们考虑哪些 $p$ 可能用来组成 $A$ 。如果 $p$ 可以被用来组成 $A$ ，那么 $A$ 的约数里面肯定存在一个约数减去 $1$ 之后是 $p$ 的若干次方。 我们把所有的约数减去 $1$ 之后直接分解质因数，这个过程的复杂度大概是： $$\\sqrt 1 + \\sqrt 2 + … + \\sqrt{\\sqrt{n}} + \\sqrt \\frac{n}{1} + \\sqrt{\\frac{n}{2}} + … + \\sqrt{\\frac{n}{n}}$$ 不会证明，但可以过吧（ 然后我们就得到了所有可以组成 A 的质数 $p_1,…,p_k$，这样的质数不会很多，我们发现这样的质数不会超过 $\\sigma_0(n) \\approx \\sqrt[3]{n}$ 。 我们考虑 $dp$ , 令 $dp[i][j]$ 表示使用前 $i$ 个质数拼出来第 $j$ 个约数的方案数。 转移的话，每次加入一个质数，对于所有的 $j$，我们都乘上这个质数若干次，然后更新答案。什么？你说复杂度？不会证不会证，反正能过就行（ 最后 $dp[k][n]$ 就是答案。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 10000;ll A;ll p[MAXN],k,d[MAXN],n;map&lt;ll,int&gt; div_pos;set&lt;ll&gt; vis;ll dp[MAXN];// 滚动数组int main(){ cin &gt;&gt; A; for(ll i = 1;i*i&lt;=A;i++) if(A % i == 0){ d[++n] = i; if(i * i != A) d[++n] = A/i; } sort(d + 1,d + n + 1); // for(int i = 1;i&lt;=n;i++){ // printf(\"%d:%lld\\n\",i,d[i]); // } for(int t = 1;t&lt;=n;t++){ ll x = d[t]; div_pos[x] = t;x -= 1; bool flag = 0; for(ll i = 2;i * i &lt;= x;i++){ if(x % i == 0){ flag = 1; while(x % i == 0) x /= i; if(x == 1 &amp;&amp; !vis.count(i)) p[++k] = i,vis.insert(i); break; } } if(flag == 0 &amp;&amp; x &gt; 1 &amp;&amp; !vis.count(x)) p[++k] = x,vis.insert(x); } sort(p+1,p+k+1); dp[1] = 1; for(int i = 1;i&lt;=k;i++){ for(int j = n;j&gt;=1;j--){ if(dp[j] == 0) continue; for(ll w = p[i];log2(d[j]) + log2(w+1) &lt;= log2(1.5*A);w *= p[i]){ if(div_pos.count(d[j]*(w+1))){ dp[div_pos[d[j]*(w+1)]] += dp[j]; } } } } printf(\"%lld\\n\",dp[n]); return 0;}","link":"/20190302-CF542D/"},{"title":"「CF68D」Half-decay tree-期望瞎搞题","text":"定义一个完全二叉树树高为根节点到叶子节点经过的边数。 给定一个树高为 $h(1 \\le h \\le 30)$ 的完全二叉树，其中第 $x$ 个节点的左儿子为第 $2x$ 个节点，右儿子为第 $2x+1$ 个节点。 现在有 $q(1 \\le q \\le 10^{5})$ 个，分为两种操作： add v e （ $1 \\le v \\le 2^{h+1}-1,1 \\le e \\le 10^4$ ）表示给第 $v$ 个节点的权值加 $e$ decay 操作。我们在这个二叉树里面以等概率选择一个叶子节点，将这个叶子节点到根的路径上所有的边都删去。在删除后，树会形成若干个联通块，我们定义某个联通块的的权值为这个联通块内所有节点的权值之和。我们定义删除后的树的权值为形成的所有联通块的权值的最大值。请你求出这个值的期望。每次删除后会恢复所有删除的边。 链接Codeforces 题解考虑我们在树上随机走出一个路径。我们发现，我们每个地方相当于有两个决策：往左走，往右走，两个的概率是相同的。 我们如果设当前节点为为 $x$，那么往左走的话就会产生一个完全不会更改的联通块（$sum[rs[x]] +v[x]$）。如果存在 $sum[rs[x]] + v[x]\\ge sum[ls[x]]$ 这个时候我们发现，接下来我们怎么走，产生的联通块都不会比已经产生的这个 $sum[rs[x]] + v[x]$ 大。所以我们就不用走 $sum$ 较小的那边了，因为它们的贡献已经可以计算了。 这样的话我们每次决策都可以只走一边，同时计算出剩下的一边的所有答案之和。在走的过程中维护一下已经存在的联通块的最大值即可。 加的话直接暴力在树上维护一个子树和即可。 时间复杂度：$O(q \\times h)$ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000,LOGN = 31;namespace Tree{ int sumn[MAXN*LOGN],ls[MAXN*LOGN],rs[MAXN*LOGN],cnt = 1; void upd(int nown,int v){ static int tmp[40];int ecnt = 0; for(int i = nown;i;i&gt;&gt;=1) tmp[++ecnt] = i&amp;1; int now = 1; for(int i = ecnt-1;i&gt;=0;--i){ sumn[now] += v; if(tmp[i] == 0){ if(!ls[now]) ls[now] = ++cnt; now = ls[now]; } else{ if(!rs[now]) rs[now] = ++cnt; now = rs[now]; } } } double decay(){ int now = 1,nowmax = -1e9; double ans = 0, p = 1; while(now != 0){// now 非空 int lson = sumn[ls[now]],rson = sumn[rs[now]],val = sumn[now] - lson - rson; p *= 0.5; ans += p * max(nowmax,max(lson,rson)+val); if(lson &gt; rson){ nowmax = max(nowmax,rson+val); now = ls[now]; } else{ nowmax = max(nowmax,lson+val); now = rs[now]; } } ans += p * nowmax; return ans; }}int h,q;void init(){ scanf(\"%d %d\",&amp;h,&amp;q);}void solve(){ for(int i = 1;i&lt;=q;i++){ char s[12]; int a,b; scanf(\"%s\",s); if(s[0] == 'a'){ scanf(\"%d %d\",&amp;a,&amp;b); Tree::upd(a,b); } else if(s[0] == 'd'){ printf(\"%.8lf\\n\",Tree::decay()); } }}int main(){ init(); solve(); return 0;}","link":"/20190109-CF68D/"},{"title":"「CF581F」 Zublicanes and Mumocrates - 树形dp","text":"一棵树上有 $n$ 个节点，把每个节点染成黑色或白色，要求叶子节点一半是黑色，一半是白色（保证叶子节点的个数是偶数）。 求在满足要求的情况下，最小的两端颜色不同的边的数量。 链接Codeforces 题解我们考虑树形dp，令 $dp[x][v][0/1]$ 表示节点 $x$ 代表的子树里面，为白色的叶子节点有 $v$ 个，$x$ 节点的颜色是白色（0）还是黑色（1）的情况下，最小的两端颜色不同的边的数量。 然后我们可以用那种 $O(n^2)$ 完成树形 dp 的套路去搞它就可以了。 然后转移的时候还要枚举第三维是 0 还是 1 ，然后计算贡献，不要忘掉（ 这个跟普通的树形dp不太一样，需要在开始的时候多特殊判断一些，而且你加入子树更新dp数组的时候不能遗传这个数组，只能用新算出来的数来更新。 时间复杂度：$O(n^2)$ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 5100;struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}int n;int in[MAXN],siz[MAXN],sum,rt = 0;int dp[MAXN][MAXN][2];// dp[x][v][0/1] v 个白色的void dfs(int x,int fa){ if(in[x] == 1){ siz[x] = 1,dp[x][1][0] = 0,dp[x][0][1] = 0; return; } int f = 0; for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == fa) continue; dfs(v,x); if(f == 0){ for(int k = 0;k &lt;= siz[v];k++){ dp[x][k][1] = min(dp[v][k][0]+1,dp[v][k][1]); dp[x][k][0] = min(dp[v][k][1]+1,dp[v][k][0]); } } else{ for(int j = siz[v] + siz[x];j &gt;= 0;j--){ int tmp[2] = {0x3f3f3f3f,0x3f3f3f3f}; for(int k = 0;k &lt;= min(j,siz[v]);k++){ // dp[x][j-k] 与 dp[v][k] 之间的碰撞和激情 tmp[1] = min(tmp[1],dp[x][j-k][1] + min(dp[v][k][0]+1,dp[v][k][1])); tmp[0] = min(tmp[0],dp[x][j-k][0] + min(dp[v][k][1]+1,dp[v][k][0])); } dp[x][j][0] = tmp[0],dp[x][j][1] = tmp[1]; } } f = 1; siz[x] += siz[v]; }}void init(){ scanf(\"%d\",&amp;n); for(int i = 2;i&lt;=n;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b),addedge(b,a); in[a]++,in[b]++; } for(int i = 1;i&lt;=n;i++){ if(in[i] == 1) sum++; if(in[i] &gt; in[rt]) rt = i; }}void solve(){ if(n == 2){printf(\"1\\n\");return;} memset(dp,0x3f,sizeof(dp)); dfs(rt,0); printf(\"%d\\n\",min(dp[rt][sum/2][0],dp[rt][sum/2][1]));}int main(){ init(); solve(); return 0;}","link":"/20190302-CF581F/"},{"title":"「CF813D」Two Melodies-简单dp","text":"题意给定一个长度为 $n$ 的数组，我们要从中找出两个不相交（不含邮相同元素的）的子序列，要求每个子序列的任意两个相邻元素的差的绝对值为 $1$ 或 在模 $7$ 意义下相同。请你求出这两个子序列长度和的最大值。 题解令 $dp[x][y]$ 表示第一个子序列最后一个元素取到 $x$ ，第二个子序列的最后一个元素取到 $y$ 的最大的和。 $x &lt; y$令 $dp[x][y] = dp[y][x]$ $x = y$显然 $dp[x][y] = 0$ $x &gt; y$$$dp[x][y] = \\max_{0 \\le i &lt; x,i \\neq y}(dp[i][y]+1)$$其中 $i$ 到 $x$ 满足如上条件。 前两个的正确性很好理解，第三个的正确性如何保证呢？我们考虑到虽然我们只更新了第一个，但是我们第一种情况也就交换了两个子序列，所以事实上我们也可以算更新了两个子序列的。 我们这样转移是 $O(n^3)$ 的，不能通过本题。 我们可以优化这个 dp 。我们按照第一维 $y$ 从小到大，第二维 $x$ 从小到大更新。 对于每个 y ，我们可以维护两个数组 $\\text{maxmod[j]},\\text{maxnum[j]}$，分别代表在当前 $y$ 中，（当前计算到 $dp[x][y]$），满足 $0 \\le i &lt; x$ 且 $i \\neq y$ 的最大的 dp 值，而且这些 $a[i]$ 在模 7 的余数（或本身数值）为 $j$ 。 我们发现这样的转移就变成了 $O(1)$ 的。 所以，最后的时间复杂度就变成了 $O(n^2)$ 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 5100,MAXC = 110000;int n,a[MAXN];int dp[MAXN][MAXN];// dp[x][y]int maxnum[MAXC],maxmod[7];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]);}void solve(){ int ans = -1e9; for(int i = 0;i&lt;MAXC;i++) maxnum[i] = -1e9; for(int y = 0;y&lt;=n;y++){ for(int x = 1;x&lt;=n;x++) maxnum[a[x]] = -1e9; for(int i = 0;i&lt;7;i++) maxmod[i] = -1e9; dp[0][y] = dp[y][0]; for(int x = 1;x &lt;= y-1;x++){ dp[x][y] = dp[y][x]; maxnum[a[x]] = max(maxnum[a[x]],dp[x][y]); maxmod[a[x] % 7] = max(maxmod[a[x] % 7],dp[x][y]); } for(int x = y+1;x&lt;=n;x++){ dp[x][y] = -1e9; dp[x][y] = max(dp[x][y],maxnum[a[x]-1] + 1); dp[x][y] = max(dp[x][y],maxnum[a[x]+1] + 1); dp[x][y] = max(dp[x][y],maxmod[a[x]%7] + 1); dp[x][y] = max(dp[x][y],dp[0][y] + 1); maxnum[a[x]] = max(maxnum[a[x]],dp[x][y]); maxmod[a[x] % 7] = max(maxmod[a[x] % 7],dp[x][y]); } for(int x = 1;x&lt;=n;x++){ ans = max(ans,dp[x][y]); } } printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20190129-CF813D/"},{"title":"「CF804D」Expected diameter of a tree-树的直径+乱搞","text":"给定一个含有 $n$ 个点， $m$ 条边的森林。有 $q$ 个询问，每次给出两个点 $u_i,v_i$ ，如果 $u_i$ 在联通块 $A$ 内，$v_i$ 在联通块 $B$ 内，我们随机选择两个点 $a \\in A,b \\in B$ ，我们在 $(a,b)$ 之间连一条边，如果这个连接成后新联通块不构成一个树，输出 $-1$ ，否则输出新联通块树的直径的期望。所有边权均为 $1$ 。 链接Codeforces 题解如果 $u,v$ 在同一个联通块里面，输出 $-1$ 。 我们有一个结论：我们连接 $a,b$ 两点时，我们的直径只可能有两种可能： $\\max($ $A$ 联通块的直径，$B$ 联通块的直径 $)$ $a$ 点出发的最长路径 + $b$ 点出发的最长路径 + 1 （各联通块内） 我们考虑第一个很好求，设其为 $D$。那么我们的答案就是： $$ans_i = \\frac{1}{siz[A] \\times siz[B]}\\sum_{a \\in A,b \\in B} max(D,d(a) + d(b) + 1)$$ 我们令 $d(a) + d(b) + 1 &gt;= D$ 的数对 $(a,b)$ 的数目为 $cnt_i$ ，其（$d(a) + d(b) + 1$）和为 $sum_i$ ，那么化简之后： $$ans_i = \\frac{D \\times (siz[A] \\times siz[B]-cnt_i) + sum_i}{siz[A] \\times siz[B]}$$ 我们现在只需要求出 $cnt_i$ 和 $sum_i$ 。 接下来就是玄幻的过程了。 我们令两个联通块中比较小的联通块为 $A$ ，另一个为 $B$，我们计算 $d$ 数组前缀和之后用二分的办法计算答案，复杂度应当是 $O(siz[A] * log(siz[B]))$（并且用 map 进行记忆化）。 如果 $siz[A] &lt; \\sqrt n$ ，那么我们单次询问的复杂度不会超过 $O(\\sqrt n \\log n)$ ，总体复杂度是 $O(q \\sqrt n \\log n)$ 。 否则 $siz[A] &gt; \\sqrt n$，那么我们记忆化之后，我们注意到满足 $siz[A] &gt; \\sqrt n$ 的树只会有少于 $\\sqrt n$ 个，所以我们每个$siz[A]$ 最多被计算 $O(\\sqrt n)$ 次，所以就可以做到 $O(\\sum siz[A] * \\sqrt n\\log n)$ ，也就是 $O(n \\sqrt n \\log n)$。 所以最后的时间复杂度就是 $O((n+q) \\sqrt n \\log n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;bits/stdc++.h&gt;#define ll long long#define db doubleusing namespace std;const int MAXN = 110000;struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}int n,m,q;int R[MAXN];vector&lt;int&gt; d[MAXN];vector&lt;ll&gt; s[MAXN];int tmp[MAXN];int dis[MAXN],vis[MAXN],col[MAXN],cnt;int maxid;void dfs(int nown,bool is_it_rated = 0,int f = 0){ if(dis[nown] &gt; dis[maxid]) maxid = nown; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == f) continue; dis[v] = dis[nown] + 1; dfs(v,is_it_rated,nown); } if(is_it_rated){ vis[nown] = 1,col[nown] = cnt; tmp[nown] = max(tmp[nown],dis[nown]); }}void getv(int nown,int f = 0){ d[cnt].push_back(tmp[nown]); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == f) continue; getv(v,nown); }}void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;q); for(int i = 1;i&lt;=m;i++){ int u,v; scanf(\"%d %d\",&amp;u,&amp;v); addedge(u,v),addedge(v,u); }}void cal(int x){ ++cnt; d[cnt].push_back(-1e9); int u,v; maxid = 0,dis[x] = 0,dfs(x);u = maxid; dis[u] = 0,dfs(u);v = maxid; R[cnt] = dis[v]; dis[u] = 0,dfs(u,1);dis[v] = 0,dfs(v,1); getv(x); sort(d[cnt].begin(),d[cnt].end()); s[cnt].resize(d[cnt].size()); s[cnt][0] = 0; for(unsigned i = 1;i&lt;s[cnt].size();i++) s[cnt][i] = s[cnt][i-1] + d[cnt][i];}void build(){ dis[0] = -1; for(int i = 1;i&lt;=n;i++){ if(vis[i] == 0) cal(i); }}map&lt;pair&lt;int,int&gt;,double&gt; S;double query(int u,int v){ u = col[u],v = col[v]; if(d[u].size() &gt; d[v].size()) swap(u,v); if(S.count(make_pair(u,v))) return S[make_pair(u,v)]; int D = max(R[u],R[v]); ll us = (int)(d[u].size())-1,vs = (int)(d[v].size())-1; double cnt = 0,sum = 0; for(int i = 1;i &lt;= us;i++){ int T = D - d[u][i] - 1;// 只要大于等于 T 就可以算 cnt int t = lower_bound(d[v].begin(),d[v].end(),T) - d[v].begin(); cnt += db(vs-t+1),sum += db(s[v][vs] - s[v][t-1]) + db(vs-t+1) * (d[u][i]+1); } return S[make_pair(u,v)] = (db(D)*(us*vs-cnt)+sum) / (us*vs);}void solve(){ for(int i = 1;i&lt;=q;i++){ int u,v; scanf(\"%d %d\",&amp;u,&amp;v); if(col[u] == col[v]) printf(\"-1\\n\"); else printf(\"%.10lf\\n\",query(u,v)); }}signed main(){ init(); build(); solve(); return 0;}","link":"/20190215-CF804D/"},{"title":"「CF83D」Numbers-容斥原理","text":"给出三个整数 $l,r,k$( $1 \\le l ≤ r \\le 2\\cdot10^9, 2 \\le k \\le 2 \\cdot 10^9)$。 求在区间 $[l,r]$ 内满足 $k \\mid i$ ， 且对于任意 $j \\in [2,k-1]$ 都不满足 $k \\mid i$ 的数 $i$ 的个数。 链接Codeforces 题解可以发现，问题可以转化为在 $[l,r]$ 中最小质因数是 $k$ 的数的个数。 现将问题差分，变成在 $[1,n]$ 以内最小质因数是 $k$ 的数的个数。 我们考虑转化问题，如果我们令 $f[i]$ 为 $i$ 的最小质因数，那么显然这个可以在线性的时间内筛出来（我们预处理一些，假设到 $\\text{MAX}$ ）。 我们的问题就可以变成： 求出在 $[1,n]$ 中，$f[i] = k$ 的数的个数，明显发现，这个可以转化为在 $[1,\\lfloor\\frac{n}{k}\\rfloor]$ 内， $f[i] \\ge k$ 的数的个数。我们可以对数据进行分治，如果我们发现： 我们可以对数据进行分治，如果我们发现： $\\lfloor\\frac{n}{k}\\rfloor &lt; \\text{MAX}$，直接线性解决这个问题 $\\lfloor\\frac{n}{k}\\rfloor \\ge \\text{MAX}$，这个时候如果我们线性筛筛的比较大，剩下的 $k$ 应该会比较小。这个时候事实上我们要求的是所有 $[1,n]$ 当中有多少个数存在一个小于 $k$ 的质因数，这个东西可以容斥解决。容斥的复杂度是 $2^k$，那么我们应该让线性筛筛出来的东西尽量大即可。而且事实上我们可以加入一个剪枝，也就是一旦你现在要容斥的数已经超过了 $n$ ，就直接 break 掉。 这样的话，复杂度大约是可以过掉的。 实际上可能要调一调线性筛的 $\\text{MAX}$ ，但这个题目时限比较宽松，也是可以过掉的。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 10000000;int prime[MAXN],cnt;bool vis[MAXN];int f[MAXN];// 最小质因数void sieve(){ memset(vis,0,sizeof(vis)); f[1] = 1; for(int i = 2;i&lt;MAXN;i++){ if(vis[i] == 0){ f[i] = i; prime[++cnt] = i; } for(int j = 1;i*prime[j]&lt; MAXN &amp;&amp; j&lt;=cnt;j++){ vis[i*prime[j]] = 1; f[i*prime[j]] = prime[j]; if(i%prime[j] == 0) break; } }}bool is_prime(int k){ int t = sqrt(k); for(int i = 2;i&lt;=t;i++){ if(k % i == 0)return 0; } return 1;}int cal1(int n,int k){ int ans = 0; for(int i = 1;i&lt;=n;i++){ if(i == 1 || f[i] &gt;= k) ans++; } return ans;}int LIM = 0,lim = 0;// LIM 质数个数，lim 为 n/k#define ll long longll ans = 0;void dfs(int p,ll now,ll f){ if(now &gt; lim) return; if(p &gt; LIM) { ans += f * (lim/now);return; } dfs(p+1,now,f); dfs(p+1,now*prime[p],-f);}int cal2(int n,int k){ LIM = 0,lim = n,ans = 0; for(int i = 1;prime[i] &lt; k;i++)LIM++; dfs(1,1,1); return int(ans);}int calc(int n,int k){ if(!n || !is_prime(k)) return 0; if(n/k &lt; MAXN) return cal1(n/k,k); else return cal2(n/k,k);}int l,r,k;int main(){ scanf(\"%d %d %d\",&amp;l,&amp;r,&amp;k); sieve(); printf(\"%d\\n\",calc(r,k) - calc(l-1,k)); return 0;}","link":"/20190109-CF83D/"},{"title":"「CF875E」Delivery Club-二分+贪心","text":"有两个快递员，分别在 $s_1, s_2(0\\le s_1,s_2\\le 10^9)$ 位置。现在有 $n(1\\le n\\le 100000)$ 个任务，需要依次完成，每个任务用一个整数 $x_i$ 表示要将货物送到 $x_i$ 位置，让任何一个快递员到 $x_i$ 都可以。 由于快递员之间需要有对讲机联系，请你设计一种方案使得两个快递员之间的最长距离最短。 链接Codeforces 题解我们考虑二分，然后问题就变成了你能不能在二分的限制条件 $M$ 的间距内完成这个问题。 我们考虑贪心的解决这个问题。如果我们令 $[l_i,r_i]$ 是在走到第 $i$ 个之前的时候，存在合法方案当且仅当存在快递员位于 $[l_i,r_i]$ 而且两个快递员之间距离不超过 $M$ （这样两个快递员都可以移动）。 我们发现 $[l_n,r_n]$ 应该是 $[x_n-M,x_n+M]$ （比较显然）。 那么，这个时候我们已经有了 $[l_{i+1},r_{i+1}]$ ，我们如何推出 $[l_{i},r_i]$ 呢？我们考虑到进行完第 i 个任务之后，必然会有一位老哥位于 $x_i$ ，那么这个时候如果 $x_i$ 在 $[l_{i+1},r_{i+1}]$ 之间，我们只需要满足保证在某老哥走的时候第二个条件时刻满足即可：也就是 $l_i = x_i - M,r_i = x_i+M$ 。 为什么这个是对的呢？我们可以发现，如果一位老哥在这个区间里面，然后剩下一位老哥无论在哪一定可以在满足 $M$ 的限制之下到达 $x_i$ ，然后我们下一轮也就是win的了。 那如果 $x_i$ 不在 $[l_{i+1},r_{i+1}]$ 中呢？那我们考虑有一位老哥就必须在 $[l_{i+1},r_{i+1}]$ 中（因为他必然不动），但是他所在的位置还得满足能够让另一位老哥走到 $x_i$ 也能和他保持联系，所以他必须在 $[x_i-M,x_i+M]$。这两个区间求交之后就是答案。 最后判一下 $[l_1,r_1]$ 就可以了。 时间复杂度： $O(n \\log C)$ 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000;int n,s1,s2,x[MAXN];bool check(int M){ int L = x[n]-M,R = x[n]+M; for(int i = n-1;i&gt;=1;--i){ if(L &lt;= x[i] &amp;&amp; x[i] &lt;= R) L = x[i] - M,R = x[i] + M; else L = max(L,x[i]-M),R = min(R,x[i]+M); } return (L &lt;= s1 &amp;&amp; s1 &lt;= R) || (L &lt;= s2 &amp;&amp; s2 &lt;= R);}int main(){ scanf(\"%d %d %d\",&amp;n,&amp;s1,&amp;s2); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;x[i]); int L = abs(s1-s2),R = 1e9; while(L!=R){int mid = (L+R)/2; if(check(mid)) R = mid; else L = mid+1; } printf(\"%d\\n\",L);}","link":"/20190303-CF875E/"},{"title":"「CF86C」Genetic engineering-AC自动机+dp","text":"我们定义一个 DNA 序列为仅有 ATCG 四个字母的字符串。 给出 $m(1 \\le m \\le 10)$ 个 DNA 序列模式串 $s_i$，每个长度均不超过 $10$ ，我们定义一个 DNA 序列 $w$ 是好的，当且仅当对于 $w$ 的每一个位置 $i$ ，都存在至少一个模式串 $s_j$ ， 使得 $w[l…r] = s_j$（ $w[l…r]$ 表示一个原字符串的一个子串） ， 其中 $1 \\le l \\le i \\le r \\le |w|$（ $|w|$ 为 DNA序列 $w$ 的长度） 。 请你计算出所有长度为 $n(1 \\le n \\le 1000)$ 的好的 DNA 序列的个数。 答案对 $1000000009(10^9+9)$ 取模。 链接Codeforces 题解我们对所有模式串建立 AC 自动机，获取 fail 指针，同时计算fail链上的最长的结束字符串的长度 $l[x]$ ，补全 Trie 图。 设状态如 $dp[\\text{len}][\\text{nownode}][\\text{nowleft}]$ ，其中 $\\text{len}$ 表示还剩余的位数，$\\text{nownode}$ 表示当前在 AC 自动机的哪个点，$\\text{nowleft}$ 表示当前未匹配的后缀长度还有多少。 我们每次枚举下一位填什么。如果我们发现到达的位置可以存在一个覆盖 $\\text{nowleft}$ 的模式串，我们就更新一下 $\\text{nowleft} = 0$ ，否则 $\\text{nowleft}$ 加 1 即可。 如果进行到某个状态，剩下的的后缀大于你最大的字符串的长度，就可以直接返回 0 了。 时间复杂度 $O(n m \\cdot \\text{maxlen}^2)$ 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1005,mod = 1e9+9;namespace AC{ int c[MAXN][5],len[MAXN],maxlen[MAXN],fail[MAXN],cnt,rt; void ins(char *s){ int n = strlen(s); int now = rt; for(int i = 0;i&lt;n;i++){ int a = s[i] - 'a'; if(!c[now][a]) c[now][a] = ++cnt; now = c[now][a]; } len[now] = max(len[now],n); } void getfail(){ queue&lt;int&gt; q; for(int i = 0;i&lt;4;i++){ if(c[rt][i] != 0){ fail[c[rt][i]] = rt; q.push(c[rt][i]); } } while(!q.empty()){ int nown = q.front();q.pop(); for(int i = 0;i&lt;4;i++){ int &amp;v = c[nown][i]; if(v == 0){ v = c[fail[nown]][i]; } else{ fail[v] = c[fail[nown]][i]; len[v] = max(len[v],len[fail[v]]); q.push(v); } } } }}int n,m;int dp[MAXN][105][12];char s[MAXN];int dfs(int len,int nownode,int nowleft){ if(nowleft &gt; 10) return 0; if(dp[len][nownode][nowleft] != -1){ return dp[len][nownode][nowleft]; } if(len == 0 &amp;&amp; nowleft == 0) return 1; else if(len == 0) return 0; int ans = 0; for(int i = 0;i&lt;4;i++){ int v = AC::c[nownode][i]; ans += dfs(len-1,v,(AC::len[v] &gt;= nowleft+1)?0:nowleft+1); ans %= mod; } return dp[len][nownode][nowleft] = ans;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=m;i++){ scanf(\"%s\",s); int t = strlen(s); for(int i = 0;i&lt;t;i++){ if(s[i] == 'A'){s[i] = 'a';} else if(s[i] == 'C'){s[i] = 'b';} else if(s[i] == 'T'){s[i] = 'c';} else if(s[i] == 'G'){s[i] = 'd';} else{printf(\"-1\\n\");} } AC::ins(s); }}void solve(){ AC::getfail(); memset(dp,-1,sizeof(dp)); printf(\"%d\\n\",dfs(n,0,0));}int main(){ init(); solve(); return 0;}","link":"/20190109-CF86C/"},{"title":"「CF91E」Igloo Skyscraper-分块","text":"有 $n$ 个海象（编号为 $1$ 到 $n$ ）参加比赛建造自己的摩天大楼 。在 $t=0$ 时，第 $i$ 个海象的摩天大楼的高度为 $a_i$ 。每一时刻，编号为 $i$ 的海象会完成 $b_i$ 层楼的建造。 在奥运会现场报道的记者向活动组织者提出了 $q$ 次询问。每次询问给出三个数字 $l_i$ ，$r_i$ ，$t_i$。活动组织者用数字 $x$ 回答每个查询，$x$ 满足： 数字 $x$ 位于从 $l_i$ 到 $r_i$ 的区间，即 $l_i \\leq x \\leq r_i$ 。 编号为 $x$ 的海象的摩天大楼在 $t_i$ 时刻拥有编号在 $[l_i,r_i]$ 中所有海象的摩天大楼中的最大高度。 对于每位记者的查询，输出符合上述标准的海象的编号 $x$ 。如果有多个可能的答案，请输出其中任何一个。 链接Codeforces 题解可以采用分块+离线的方法过掉这道题。 每个海象的楼的高度都可以视作一条直线 $y = bx + a$ ，那么我们的问题就变成了找这段区间内的直线在 $x = t$ 处的最大值。 我们注意到，如果我们将所有直线排在一起，那么我们在每一时刻最大值一定来自于一堆斜率递增的直线（就是一个下凸包）。 我们要在块内处理出按照时间顺序可能取到的直线。我们先在块内按斜率 $b$ 从小到大排序，然后去掉 $b$ 相同的直线后。我们可以再用 $O(\\sqrt{n} \\times \\sqrt{n})$ 的时间枚举该条直线下一条应该是哪条后面的直线（判断谁的交点最靠左），然后我们就可以得到这 $O(\\sqrt{n})$ 条直线的下凸包。 得到这个凸包之后，我们可以计算答案。 我们把询问对时间排序，整块判断能不能更新该点的凸包是不是需要下一条直线，零散直接暴力即可。 时间复杂度： $O((m+n) \\sqrt{n})$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;bits/stdc++.h&gt;#define inf 1e18#define pii pair&lt;int,int&gt;using namespace std;const int MAXN = 110000;const int MAXQ = 500;struct Query{ int l,r,t,id; bool operator &lt; (const Query &amp;a)const{ return t &lt; a.t; }}q[MAXN];int n,m,Q;int lb[MAXN],rb[MAXN],bl[MAXN];struct P{ int a,b,id; bool operator &lt; (const P &amp;x) const{ if(b != x.b) return b &lt; x.b; if(a != x.a) return a &gt; x.a; return 0; }}p[MAXN];double calv(P x,int t){ return double(x.a) + double(x.b)*t;}bool cmp(P x,P y,int t){// 前面优，返回1，后面优秀，返回 0 if(calv(x,t) != calv(y,t)) return calv(x,t) &gt; calv(y,t); else return x.b &gt; y.b;}double calj(P x,P y){ if(x.b == y.b) return inf; return double(x.a-y.a)/(y.b-x.b);}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d\",&amp;p[i].a,&amp;p[i].b); p[i].id = i; } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;q[i].l,&amp;q[i].r,&amp;q[i].t); q[i].id = i; } sort(q+1,q+m+1);}vector&lt;P&gt; V[MAXQ];vector&lt;P&gt; tmp;void build(){ Q = sqrt(n); for(int i = 1;i&lt;=n;i++){ bl[i] = (i-1)/Q + 1; if(bl[i] != bl[i-1]) lb[bl[i]] = i,rb[bl[i-1]] = i-1; } rb[bl[n]] = n; for(int x = 1;x&lt;=bl[n];x++){ int L = lb[x],R = rb[x]; for(int i = L;i&lt;=R;i++) V[x].push_back(p[i]); sort(V[x].begin(),V[x].end()); tmp.clear(); tmp.push_back(V[x][0]); for(int i = 1;i &lt; int(V[x].size());i++){ if(V[x][i].b != V[x][i-1].b) tmp.push_back(V[x][i]); } V[x].clear(); V[x].push_back(tmp[0]); for(int i = 0;i &lt; int(tmp.size())-1;){ int t = i; for(int j = i+1;j&lt;int(tmp.size());j++) if(calj(tmp[i],tmp[j]) &lt; calj(tmp[i],tmp[t])) t = j; V[x].push_back(tmp[i = t]); } V[x].push_back(tmp.back()); }}int now[MAXQ];int ans[MAXN];void solve(){ for(int i = 1;i&lt;=m;i++){ int L = q[i].l,R = q[i].r,t = q[i].t; int BL = bl[L],BR = bl[R],tmp = 0; if(BL == BR){ for(int i = L;i&lt;=R;i++) if(cmp(p[i],p[tmp],t)) tmp = i; ans[q[i].id] = tmp; continue; } for(int i = BL+1;i&lt;=BR-1;i++){ while(now[i]+1 &lt; int(V[i].size()) &amp;&amp; calv(V[i][now[i]],t) &lt;= calv(V[i][now[i]+1],t)) now[i]++; if(cmp(V[i][now[i]],p[tmp],t)) tmp = V[i][now[i]].id; } for(int i = L;i&lt;=rb[BL];i++) if(cmp(p[i],p[tmp],t)) tmp = i; for(int i = lb[BR];i&lt;=R;i++) if(cmp(p[i],p[tmp],t)) tmp = i; ans[q[i].id] = tmp; } for(int i = 1;i&lt;=m;i++){ printf(\"%d\\n\",ans[i]); }}int main(){ init(); build(); solve(); return 0;}","link":"/20181223-CF91E/"},{"title":"「CF877F」Ann and Books-莫队","text":"有 $n$ 本书，第 $i$ 本书中有 $a_i$ 个问题，均属于第 $t_i$ 类问题。 有 $q$ 次询问，每次询问给出一个区间 $[l_i,r_i]$ ，询问有多少个原序列的连续子区间是给出区间的子区间，且该子区间中所有书中问题的和满足第 $1$ 类的问题恰好比第 $2$ 类的问题恰好多 $k$ 个。 数据范围： $1 \\le n \\le 10^5$ , $-10^9 \\le k \\le 10^9$, $t_i \\in \\{1,2\\}$ , $0 \\le a_i \\le 10^9$ , $1 \\le q \\le 10^5$ , $1 \\le l_i \\le r_i \\le n$ 链接Codeforces 题解看到离线的区间询问让我们想到莫队（其实是前几天THUWC没做出来签到题让我想到的），然后我们发现我们可以做到相邻的区间转移。这个问题事实上就是前缀和相差 $k$ ，我们用个什么东西（比如 map ）离散化一下所有的sum前缀和，预处理出来每个位置的前缀和减掉和加上 $k$ 之后的离散化后的数字。在莫队的过程中维护一个 $cnt$ 数组，就可以 $O(1)$ 转移了。 时间复杂度：$O(q \\sqrt n + n \\log n )$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 110000;int n,q,Q;int t[MAXN],a[MAXN];ll k,sum[MAXN],A[MAXN],B[MAXN];// A -&gt; -k / B -&gt; +kmap&lt;ll,int&gt; S;int tmpcnt = 0;struct Query{ int l,r,id;}qu[MAXN];bool cmp(Query a,Query b){ if(a.l/Q != b.l/Q) return a.l / Q &lt; b.l / Q; else return ((a.l/Q)&amp;1)?a.r &lt; b.r:a.r &gt; b.r;}void init(){ scanf(\"%d %lld\",&amp;n,&amp;k); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;t[i]); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]); for(int i = 1;i&lt;=n;i++){ sum[i] = t[i] == 1?a[i]:-a[i]; sum[i] += sum[i-1]; S[sum[i]] = 0; } S[0] = 0; for(auto it = S.begin();it != S.end();it++) it-&gt;second = ++tmpcnt; for(int i = 0;i&lt;=n;i++){ if(S.count(sum[i]-k)) A[i] = S[sum[i]-k]; if(S.count(sum[i]+k)) B[i] = S[sum[i]+k]; sum[i] = S[sum[i]]; } Q = sqrt(n); scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++) scanf(\"%d %d\",&amp;qu[i].l,&amp;qu[i].r),qu[i].id = i; sort(qu+1,qu+q+1,cmp);}static int cnt[MAXN],L = 1,R = 0;// 维护 [L-1,R] 的前缀和ll ans = 0;void addL(int pos){ ans += cnt[B[pos-1]];cnt[sum[pos-1]]++;}void addR(int pos){ ans += cnt[A[pos]];cnt[sum[pos]]++;}void delL(int pos){ cnt[sum[pos-1]]--;ans -= cnt[B[pos-1]];}void delR(int pos){ cnt[sum[pos]]--;ans -= cnt[A[pos]];}ll ANS[MAXN];void solve(){ cnt[S[0]] = 1; for(int i = 1;i&lt;=q;i++){ while(qu[i].l &lt; L) addL(--L); while(qu[i].r &gt; R) addR(++R); while(qu[i].l &gt; L) delL(L++); while(qu[i].r &lt; R) delR(R--); ANS[qu[i].id] = ans; } for(int i = 1;i&lt;=q;i++){ printf(\"%lld\\n\",ANS[i]); }}int main(){ init(); solve(); return 0;}","link":"/20190211-CF877F/"},{"title":"「CF990G」GCD Counting-并查集/点分治","text":"给定一个$n$个节点的树，每个点有一个正整数权值$a_i$。我们定义$g(x,y)$为$x,y$之间简单路径上所有点（包括端点）的权值的最大公约数。现在请求出对于所有的$i∈[1,2×10^5]$，满足$1≤x≤y≤n$且$g(x,y)= i$的点对$(x,y)$的数目。 链接Codeforces 990G 题解一个结论：一个数的约数个数不会很多。在$100000000$之内，约数最多的数是$73513440$，有$768$个因子。这大约不是$log$级别的？令它是一个$O(d(n))$级别的吧。 Solution A:容斥原理：所有以$q$为最大公约数的点对的数目等于所有以$q$为公约数的点对数目减去以$2q,3q,…,kq$为最大公约数的点对数目。 所以我们采用逆序计算以$q$为公约数的点对数目，就可以推出以q$$为最大公约数的点对数目。 考虑怎么计算这个问题。如果两个点对的公约数是$q$，那么他们路径上的所有边两端连的点的$gcd$都是$q$或者$q$的倍数，经过的点的权值也一定是$q$或者$q$的倍数。因为权值不大，我们用权值记录点，用$gcd$记录边。考虑到如果把所有的$gcd$为$q$或者$q$的倍数的边全都连起来，这样图里所有联通的点都是满足条件的。所以我们只需要连边，然后维护点对数目。 我们维护一个并查集。记录集合大小。每次先将上述的点初始化，然后把边连上。用一个cnt维护所有联通点对数目，注意一个点也算点对。然后联通集合的时候加上从这端到那端的所有点对就可以了。 来分析一下复杂度。这里的复杂度主要集中在：并查集的初始化（满足条件的点）和并查集的合并（满足条件的边），每个操作都是$O(1)$的，我们考虑一下它会被执行多少次。发现每个点都会被权值的因数初始化一次，所以这个是$O(nd(n))$的。对于边的话也是一样，所以复杂度大约是$O(n d(n))$的。 如果$d(n)$不是很大，那么这个东西过掉问题不大。 Solution B:树上点对的问题让我们想到了点分治。 考虑点分治的过程，我们要计算过当前根点的所有点对的gcd及其数量。根节点的约数个数是O(d)的，那么我们所有数与根节点的$gcd$最多也只能是$O(d)$种。先枚举根节点的所有约数，复杂度是$O(d)$。 对于每个子树我们可以用$O(n)$的时间完成dfs、去重。然后我们有$O(d^2)$的时间完成对所有前面的和现在这个子树的gcd的一一枚举，然后在将这个子树添加到前面去。 然后这个点分治的过程应该是$O(d n log n)$的?复杂度比较迷。 不过能过，跑的很快。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int MAXN = 300000;int gcd(int x,int y){ return y == 0?x:gcd(y,x%y);}namespace BCJ{ int f[MAXN],siz[MAXN]; int find(int x){ return f[x] == x?x:f[x] = find(f[x]); } void un(int x,int y,ll &amp;cur){ int fx = find(x),fy = find(y); if(fx == fy) return; cur -= 1LL*siz[fx]*(siz[fx]+1)/2; cur -= 1LL*siz[fy]*(siz[fy]+1)/2; f[fy] = fx,siz[fx] += siz[fy]; cur += 1LL*siz[fx]*(siz[fx]+1)/2; }}struct Edge{ int u,v;}edge[MAXN];vector&lt;int&gt; V[MAXN];vector&lt;int&gt; E[MAXN];int n,a[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;a[i]); V[a[i]].push_back(i); } for(int i = 1;i&lt;=n-1;i++){ scanf(\"%d %d\",&amp;edge[i].u,&amp;edge[i].v); E[gcd(a[edge[i].u],a[edge[i].v])].push_back(i); }}void solve(){ int maxn = 200000; static ll res[MAXN],cur = 0; for(int i = maxn;i&gt;=1;--i){ cur = 0; for(int j = i;j&lt;=maxn;j+=i){ for(int k = 0;k&lt;V[j].size();k++){ int t = V[j][k]; BCJ::siz[t] = 1,BCJ::f[t] = t; cur++; } if(j &gt; i) res[i] -= res[j]; } for(int j = i;j&lt;=maxn;j+=i) for(int k = 0;k&lt;E[j].size();k++) BCJ::un(edge[E[j][k]].u,edge[E[j][k]].v,cur); res[i] += cur; } for(int i = 1;i&lt;=maxn;i++){ if(res[i]) printf(\"%d %lld\\n\",i,res[i]); }}int main(){ init(); solve(); return 0;} 123456789101112131415161718192021222324252627282930313233343536// 非本人创作#include&lt;bits/stdc++.h&gt;#define gcd(a,b) __gcd(a,b)using namespace std;const int N=2e5+7;typedef long long ll;struct data{int to,next;}e[N&lt;&lt;1];int n,m,i,j,cnt,a[N],d[N],vis[N],head[N],f[N],q[N],qq[N],u,v,root,sum,num[N],Tnum[N],size[N],fr[N],T,tt,tot;ll ans[N];void ins(int u,int v){e[++cnt].to=v;e[cnt].next=head[u];head[u]=cnt;}void insert(int u,int v){ins(u,v);ins(v,u);}void getroot(int x,int fa){ size[x]=1;f[x]=0; for(int i=head[x];i;i=e[i].next)if(e[i].to!=fa&amp;&amp;!vis[e[i].to]) getroot(e[i].to,x),size[x]+=size[e[i].to],f[x]=max(f[x],size[e[i].to]); f[x]=max(f[x],sum-size[x]); if(f[x]&lt;f[root])root=x;}void getdis(int x,int fa){ q[++tt]=d[x]; for(int i=head[x];i;i=e[i].next)if(!vis[e[i].to]&amp;&amp;e[i].to!=fa)d[e[i].to]=gcd(d[x],a[e[i].to]),getdis(e[i].to,x);}void work(int x){ vis[x]=1;T=0; for(int i=head[x],j,k;i;i=e[i].next)if(!vis[e[i].to]){ tot=tt=0;d[e[i].to]=gcd(a[x],a[e[i].to]);getdis(e[i].to,0); for(sort(q+1,q+tt+1),j=1;j&lt;=tt;++j)if(q[j]==q[j-1])num[tot]++;else q[++tot]=q[j],num[tot]=1; for(j=1;j&lt;=tot;++j)for(k=1;k&lt;=T;++k)ans[gcd(q[j],qq[k])]+=1ll*num[j]*Tnum[k]; for(j=1;j&lt;=tot;++j)ans[q[j]]+=num[j]; for(j=1;j&lt;=tot;++j)if(!fr[q[j]])qq[++T]=q[j],Tnum[T]=num[j],fr[q[j]]=T; else Tnum[fr[q[j]]]+=num[j]; }ans[a[x]]++;for(int i=1;i&lt;=T;++i)fr[qq[i]]=0; for(int i=head[x];i;i=e[i].next)if(!vis[e[i].to]) root=0,sum=size[e[i].to],getroot(e[i].to,x),work(root);}int main(){ for(scanf(\"%d\",&amp;n),i=1;i&lt;=n;++i)scanf(\"%d\",a+i);for(i=1;i&lt;n;++i)scanf(\"%d%d\",&amp;u,&amp;v),insert(u,v); f[0]=N;sum=n;root=0;getroot(1,0);work(root); for(i=1;i&lt;N;++i)if(ans[i])printf(\"%d %lld\\n\",i,ans[i]);}","link":"/20180717-CF990G-GCD-Counting/"},{"title":"「CQOI2012」交换棋子-费用流","text":"有一个$n$行$m$列的黑白棋盘，你每次可以交换两个相邻格子（相邻是指有公共边或公共顶点）中的棋子，最终达到目标状态。要求第$i$行第$j$列的格子只能参与$m_{i,j}$次交换。 输出仅一行，为最小交换总次数。如果无解，输出$-1$。 链接Luogu P3159 BZOJ 2886 题解比较难以实现的是对交换次数的限制。注意到如果一个点是起点或者终点，那么它的交换次数应当是奇数，其余的都是偶数，而且是经过这个点的棋子数目的两倍。所以我们可以按照如下方法建图： 对于棋盘上的每个点，我们把它拆成三个点：$A_{i,j},B_{i,j},C_{i,j}$。 对于一个既是起点也是终点的点或者既不是起点也不是终点的点，我们从$A_{i,j}$向$C_{i,j}$和$C_{i,j}$向$B_{i,j}$连一条容量是$\\lfloor \\frac {m_{i,j}}{2} \\rfloor$，费用为$0$的边。 对于一个只是起点的点，我们从起点$S$向$C_{i,j}$连一条容量为$1$，费用为$0$的边。从$A_{i,j}$向$C_{i,j}$连一条容量是$\\lfloor \\frac {m_{i,j} \\, -1}{2} \\rfloor$，费用为0的边。从$C_{i,j}$向$B_{i,j}$连一条容量是$\\lfloor \\frac {m_{i,j} \\, -1}{2} +1 \\rfloor$，费用为$0$的边。 对于一个只是终点的点，我们反过来就可以了。 还需要从$C_{i,j}$向$B_{i,j-1},B_{i-1,j+1}…$，也就是周围的八个点连一条容量是$+\\infty$,费用是$1$的边。 显然这样可以保证个点的交换次数不超过$m_{i,j}$。然后我们求出起点$S$到终点$T$最小费用最大流，如果满流有解，不满流就无解。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 5000,MAXM = 500000;struct Edge{ int from,to; int cap,flow; int cost,nex;}edge[MAXM];int n,m,s,t;int fir[MAXN],ecnt = 2,maxf = 0;int dis[MAXN],instack[MAXN],pree[MAXN];int b[25][25],e[25][25],num[25][25];queue&lt;int&gt; q;int tr(int a,int b){ if(a == 0 || b == 0 || a&gt;n||b&gt;m) return -1; return (a-1)*m+b;}void addedge(int a,int b,int c,int d){ if(a &lt;= 0 || b &lt;= 0 || c == 0) return; edge[ecnt] = (Edge){a,b,c,0,d,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,-d,fir[b]}; fir[b] = ecnt++; }bool spfa(){ memset(dis,0x3f,sizeof(dis)); memset(instack,0,sizeof(instack)); while(!q.empty()) q.pop(); dis[s] = 0;q.push(s); while(!q.empty()){ int nown = q.front();q.pop(); instack[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ Edge e = edge[nowe]; if(dis[e.to] &gt; dis[nown] + e.cost &amp;&amp; e.cap &gt; e.flow){ dis[e.to] = dis[nown] + e.cost; pree[e.to] = nowe; if(instack[e.to] == 0){ q.push(e.to); instack[e.to] = 1; } } } } return dis[t] &lt; 0x3f3f3f3f;}void argument(int &amp;sumf,int &amp;sumc){ int nown = t,limit = 0x3f3f3f3f,nowe; while(nown!=s){ nowe = pree[nown]; limit = min(limit,edge[nowe].cap - edge[nowe].flow); nown = edge[nowe].from; } nown = t; while(nown!=s){ nowe = pree[nown]; edge[nowe].flow += limit,edge[nowe^1].flow -= limit; nown = edge[nowe].from; } sumf += limit,sumc += limit * dis[t];}void init(){ scanf(\"%d %d\",&amp;n,&amp;m);s = 1,t = 2; char tmp[50]; for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",tmp); for(int j = 1;j&lt;=m;j++) b[i][j] = tmp[j-1]^48; } for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",tmp); for(int j = 1;j&lt;=m;j++) e[i][j] = tmp[j-1]^48; } for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",tmp); for(int j = 1;j&lt;=m;j++) num[i][j] = tmp[j-1]^48; }}void build(){ int bb = 0,ee = 0; for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=m;j++){ int tmp = tr(i,j); if(b[i][j] &amp;&amp; !e[i][j]){ num[i][j]-=1; addedge(3*tmp+1,3*tmp+3,num[i][j]/2,0); addedge(3*tmp+3,3*tmp+2,num[i][j]/2+1,0); addedge(s,3*tmp+3,1,0); maxf = max(maxf,++bb); } else if(e[i][j] &amp;&amp; !b[i][j]){ num[i][j]-=1; addedge(3*tmp+1,3*tmp+3,num[i][j]/2+1,0); addedge(3*tmp+3,3*tmp+2,num[i][j]/2,0); addedge(3*tmp+3,t,1,0); maxf = max(maxf,++ee); } else{ addedge(3*tmp+1,3*tmp+3,num[i][j]/2,0); addedge(3*tmp+3,3*tmp+2,num[i][j]/2,0); } addedge(3*tmp+2,3*tr(i-1,j-1)+1,100000,1); addedge(3*tmp+2,3*tr(i+1,j+1)+1,100000,1); addedge(3*tmp+2,3*tr(i+1,j-1)+1,100000,1); addedge(3*tmp+2,3*tr(i-1,j+1)+1,100000,1); addedge(3*tmp+2,3*tr(i,j-1)+1,100000,1); addedge(3*tmp+2,3*tr(i,j+1)+1,100000,1); addedge(3*tmp+2,3*tr(i+1,j)+1,100000,1); addedge(3*tmp+2,3*tr(i-1,j)+1,100000,1); } }}void solve(){ int f = 0,c = 0; while(spfa()) argument(f,c); if(f!=maxf) printf(\"-1\"); else printf(\"%d\\n\",c);}int main(){ init(); build(); solve(); return 0;}","link":"/20180425-CQOI2012-chess/"},{"title":"「CQOI2007」余数求和-数论+分块","text":"给出正整数 $n$ 和 $k$ ，计算$$\\sum_{i=1}^{n} k \\bmod i$$ 链接Luogu P2261 题解推一发式子： $$\\sum_{i=1}^{n} k \\bmod i\\\\= \\sum_{i=1}^{n} k - \\lfloor \\frac{k}{i} \\rfloor \\cdot i\\\\= n k - \\sum_{i=1}^{n} \\lfloor \\frac{k}{i} \\rfloor \\cdot i\\\\$$ 那么，问题就变成我们要求出下式的值： $$\\sum_{i=1}^{n} \\lfloor \\frac{k}{i} \\rfloor \\cdot i$$ 我们发现，这个式子当 $i &gt; k$ 时没啥意义，所以化成： $$\\sum_{i=1}^{\\min(n,k)} \\lfloor \\frac{k}{i} \\rfloor \\cdot i$$ 我们注意到 $\\lfloor \\frac{k}{i} \\rfloor$ 最多只有 $2\\sqrt{n}$ 种取值，所以可以进行数论分块，对于相同的一段取值，我们计算出这段里面的 $\\sum i$ ，就可以在 $O(\\sqrt{\\min(n,k)})$ 的时间内计算出结果了。 代码12345678910111213141516171819202122232425#include &lt;cstdio&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;ll n,k;void init(){ scanf(\"%lld %lld\",&amp;n,&amp;k);}void solve(){ ll ans = n*k; for(ll l = 1,r;l &lt;= n &amp;&amp; l &lt;= k;l = r+1){ r = min((k/(k/l)),n); ans -= (k/l) * (r+l)*(r-l+1)/2; } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180915-CQOI2007-sum/"},{"title":"「CQOI2011」动态逆序对-CDQ分治","text":"对于序列$A$，它的逆序对数定义为满足$i&lt;j$，且$A_i&gt;A_j$的数对$(i,j)$的个数。给$1$到$n$的一个排列，按照某种顺序依次删除$m$个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。 链接BZOJ 3295 Luogu P3157 题解CDQ分治强啊。 这道题可以用树状数组&amp;主席树做，不过很难写。 CDQ分治的话，实现难度上比较低一些吧。 首先，我们转化问题为每次在某个位置添加一个数，并查询能贡献出来的逆序对个数。这个问题和题目是等价的。 然后我们令这个删除的反着的顺序为$id$，其插入的位置为$b$，插入的值为$c$，我们要求的就是在$id \\in [1,id - 1]$的数中，满足$b_j &lt; b_i,c_j &gt; c_i$或者$b_j &gt; b_i,c_j &lt; c_i$的j有多少个。 这个问题我们用CDQ归并解决。先按照id排序，然后对b进行归并，完成后正序和倒序各扫一遍，统计贡献，最后作前缀和即可。 实现有一点点不好写。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;#define ll long longusing namespace std;const int MAXN = 110000;namespace fast_io{ //...}using namespace fast_io;struct Q{ bool w; int id,b,c; // id -&gt; 加入时间 b -&gt; 加入的位置 c -&gt; 这个数的大小 Q(int x,int y,int z):id(x),b(y),c(z){} Q(){} bool operator &lt; (Q w)const{//用于排序 if(id!=w.id) return id &lt; w.id; if(b!=w.b) return b &lt; w.b; return c &lt; w.c; }}q[MAXN];int n,m;int num[MAXN],pos[MAXN],del[MAXN];ll ans[MAXN];// num -&gt; 原数组// pos -&gt; 值对应的位置// del -&gt; 删除第 pos 个数的序顺 namespace BIT{ ll sumn[MAXN]; int lowbit(int x){ return x &amp; (-x); } void add(int x,int d){ while(x &lt;= n) sumn[x] += d,x += lowbit(x); } ll query(int x){ ll ans = 0; while(x &gt;= 1) ans += sumn[x],x -= lowbit(x); return ans; }}void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++){ read(num[i]); pos[num[i]] = i; } int tmp; for(int i = 1;i&lt;=m;i++){ read(tmp); del[pos[tmp]] = i; }}int l,r,tot,tmp[MAXN];inline bool judge(int x,int y){ //判断归并顺序函数 这里因为不重复，可以不写其他维判定 return q[x].b &lt; q[y].b;}void CDQ(int *t,int num){ if(num == 1) return; int mid = num/2; CDQ(t,mid),CDQ(t+mid,num-mid);//分治解决问题 //进行归并 for(l=0,r=mid,tot=0;tot &lt; num;tot++){ if((r==num)||(l&lt;mid &amp;&amp; judge(t[l],t[r])))//这一行的条件易错 q[t[l]].w = 0,tmp[tot] = t[l++]; else q[t[r]].w = 1,tmp[tot] = t[r++]; } for(int i = 0;i&lt;num;i++) t[i] = tmp[i]; //统计id(time)比其小 b(pos)比其小 c(val)比其大的数的个数 for(int i = 0;i&lt;num;i++) if(!q[t[i]].w) BIT::add(q[t[i]].c,1); else ans[q[t[i]].id] += BIT::query(n)-BIT::query(q[t[i]].c); for(int i = 0;i&lt;num;i++) if(!q[t[i]].w) BIT::add(q[t[i]].c,-1); //统计id(time)比其小 b(pos)比其大 c(val)比其小的数的个数 for(int i = num-1;i&gt;=0;--i) if(!q[t[i]].w) BIT::add(q[t[i]].c,1); else ans[q[t[i]].id] += BIT::query(q[t[i]].c-1); for(int i = num-1;i&gt;=0;--i) if(!q[t[i]].w) BIT::add(q[t[i]].c,-1);}void solve(){ int nowcnt = 0; static int tt[MAXN]; for(int i = 1;i&lt;=n;i++){ //遍历每个pos if(del[i] == 0) q[i] = Q(1,i,num[i]); else q[i] = Q(m-del[i]+2,i,num[i]); } sort(q+1,q+1+n); for(int i = 1;i&lt;=n;i++) tt[i] = i; CDQ(tt+1,n); // 前缀和统计答案 for(int i = 1;i&lt;=m+1;i++) ans[i] += ans[i-1]; for(int i = m+1;i&gt;1;--i) print(ans[i]),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180607-CQOI2011-inverse/"},{"title":"「CQOI2014」排序机械臂-Splay","text":"维护一个序列，第$i$次操作时寻找第i小的数的所在位置$Pi$,并将$(P_{i-1},P_{i}]$的\b区间翻转。 如果有相同的数，必须保证排序后它们的相对位置关系与初始时相同。 链接Luogu P3165 题解这道题的大意是区间\b寻找，区间翻转，所以我们\b可以用\bSplay来做，维护一个$size$值和区间翻转的$rev$标记。虽然我前几天还说再也不用Splay了（逃。 注意到每次操作都会使第$i$个数排序完成，所以我们每次的$P_{i}$事实上就是数组下标的$i-1$。 对于区间的寻找，我们注意到可以在开始的时候就记录下来\b第$i$小的数的位置，也就是把他们的指针存在一个\b数组\b里面。 然后在查询的时候，先把第$i-1$大的节点splay到根；找到第$i$小的数对应的节点指针，寻找其在排序二叉树中的后继节点（图中红色节点），然后把\b后继splay到根的右子树。 但注意在实际查找中，\b因为寻找后继会破坏根结点，所以要先找到后继节点，然后再完成上述操作。 然后\b关于位置，我们可以看出，根节点左边（包括根结点），也就是图中的绿色部分应当有$i-1$个数，而其他在$i$左边（包括$i$）的数应该就是图中的蓝色部分，所以只要将蓝色部分的$size$加上一个$i-1$就是每一次操作的结果 翻转就是常规的区间翻转，打标记pushdown什么的。 为了方便满足一些\b\b它的要求，\b我还事先做了\b离散化的处理。（其实并没有什么\b用 另外还有就是我写的时候还因为少push_down了几次被\b坑了\b一下。不过最后一次过评测还是蛮开心的。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;struct wupin{ int id,h;}w[100100];struct splay_t{ struct node_t{ int val,size; bool rev; node_t *p,*son[2],**root,**null; inline bool get_p(){return p-&gt;son[1] == this;} inline void init(node_t **root,node_t **null){this-&gt;null = null,this-&gt;root = root;} inline int lsize(){return son[0]-&gt;size;} inline int rsize(){return son[1]-&gt;size;} inline void update(){size = lsize()+rsize()+1;} inline void link(node_t *dst,int tmp){ dst-&gt;son[tmp] = this; this-&gt;p = dst; } inline void push_down(){ if(this == *null) return; if(rev){ swap(son[0],son[1]); son[0]-&gt;rev^=1,son[1]-&gt;rev^=1; rev = 0; } } inline void rotate(){ p-&gt;push_down(),push_down(); node_t *rp = p;bool re = get_p(); link(rp-&gt;p,rp-&gt;get_p()); son[1-re]-&gt;link(rp,re); rp-&gt;link(this,1-re); rp-&gt;update(),update(); if(p == *null) *root = this; } inline node_t* splay(node_t *tar = NULL){ if(tar == NULL) tar = *null; p-&gt;push_down(),push_down(); while(p!=tar){ if(p-&gt;p == tar) rotate(); else if(p-&gt;get_p() == get_p()) p-&gt;rotate(),rotate(); else rotate(),rotate(); } return this; } inline node_t *upper(){ splay(); node_t *r = son[1]; while(true){ r-&gt;push_down(); if(r-&gt;son[0] == *null) break; r = r-&gt;son[0]; } return r; } }; int cnt; node_t pool[110000],*to[110000],*null,*root; splay_t(){ cnt = 0; null = newnode(); null-&gt;size = 0; } node_t *newnode(int val = 0){ node_t *r = &amp;pool[cnt++]; r-&gt;init(&amp;root,&amp;null); r-&gt;val = val,r-&gt;size = 1,r-&gt;rev = 0; r-&gt;p = r-&gt;son[0] = r-&gt;son[1] = null; return r; } node_t* build(wupin *a,int l,int r){ if(l&gt;r) return null; int mid = (l+r)&gt;&gt;1; node_t *ret = newnode(a[mid].h); to[a[mid].h] = ret; build(a,l,mid-1)-&gt;link(ret,0); build(a,mid+1,r)-&gt;link(ret,1); ret-&gt;update(); return ret; }};splay_t s;int n;bool cmp1(wupin a,wupin b){return a.id&lt;b.id;}bool cmp2(wupin a,wupin b){ if(a.h!=b.h) return a.h&lt;b.h; else return a.id&lt;b.id;}void find(){ for(int i = 1;i&lt;=n;i++){ //找到应操作节点的后继 splay_t::node_t *rbound = s.to[i]-&gt;upper(); //把前面归位好的最后一个节点旋到根节点 s.to[i-1]-&gt;splay(); //把后继旋转到根节点的右儿子 rbound-&gt;splay(s.to[i-1]); //打印位置 printf(&quot;%d &quot;,i + rbound-&gt;lsize()-1); //添加lazy标记 rbound-&gt;son[0]-&gt;rev^=1; }}int main(){ scanf(&quot;%d&quot;,&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(&quot;%d&quot;,&amp;w[i].h); w[i].id = i; } //预处理 sort(w+1,w+n+1,cmp2); for(int i = 1;i&lt;=n;i++) w[i].h = i; sort(w+1,w+n+1,cmp1); w[0].h = 0; w[n+1].h = n+1; //正式操作 s.root = s.build(w,0,n+1); find(); return 0;}","link":"/20180202-CQOI2014-sort/"},{"title":"「CQOI2016」手机号码-数位dp","text":"手机号码是一个有 $11$ 位且不含前导 $0$ 的数。满足条件手机号码的必须同时满足：号码中出现至少 $3$ 个相邻的相同数字；号码中不能同时出现 $8$ 和 $4$ 。 给定两个数 $L$ 和 $R$ ，统计出 $[L,R]$区间内所有满足条件的手机号码的个数。 $L$ 和 $R$ 都是符合定义的手机号码。 链接Luogu P4124 题解这个题用数位dp其实也可以递推。 定义一个状态$dp[i][j][num][is8][is4]$，其中$i$代表需要考虑的是后$i$位；$j$表示倒数第$i+1$位是数码$j$；$num$表示目前的连号是几个（$num = 1,2$），若这个为$3$则代表已经出现了连着三位相同的数字；最后两维分别表示有没有出现$8$和有没有出现$4$。状态储存的值就是符合条件的数的个数。 边界情况就是在 $i == 0$ 的时候。只有 num == 3 且 is8 &amp;&amp; is4 == 0 时，边界才能得 $1$ ；否则就得 $0$ 。 其次转移就好了。枚举下一个数位从 $0$ 到 $9$ ，然后根据新的数位计算出 $num$ ， $is8$ ， $is4$ 等信息，转移就可以了。这里的 $num$ 如果已经为 $3$ ，就算与上一位相同，我们也不再往上加了；如果不是3的话才往上加。 注意在计算状态的时候，要把所有 is8 &amp;&amp; is4 == 1 的情况全都置作$0$。 计算答案的话，就按照普通数位dp的统计方式去统计就可以了：把每一位都拆下来，在每一位都取到所有比这一位小的数，最后再加上最后一个数的情况。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;cstdio&gt;using namespace std;#define ll long long const int MAXN = 12;ll x,y;ll dp[MAXN][MAXN][4][2][2];//dp[i][j][num][is8][is4];//后i位，上一个数字是j，连续出现了num个数，有没有出现8，有没有出现4void init(){ scanf(\"%lld %lld\",&amp;x,&amp;y);}void solve(){ for(int i = 0;i&lt;=11;i++) for(int j = 0;j&lt;=9;j++) for(int num = 1;num&lt;=3;num++) for(int is8 = 0;is8&lt;=1;is8++) for(int is4 = 0;is4&lt;=1;is4++){ ll &amp;t = dp[i][j][num][is8][is4]; if(i == 0) t = (num==3?1:0);// 边界的判定 else for(int w = 0;w&lt;=9;w++){ t += dp[i-1][w][num==3?3:w==j?num+1:1][is8||(w==8)][is4||(w==4)]; if(is8 &amp;&amp; is4) t = 0; } }}ll cal(ll x){ if (x &lt; 1e10) return 0; int d[20],cnt = 0; while(t) d[++cnt] = x%10,x/=10; d[cnt+1] = 0; ll ans = 0;int num = 0,is8 = 0,is4 = 0; for(int i = cnt;i&gt;=1;--i){ for(int j = 0;j&lt;d[i];j++) ans += dp[i-1][j][num==3?3:d[i+1]==j?num+1:1][(j==8)||is8][(j==4)||is4]; // 该位小于限定数 num = (num == 3?3:d[i]==d[i+1]?num+1:1); is8 |= d[i] == 8; is4 |= d[i] == 4; } ans -= dp[10][0][1][0][0];//减去存在前缀0的情况 ans += dp[0][d[1]][num][is8][is4]; return ans;}void getans(){ ll ans = cal(y)-cal(x-1); printf(\"%lld\\n\",ans);}int main(){ init(); solve(); getans(); return 0;}","link":"/20180619-CQOI2016-phone/"},{"title":"「CQOI2018」异或序列-莫队","text":"已知一个长度为 $n$ 的整数数列 $a_1,a_2,…,a_n$ ，给定查询参数 $l$ 、 $r$ ，问在 $a_l,a_{l+1},…,a_r$ ​区间内，有多少子序列满足异或和等于 $k$ 。也就是说，对于所有的 $x,y$ $(l \\leq x \\leq y \\leq r)$ ，能够满足 $a_x \\bigoplus a_{x+1} \\bigoplus … \\bigoplus a_y = k$ 的 $x,y$ 有多少组。 链接Luogu P4462 题解考虑到这题没有修改，而且是区间查询问题，所以我们可以考虑一下莫队算法。 如果我们用莫队的话，那么应该让这个数对 $(x,y)$ 的数目能够在 $O(1)$ 的时间维护。 因为异或有结合律，以及 $a\\bigoplus a = 0$ ，所以如果我们令 $S_i = a_1 \\bigoplus a_2 \\bigoplus … \\bigoplus a_i$ ，那么 $a_x \\bigoplus a_{x+1} \\bigoplus … \\bigoplus a_y$ 就等于 $S_y \\bigoplus S_{x-1}$。 这个时候如果我们令 $T_i = S_{i-1} \\bigoplus k(S_0 = 0)$ ， 那么 $(x,y)$ 是合法数对的条件就化作 $S_y = T_x$ 。 那么问题转化为在 $l \\leq x\\leq y \\leq r$ 的区间内，有多少对 $(x,y)$ 满足 $T_x = S_y$ ，其中的 $\\{T_n\\}$ 和 $\\{S_n\\}$ 都可以 $O(n)$ 的计算。 莫队套套套，记录一下在当前区间每个数在 $\\{T_n\\}$ 和 $\\{S_n\\}$ 中出现次数，转移的时候注意分左右讨论一下就好了。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495// luogu-judger-enable-o2#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;const int MAXN = 110000;int n,m,k,Q;int num[MAXN];int xor1[MAXN],xor2[MAXN];ll ans[MAXN];struct Query{ int l,r,id; bool operator &lt;(const Query _q)const{ if(l/Q != _q.l/Q){ return l/Q &lt; _q.l/Q; } else{ return r &lt; _q.r; } }}q[MAXN];void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k); Q = sqrt(n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;num[i]); } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;q[i].l,&amp;q[i].r); q[i].id = i; } sort(q+1,q+m+1);}void build(){ for(int i = 1;i&lt;=n;i++){ xor1[i] = xor1[i-1] ^ num[i]; xor2[i] = xor2[i-1] ^ num[i]; } for(int i = 0;i&lt;=n;i++) xor2[i] ^= k; for(int i = n;i&gt;=0;i--) xor2[i+1] = xor2[i];}ll ANS = 0;ll num1[MAXN],num2[MAXN];void addl(int pos){ num1[xor1[pos]]++; num2[xor2[pos]]++; ANS += num1[xor2[pos]];}void addr(int pos){ num1[xor1[pos]]++; num2[xor2[pos]]++; ANS += num2[xor1[pos]];}void dell(int pos){ ANS -= num1[xor2[pos]]; num1[xor1[pos]]--; num2[xor2[pos]]--;}void delr(int pos){ ANS -= num2[xor1[pos]]; num1[xor1[pos]]--; num2[xor2[pos]]--; }void solve(){ int L = 1,R = 0; for(int i = 1;i&lt;=m;i++){ while(q[i].l &lt; L) addl(--L); while(R &lt; q[i].r) addr(++R); while(L &lt; q[i].l) dell(L++); while(q[i].r &lt; R) delr(R--); ans[q[i].id] = ANS; } for(int i = 1;i&lt;=m;i++){ printf(\"%lld\\n\",ans[i]); } }int main(){ init(); build(); solve(); return 0;}","link":"/20180914-CQOI2018-xor-sequence/"},{"title":"「CQOI2018」破解D-H协议-BSGS算法","text":"简单题意： 给定一个质数 $P$ 和其原根 $g$，给定 $X$ 求 $g^x \\equiv X \\pmod p$ 的非负整数解 $x$。 假定通讯双方名为 $\\text{Alice}$ 和 $\\text{Bob}$ ，协议的工作过程描述如下(其中 $\\bmod$ 表示取模运算) : 协议规定一个固定的质数 $P$ ，以及模 $P$ 的一个原根 $g$ 。 $P$ 和 $g$ 的数值都是公开的，无需保密。 $\\text{Alice}$ 生成一个随机数 $a$ ，并计算 $A=g^a \\bmod P$, 将 $A$ 通过不安全信道发送给Bob。 $\\text{Bob}$ 生成一个随机数 $b$ ，并计算 $B=g^b \\bmod P$ ，将 $B$ 通过不安全信道发送给 $\\text{Alice}$ 。 $\\text{Bob}$ 根据收到的 $A$ 计算出 $K=A^b\\bmod P$ ，而 Alice 根据收到的 $B$ 计算出$K=B^a\\bmod P$。 双方得到了相同的 $K$ 即 $g^{ab} \\bmod P$。 $K$ 可以用于之后通讯的加密密钥。 可见，这个过程中可能被窃听的只有 $A,B$ ，而 $a,b,K$ 是保密的。并且根据 $A,B,P,g$ 这 $4$ 个数，不能轻易计算出 $K$ ，因此 $K$ 可以作为一个安全的密钥。 当然安全是相对的，该协议的安全性取决于数值的大小，通常 $a,b,P$ 都选取数百位以上的大整数以避免被破解。然而如果 $\\text{Alice}$ 和 $\\text{Bob}$ 编程时偷懒，为了避免实现大数运算，选择的数值都小于 $2^{31}$ ，那么破解他们的密钥就比较容易了。 链接Luogu P4454 题解$\\text{BSGS}$ 模版题，甚至连分类讨论都没有… 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;map&gt;#define ll long longusing namespace std;ll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b);}ll pow(ll x,ll k,ll p){ x %= p; ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x=x*x%p) if(i &amp; 1) ans = ans * x % p; return ans;}ll bsgs(ll a,ll b,ll p){ //printf(\"a:%lld b:%lld P:%lld\\n\",a,b,p); a %= p,b %= p; if(b == 1) return 0; ll cnt = 0,t = 1; for(ll g = gcd(a,p);g!=1;g = gcd(a,p)){ if(b % g) return -1; a /= g,p /= g, t = t * a/g % p; cnt++; if(t == b) return cnt; } map&lt;ll,ll&gt; S; ll m = (ll)(sqrt(p)) + 1; ll base = b; for(ll i = 0;i&lt;m;i++){ S[base] = i; base = base * a % p; } ll now = t; base = pow(a,m,p); for(ll i = 1;i&lt;=m+1;i++){ now = now * base % p; if(S.count(now)){ return i*m-S[now]+cnt; } } return -1;}ll n;ll p,G;ll cal(ll A,ll B){ ll a = bsgs(G,A,p),b = bsgs(G,B,p); //printf(\"a:%lld b:%lld\\n\",a,b); return pow(G,a*b,p); }void init(){ scanf(\"%lld %lld\",&amp;G,&amp;p);}void solve(){ scanf(\"%lld\",&amp;n); for(int i = 1;i&lt;=n;i++){ ll a,b; scanf(\"%lld %lld\",&amp;a,&amp;b); printf(\"%lld\\n\",cal(a,b)); }}int main(){ init(); solve(); return 0;}","link":"/20180914-CQOI2018-crack/"},{"title":"「CTSC2012」熟悉的文章-广义后缀自动机","text":"为了有说服力地向阿米巴展示阿米巴的作文是多么让人觉得“眼熟”，小强想出了一个评定作文 “熟悉程度”的量化指标：$L_0$ .小强首先将作文转化成一个 $01$ 串。之后，小强搜集了各路名家的文章，同样分别转化成 $01$ 串后，整理出一个包含了 $M$ 个 $01$ 串的“ 标准作文库 ”。 小强认为：如果一个 $01$ 串长度不少于 $L$ 且在 标准作文库 中的某个串里出现过（即，它是 标准作文库 的 某个串 的一个 连续子串 ），那么它是“ 熟悉 ”的。对于一篇作文（一个 $01$ 串）A，如果能够把 A 分割成若干段子串，其中“ 熟悉 ” 的子串的 长度总和 不少于 A 总长度的 $90\\%$，那么称 A 是 “ 熟悉的文章 ”。 $L_0$ 是能够让 $A$ 成为 “ 熟悉的文章 ” 的 所有 $L$ 的最大值 （如果不存在这样的 $L$ ，那么规定 $L_0 = 0$ ）。 链接Luogu P4022 题解我们注意到首先外面可以套一个二分，单调性显然成立。 我们需要对这个地方所有的标准作文库建立一个广义 SAM （或者串一起也可以，基本上是等价的）。 然后我们的问题变成了存在性问题：是否存在一种分割方案，其中熟悉的子串的长度均不小于 $L$ 且在标准作文库里面出现过，且和大于 $90\\%$ 。 我们用一个 $dp[i]$ 表示在这种限制下在 $[1,i]$ 的子串的最大的熟悉的长度，然后我们明显有一个 $O(n^2)$ 的解法（需要预处理我们要判断的作文的每个位置在广义SAM上能够最长匹配的长度，这里用在SAM上跑+暴力跳 Fail 树，判断当前最长是不是在你要符合的区间，理论时间复杂度 $O(n \\log n)$，不会证明）。 猜测存在决策单调性，事实上的确成立。用单调队列维护即可。 所以时间复杂度大约是： $O(n \\log n)$ ~ $O(n \\log^2 n)$ $\\approx O(\\text{能过})$ 。 后缀自动机的题啊，感觉时间复杂度对就行了，比如NOID1T3。多妙啊！ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 2100000;namespace SAM{ int c[MAXN][2],l[MAXN],fa[MAXN],cnt,last,rt; void init(){rt = last = ++cnt;} int newnode(int x){l[++cnt] = x;return cnt;} int ins(int p,int x){ if(c[p][x]){ int q = c[p][x]; if(l[q] == l[p] + 1) last = q; else{ int nq = newnode(l[p]+1);last = nq; memcpy(c[nq],c[q],sizeof(c[q])); fa[nq] = fa[q];fa[q] = nq; for(;c[p][x] == q;p = fa[p]) c[p][x] = nq; } } else{ int np = newnode(l[p]+1);last = np; for(;p &amp;&amp; (!c[p][x]);p = fa[p]) c[p][x] = np; if(!p) fa[np] = rt; else{ int q = c[p][x]; if(l[q] == l[p]+1) fa[np] = q; else{ int nq = newnode(l[p]+1); memcpy(c[nq],c[q],sizeof(c[q])); fa[nq] = fa[q];fa[q] = fa[np] = nq; for(;c[p][x] == q;p = fa[p]) c[p][x] = nq; } } } return last; } void ins(char *s){ int n = strlen(s),p = rt; for(int i = 0;i&lt;n;i++) p = ins(p,s[i]-'0'); } void calmax(int n,char *s,int *res){ int now = rt,cur = 0; for(int i = 0;i&lt;n;i++){ int x = s[i] - '0'; if(c[now][x]){ cur++,now = c[now][x]; } else{ while(now &amp;&amp; !c[now][x]) now = fa[now]; if(now == 0) now = rt,cur = 0; else cur = l[now] + 1,now = c[now][x]; } res[i+1] = cur; } }}int n,m;char s[MAXN];int maxlen[MAXN];int dp[MAXN];int q[MAXN],fi,la;bool check(int n,int L){// 长度为 L 的情况下是否可以实现 fi = 0,la = -1; for(int i = 0;i &lt; L;i++) dp[i] = 0; for(int i = L;i &lt;= n;i++){ // printf(\"%d:%d\\n\",i,maxlen[i]); dp[i] = dp[i-1]; while(fi &lt;= la &amp;&amp; dp[q[la]] + (i-q[la]) &lt;= dp[i-L] + (i-(i-L))) la--; q[++la] = i-L; while(fi &lt;= la &amp;&amp; q[fi] &lt; i - maxlen[i]) fi++; if(fi &lt;= la) dp[i] = max(dp[i],dp[q[fi]] + (i-q[fi])); } // printf(\"%d\\n\",dp[n]); return dp[n] * 10 &gt;= n * 9;}int cal(char *s){ int n = strlen(s); SAM::calmax(n,s,maxlen); int L = 1,R = 1000000; while(L != R){ int mid = (L+R+1)/2; if(!check(n,mid)){ R = mid-1; } else{ L = mid; } } return L;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); SAM::init(); for(int i = 1;i &lt;= m;i++){ scanf(\"%s\",s); SAM::ins(s); }}void solve(){ for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s); printf(\"%d\\n\",cal(s)); }}int main(){ init(); solve(); return 0;}","link":"/20190118-CTSC2012-familiar/"},{"title":"「CTSC2018」混合果汁-整体二分","text":"小 R 热衷于做黑暗料理，尤其是混合果汁。 商店里有 $n$ 种果汁，编号为 $0,1,\\cdots,n-1$ 。$i$ 号果汁的美味度是 $d_i$ ，每升价格为 $p_i$​ 。小 R 在制作混合果汁时，还有一些特殊的规定，即在一瓶混合果汁中，$i$ 号果汁最多只能添加 $l_i$ 升。 现在有 $m$ 个小朋友过来找小 R 要混合果汁喝，他们都希望小 R 用商店里的果汁制作成一瓶混合果汁。其中，第 $j$ 个小朋友希望他得到的混合果汁总价格不大于 $g_j$ ，体积不小于 $L_j$​ 。在上述这些限制条件下，小朋友们还希望混合果汁的美味度尽可能地高，一瓶混合果汁的美味度等于所有参与混合的果汁的美味度的最小值。请你计算每个小朋友能喝到的最美味的混合果汁的美味度。 链接Luogu P4602 题解这个题可以整体二分。 对 $d$ 进行 $\\text{sort}$ 后，我们可以用 $\\text{multiset}$ 维护前缀的果汁按照 $p$ 排序之后的顺序，然后把当前询问按照 $g$ 排序，逐步加入每种果汁，判断是否可以达成 $l$ 的体积作为二分依据。 假装复杂度大约是 $O(n \\log^2 n)$。 反正可过。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// Code By Chen Qiqian on 2018.10.16#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 210000;int n,m;struct Node{ ll d,p,l; bool operator &lt; (const Node &amp;a)const{ if(d != a.d) return d &gt; a.d; else return p &lt; a.p; }}t[MAXN];bool cmp(const int &amp;a,const int &amp;b){ if(t[a].p != t[b].p) return t[a].p &lt; t[b].p; else return t[a].l &lt; t[b].l;}struct Query{ ll g,l,id;}q[MAXN];int ans[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ ll a,b,c; scanf(\"%lld %lld %lld\",&amp;a,&amp;b,&amp;c); t[i] = (Node){a,b,c}; } sort(t+1,t+n+1); for(int i = 1;i&lt;=m;i++){ scanf(\"%lld %lld\",&amp;q[i].g,&amp;q[i].l); q[i].id = i; }}int a1[MAXN],a2[MAXN];struct T{ ll p,l; bool operator &lt; (const T &amp;w)const{ if(p != w.p) return p &lt; w.p; else return l &lt; w.l; }};multiset&lt;T&gt; K;int pos = 0;//[1,pos]bool cmp2(const int a,const int b){ return q[a].g &lt; q[b].g;}void solve(int *a,int n1,int l,int r){// *a 存储询问编号 在 [l,r] 果汁内二分 if(n1 == 0) return; if(l == r){ for(int i = 0;i&lt;n1;i++) ans[q[a[i]].id] = t[l].d; return; } // 寻找到最小的需要的 n // d 按从大到小排序 int mid = (l+r)&gt;&gt;1; //判断 1 -&gt; mid 区间是否可以满足限制 (g_i,l_i) //维护multiset使其可以包括 [1,mid] 所有果汁 while(pos &lt; mid){ pos++; K.insert((T){t[pos].p,t[pos].l}); } while(pos &gt; mid){ K.erase(K.lower_bound((T){t[pos].p,t[pos].l})); pos--; } ll G = 0,L = 0,acnt = 0,bcnt = 0; sort(a,a+n1,cmp2); multiset&lt;T&gt;::iterator it = K.begin(); #define xp it-&gt;p #define xl it-&gt;l for(int i = 0;i&lt;n1;i++){ while(it != K.end() &amp;&amp; G + xp * xl &lt;= q[a[i]].g){ G += xp * xl,L += xl; it++; } if(L &gt;= q[a[i]].l || (it != K.end() &amp;&amp; (q[a[i]].l-L) * xp + G &lt;= q[a[i]].g)) a1[acnt++] = a[i]; else a2[bcnt++] = a[i]; } memcpy(a,a1,sizeof(int)*acnt),memcpy(a+acnt,a2,sizeof(int)*bcnt); solve(a,acnt,l,mid),solve(a+acnt,bcnt,mid+1,r); #undef xp #undef xl}void solve(){ static int qq[MAXN]; for(int i = 1;i&lt;=m;i++) qq[i] = i; t[n+1].d=-1;t[n+1].p=0;t[n+1].l=1e18;++n; solve(qq+1,m,1,n); for(int i = 1;i&lt;=m;i++) printf(\"%d\\n\",ans[i]);}signed main(){ init(); solve(); return 0;}","link":"/20181017-CTSC2018-mix/"},{"title":"「HAOI2009」毛毛虫-树形dp","text":"对于一棵树，我们可以将某条链和与该链相连的边抽出来，称其为一个“毛毛虫”。求在这个树中点数最多的毛毛虫的点数。 $n &lt; 300000$ 链接Luogu P3174 题解很简单的一道$dp$题（感觉这个东西像一个$faKe$的$dp$）… 随便找一个根，记录$in[x]$为$x$节点的度，令$d[x]$为从$x$节点向下最长的毛毛虫的边数（含$x$连向其他儿子及其连向父节点的边）。 状态转移方程： $d[x] = \\max(d[v]) + in[x]$ 统计答案的时候，在$dfs$过程中，我们记录其子树里面的最大的两个$d$，最后更新$ans = max(ans,d + d’ + in[x])$。 最后给ans+1。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io{ //...}using namespace fast_io;const int MAXN = 310000;vector&lt;int&gt; edge[MAXN];int n,m,d[MAXN],in[MAXN],ans = 0;void dfs(int nown,int fa){ //d[nown] -&gt; 从nown往下走的最大毛毛虫 int maxa = 0,maxb = -0x3f3f3f3f; for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(v == fa) continue; dfs(v,nown); d[nown] = max(d[nown],d[v]); if(d[v] &gt;= maxa) maxb = maxa,maxa = d[v]; else if(d[v] &gt;= maxb) maxb = d[v]; } ans = max(ans,maxa+maxb+in[nown]); d[nown] += in[nown]-1;}void init(){ read(n),read(m); int a,b; for(int i = 1;i&lt;=m;i++){ read(a),read(b); edge[a].push_back(b); edge[b].push_back(a); in[a]++;in[b]++; }}void solve(){ dfs(1,0); printf(\"%d\\n\",ans+1);}int main(){ init(); solve(); return 0;}","link":"/20180606-HAOI2009-worm/"},{"title":"「HAOI2007」理想的正方形-单调队列","text":"有一个$a \\times b$的整数组成的矩阵，现请你从中找出一个$n\\times n$的正方形区域，使得该区域所有数中的最大值和最小值的差最小，输出这个最小的差值。 链接Luogu P2216 题解单调队列的一道有趣的题。 事实上我们可以发现，需要找出的区域是正方形，而且大小固定，所以我们可以想到用单调队列来解决这个问题。 但这个问题是二维的，怎么把单调队列转化成二维的呢？ 可以这么考虑。用$a$个单调队列维护 每一行在$[j-n+1,j]$的位置中的最大值和最小值。 每次我们计算正方形的最大值或最小值的时候，对于这$a$个单调队列中的最大值或者最小值，我们新开一个单调队列，其中维护在$a$个单调队列中$[i-n+1,i]$这个范围里的最大值或者最小值。然后就可以用最大值减去最小值，并尝试更新答案。 可以证明，复杂度是$O(n^2)$的。 实在偷懒，单调队列用了$deque$，不开O2极慢。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;#define pp pair&lt;int,int&gt;using namespace std;const int MAXN = 1100;namespace fast_io { //...}using namespace fast_io;int n,m,k;int num[MAXN][MAXN];deque&lt;pp&gt; max1[MAXN],min1[MAXN];deque&lt;pp&gt; max2,min2;void init(){ read(n),read(m),read(k); for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=m;j++) read(num[i][j]);}void solve(){ int ans = 0x3f3f3f3f; static int minn[MAXN],maxn[MAXN]; int tmin,tmax; for(int i = 1;i&lt;=n;i++){ //printf(\"i %d:\\n\",i); for(int j = 1;j&lt;=m;j++){ //max while(!max1[j].empty()&amp;&amp;max1[j].begin()-&gt;second &lt; num[i][j]) max1[j].pop_front(); max1[j].emplace_front(i,num[i][j]); while(!max1[j].empty()&amp;&amp;max1[j].rbegin()-&gt;first &lt;= i-k) max1[j].pop_back(); tmax = max1[j].rbegin()-&gt;second; maxn[j] = tmax; //min while(!min1[j].empty()&amp;&amp;min1[j].begin()-&gt;second &gt; num[i][j]) min1[j].pop_front(); min1[j].emplace_front(i,num[i][j]); while(!min1[j].empty()&amp;&amp;min1[j].rbegin()-&gt;first &lt;= i-k) min1[j].pop_back(); tmin = min1[j].rbegin()-&gt;second; minn[j] = tmin; } max2.clear(),min2.clear(); for(int j = 1;j&lt;=m;j++){ //max while(!max2.empty()&amp;&amp;max2.begin()-&gt;second &lt; maxn[j]) max2.pop_front(); max2.emplace_front(j,maxn[j]); while(!max2.empty()&amp;&amp;max2.rbegin()-&gt;first &lt;= j-k) max2.pop_back(); tmax = max2.rbegin()-&gt;second; //min while(!min2.empty()&amp;&amp;min2.begin()-&gt;second &gt; minn[j]) min2.pop_front(); min2.emplace_front(j,minn[j]); while(!min2.empty()&amp;&amp;min2.rbegin()-&gt;first &lt;= j-k) min2.pop_back(); tmin = min2.rbegin()-&gt;second; if(i&gt;=k &amp;&amp; j&gt;=k)//保证解合法 ans = min(tmax-tmin,ans); } } printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180518-HAOI2007-square/"},{"title":"「HAOI2012」高速公路-期望+线段树","text":"Y901高速公路是一条由$N-1$段路以及$N$个收费站组成的东西向的链，我们按照由西向东的顺序将收费站依次编号为$1$~$N$，从收费站$i$行驶到$i+1$(或从$i+1$行驶到$i$)需要收取$V_i$的费用。高速路刚建成时所有的路段都是免费的。 政府部门根据实际情况，会不定期地对连续路段的收费标准进行调整，根据政策涨价或降价。 求对于给定的$l,r(l &lt; r)$,在第$l$个到第$r$个收费站里等概率随机取出两个不同的收费站$a$和$b$，那么从$a$行驶到$b$将期望花费多少费用呢? 链接Luogu P2221 题解位于某个位置的边只会被两个端点分居两边的路径经过，所以我们就可以暴力推式子qwq： $$\\begin{aligned}{}E(l,r) &amp;= \\frac{1}{(r-l-1)(r-l)}\\sum_{i = l}^{r-1}(i-l+1)(r-i)V_i\\\\&amp;= \\frac{1}{(r-l-1)(r-l)}\\sum_{i = l}^{r-1}[-i^2 V_i-(l+r-1)i V_i - r(l-1)V_i]\\end{aligned}$$ 所以需要记录的只有三个东西：$\\sum V_i , \\sum i V_i , \\sum i^2 V_i$。 这三个东西都是可以用线段树维护的（就是O(1)完成打标记和标记下放）。 具体方法看代码吧。 披着期望外衣的线段树题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;bits/stdc++.h&gt;#define gcd __gcd#define ll long longusing namespace std;const int MAXN = 110000;namespace SegTree{ //0-&gt;sigma(V_i),1-&gt;sigma(i*V_i),2-&gt;sigma(i^2*V_i) struct node{ ll sum[3]; node(ll _a = 0,ll _b = 0,ll _c = 0){ sum[0] = _a,sum[1] = _b,sum[2] = _c; } node operator + (const node &amp;a)const{ node newnode; newnode.sum[0] = sum[0] + a.sum[0]; newnode.sum[1] = sum[1] + a.sum[1]; newnode.sum[2] = sum[2] + a.sum[2]; return newnode; } }sumn[MAXN&lt;&lt;2]; ll tag[MAXN&lt;&lt;2]; #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) inline ll cal(int n){ return 1LL*n*(n+1)*(2*n+1)/6; } inline void addtag(int nown,int l,int r,ll v){ tag[nown] += v; static node tmp; tmp = node(v*(r-l+1),v*(l+r)*(r-l+1)/2,v*(cal(r)-cal(l-1))); sumn[nown] = sumn[nown] + tmp; } inline void push_down(int nown,int l,int r){ if(tag[nown]){ addtag(lson,l,mid,tag[nown]),addtag(rson,mid+1,r,tag[nown]); tag[nown] = 0; } } inline void push_up(int nown){ sumn[nown] = sumn[lson] + sumn[rson]; } inline void update(int nown,int l,int r,int ql,int qr,int v){ if(ql &lt;= l &amp;&amp; r &lt;= qr) addtag(nown,l,r,v); else{ push_down(nown,l,r); if(ql &lt;= mid) update(lson,l,mid,ql,qr,v); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,v); push_up(nown); } } inline node query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr) return sumn[nown]; else{ push_down(nown,l,r); node ans; if(ql &lt;= mid) ans = ans + query(lson,l,mid,ql,qr); if(qr &gt;= mid+1) ans = ans + query(rson,mid+1,r,ql,qr); return ans; } }}int n,m;void update(int l,int r,int v){ SegTree::update(1,1,n,l,r-1,v);}void query(int l,int r,ll &amp;x,ll &amp;y){ SegTree::node tmp = SegTree::query(1,1,n,l,r-1); x = -1LL*r*(l-1)*tmp.sum[0] + 1LL * (r+l-1)*(tmp.sum[1]) - tmp.sum[2]; y = 1LL*(r-l+1)*(r-l)/2; ll d = gcd(x,y); x/=d,y/=d;} void init(){ scanf(\"%d %d\",&amp;n,&amp;m);}void solve(){ ll x, y; for(int i = 1;i&lt;=m;i++){ char op[10];int l,r,c; scanf(\"%s %d %d\",op,&amp;l,&amp;r); if(op[0] == 'C') scanf(\"%d\",&amp;c),update(l,r,c); else query(l,r,x,y),printf(\"%lld/%lld\\n\",x,y); }}int main(){ init(); solve(); return 0;}","link":"/20180719-HAOI2012-highway/"},{"title":"「HAOI2016」找相同字符-后缀数组+单调栈","text":"给定两个字符串，求出在两个字符串中各取出一个子串使得这两个子串相同的方案数。当这两个子串中只要有一个取得位置不同时，两个方案不同。 链接Luogu P3181 题解解法一：$O(n^4)$暴力枚举两个起始位置，然后枚举每个起始长度，$O(n)$的判断子串是否相同，这个算法是$O(n^4)$的。 解法二：$O(n^3)$暴力枚举两个起始位置，然后从$1$到$n$，每次判断新增的一个字符是否相同，从而判断子串是否相同。这样对于每一个起始位置的判断就是$O(n)$，最后的复杂度就是$O(n^3)$。 解法三：$O(n^2)$我们学会了后缀数组，我们知道了我们事实上可以在$O(n\\log n)$预处理的情况下$O(1)$的得到解法二的$O(n)$的过程，也就是求一下$LCP$。这样的话，复杂度是$O(n^2)$。 解法四：$O(n \\log n)$我们先转化一下问题。这道题要求的是两个串的每一个位置两两之间的$LCP$的和。但是如果我们枚举的话，时间复杂度至少是$O(n^2)$。那么我们肯定要用一些数据结构之类来批量求和，最后才能够降低复杂度。 其次，我们发现这个问题可以拆解。我们只需要找出一个解法，解得在一个字符串里面任取两个位置不同的子串，取得子串相同的方案数。 令s_3 = s_1 + &quot;?&quot; + s_2，那么答案就是cal(s3)-cal(s1)-cal(s2)，其中?是一个没有在字符串里面出现的字符。 那么我们发现，对于每一个位置来说，我们可以将其视作以这个位置开始的后缀，那么其顺序对于每一个位置两两之间$LCP$的和是无关紧要的。 所以我们按$sa[i]$，也就是后缀字典序的顺序来遍历。每次我们都要求这个位置和前面所有位置的$LCP$的和。那么这个时候，我们就可以把前面的所有后缀到按字典序前一个后缀的LCP长度扔到一个Splay或者什么权值线段树里面去。 然后这个时候我们新加入了一个后缀，需要更新这个数据结构。我们需要把这个数据结构里面所有的大于$ht[i]$的数都拎出来，改成$ht[i]$，然后再塞回去就可以了。然后每次给$ans$加上这个数据结构里面所有数的总和就可以了。 这个算法的时间复杂度应当是$O(n \\log n)$ 解法五：$O(n)$什么？？？这种东西还能$O(n)$？？？ 反正我很震惊。 于是我就在合格考的考场上苦思冥想，最后自己脑补出了一个数据结构。用摊还证了下复杂度，竟然发现是$O(n)$的…仔细一想，这个东西叫单调栈2333…… 其他都同上，我们现在解决的是这里： 我们需要把这个数据结构里面所有的大于$ht[i]$的数都拎出来，改成$ht[i]$，然后再塞回去就可以了。然后每次给$ans$加上这个数据结构里面所有数的总和就可以了。 怎么办呢？我们想能不能暴力解决这个问题。注意到我们每次用$ht[i]$更新之后，所有的这些数我们都可以只用一个数(数对)来表示，也就是$(ht[i],cnt)$。我们维护一个有序表。然后每次从大端把所有大于等于$ht[i]$的数给拿出来，更新$cnt$，最后在插回去一个新的节点。 然后数据结构里面的数的和的更新就比较简单了…记一下出来的数的和，再记一下进去的数的和，然后加一下减一下即可。 可以用摊还证明，这个东西是$O(n)$的。 我用的后缀数组是$SA-IS$算法，也是$O(n)$的。 语言很混乱，哪看不懂可以问我23333 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;bits/stdc++.h&gt;#define ll long long#define pp pair&lt;int,int&gt;using namespace std;const int MAXN = 233333;template&lt;size_t siz&gt;struct SA{int s[siz&lt;&lt;1],p[siz],t[siz&lt;&lt;1];int sa[siz],rk[siz],ht[siz];int b[siz],cur[siz];#define pushL(x) sa[cur[s[x]]++] = x#define pushS(x) sa[cur[s[x]]--] = x#define inducedSort(v)\\ fill_n(b,m,0),fill_n(sa,n,-1);\\ for(int i = 0;i&lt;n;i++) b[s[i]]++;\\ for(int i = 1;i&lt;m;i++) b[i] += b[i-1];\\ for(int i = 0;i&lt;m;i++) cur[i] = b[i]-1;\\ for(int i=n1-1;~i;--i) pushS(v[i]);\\ for(int i = 1;i&lt;m;i++) cur[i] = b[i-1];\\ for(int i = 0;i&lt;n;i++) if(sa[i]&gt;0&amp;&amp;t[sa[i]-1]) pushL(sa[i]-1);\\ for(int i = 0;i&lt;m;i++) cur[i] = b[i]-1;\\ for(int i =n-1;~i;--i) if(sa[i]&gt;0&amp;&amp;!t[sa[i]-1]) pushS(sa[i]-1);void sais(int n,int m,int *s,int *t,int *p){ int ch = rk[0] = -1,n1 = t[n-1] = 0,*s1 = s+n; for(int i = n-2;~i;--i) t[i] = s[i]==s[i+1]?t[i+1]:s[i]&gt;s[i+1]; for(int i = 1;i&lt;n;i++) rk[i] = (!t[i]&amp;&amp;t[i-1])?(p[n1]=i,n1++):-1; inducedSort(p); for(int i = 0,x,y;i&lt;n;i++)if(~(x=rk[sa[i]])){ if(ch&lt;1||p[x+1]-p[x] != p[y+1]-p[y]) ch++; else for(int j=p[x],k=p[y];j&lt;=p[x+1];j++,k++) if((s[j]&lt;&lt;1|t[j])!=(s[k]&lt;&lt;1|t[k])){ch++;break;} s1[y=x] = ch; } if(ch+1 &lt; n1) sais(n1,ch+1,s1,t+n,p+n1); else for(int i = 0;i&lt;n1;i++) sa[s1[i]] = i; for(int i = 0;i&lt;n1;i++) s1[i] = p[sa[i]]; inducedSort(s1);}template&lt;typename T&gt;int mapp(const T *str,int n){ int m = *max_element(str,str+n); fill_n(rk,m+1,0); for(int i = 0;i&lt;n;i++) rk[str[i]] = 1; for(int i = 0;i&lt;m;i++) rk[i+1] += rk[i]; for(int i = 0;i&lt;n;i++) s[i] = rk[str[i]]-1; return rk[m];}// 这个时候传正确的字符串大小，++n对str[n]做处理template&lt;typename T&gt;void SuffixArray(const T *str,int n){ int m = mapp(str,++n); sais(n,m,s,t,p);}void getheight(int n){ for(int i = 0;i&lt;=n;i++) rk[sa[i]] = i; for(int i = 0,h=ht[0]=0;i&lt;=n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n&amp;&amp;j+h&lt;n&amp;&amp;s[i+h]==s[j+h]) ++h; if(ht[rk[i]] = h) --h; } }template&lt;typename T&gt;void build(const T *str,int n){ SuffixArray(str,n); getheight(n);}};char s1[MAXN],s2[MAXN],s3[MAXN&lt;&lt;1];void init(){ scanf(\"%s\",s1); scanf(\"%s\",s2);}ll cal(char *a){ int n = strlen(a); a[n] = 'A'-1; static SA&lt;401000&gt; T; T.build(a,n); ll ans = 0,tmp = 0; stack&lt;pp&gt; S; for(int i = 1;i&lt;=n;i++){ ll cnt = 1,tot = 0; while(!S.empty() &amp;&amp; S.top().first &gt;= T.ht[i]){ cnt += S.top().second; tot += 1LL * S.top().first * S.top().second; S.pop(); } S.push(make_pair(T.ht[i],int(cnt))); tmp += T.ht[i]*cnt - tot; ans += tmp; } return ans;}void solve(){ int n = strlen(s1),m = strlen(s2); memcpy(s3,s1,n),memcpy(s3+n+1,s2,m);s3[n] = 'A'; printf(\"%lld\\n\",cal(s3)-cal(s1)-cal(s2));}signed main(){ init(); solve(); return 0;}","link":"/20180704-HAOI2016-same/"},{"title":"「HEOI2016/TJOI2016」序列-CDQ分治优化dp","text":"佳媛姐姐过生日的时候，她的小伙伴从某宝上买了一个有趣的玩具送给他。玩具上有一个数列，数列中某些项的值可能会变化，但同一个时刻最多只有一个值发生变化。 现在佳媛姐姐已经研究出了所有变化的可能性，她想请教你，能否选出一个子序列，使得在任意一种变化中，这个子序列都是不降的？请你告诉她这个子序列的最长长度即可 。 注意：每种变化最多只有一个值发生变化。 链接Luogu P4093 题解我们可以发现，如果 $x$ 位置的变化能够影响到经过它的最长不降子序列，那么需要关心的只有两个值：该点可能变化到的最小值 $\\min_x$ 与可能变化到的最大值 $\\max_x$ 。所以我们只需要存储每个位置的 $\\min_x$ 和 $\\max_x$ 即可。 然后我们发现这个东西可以用 $O(n^2)$ 的朴素 $dp$ 来完成对 $\\text{LIS}$ 的计算。 方程为（其中 $a_0 = max_0 = min_0 = - \\inf$）： $$dp[i] =\\left\\{\\begin{aligned}{}&amp;0&amp;,\\;&amp;\\text{if } i = 0\\\\&amp;\\max_{j=0}^{i-1}{(dp[j] + 1)}&amp;,\\;&amp; \\text{if } \\text{max}_j \\leq a_i \\text{ and } a_j \\leq \\text{min}_i\\end{aligned}\\right.$$ 发现 $\\text{max}_j \\leq a_i$ 且 $a_j \\leq \\text{min}_i$ 事实上是一个二维的偏序关系，所以我们可以用 $\\text{CDQ}$ 分治计算满足该条件的 $dp$ 最大值。 但是这里有一个与普通 $\\text{CDQ}$ 不相同的地方，我们必须要计算完在 $i$ 前面的 $dp$ 值，才能开始计算 $dp[i]$。 所以这里的 $\\text{CDQ}$ 分治应当做一些微小的更改。 我们不用归并完成对 $2d$ 的排序，而是直接调用 $sort$ 。 对于区间 $[l,r]$ ，我们先递归完成 $[l,mid]$ ，排序第二关键字后处理左半对右半的贡献，然后重新按照第一关键字排序后再递归解决 $[mid+1,r]$ 子问题。 最近 $\\text{CDQ}$ 老写错字母emmm 大约没救了… 时间复杂度 $O(n \\log ^2 n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135// luogu-judger-enable-o2#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 210000;struct T{ int id,op,a,b; T(){id=op=a=b=0;} T(int _id,int _op,int _a,int _b){ id = _id,op = _op,a = _a,b = _b; } // op = 1 -&gt; (max_j,a_j) 修改 // op = 2 -&gt; (a_i,min_i) 查询}q[MAXN];int tot;struct BIT{ int maxn[MAXN]; int lowbit(int x){ return x &amp; (-x); } void update(int x,int v){ while(x &lt;= 100000){ maxn[x] = max(maxn[x],v); x += lowbit(x); } } int query(int x){ int ans = 0; while(x &gt;= 1){ ans = max(ans,maxn[x]); x -= lowbit(x); } return ans; } void clear(int x){ while(x &lt;= 100000){ if(maxn[x] == 0) break; maxn[x] = 0; x += lowbit(x); } }}S;int n,m;int dp[MAXN];int num[MAXN],maxn[MAXN],minn[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;num[i]); maxn[i] = minn[i] = num[i]; } for(int i = 1;i&lt;=m;i++){ int x,v; scanf(\"%d %d\",&amp;x,&amp;v); minn[x] = min(minn[x],v); maxn[x] = max(maxn[x],v); } q[++tot] = T(0,1,-inf,1); for(int i = 1;i&lt;=n;i++){ q[++tot] = T(i,2,num[i],minn[i]); q[++tot] = T(i,1,maxn[i],num[i]); }}bool cmp1d(int x,int y){ if(q[x].a != q[y].a){ return q[x].a &lt; q[y].a; } else{ return q[x].id &lt; q[y].id; }}bool cmpid(int x,int y){ if(q[x].id != q[y].id){ return q[x].id &lt; q[y].id; } else{ return q[x].op &gt; q[y].op; }}int cdq[MAXN];int tmp1d[MAXN];void CDQ(int *w,int l,int r){ #define ql q[w[L]] #define qr q[w[R]] if(l == r) return; int mid = (l+r)&gt;&gt;1; CDQ(w,l,mid); sort(w+l,w+mid+1,cmp1d),sort(w+mid+1,w+r+1,cmp1d); int L = l,R = mid+1,c = l; while(c &lt;= r){ if(R &gt; r ||(L &lt;= mid &amp;&amp; ql.a &lt;= qr.a)){ if(ql.op == 1) S.update(ql.b,dp[ql.id]); tmp1d[c++] = L++; } else{ if(qr.op == 2){ //printf(\"%d qr.id:%d\\n\",w[R],qr.id); int t = S.query(qr.b); dp[qr.id] = max(dp[qr.id],t+1); } tmp1d[c++] = R++; } } for(int i = l;i&lt;=mid;i++) S.clear(q[w[i]].b); sort(w+l,w+r+1,cmpid); CDQ(w,mid+1,r); #undef ql #undef qr}void solve(){ for(int i = 1;i&lt;=tot;i++) cdq[i] = i; CDQ(cdq,1,tot); int ans = 0; for(int i = 1;i&lt;=n;i++){ ans = max(ans,dp[i]); } printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180920-HEOI2016-TJOI2016-sequence/"},{"title":"「HEOI2016/TJOI2016」排序-线段树","text":"在 $2016$ 年，佳媛姐姐喜欢上了数字序列。因而他经常研究关于序列的一些奇奇怪怪的问题，现在他在研究一个难题，需要你来帮助他。这个难题是这样子的：给出一个 $1$ 到 $n$ 的全排列，现在对这个全排列序列进行 $m$ 次局部排序，排序分为两种： $(0,l,r)$表示将区间 $[l,r]$ 的数字升序排序 $(1,l,r)$表示将区间 $[l,r]$ 的数字降序排序最后询问第 $q$ 位置上的数字。 链接Luogu P2824 题解好题啊。 因为这个问题只有一个询问，所以我们考虑二分答案。 假设当前的考虑要判定的答案是 $mid$ 与 $p$ 位置上数的大小关系，通过 $O(\\log n)$ 次二分，就可以求出最后这个位置上的数字。 所以问题转化为：求出 $p$ 位置上的数与 $k$ 的大小关系。我们关注到，如果我们只关心其位置上的数相对于某一个数的大小关系，那我们就可以将小于等于 $k$ 的数设置成 $0$ ，大于 $k$ 的数设置成 $1$，那么排序就比较容易了，只需要一个 $0/1$ 线段树，维护区间和，支持区间覆盖即可。每次我们查询到 $sum(l,r)$，然后根据这个 $sum$ 的值和排序的种类对区间进行覆盖，升序即为 $0…01…1$，降序则为 $1…10…0$。 最后查询 $q$ 这个位置上的值，如果是 $0$ ，就说明这个位置上的数小于等于 $k$ ，否则就是大于 $k$ 。 二分答案即可。 时间复杂度： $O(n \\log^2 n)$ 这题也有用可合并、分裂的线段树的做法，可以处理多组询问。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#include &lt;cstdio&gt;using namespace std;const int MAXN = 31000; namespace SegTree{ #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) int sumn[MAXN&lt;&lt;2],lazy[MAXN&lt;&lt;2];// -1 -&gt; no label void add_label(int nown,int l,int r,int op){ lazy[nown] = op,sumn[nown] = (r-l+1)*op; } void push_down(int nown,int l,int r){ if(lazy[nown] != -1){ add_label(lson,l,mid,lazy[nown]); add_label(rson,mid+1,r,lazy[nown]); lazy[nown] = -1; } } void push_up(int nown){ sumn[nown] = sumn[lson] + sumn[rson]; } void build(int nown,int l,int r,int k,int *a){ lazy[nown] = -1; if(l == r){ sumn[nown] = k &lt; a[l];// 满足条件（&lt;=）的 sumn 为 0 } else{ build(lson,l,mid,k,a),build(rson,mid+1,r,k,a); push_up(nown); } } int query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ return sumn[nown]; } else{ push_down(nown,l,r); int ans = 0; if(ql &lt;= mid) ans += query(lson,l,mid,ql,qr); if(qr &gt;= mid+1) ans += query(rson,mid+1,r,ql,qr); return ans; } } void update(int nown,int l,int r,int ql,int qr,int op){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ add_label(nown,l,r,op); } else{ push_down(nown,l,r); if(ql &lt;= mid) update(lson,l,mid,ql,qr,op); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,op); push_up(nown); } } void print(int nown,int l,int r){ printf(\"nown:%d l,r:%d %d sumn:%d lazy:%d\\n\",nown,l,r,sumn[nown],lazy[nown]); if(l == r) return; print(lson,l,mid); print(rson,mid+1,r); } void sort(int n,int l,int r,int op){// op 为 0 正序 ， op 为 1 逆序 int b = query(1,1,n,l,r),a = (r-l+1) - b; //printf(\"a:%d b:%d\\n\",a,b); if(op == 0){ if(a) update(1,1,n,l,l+a-1,0); if(b) update(1,1,n,r-b+1,r,1); } else{ if(b) update(1,1,n,l,l+b-1,1); if(a) update(1,1,n,r-a+1,r,0); } } #undef lson #undef rson #undef mid}int n,m,q;int a[MAXN];int o[MAXN],l[MAXN],r[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]); for(int i = 1;i&lt;=m;i++) scanf(\"%d %d %d\",&amp;o[i],&amp;l[i],&amp;r[i]); scanf(\"%d\",&amp;q);}bool check(int k){//检查 q 位置上的数是不是小于等于 k SegTree::build(1,1,n,k,a); for(int i = 1;i&lt;=m;i++) SegTree::sort(n,l[i],r[i],o[i]); return SegTree::query(1,1,n,q,q) == 0;}void solve(){ int b = 1,e = n; while(b!=e){ int mid = (b+e)&gt;&gt;1; //printf(\"%d %d:%d\\n\",b,e,mid); if(check(mid)) e = mid; else b = mid+1; } printf(\"%d\\n\",b);}int main(){ init(); solve(); return 0;}","link":"/20180829-HEOI2016-TJOI2016-sort/"},{"title":"「HNOI2004」L语言-AC自动机","text":"一段文章 $T$ 是由若干小写字母构成。一个单词 $W$ 也是由若干小写字母构成。一个字典 $D$ 是若干个单词的集合。我们称一段文章 $T$ 在某个字典 $D$ 下是可以被理解的，是指如果文章 $T$ 可以被分成若干部分，且每一个部分都是字典 $D$ 中的单词。 给定一个字典 $D$ ，你的程序需要判断若干段文章在字典 $D$ 下是否能够被理解。并给出其在字典 $D$ 下能够被理解的最长前缀的位置。 链接Luogu P2292 题解可以想到一个简单的 $\\text{dp}$ ，用 $dp[i]$ 表示以 $i$ 为结尾的后缀能否被理解：$$dp[i] = \\max(dp[i-\\text{len}_j]) ,\\text{if} \\; \\text{str}_j \\text{在 i 位置上出现}$$然后用模版串 $\\text{AC}$ 自动机跑一遍母串，得到每个模版串在母串中出现的位置，然后刷表 $dp$ 即可。 注意往回不能暴力跳 $fail$ ，一个简单的优化是记录最近的 $\\text{end}$ 节点 $g_i$ ，然后每次都按照 $g_i$ 跳，统计出现位置即可。 时间复杂度 $O(n \\times \\text{玄学})$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;using namespace std;const int MAXN = 1000,sigma_size = 26;vector&lt;int&gt; pos[MAXN];namespace AC{ int c[MAXN][sigma_size],fail[MAXN],g[MAXN]; int end[MAXN]; int root,cnt,wcnt; void insert(char *s){ int n = strlen(s),nown = root; for(int i = 0;i&lt;n;i++){ if(c[nown][s[i]-'a'] == 0){ c[nown][s[i]-'a'] = ++cnt; } nown = c[nown][s[i]-'a']; } end[nown] = ++wcnt; } void build(){ queue&lt;int&gt; q; for(int i = 0;i&lt;sigma_size;i++){ if(c[root][i]){ fail[c[root][i]] = root; q.push(c[root][i]); } } while(!q.empty()){ int nown = q.front();q.pop(); for(int i = 0;i&lt;sigma_size;i++){ g[nown] = end[fail[nown]]?fail[nown]:g[fail[nown]]; if(c[nown][i] == 0){ c[nown][i] = c[fail[nown]][i]; } else{ fail[c[nown][i]] = c[fail[nown]][i]; q.push(c[nown][i]); } } } } void query(char *s){ for(int i = 1;i&lt;=20;i++){ pos[i].clear(); } int n = strlen(s),nown = root; for(int i = 0;i&lt;n;i++){ nown = c[nown][s[i] - 'a']; for(int t = nown;t;t = g[t]){ if(end[t]){ pos[end[t]].push_back(i); } } } }}int n,m;int now[MAXN],l[MAXN];char s[1100000];bool dp[1100000];int cal(char *s){ memset(now,0,sizeof(now)); memset(dp,0,sizeof(dp));//dp -&gt; len int len = strlen(s),ans = 0; AC::query(s); dp[0] = 1; for(int i = 1;i&lt;=len;i++){ for(int j = 1;j &lt;= n;j++){ if(now[j] != pos[j].size() &amp;&amp; pos[j][now[j]] == (i-1)){ dp[i] |= dp[i-l[j]]; now[j] ++; } if(dp[i] == 1){ ans = max(ans,i); continue; } } } return ans;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s); l[i] = strlen(s); AC::insert(s); } AC::build();}void solve(){ for(int i = 1;i&lt;=m;i++){ scanf(\"%s\",s); printf(\"%d\\n\",cal(s)); }}int main(){ init(); solve(); return 0;}","link":"/20180909-HNOI2004-language/"},{"title":"「HEOI2016/TJOI2016」树-线段树","text":"在2016年，佳媛姐姐刚刚学习了树，非常开心。现在他想解决这样一个问题：给定一颗有根树（根为 $1$），有以下两种操作： 标记操作：对某个结点打上标记（在最开始，只有结点1有标记，其他结点均无标记，而且对于某个结点，可以打多次标记。） 询问操作：询问某个结点最近的一个打了标记的祖先（这个结点本身也算自己的祖先） 你能帮帮她吗? 链接Luogu P4092 题解我们按照 dfs 序维护一棵标记永久化的线段树。 每次查询直接查询该位置上所有标记的最大值即可，修改直接在线段树上打上 $\\log n$ 个标记，更新标记取 $\\max$ 即可。 时间复杂度 $O(n \\log n)$ 。 这个题也可以考虑离线逆序处理即为删除标记，用并查集维护能到达的最上方（没有标记）的节点，然后删除标记是 $\\text{union}$ 标记两侧集合即可，维护一个当前集合的最小值。 时间复杂度 $O(n \\alpha(n))$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000;struct Edge{ int to,nex;}edge[MAXN*2];int ecnt = 2;int fir[MAXN];void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}int n,q,id[MAXN],siz[MAXN],cnt;int back[MAXN];namespace SegTree{ #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) int maxn[MAXN&lt;&lt;2]; void build(int nown,int l,int r){ maxn[nown] = 1; if(l == r) return; build(lson,l,mid); build(rson,mid+1,r); } void modify(int nown,int l,int r,int ql,int qr,int v){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ maxn[nown] = max(maxn[nown],v); } else{ if(ql &lt;= mid) modify(lson,l,mid,ql,qr,v); if(qr &gt;= mid+1) modify(rson,mid+1,r,ql,qr,v); } } int query(int nown,int l,int r,int pos){ if(l == r){ return maxn[nown]; } else{ if(pos &lt;= mid) return max(maxn[nown],query(lson,l,mid,pos)); if(pos &gt;= mid+1) return max(maxn[nown],query(rson,mid+1,r,pos)); } return 1; }}void dfs(int nown,int fa){ id[nown] = ++cnt; back[cnt] = nown; siz[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == fa) continue; dfs(v,nown); siz[nown] += siz[v]; }}void init(){ scanf(\"%d %d\",&amp;n,&amp;q); for(int i = 2;i&lt;=n;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b),addedge(b,a); }}void solve(){ dfs(1,0); SegTree::build(1,1,n); for(int i = 1;i&lt;=q;i++){ char s[5];int x; scanf(\"%s %d\",s,&amp;x); if(s[0] == 'C'){ SegTree::modify(1,1,n,id[x],id[x]+siz[x]-1,id[x]); } if(s[0] == 'Q'){ int t = SegTree::query(1,1,n,id[x]); printf(\"%d\\n\",back[t]); } }}int main(){ init(); solve(); return 0;}","link":"/20181026-HEOI2016-TJOI2016-tree/"},{"title":"「HNOI2007」梦幻岛宝珠-背包dp","text":"给你 $N$ 颗宝石，每颗宝石都有重量 $w_i$ 和价值 $v_i$。要你从这些宝石中选取一些宝石，保证其总重量不超过 $W$ ，且总价值最大。 请你输出最大的总价值。 数据范围：$N \\leq 100;W \\leq 2^{30}$，并且保证每颗宝石的重量符合 $w_i = a \\cdot 2^b$（ $a \\leq 10;b \\leq 30$ ）。 题解先按照 $w_i = a_i \\cdot 2^{b_i}$ 中 $b_i$ 为第一关键字， $a_i$ 为第二关键字均从大到小给物品排序。 我们发现，如果 $dp$ 过程中考虑当前物体的重量是 $a_i \\cdot 2^{b_i}$ ，（因为剩下的物体不可能超过 $n \\leq 100$ 个，每个物体的重量又不超过 $a_i \\cdot 2^{b_i}$，又 $a_i \\leq 10$，）那么剩下所有的物品的重量之和也不可能超过 $n \\times a_i \\cdot 2^{b_i} \\leq 1024 \\cdot 2^{b_i}$ 。（因为剩下的物品的重量之和不超过 $2^{10} \\cdot 2^{b_i}$，）这意味着剩余的重量只有在比 $b_i$ 高的前 $10$ 个二进制位置（也就是代表 $2^{b_{i+1}},…,2^{b_{i+10}}$ 的二进制位）是可能有用的，否则如果剩余重量在（比 $b_i$ 高的）第 $11$ 个位置（或更高位）存在一个 $1$，（也就是剩下的重量大于等于 $2^{11} \\cdot 2^{b_i}$ ，也就大于 $2^{10} \\cdot 2^{b_i}$ ，你剩下的所有物品的重量），那么这个时候的最优策略一定是把剩下的全取完，重量还可以有剩余，（这样对答案的贡献计算是 $O(1)$ 的）。 正常的背包中我们的状态有两个维度，当前考虑的物品和剩余的背包容积。但是这里的 $W$ 过于大，以至于这种表示方法不能成立。但上面提到我们事实上只需要比 $b_i$ 高的那 $10$ 个二进制位的状况，否则我们就可以直接更新最后的答案。 所以状态就可以表示为 $dp[i][s]$，表示考虑完前 $i$ 个物品时， $s$ 为考虑到当前物品时剩余的 $W$ 在 $b_i$ 前 $10$ 个二进制位（压缩成一个 $1 到 1024$ 的十进制整数）的情况。我们注意到我们考虑到第 $i$ 个物品的时候，对于所有比 $b_i$ 低的二进制位我们不可能在前 $i$ 个物品中改变，所以剩余重量比 $2^{b_i}$ 低的二进制位事实上就是 $W$ 的这些二进制位，我们不在 dp 状态中显性表示罢了。 我们考虑这个物体决策取或者不取，转移是非常简单的，就是普通背包的转移就可以了。 当我们考虑完了当前的物品，考虑下一个物品之前，我们需要做一些变换。 现在我们有两种情况，第一种是 $w_{i+1}$ 和 $w_i$ 的二进制非 $0$ 最低位相同，那我们就不需要做什么特殊的处理，直接用 $w_i$ 转移得到数组即可。 第二种情况是 $w_{i+1}$ 的最低非 $0$ 二进制位比 $w_i$ 的低，那么这个时候我们就遍历所有1024种状态，如果左移到最低位之后这个状态的剩余价值大于等于 $2^{10} \\cdot 2^{b_{w+1}}$ ，那么直接处理掉这个状态，否则就加上 $W$ 的低位之后转移即可。 时间复杂度大约是 $O((n+30) \\times 2^{10})$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;algorithm&gt;#include &lt;cstdio&gt;#define inf 0x3f3f3f3f#define maxn 1024using namespace std;const int MAXN = 1100;int n,W;struct wupin{ int a,b,v; bool operator &lt; (const wupin &amp;x)const{ if(b != x.b) return b &gt; x.b; else return a &gt; x.a; }}w[MAXN];bool init(){ scanf(\"%d %d\",&amp;n,&amp;W); if(n == -1 &amp;&amp; W == -1) return 0; for(int i = 1;i&lt;=n;i++){ int weight,val,cnt = 0; scanf(\"%d %d\",&amp;weight,&amp;val); while((weight &amp; 1) == 0) weight &gt;&gt;= 1,cnt++; w[i] = (wupin){weight,cnt,val}; } return 1;}void solve(){ sort(w+1,w+n+1); static int sum[MAXN], dp[MAXN],tmp[MAXN];//dp[j] -&gt; dp[i][j]，后10位的状况 int noww = 31,ans = 0;; for(int i = 1;i&lt;=n;i++) sum[i] = sum[i-1] + w[i].v; for(int j = 0;j&lt;maxn;j++) dp[j] = -inf; dp[0] = 0; for(int i = 1;i&lt;=n;i++){ while(noww &gt; w[i].b){ for(int j = 0;j&lt;maxn;j++) tmp[j] = -inf; for(int j = 0;j&lt;maxn;j++){ if((j&lt;&lt;1) &gt;= maxn) ans = max(ans,dp[j] + sum[n] - sum[i-1]); else{ int newn = (j&lt;&lt;1) | ((W&gt;&gt;(noww-1))&amp;1); tmp[newn] = max(tmp[newn],dp[j]); } } for(int j = 0;j&lt;maxn;j++) dp[j] = tmp[j]; noww--; } for(int j = 0;j&lt;maxn;j++) tmp[j] = -inf; for(int j = 0;j&lt;maxn;j++){//(111111111)_2 tmp[j] = max(tmp[j],dp[j]); if(j - w[i].a &gt;= 0) tmp[j-w[i].a] = max(tmp[j-w[i].a],dp[j] + w[i].v); } for(int j = 0;j&lt;maxn;j++) dp[j] = tmp[j]; } for(int j = 0;j&lt;maxn;j++) ans = max(ans,dp[j]); printf(\"%d\\n\",ans);}signed main(){ while(init()) solve(); return 0;}","link":"/20181103-HNOI2007-diamond/"},{"title":"「HNOI2008」GT考试-KMP+dp+矩阵快速幂","text":"阿申准备报名参加 $GT$ 考试，准考证号为 $n$ 位数 $X_1X_2\\cdots X_n(0\\le X_i\\le 9)$，他不希望准考证号上出现不吉利的数字。 他的不吉利数字 $A_1A_2\\cdots A_m(0\\le A_i\\le 9)$ 有 $m$ 位，不出现是指 $X_1X_2\\cdots X_n$ 中没有恰好一段等于 $A_1A_2\\cdots A_m$，$A_1$​ 和 $X_1$ 可以为 $0$。 阿申想知道不出现不吉利数字的号码有多少种，输出模 $K$ 取余的结果。 链接Luogu P3193 题解显然dp… 令 $dp[i][j]$ 为准考证已经匹配了 $i$ 位，不吉利数字（模版）最长可以匹配了$j$位的方案数。 下一位有$10$种情况，在$nex$数组上分别转移即可。 注意到$n$的大小比较大，$m$的大小比较小，可以用矩阵快速幂化掉第一维。 时间复杂度:$O(m^3 \\times \\log{n})$ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int MAXM = 30;int n,m,k;char s[MAXM];int nex[MAXM];struct Matrix{ int a[MAXM][MAXM]; Matrix(){memset(a,0,sizeof(a));}};Matrix mul(Matrix &amp;_a,Matrix &amp;_b){ Matrix ans; for(int i = 0;i&lt;=m;i++){ for(int j = 0;j&lt;=m;j++){ for(int k = 0;k&lt;=m;k++){ ans.a[i][j] += _a.a[i][k] * _b.a[k][j]; } if(ans.a[i][j] &gt;= k) ans.a[i][j] %= k; } } return ans;}Matrix pow(Matrix x,int k){ Matrix ans; for(int i = 0;i&lt;=m;i++) ans.a[i][i] = 1; for(int i = k;i;i&gt;&gt;=1,x = mul(x,x)) if(i &amp; 1) ans = mul(ans,x); return ans;}void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;k); scanf(\"%s\",s);}//dp[i][j]表示已经匹配了i位，模版已经匹配了j位void get_next(){ nex[0] = 0; int j = 0; for(int i = 1;i&lt;m;i++){ while(j &gt; 0 &amp;&amp; s[i] != s[j]) j = nex[j-1]; if(s[i] == s[j]) j++; nex[i] = j; }}void solve(){ get_next(); Matrix tmp; for(int i = 0;i&lt;m;i++){ int t = i; for(int w = '0';w&lt;='9';w++){ t = i; while(t &gt; 0 &amp;&amp; s[t] != w) t = nex[t-1]; if(s[t] == w) t++; tmp.a[t][i]++; } } tmp = pow(tmp,n); int ans = 0; for(int i = 0;i&lt;m;i++){ ans += tmp.a[i][0]; } ans %= k; printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180809-HNOI2008-GTexams/"},{"title":"「HNOI2009」梦幻布丁-set-启发式合并","text":"$n$个布丁摆成一行，每个布丁最开始都有一个颜色$c_i$，进行$m$次操作。 操作格式： 1 c d表示将所有的$c$颜色替换为$d$ 2代表查询当前布丁序列一共有多少段颜色。例如颜色分别为$1,2,2,1$的四个布丁一共有3段颜色。 链接Luogu P3201 题解这题非常有趣。开始想倒是像以前做过的 ，不过仔细想想这个东西很难用线段树进行维护。 由于这道题放在平衡树的专题里，我们思考一下这个东西能不能用平衡树维护。 重点需要解决的问题是如何合并两种颜色（因为颜色段肯定是单调递减的）。我们可以想到使用平衡树的启发式合并。合并的时候更新答案的情况只有当前这个位置的$pos-1$或者$pos+1$的位置有相同颜色的位置的时候，我们都需要对答案减去1。 启发式合并可以让复杂度降低一个$log$，最后时间复杂度就是$O(n \\log^2{n})$。最坏情况就是每次合并的区间大小都相等的情况，合并起来的次数$O(n \\log {n})$。 有$O(n \\log{n})$的奇怪做法，具体我也就不会了。 具体实现上，可以维护一个数组记录当前某个数对应的set位置，就可以减去一些不必要消耗。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 1100000;namespace fast_io { //...}using namespace fast_io;int n,m,ans = 0;int num[MAXN],re[MAXN];set&lt;int&gt; S[MAXN];void update(int last,int now){ for(set&lt;int&gt;::iterator it = S[last].begin();it!=S[last].end();it++){ if(num[(*it)-1] == (now)) ans--; if(num[(*it)+1] == (now)) ans--; S[now].insert(*it); } for(set&lt;int&gt;::iterator it = S[last].begin();it!=S[last].end();it++) num[*it] = now; S[last].clear();}void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++){ read(num[i]); if(num[i]!=num[i-1]) ans++; S[num[i]].insert(i); re[num[i]] = num[i]; }}void solve(){ int op,a,b; for(int i = 1;i&lt;=m;i++){ read(op); if(op == 1){ read(a),read(b); if(a == b) continue;//很重要！ if(S[re[a]].size() &gt; S[re[b]].size()) swap(re[a],re[b]); update(re[a],re[b]); } else if(op == 2){ print(ans),print('\\n'); } }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180521-HNOI2009-pudding/"},{"title":"「HNOI2010」弹飞绵羊-动态树","text":"游戏一开始，Lostmonkey在地上沿着一条直线摆上$n$个装置，每个装置设定初始弹力系数$K_i$，当绵羊达到第$i$个装置时，它会往后弹$K_i$步，达到第$i+K_i$个装置，若不存在第$i+K_i$个装置，则绵羊被弹飞。 存在两种操作： 查询在第$i$个装置起步是，再经多少次会被弹飞。 修改第$i$个装置的弹力系数为$K’$。 保证任何时候，任何装置弹力系数均为正整数。 链接Luogu P3203 BZOJ 2002 题解Link_Cut_Tree比较好想的一道题。 我们注意到，这n个装置的弹力系数可以抽象成一颗树，即连接第$i$和第$i+K_i$个节点的边，并且弹力系数的正整数的性质使其不存在环。 对于弹出去的装置，我们都用一个$n+1$号点来代替。每次在Link_Cut_Tree上查询$i$到$i+K_i$的距离，即为答案。修改的时候，我们先断掉与原来的$i+K_i$的边，再连上到$i+K’$的边，更新弹力系数数组即可。 注意这里的装置编号是$0\\to n-1$的，所以可以统一进行$+1$处理。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 510000;namespace fast_io { //...}using namespace fast_io;struct Link_Cat_Tree{ int sum[MAXN]; int f[MAXN],c[MAXN][2]; bool rev[MAXN]; void push_up(int x){ sum[x] = sum[c[x][0]] + sum[c[x][1]] + 1; } void reverse(int x){ if(!x) return; swap(c[x][0],c[x][1]); rev[x] ^= 1; } void push_down(int x){ if(!x) return; if(rev[x]){ reverse(c[x][0]); reverse(c[x][1]); rev[x] = 0; } } bool noroot(int x){ return (c[f[x]][0] == x) || (c[f[x]][1] == x); } void push_all(int x){ if(!x) return; if(noroot(x)) push_all(f[x]); push_down(x); } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[y] = x;f[x] = z; push_up(y),push_up(x); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ if((c[y][1]==x)^(c[z][1]==y)) rotate(x); else rotate(y); }rotate(x); } } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x);c[x][1] = y; push_up(x); } } void makeroot(int x){ access(x),splay(x),reverse(x); } int find(int x){ access(x),splay(x); push_down(x); while(c[x][0]) x = c[x][0],push_down(x); return x; } void link(int x,int y){ makeroot(x); if(find(y)!=x) f[x] = y; } void cat(int x,int y){ makeroot(x);//find == splay if(find(y) == x &amp;&amp; f[x] == y &amp;&amp; !c[x][1]) f[x] = c[y][0] = 0,push_up(y); } int query(int u,int v){ makeroot(v); //if(find(v)!=find(u)) return -1; access(u);splay(u); return sum[u]; } void print(int n){ for(int i = 1;i&lt;=n;i++){ printf(\"%d: sum:%d f:%d c:%d %d r:%d\\n\",i,sum[i],f[i],c[i][0],c[i][1],int(rev[i])); } }};int n,m,num[MAXN];Link_Cat_Tree T;void init(){ read(n); for(int i = 1;i&lt;=n;i++) read(num[i]); for(int i = 1;i&lt;=n;i++) T.link(i,min(i+num[i],n+1));}void solve(){ read(m); int op,a,b; for(int i = 1;i&lt;=m;i++){ read(op);read(a);++a; if(op == 1) print(T.query(a,n+1)-1),print('\\n'); else if(op == 2){ read(b); T.cat(a,min(a+num[a],n+1)); T.link(a,min(a+b,n+1)); num[a] = b; } }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180518-HNOI2010-bounce/"},{"title":"「HNOI2013」游走-期望方程","text":"一个无向连通图，顶点从$1$编号到$N$，边从$1$编号到$M$。 小Z在该图上进行随机游走，初始时小$Z$在$1$号顶点，每一步小$Z$以相等的概率随机选 择当前顶点的某条边，沿着这条边走到下一个顶点，获得等于这条边的编号的分数。当小$Z$ 到达$N$号顶点时游走结束，总分为所有获得的分数之和。 现在，请你对这$M$条边进行编号，使得小$Z$获得的总分的期望值最小。 链接Luogu P3232 题解注意到因为图是给定的，所以我们可以通过算出每个点期望经过的次数再推出每个边经过的期望次数。 因为在每个点选定每条边的概率是相同的，所以我们有以下期望方程，设第$i$个点期望经过次数为$e1_i$，度数为$d_i$，第i条边期望经过次数为$e2_i$： $$e1_i = \\sum_{j} \\frac{e1_j}{d_j},\\text{(i,j) has a edge}$$ 那么第$i$条边$(u,v)$的经过次数的期望就是： $$e2_i = \\frac{e1_u}{d_u} + \\frac{e1_v}{d_v}$$ 其中有一些特殊处理，因为开始一定会经过一次1节点，可以理解成起点到1号节点只有一条边，所以：$$e1_1 = 1+\\sum_{j} \\frac{e1_j}{d_j},\\text{(1,j) has a edge}$$ 而且这个人走到$n$节点后不会再走回来，所以：$e1_n = 0$。 高斯消元即可。 然后排序贪心就可以了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 600;const double eps = 1e-8;int n,m,in[MAXN];vector&lt;int&gt; edge[MAXN];struct Edge{ int from,to; double c; bool operator &lt; (const Edge &amp;a)const{ return c &gt; a.c; }}edgea[MAXN*MAXN];bool gauss(double a[MAXN][MAXN],int n){ for(int i = 1;i&lt;=n;i++){ int r = i; for(int j = i+1;j&lt;=n;j++) if(fabs(a[j][i]) &gt; fabs(a[r][i])) r = j; if(r!=i) for(int j = 1;j&lt;=n+1;j++) swap(a[r][j],a[i][j]); if(fabs(a[i][i]) &lt; eps) return false; for(int j = 1;j&lt;=n;j++)if(j!=i){ double t = a[j][i]/a[i][i]; for(int k = 1;k&lt;=n+1;k++) a[j][k] -= a[i][k] * t; } } for(int i = 1;i&lt;=n;i++) a[i][n+1]/=a[i][i]; return true;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); int a,b; for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;a,&amp;b); edge[a].push_back(b); edge[b].push_back(a); in[a]++,in[b]++; edgea[i] = (Edge){a,b,double(0)}; }}void solve(){ //a_u -&gt; 点u期望次数 static double a[MAXN][MAXN]; for(int u = 1;u&lt;n;u++){ a[u][u] = 1; for(int i = 0;i&lt;edge[u].size();i++){ int v = edge[u][i]; if(v == n) continue; a[u][v] = -1 / double(in[v]); } } a[1][n] = 1;//很重要！对1的特殊处理 static double c[MAXN]; gauss(a,n-1); for(int i = 1;i&lt;=n-1;i++) c[i] = a[i][n]; for(int i = 1;i&lt;=m;i++){ int u = edgea[i].from,v = edgea[i].to; edgea[i].c = c[u]/in[u]+c[v]/in[v]; }//计算边的期望经过次数 sort(edgea+1,edgea+m+1); double ans = 0; for(int i = 1;i&lt;=m;i++) ans += edgea[i].c * i; printf(\"%.3lf\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180719-HNOI2013-walk/"},{"title":"「HNOI2011」XOR和路径-高斯消元","text":"给定一个无向连通图，其节点编号为 $1$ 到 $N$，其边的权值为非负整数。试求出一条从 $1$ 号节点到 $N$ 号节点的路径，使得该路径上经过的边的权值的 “ $\\text{XOR}$ 和” 最大。该路径可以重复经过某些节点或边，当一条边在路径中出现多次时，其权值在计算 “$\\text{XOR}$ 和” 时也要被重复计算相应多的次数。 直接求解上述问题比较困难，于是你决定使用非完美算法。具体来说，从 $1$ 号节点开始，以相等的概率，随机选择与当前节点相关联的某条边，并沿这条边走到下一个节点，重复这个过程，直到走到 $N$ 号节点为止，便得到一条从 $1$ 号节点到 $N$ 号节点的路径。显然得到每条这样的路径的概率是不同的，并且每条这样的路径的 “ $\\text{XOR}$ 和” 也不一样。现在请你求出该算法得到的路径的 “ $\\text{XOR}$ 和” 的期望值。 链接Luogu P3211 题解注意到每位独立，所以我们可以考虑分别考虑每位再进行相加。 具体来说，如果我们用 $P[i]$ 表示在 $i$ 号节点时，到达 $N$ 号节点时该位为 $1$ 的概率，那么我们有如下转移： $$P[i] =\\left\\{\\begin{aligned}{}&amp;\\sum_{\\text{i,j have a edge}} \\frac{P[j]}{d[i]}&amp;,i \\neq N\\\\&amp;1&amp;,i = N\\end{aligned}\\right.$$ 其中 $d[i]$ 为 $i$ 节点度数。 高斯消元即可。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const double eps = 1e-7;const int MAXN = 110,MAXM = 11000;struct Edge{ int to,len; int nex;}edge[MAXM*2];int ecnt = 2;int fir[MAXN];void addedge(int u,int v,int c){ edge[ecnt] = (Edge){v,c,fir[u]}; fir[u] = ecnt++;}int n,m;double de[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=m;i++){ int u,v,c; scanf(\"%d %d %d\",&amp;u,&amp;v,&amp;c); addedge(u,v,c);de[u]++; if(u!=v){ addedge(v,u,c);de[v]++; } }}bool gauss(double a[MAXN][MAXN],int n){ for(int i = 1;i&lt;=n;i++){ int r = i; for(int j = i+1;j&lt;=n;j++){ if(fabs(a[j][i]) &gt; fabs(a[r][i])) r = j; } if(r != i){ for(int j = 1;j&lt;=n+1;j++) swap(a[i][j],a[r][j]); } if(fabs(a[i][i]) &lt; eps) return 0; for(int j = 1;j&lt;=n;j++)if(j!=i){ double t = a[j][i]/a[i][i]; for(int k = 1;k&lt;=n+1;k++){ a[j][k] -= a[i][k] * t; } } } for(int i = 1;i&lt;=n;i++) a[i][n+1]/=a[i][i],a[i][i] = 1; return 1;}double ju[MAXN][MAXN];int num[MAXN];void solve(){ double ans = 0; for(int i = 0;i&lt;30;i++){ // printf(\"i:%d\\n\",i); memset(ju,0,sizeof(ju)); for(int nown = 1;nown&lt;=n;nown++){ int cnt = 0; ju[nown][nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if((l &amp; (1&lt;&lt;i)) == 0) ju[nown][v] += -1/de[nown]; else ju[nown][v] += 1/de[nown],cnt++; } ju[nown][n+1] = cnt/de[nown]; } for(int i = 1;i&lt;=n;i++) ju[n][i] = 0; ju[n][n] = 1,ju[n][n+1] = 0; gauss(ju,n); ans += ju[1][n+1] * pow(2,i); // printf(\"--------------------\\n\"); } printf(\"%.3lf\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20181002-HNOI2011-XOR/"},{"title":"「HNOI2014」世界树-虚树+树形dp","text":"世界树的形态可以用一个数学模型来描述：世界树中有 $n$ 个种族，种族的编号分别从 $1$ 到 $n$，分别生活在编号为 $1$ 到 $n$ 的聚居地上，种族的编号与其聚居地的编号相同。有的聚居地之间有双向的道路相连，道路的长度为 $1$。保证连接的方式会形成一棵树结构，即所有的聚居地之间可以互相到达，并且不会出现环。定义两个聚居地之间的距离为连接他们的道路的长度；例如，若聚居地 $a$ 和 $b$ 之间有道路，$b$ 和 $c$ 之间有道路，因为每条道路长度为 $1$ 而且又不可能出现环，所以 $a$ 与 $c$ 之间的距离为 $2$。 出于对公平的考虑，第 $i$ 年，世界树的国王需要授权 $m_i$ 个种族的聚居地为临时议事处。对于某个种族 $x$（$x$ 为种族的编号），如果距离该种族最近的临时议事处为 $y$（$y$ 为议事处所在聚居地的编号），则种族 $x$ 将接受 $y$ 议事处的管辖（如果有多个临时议事处到该聚居地的距离一样，则 $y$ 为其中编号最小的临时议事处）。 现在国王想知道，在 $q$ 年的时间里，每一年完成授权后，当年每个临时议事处将会管理多少个种族（议事处所在的聚居地也将接受该议事处管理）。 现在这个任务交给了以智慧著称的灵长类的你：程序猿。请帮国王完成这个任务吧。 链接Luogu P3233 题解我们可以对于每次询问先构造出虚树。 对于虚树上的节点，我们可以用 $O(m_i)$ 的时间求出虚树上的每个节点距离最近的点。（树形 dp 求出每个节点上方和下方的节点的最近距离然后取 min） 然后我们对于每条边分类讨论，我们可以计算出来所有连接到这个虚树边上的点的个数，也就是 $siz[u] - siz[v]$。如果这个时候我们的 $u,v$ 能够到达的最近关键点相同，那么这个时候我们就把连到这个边上的点全部都划分给这个相同的关键点；否则我们求出两个点到关键的距离差，然后找到划分最近关键点，用倍增找到这个点，然后划分出两部分分别累加至对应关键点即可。（看起来没几句话，调起来emmm） 时间复杂度大约是 $O(n \\log n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 310000,logn = 19;struct Graph{ struct Edge{ int to,nex; }edge[MAXN*2];int ecnt; int fir[MAXN]; void addedge(int u,int v){ edge[ecnt] = (Edge){v,fir[u]}; fir[u] = ecnt++; } Edge &amp; operator [](int e){ return edge[e]; } Graph(){ ecnt = 2; }}G1,G2;int n,q,m;struct Node{ int x;}h[MAXN];int f[MAXN][logn],vis[MAXN],dfn[MAXN],ans[MAXN],siz[MAXN],dep[MAXN],cnt;bool cmp(Node a,Node b){ return dfn[a.x] &lt; dfn[b.x];}int lca(int x,int y){ if(x == 0 || y == 0) return 0; if(dep[x] &lt; dep[y]) swap(x,y); for(int j = logn-1;j&gt;=0;j--){ if(dep[f[x][j]] &gt;= dep[y]) x = f[x][j]; } if(x == y) return x; for(int j = logn-1;j&gt;=0;j--){ if(f[x][j] != f[y][j]) x = f[x][j],y = f[y][j]; } return f[x][0];}int find_fa(int x,int t){ int tar = dep[x]-t; for(int j = logn-1;j&gt;=0;--j){ if(dep[f[x][j]] &gt;= tar) x = f[x][j]; } return x;}int dis(int x,int y){ return dep[x] + dep[y] - 2*dep[lca(x,y)];}void dfs0(int nown,int fa,int depth){ f[nown][0] = fa,dfn[nown] = ++cnt,siz[nown] = 1; dep[nown] = depth; for(int nowe = G1.fir[nown];nowe;nowe = G1[nowe].nex){ int v = G1[nowe].to; if(v == fa) continue; dfs0(v,nown,depth+1); siz[nown] += siz[v]; }}void build(){ dfs0(1,0,1); for(int j = 1;j&lt;=logn-1;j++){ for(int i = 1;i&lt;=n;i++){ f[i][j] = f[f[i][j-1]][j-1]; } }}void build_tree(){ if(vis[1] == 0) h[++m] = (Node){1}; G2.ecnt = 2; sort(h+1,h+m+1,cmp); static int stk[MAXN];int top = 0;//[0,top] for(int i = 1;i&lt;=m;i++){ int L = lca(h[i].x,stk[top]); if(L == stk[top]){ stk[++top] = h[i].x; } else{ while(top &gt;= 1 &amp;&amp; dep[stk[top-1]] &gt;= dep[L]){ int nown = stk[top-1],v = stk[top]; G2.addedge(nown,v); top--; } if(stk[top] != L){ G2.addedge(L,stk[top]); stk[top] = L; } stk[++top] = h[i].x; } } while(top &gt;= 1){ G2.addedge(stk[top-1],stk[top]); top--; }}int near[MAXN],dist[MAXN];void dfs1(int nown,int fa){ if(vis[nown] == 1) near[nown] = nown,dist[nown] = 0; else dist[nown] = 0x3f3f3f3f; for(int nowe = G2.fir[nown];nowe;nowe = G2[nowe].nex){ int v = G2[nowe].to; dfs1(v,nown); int d = dist[v] - dep[nown] + dep[v]; if(d &lt; dist[nown] || (d == dist[nown] &amp;&amp; near[v] &lt; near[nown])){ near[nown] = near[v]; dist[nown] = d; } }}void dfs2(int nown,int fa,int nst){ int d = dis(nst,nown); if(nst != -1 &amp;&amp; (d &lt; dist[nown] || (d == dist[nown] &amp;&amp; nst &lt; near[nown]))){ near[nown] = nst; dist[nown] = d; } else{ nst = near[nown]; } for(int nowe = G2.fir[nown];nowe;nowe = G2[nowe].nex){ int v = G2[nowe].to; if(v == fa) continue; dfs2(v,nown,nst); }}int id[MAXN];void dfs3(int nown,int fa){ int _siz = 0; for(int nowe = G2.fir[nown];nowe;nowe = G2[nowe].nex){ int v = G2[nowe].to,len = dep[v] - dep[nown]; dfs3(v,nown); _siz += siz[find_fa(v,len-1)]; } ans[id[near[nown]]] += siz[nown] - _siz; // 直接与当前节点相邻的子树（不在虚树路径上）都属于该节点 for(int nowe = G2.fir[nown];nowe;nowe = G2[nowe].nex){ int v = G2[nowe].to,len = dep[v] - dep[nown]; int tmp = siz[find_fa(v,len-1)] - siz[v];// 所有可能被这两个节点掌控的节点 if(len == 1) continue; if(near[nown] == near[v]){ ans[id[near[nown]]] += tmp; continue; } else{ int ww = dist[nown] - dist[v] + len;// 理论上第 ww/2 个祖先相同距离 if(ww == 0){ ans[id[near[nown]]] += tmp;continue; } if(ww == 2*len){ ans[id[near[v]]] += tmp; continue; } if((ww &amp; 1) == 0){ int x = find_fa(v,ww/2-1),y = f[x][0]; ans[id[min(near[v],near[nown])]] += siz[y] - siz[x]; tmp -= (siz[y] - siz[x]); } int xx = find_fa(v,(ww-1)/2),tt = siz[xx] - siz[v]; ans[id[near[v]]] += tt,ans[id[near[nown]]] += tmp - tt; } } G2.fir[nown] = 0;}void calc(){ build_tree(); dfs1(1,0); dfs2(1,0,-1); dfs3(1,0);}void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n-1;i++){ int u,v; scanf(\"%d %d\",&amp;u,&amp;v); G1.addedge(u,v),G1.addedge(v,u); }}void solve(){ scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++){ scanf(\"%d\",&amp;m); for(int j = 1;j&lt;=m;j++){ int x; scanf(\"%d\",&amp;x); h[j] = (Node){x}; ans[j] = 0,id[x] = j; vis[x] = 1; } int mm = m; calc(); for(int j = 1;j&lt;=mm;j++){ printf(\"%d \",ans[j]); vis[h[j].x] = 0; } vis[h[m].x] = 0; printf(\"\\n\"); }}int main(){ init(); build(); solve(); return 0; }","link":"/20181021-HNOI2014-worldtree/"},{"title":"「JLOI2011」飞行路线-分层图最短路","text":"Alice和Bob现在要乘飞机旅行，他们选择了一家相对便宜的航空公司。该航空公司一共在 $n$ 个城市设有业务，设这些城市分别标记为 $0$ 到 $n-1$，一共有 $m$ 种航线，每种航线连接两个城市，并且航线有一定的价格。 Alice和Bob现在要从一个城市沿着航线到达另一个城市，途中可以进行转机。航空公司对他们这次旅行也推出优惠，他们可以免费在最多 $k$ 种航线上搭乘飞机。那么Alice和Bob这次出行最少花费多少？ 链接Luogu P4568 题解建出 $k+1$ 层图，$i$ 层往 $i+1$ 层在原图边上的位置加边权为 $0$ 的边，其余每层正常加边，第一层的 $s$ 向 $k+1$ 层的 $t$ 跑最短路即可。 数组要开够emmm 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 510000,MAXM = 4010000;struct Edge{ int to,len,nex;}edge[MAXM];int ecnt = 2;int fir[MAXN];void addedge(int a,int b,int c){ edge[ecnt] = (Edge){b,c,fir[a]}; fir[a] = ecnt++;}int n,m,k,s,t;int _hash(int nown,int c){ return (c-1) * n + nown;}void init(){ scanf(\"%d %d %d %d %d\",&amp;n,&amp;m,&amp;k,&amp;s,&amp;t); s++,t++; for(int i = 1;i&lt;=m;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); a++,b++; for(int w = 1;w&lt;=k+1;w++){ addedge(_hash(a,w),_hash(b,w),c); addedge(_hash(b,w),_hash(a,w),c); if(w != k+1){ addedge(_hash(a,w),_hash(b,w+1),0); addedge(_hash(b,w),_hash(a,w+1),0); } } }}int dis[MAXN],vis[MAXN];struct Node{ int x,d; bool operator &lt; (const Node &amp;_n)const{ return d &gt; _n.d; }};priority_queue&lt;Node&gt; q;void dij(){ while(!q.empty()) q.pop(); memset(dis,0x3f,sizeof(dis)); memset(vis,0,sizeof(vis)); int ss = _hash(s,1),tt = _hash(t,k+1); dis[ss] = 0; q.push((Node){ss,0}); while(!q.empty()){ Node now = q.top();q.pop(); int nown = now.x,nowd = now.d; if(vis[nown] == 1) continue; vis[nown] = 1,dis[nown] = nowd; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,len = edge[nowe].len; if(nowd + len &lt; dis[v]){ dis[v] = nowd + len; q.push((Node){v,dis[v]}); } } }}void solve(){ dij(); printf(\"%d\\n\",dis[_hash(t,k+1)]);}int main(){ init(); solve(); return 0;}","link":"/20181026-JLOI2011-flight/"},{"title":"「IOI2014」Wall-线段树","text":"给定一个长度为 $n$ 且初始值全为 $0$ 的序列。你需要支持以下两种操作： $Add\\, L, R, h$ ：将序列 $[L, R]$ 内所有值小于 $h$ 的元素都赋为 $h$，此时不改变高度大于 $h$ 的元素值 $Remove\\, L, R, h$：将序列 $[L, R]$ 内所有值大于 $h$ 的元素都赋为 $h$ ，此时不改变高度小于 $h$ 的元素值 你需要输出进行 $k$ 次上述操作之后的序列。 链接Luogu P4560 题解维护两个标记，近乎于线段树裸题。不过这种写法很有趣，可以积累一下。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 2100000,INF = 0x3f3f3f3f;namespace SegTree{#define ls (o&lt;&lt;1)#define rs (o&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)int high[MAXN&lt;&lt;2],low[MAXN&lt;&lt;2];// op == 1 修改向上 op == 2 修改向下void turn(int o,int v,int op){ if(op == 1){ low[o] = max(low[o],v); high[o] = max(high[o],v); } if(op == 2){ low[o] = min(low[o],v); high[o] = min(high[o],v); }}void push_down(int o){ if(high[o]!=INF){turn(ls,high[o],2),turn(rs,high[o],2),high[o]=INF;} if(low[o]!=0){turn(ls,low[o],1),turn(rs,low[o],1),low[o]=0;}}void update(int o,int l,int r,int ql,int qr,int v,int op){ if(ql &lt;= l &amp;&amp; r &lt;= qr) turn(o,v,op); else{ push_down(o); if(ql &lt;= mid) update(ls,l,mid,ql,qr,v,op); if(qr &gt;= mid+1) update(rs,mid+1,r,ql,qr,v,op); }}void output(int o,int l,int r,int *num){ if(l == r) num[l] = high[o]; else{ push_down(o); output(ls,l,mid,num); output(rs,mid+1,r,num); }}}int n,m;void init(){ read(n),read(m);}void solve(){ int op,l,r,c; for(int i = 1;i&lt;=m;i++){ read(op),read(l),read(r),read(c); SegTree::update(1,1,n,l+1,r+1,c,op); } static int ans[MAXN]; SegTree::output(1,1,n,ans); for(int i = 1;i&lt;=n;i++){ print(ans[i]),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180717-IOI2014-Wall/"},{"title":"「JSOI2007」字符加密-后缀数组","text":"喜欢钻研问题的 $JS$ 同学，最近又迷上了对加密方法的思考。一天，他突然想出了一种他认为是终极的加密办法：把需要加密的信息排成一圈，显然，它们有很多种不同的读法。 例如 JSOI07 ，可以读作： JSOI07 SOI07J OI07JS I07JSO 07JSOI 7JSOI0 ，把它们按照字符串的大小排序： 07JSOI 7JSOI0 I07JSO JSOI07 OI07JS SOI07J 读出最后一列字符：I0O7SJ，就是加密后的字符串。 但是，如果想加密的字符串实在太长，你能写一个程序完成这个任务吗？ 链接Luogu P4051 题解复制字符串，然后跑 $SA$ ，得到 $sa$ 数组，然后在上面顺序扫描，扫描到最前面 $n$ 个在 $1$ 到 $n$ 之间开始的后缀，然后获取其第 $n$ 个字符即可。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int MAXN = 210000;namespace SA{ int s[MAXN],sa[MAXN],rk[MAXN],x[MAXN],y[MAXN],cnt[MAXN]; void get_sa(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]] ++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] == s[sa[i-1]] ? m : ++m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) return; //printf(\"!!!\\n\"); for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k=j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i] - j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]]==y[sa[i-1]]&amp;&amp;y[sa[i]+j]==y[sa[i-1]+j])?m:++m; } } void solve(char *str,int n){ for(int i = 0;i&lt;n;i++){ s[i] = str[i]; } s[n] = 0; get_sa(++n,127); } void get_ans(char *ans,int n){ int cnt = 0; for(int i = 1;i&lt;=2*n;i++){ int t = sa[i]; if(t &lt; n){ ans[cnt++] = s[t+n-1]; } } }}int n;char s[MAXN];char ans[MAXN];void init(){ scanf(\"%s\",s); n = strlen(s);}void solve(){ for(int i = 0;i&lt;n;i++) s[n+i] = s[i]; SA::solve(s,2*n); SA::get_ans(ans,n); printf(\"%s\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180911-JSOI2007-character/"},{"title":"「CQOI2015」任务查询系统-可持久化线段树","text":"超级计算机中的任务用三元组$(S_i,E_i,P_i)$描述，$(S_i,E_i,P_i)$表示任务运行区间为$[S_i,E_i]$,其优先级为$P_i$。 给出$n$个任务。随后给出$m$个询问，第$X_i$秒正在运行的任务中，优先级最小的$K_i$个任务的优先级之和是多少。特别的，如果$K_i$大于第$X_i$秒正在运行的任务总数，则直接回答第$X_i$秒正在运行的任务优先级之和。 强制在线。 链接Luogu P3128 题解注意到这个问题主要就是区间的权值修改，以及单点的求和（求值），我们可以采用差分的办法。 \b首先对任务离线后分成$(S_i,P_i,1)$，$(E_i+1,P_i,-1)$两个修改，排序后\b扫一遍进行修改。 查询第$X_i$秒的时候，我们注意到我们\b每个时间所对应的线段树\b其实就是\b差分的前缀和，所以我们直接在第$X_i$个线段树上求前$K_i$个数的和就好了。注意在叶子结点需要分类讨论，看\b叶子结点有没有取全。 数据范围很大（？），需要离散化，这里用了map。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#include &lt;cctype&gt;#include &lt;vector&gt;#define ll long longusing namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 200000;map&lt;int,int&gt; S;int last[MAXN];namespace prSegTree{ int val[MAXN*50],ls[MAXN*50],rs[MAXN*50]; ll sum[MAXN*50];int cnt = 0; #define mid ((l+r)&gt;&gt;1) void maintain(int nown,int l,int r){ val[nown] = val[ls[nown]] + val[rs[nown]]; sum[nown] = sum[ls[nown]] + sum[rs[nown]]; } void insert(int &amp;nown,int pre,int l,int r,int pos,int d){ nown = ++cnt;ls[nown] = ls[pre],rs[nown] = rs[pre]; val[nown]=val[pre]+d,sum[nown]=sum[pre]+1ll * d * last[pos]; if(l == r) return; else{ if(pos &lt;= mid) insert(ls[nown],ls[pre],l,mid,pos,d); if(mid+1 &lt;= pos) insert(rs[nown],rs[pre],mid+1,r,pos,d); } } ll query(int nown,int l,int r,int k){ if(l == r){ if(k&gt;=val[nown]) return sum[nown]; else return k * last[l]; } else{ int sumn = val[ls[nown]]; if(k &lt;= sumn) return query(ls[nown],l,mid,k); else if(sumn + 1 &lt;= k) return sum[ls[nown]] + query(rs[nown],mid+1,r,k-sumn); } }}int n,m,totn,maxt,rt[MAXN];vector&lt;int&gt; qq[MAXN];void init(){ read(n),read(m); int a,b,c; maxt = n; for(int i = 1;i&lt;=n;i++){ read(a),read(b),read(c); qq[a].push_back(c); qq[b+1].push_back(-c); maxt = max(maxt,b+1); S[c] = 0; } for(auto it = S.begin();it!=S.end();it++){ it-&gt;second = ++totn; last[totn] = it-&gt;first; } for(int i = 1;i&lt;=maxt;i++){ rt[i] = rt[i-1]; for(int j = 0;j&lt;qq[i].size();j++){ prSegTree::insert(rt[i],rt[i],1,totn,(S[abs(qq[i][j])]),qq[i][j] &gt; 0? 1 : -1); } }}void solve(){ ll last = 1,ans; int x,k,a,b,c; for(int i = 1;i&lt;=m;i++){ read(x),read(a),read(b),read(c); k = 1+(a*last+b)%c; ans = prSegTree::query(rt[x],1,totn,k); printf(\"%lld\\n\",ans); last = ans; }}int main(){ init(); solve(); return 0;}","link":"/20180516-CQOI2015-mission/"},{"title":"「LNOI2014」LCA-树链剖分-差分","text":"给出一个$n$个节点的有根树。有$q$次询问，每次询问给出$l,r,z$，求$\\sum_{l \\leq i \\leq r}dep[LCA(i,z)]$。 链接Luogu P4211 题解神仙题…真是不知道考场上有没有人能够想到。 给出这样一个结论： 节点$x$和$y$的$lca$到根节点的距离等于在$x$到根节点的路径上且$y$到根节点的路径上的节点个数。 所以如果我们将$[l,r]$中的点到根节点的路径上所有的节点的值分别加$1$，这个时候$z$到根节点的路径上的权值和就是查询$(l,r,z)$的答案。 而且我们注意到这个问题满足区间可减性： 即设$sum(l,r) = \\sum_{l\\leq i\\leq r}{dep[LCA(i,z)]}$，有$sum(l,r) = sum(1,r)-sum(1,l-1)$。 因此，我们将询问$(l,r,z)$分离成$(l-1,z)$和$(r,z)$。 我们用$(t_i,pos_i)$代表询问。按照$t_i$为第一关键字进行排序离线之后查询。每次查询的时候，使得$1~t_i$的所有节点都已经把往根节点的路径上都做了修改，那么我们只需要查询一个$(1,pos_i)$的路径上的节点的权值和即可。 这个东西如果用树链剖分+线段树，复杂度是$O(n \\log^{2}{n})$，如果用LCT，复杂度是$O(n\\log n)$。 其实我感觉这道题完全可以出到$200000$，然后给$O(n \\log^{2}{n})$五六十分部分分。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 210000,mod = 201314;int n,m;vector&lt;int&gt; edge[MAXN];int dep[MAXN],son[MAXN],top[MAXN],siz[MAXN],fa[MAXN],id[MAXN],cnt = 0;void dfs1(int nown,int f,int depth){ siz[nown] = 1;dep[nown] = depth; fa[nown] = f; for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(v == f) continue; dfs1(v,nown,depth+1); siz[nown] += siz[v]; if(siz[v] &gt; siz[son[nown]]) son[nown] = v; }}void dfs2(int nown,int topf){ top[nown] = topf; id[nown] = ++cnt; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(v == fa[nown] || v == son[nown]) continue; dfs2(v,v); }}namespace SegTree{ int sumn[MAXN],addn[MAXN]; #define lson (nown&lt;&lt;1) #define rson ((nown&lt;&lt;1)|1) #define mid ((l+r)&gt;&gt;1) void push_up(int nown){ sumn[nown] = sumn[lson] + sumn[rson]; sumn[nown] %= mod; } void add(int nown,int l,int r,int d){ sumn[nown] += d*(r-l+1); addn[nown] += d; sumn[nown] %= mod,addn[nown] %= mod; } void push_down(int nown,int l,int r){ if(addn[nown]){ add(lson,l,mid,addn[nown]); add(rson,mid+1,r,addn[nown]); addn[nown] = 0; } } void add(int nown,int l,int r,int ql,int qr,int d){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ add(nown,l,r,d); } else{ push_down(nown,l,r); if(ql &lt;= mid) add(lson,l,mid,ql,qr,d); if(mid+1 &lt;= qr) add(rson,mid+1,r,ql,qr,d); push_up(nown); } } int query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr) return sumn[nown]; else{ push_down(nown,l,r); int ans = 0; if(ql &lt;= mid) ans += query(lson,l,mid,ql,qr); if(mid + 1 &lt;= qr) ans += query(rson,mid+1,r,ql,qr); ans %= mod; return ans; } } void build(int nown,int l,int r){ ; }}struct Q{ int ti,pos,id; Q(int t,int p,int i):ti(t),pos(p),id(i){;} bool operator&lt;(Q a) const{ return ti &lt; a.ti; }};vector&lt;Q&gt; q;int ans[MAXN&lt;&lt;2],qa[MAXN][2];void init(){ read(n),read(m); int a,b,c; for(int i = 2;i&lt;=n;i++){ read(a); edge[i].push_back(a+1); edge[a+1].push_back(i); } int tot; for(int i = 1;i&lt;=m;i++){ read(a),read(b),read(c); q.push_back(Q(a,c+1,++tot)); qa[i][0] = tot; q.push_back(Q(b+1,c+1,++tot)); qa[i][1] = tot; }}void w_add(int u,int v,int d = 1){ while(top[u]!=top[v]){ if(dep[top[u]] &lt; dep[top[v]]) swap(u,v); SegTree::add(1,1,n,id[top[u]],id[u],d); u = fa[top[u]]; } if(dep[u] &gt; dep[v]) swap(u,v); SegTree::add(1,1,n,id[u],id[v],d);}int w_query(int u,int v){ int ans = 0; while(top[u] != top[v]){ if(dep[top[u]] &lt; dep[top[v]]) swap(u,v); ans += SegTree::query(1,1,n,id[top[u]],id[u]); u = fa[top[u]]; ans %= mod; } if(dep[u] &gt; dep[v]) swap(u,v); ans += SegTree::query(1,1,n,id[u],id[v]); ans %= mod; return ans;}void solve(){ sort(q.begin(),q.end()); dfs1(1,0,1); dfs2(1,1); int nowt = 0; for(int i = 0;i &lt; q.size();i++){ while(q[i].ti &gt; nowt) w_add(1,++nowt); ans[q[i].id] = w_query(1,q[i].pos); } for(int i = 1;i&lt;=m;i++) print((ans[qa[i][1]]-ans[qa[i][0]]+mod+mod+mod)%mod),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180602-LNOI2014-lca/"},{"title":"「JSOI2007」文本生成器-AC自动机+dp","text":"可读版题意： 给定$n$个仅包含大写字母的模板串，求所有的长度为$M$且仅包含大写字母的不同字符串中，有多少个包含至少一个模板串。答案对$10007$取模。 原题意： $JSOI$交给队员$ZYX$一个任务，编制一个称之为“文本生成器”的电脑软件：该软件的使用者是一些低幼人群，他们现在使用的是$GW$文本生成器$v6$版。 该软件可以随机生成一些文章――总是生成一篇长度固定且完全随机的文章，也就是说，生成的文章中每个字节都是完全随机的。如果一篇文章中至少包含使用者们了解的一个单词，那么我们说这篇文章是可读的（我们称文章$a$包含单词$b$，当且仅当单词$b$是文章$a$的子串）。但是，即使按照这样的标准，使用者现在使用的$GW$文本生成器$v6$版所生成的文章也是几乎完全不可读的。$ZYX$需要指出$GW$文本生成器 $v6$ 生成的所有文本中可读文本的数量，以便能够成功获得 $v7$ 更新版。你能帮助吗？ 链接Luogu P4052 题解正难则反。不如我们考虑所有长度为$M$的字符串，一个模版串都不出现的情况数。 神似GT考试啊，只不过模版从一个变成了多个，那么我们就用$AC$自动机代替KMP。 状态：$dp[i][j]$表示在$AC$自动机的第$i$个节点上，还有$j$位的符合条件的子串数量。 先建立$AC$自动机，补全$Trie$图。 然后将所有不是$end$节点且$fail$指针一路指向的没有$end$节点的点的$dp[i][0]$ 设为$1$。 然后将26种情况转移即可。注意这里也不要转移上面的$dp[i][0] = 0$的节点，来方便我们的处理，不用特判。 最后答案是$dp[root][M]$。 这里比较有趣，我想了想能不能用矩阵快速幂。但是，这个地方的转移\b矩阵最大有可能\b到$10000\\times 10000$，会凉凉233。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#define ll long long#define mod 10007#define sigma_size 26using namespace std;const int MAXN = 7000,MAXM = 110;struct AC_automaton{ int c[MAXN][sigma_size],f[MAXN],end[MAXN]; int root,cnt; AC_automaton(){ root = cnt = 0; } void insert(char *str){ int n = strlen(str),nown = root; for(int i = 0;i&lt;n;i++){ if(!c[nown][str[i]-'A']) c[nown][str[i]-'A'] = ++cnt; nown = c[nown][str[i]-'A'];; } end[nown] |= 1; } void get_fail(){ queue&lt;int&gt; q; while(!q.empty()) q.pop(); for(int i = 0;i&lt;sigma_size;i++){ if(c[root][i]){ f[c[root][i]] = root; q.push(c[root][i]); } } while(!q.empty()){ int nown = q.front();q.pop(); for(int i = 0;i&lt;sigma_size;i++){ if(c[nown][i]){ f[c[nown][i]] = c[f[nown]][i]; end[c[nown][i]] |= end[f[c[nown][i]]]; q.push(c[nown][i]); } else c[nown][i] = c[f[nown]][i]; } } }};AC_automaton AC;int n,m;char ch[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",ch); AC.insert(ch); } AC.get_fail();}void solve(){ static ll dp[MAXN][MAXM]; for(int i = 0;i&lt;=AC.cnt;i++) if(!AC.end[i]) dp[i][0] = 1; for(int j = 1;j&lt;=m;j++){ for(int i = 0;i&lt;=AC.cnt;i++){ if(!AC.end[i]){ for(int k = 0;k&lt;sigma_size;k++) dp[i][j] += dp[AC.c[i][k]][j-1]; dp[i][j] %= mod; } } } int ans = 1; for(int i = 1;i&lt;=m;i++){ ans *= sigma_size; ans %= mod; } printf(\"%lld\\n\",(ans-dp[0][m]+mod)%mod);}int main(){ init(); solve(); return 0;}","link":"/20180811-JSOI2007-generator/"},{"title":"「JLOI2015」城池攻占-左偏树","text":"有 $m$ 个骑士攻占 $n$ 个城池。除 $1$ 号城池外，城池 $i$ 会受到另一座城池 $f_i$ 的管辖，其中 $f_i &lt; i$。也就是说，所有城池构成了一棵有根树。第 $i$ 个骑士的初始战斗力为 $s_i$，第一个攻击的城池为 $c_i$。 每个城池有一个防御值 $h_i$，如果一个骑士的战斗力大于等于城池的生命值，那么骑士就可以占领这座城池；否则占领失败，骑士将在这座城池牺牲。占领一个城池以后，骑士的战斗力将发生变化，然后继续攻击管辖这座城池的城池，直到占领 $1$ 号城池，或牺牲为止。 除 $1$ 号城池外，每个城池 $i$ 会给出一个战斗力变化参数 $a_i$;$v_i$。若 $a_i = 0$，攻占城池 $i$ 以后骑士战斗力会增加 $v_i$；若 $a_i = 1$，攻占城池 $i$ 以后，战斗力会乘以 $v_i$。注意每个骑士是单独计算的。也就是说一个骑士攻击一座城池，不管结果如何，均不会影响其他骑士攻击这座城池的结果。 对于每个城池，输出有多少个骑士在这里牺牲；对于每个骑士，输出他攻占的城池数量。 链接Luogu P3261 题解这个问题是可以离线的，我们不需要在线的回答每一个骑士的问题。 所以我们思考如何对于这个问题进行处理。 考虑所有到达某个节点的人。在这些人中，都会有一些攻击力最小的人在这个节点死掉。这个时候剩下的人的攻击力的大小关系并不会改变。 所以我们有两个选择：平衡树、堆。 这个时候我们思考一下对于所有下面活着的人如何再攻击上面的城池。这个时候其实就是所有某个节点所有的子节点的活着的人合并到一起。用启发式合并的话，复杂度是$O(n \\log^2 n)$，如果用左偏树的话，复杂度就是$O(n \\log n)$。 在最上面添加一个虚拟的节点把所有人都牺牲了就好。 这里的加法和乘法类似线段树，维护lazy标记下传即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#include &lt;cstdio&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;typedef long long ll;using namespace std;namespace fast_io{ //...}using namespace fast_io;const int MAXN = 310000;namespace MH{int l[MAXN],r[MAXN],d[MAXN];ll v[MAXN],addn[MAXN],muln[MAXN];inline void add(int x,ll val){ if(!x) return; v[x]+=val,addn[x]+=val;}inline void mul(int x,ll val){ if(!x) return; v[x]*=val,addn[x]*=val,muln[x] *= val;}inline void push_down(int x){ if(!x) return; if(muln[x]!=1){ mul(l[x],muln[x]),mul(r[x],muln[x]); muln[x] = 1; } if(addn[x]){ add(l[x],addn[x]),add(r[x],addn[x]); addn[x] = 0; }}inline int merge(int x,int y){ if(x == y) return x; if(!x || !y) return x+y; if(v[x] &gt; v[y]) swap(x,y); push_down(x); r[x] = merge(r[x],y); if(d[l[x]] &lt; d[r[x]]) swap(l[x],r[x]); d[x] = d[r[x]] + 1; return x;}inline ll top(int x){ return v[x];}inline int del(int x){ push_down(x); int t = merge(l[x],r[x]); l[x] = r[x] = d[x] = 0; return t;}inline void init(int n,ll *num){ for(int i = 1;i&lt;=n;i++) v[i] = num[i],l[i] = r[i] = d[i] = addn[i] = 0,muln[i] = 1;}}int n,m,root;ll h[MAXN];int f[MAXN],a[MAXN];ll v[MAXN];ll s[MAXN];int c[MAXN],dep[MAXN];int ans1[MAXN],ans2[MAXN];vector&lt;int&gt; edge[MAXN];vector&lt;int&gt; st[MAXN];void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(h[i]); for(int i = 2;i&lt;=n;i++){ read(f[i]),read(a[i]),read(v[i]); edge[f[i]].push_back(i); } for(int i = 1;i&lt;=m;i++){ read(s[i]),read(c[i]); st[c[i]].push_back(i); } root = m+1; edge[root].push_back(1); h[root] = (long long)(1e18); MH::init(m,s);}int dfs(int nown){ int ans = 0,tmp = 0; for(int i = 0;i &lt; edge[nown].size();i++){ int v = edge[nown][i]; dep[v] = dep[nown] + 1; tmp = dfs(v); ans = MH::merge(ans,tmp); } for(int i = 0;i&lt;st[nown].size();i++) ans = MH::merge(st[nown][i],ans); while(MH::top(ans) &lt; h[nown] &amp;&amp; ans!=0){ ans1[nown]++; tmp = ans; ans2[tmp] = dep[c[tmp]] - dep[nown]; ans = MH::del(ans); } if(a[nown] == 0) MH::add(ans,v[nown]); else if(a[nown] == 1) MH::mul(ans,v[nown]); return ans;}void output(){ for(int i = 1;i&lt;=n;i++) print(ans1[i]),print('\\n'); for(int i = 1;i&lt;=m;i++) print(ans2[i]),print('\\n');}signed main(){ init(); dfs(root); output(); flush(); return 0;}","link":"/20180721-JLOI2015-fail/"},{"title":"「JSOI2008」球形空间产生器-高斯消元","text":"有一个球形空间产生器能够在 $n$ 维空间中产生一个坚硬的球体。现在，你被困在了这个 $n$ 维球体中，你只知道球面上 $n+1$ 个点的坐标，你需要以最快的速度确定这个 $n$ 维球体的球心坐标，以便于摧毁这个球形空间产生器。 提示：给出两个定义： 球心：到球面上任意一点距离都相等的点。 距离：设两个n为空间上的点A, B的坐标为$(a_1, a_2, \\cdots , a_n)$ , $(b_1, b_2, \\cdots , b_n)$，则 AB 的距离定义为：$dist = \\sqrt{ \\sum_{i=1}^{n}(a_i - b_i)^2 }$ 链接Luogu P4035 题解设圆心为 $(x_1,x_2, \\cdots ,x_n)$ 。 则我们有 $n$ 个式子，形如 $$\\sum_{i=1}^{n}(p[j][i] - x_i)^2 = \\sum_{i=1}^{n}(p[j+1][i] - x_i)^2$$ 化简得到 $$\\sum_{i=1}^{n}(p[j][i]^2 - 2p[j][i] \\cdot x_i) = \\sum_{i=1}^{n}(p[j+1][i]^2 - 2p[j+1][i] \\cdot x_i)\\\\ \\sum_{i=1}^{n} [2(p[j+1][i]-p[j][i]) \\cdot x_i] = - \\sum_{i=1}^{n}(p[j][i]^2 - p[j+1][i]^2)$$ 高斯消元即可… 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstdlib&gt;#include &lt;algorithm&gt;using namespace std;const double eps = 1e-8;double squ(double x){return x * x;}const int MAXN = 410;int n;double p[MAXN][MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n+1;i++){ for(int j = 1;j&lt;=n;j++){ scanf(\"%lf\",&amp;p[i][j]); } }}bool gauss(int n,double a[MAXN][MAXN]){ for(int i = 1;i&lt;=n;i++){ int r = i; for(int j = i+1;j&lt;=n;j++){ if(fabs(a[j][i]) &gt; fabs(a[r][i])) r = j; } if(fabs(a[r][i]) &lt;= eps) return false; if(r != i){ for(int j = 1;j&lt;=n+1;j++) swap(a[i][j],a[r][j]); } for(int j = 1;j&lt;=n;j++)if(j!=i){ double d = a[j][i]/a[i][i]; for(int k = 1;k&lt;=n+1;k++){ a[j][k] -= d * a[i][k]; } } } for(int i = 1;i&lt;=n;i++){ a[i][n+1] /= a[i][i]; a[i][i] = 1; } return true;}void solve(){ static double a[MAXN][MAXN]; for(int j = 1;j&lt;=n;j++){ for(int i = 1;i&lt;=n;i++){ a[j][i] = 2 * (p[j+1][i] - p[j][i]); a[j][n+1] -= squ(p[j][i]) - squ(p[j+1][i]); } } gauss(n,a); for(int i = 1;i&lt;=n;i++){ printf(\"%.3lf \",a[i][n+1]); } printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20181125-JSOI2008-sphere/"},{"title":"「Luogu1043」数字游戏-dp","text":"在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。 例如，对于下面这圈数字（$n$=4，$m$=2）： 要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。 丁丁请你编写程序帮他赢得这个游戏。 链接Luogu P1043 题解很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。 update: 这是我写的第一篇题解啦！ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;long long num[150],dp_1[150],dp_2[150];//_1放最大值,_2放最小值int n,m;inline int mod(long long nnn){//mod函数 int w = int(floor(double(nnn)/10)); return nnn - w*10;}int main(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){//断环为链的准备 scanf(\"%lld\",&amp;(num[i])); num[i+n] = num[i]; } for(int i = 1;i&lt;=2*n;i++)//前缀和的处理 num[i] = num[i-1]+num[i]; //正经dp long long maxn = -1,minn = 0x3f3f3f3f; for(int s = 1;s&lt;=n;s++){//枚举起点 memset(dp_1,0,sizeof(dp_1));//清零dp数组 memset(dp_2,0,sizeof(dp_2)); for(int j = 0;j&lt;m;j++){//板子由少到多 for(int i = s;i&lt;=s+n;i++){//上一个插板子的地方 if(j == 0){//j==0的时候的处理，其实也可以叫初始化 dp_1[i] = dp_2[i] = mod(num[s+n]-num[i]); continue; } long long maxtmp = -1,mintmp = 0x3f3f3f3f;//对所有可能下一状态的遍历，并取最大或最小值 for(int x = i+1;x&lt;=s+n-j-1;x++){ maxtmp = max(maxtmp,dp_1[x]*mod(num[x]-num[i])); mintmp = min(mintmp,dp_2[x]*mod(num[x]-num[i])); } dp_1[i] = maxtmp;//取最大最小值 dp_2[i] = mintmp; } } maxn = max(dp_1[s],maxn);//对于起点不同的最大最小值进行更新 minn = min(dp_2[s],minn); } printf(\"%lld\\n%lld\\n\",minn,maxn); return 0;}","link":"/20171223-luogu-1043/"},{"title":"「Luogu2617」Dynamic Rankings-树状数组-可持久化线段树","text":"给定一个含有$n$个数的序列$\\{a_n\\}$，回答询问或执行操作： Q i j k （$1\\leq i\\leq j\\leq n, 1\\leq k\\leq j-i+1$）表示询问$a[i],a[i+1]……a[j]$中第$k$小的数。 C i t ($1 \\leq i \\leq n,0\\leq t \\leq 10^{9}$)表示把$a[i]$改变成为$t$。 链接Luogu P2617 先在这里粗略的讲一讲。 与普通主席树不同，令第$i$个位置的线段树维护$(i-lowbit(i),\\; i\\,]$这个区间的权值线段树，而不是$[1,\\;i\\,]$。 这个时候，我们注意到，对于每一个修改，只会影响到$O(\\log{n})$个线段树。我们直接按树状数组的规则去修改，直接在原节点上建立一颗新树进行更改即可。 而每次查询，也只会需要到$O(\\log{n})$个线段树，也就是两个树状数组前缀和相减，就可以得到指定区间的权值线段树。我们可以按照树状数组的方式先将权值线段树中要加上的节点和要减去的节点全部存到一个数组里，然后就可以按照不带修改区间$k$大差不多的样子去查询了。 这里时空复杂度应该都是$O(n \\log^{2}{n})$。 需要离散化。这里用了map。这里有一个地方易错。离散化出来的数可能比n要大，所以需要另记一个totn在树状数组查询修改和各种地方作为值域使用。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;map&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 50000;int n,m,totn = 0;int rt[MAXN],num[MAXN];int lowbit(int x){return x &amp; (-x);}namespace prSegTree{ int val[MAXN*50],ls[MAXN*50],rs[MAXN*50]; int cnt = 0;int ll[MAXN],rr[MAXN],totx,toty; #define mid ((l+r) &gt;&gt; 1) void insert(int &amp;nown,int pre,int l,int r,int pos,int d){ nown = ++cnt;val[nown] = val[pre] + d; ls[nown] = ls[pre],rs[nown] = rs[pre]; if(l == r) return; else{ if(pos &lt;= mid) insert(ls[nown],ls[pre],l,mid,pos,d); else if(pos &gt;= mid+1) insert(rs[nown],rs[pre],mid+1,r,pos,d); } } void update(int pos,int v,int d){ for(int i = pos;i&lt;=totn;i += lowbit(i)) insert(rt[i],rt[i],1,totn,v,d); } void add(int l,int r){ totx = toty = 0; for(int i = l-1;i;i-=lowbit(i)) ll[++totx] = rt[i]; for(int i = r;i;i-=lowbit(i)) rr[++toty] = rt[i]; } int find_kth(int l,int r,int k){ int sum = 0; if(l == r){ return l; } else{ for(int i = 1;i&lt;=totx;i++) sum -= val[ls[ll[i]]]; for(int i = 1;i&lt;=toty;i++) sum += val[ls[rr[i]]]; if(k &lt;= sum){ for(int i = 1;i&lt;=totx;i++) ll[i] = ls[ll[i]]; for(int i = 1;i&lt;=toty;i++) rr[i] = ls[rr[i]]; return find_kth(l,mid,k); } else{ for(int i = 1;i&lt;=totx;i++) ll[i] = rs[ll[i]]; for(int i = 1;i&lt;=toty;i++) rr[i] = rs[rr[i]]; return find_kth(mid+1,r,k-sum); } } } int query(int l,int r,int k){ add(l,r); return find_kth(1,totn,k); }} map&lt;int,int&gt; S;int last[MAXN];int op[MAXN],ql[MAXN],qr[MAXN],v[MAXN];void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(num[i]),S[num[i]] = 0; char t[23]; for(int i = 1;i&lt;=m;i++){ read(t);read(ql[i]),read(qr[i]); if(t[0] == 'Q') op[i] = 1,read(v[i]); else S[qr[i]] = 0; } for(auto it = S.begin();it != S.end();it++) it-&gt;second = ++totn,last[totn] = it-&gt;first; for(int i = 1;i&lt;=n;i++) prSegTree::update(i,S[num[i]],1);}void solve(){ for(int i = 1;i&lt;=m;i++){ if(op[i] == 0) prSegTree::update(ql[i],S[num[ql[i]]],-1), prSegTree::update(ql[i],S[qr[i]],1),num[ql[i]] = qr[i]; else print(last[prSegTree::query(ql[i],qr[i],v[i])]),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180512-luogu-2617/"},{"title":"「Luogu 2801」教主的魔法-分块","text":"给定一个长度为 $N$ 的数列，每次一个操作或询问： 把闭区间 $[L, R]$ 内的数全部加上一个整数 $W$ 问闭区间 $[L, R]$ 内有多少英雄身高大于等于 $C$ 链接Luogu P2801 题解分块，每块维护一个 $\\text{add}$ 标记，保证块内有序。 整块的修改直接打标记，零散数先减去标记后逐个修改，块内重排。 整块查询减去标记后二分，零散数暴力判断。 注意边界。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;const int MAXN = 1100000,MAXQ = 50000;void read(int &amp;x){scanf(\"%d\",&amp;x);}void read(char *x){scanf(\"%s\",x);}int n,m,a[MAXN],Q;int add[MAXN];int num[MAXN];bool cmp(int a,int b){return a &gt; b;}void cpy(int q){memcpy(num+q*Q,a+q*Q,sizeof(int)*Q);}void sort(int q){sort(num+q*Q,num+min(n,(q+1)*Q),cmp);}int query(int q,int c){ int t = upper_bound(num+q*Q,num+min(n,(q+1)*Q),c,cmp) - (num+q*Q); // printf(\"q:%d c:%d t:%d\\n\",q,c,t); return t;}void init(){ read(n),read(m);Q = sqrt(n)+1; for(int i = 0;i&lt;n;i++){ read(a[i]); if(i/Q != (i+1)/Q || i == n-1) cpy(i/Q),sort(i/Q); }}void modify(int l,int r,int w){ int lq = l/Q,rq = r/Q; if(lq == rq || lq + 1 == rq){ for(int i = l;i&lt;=r;i++) a[i] += w; cpy(lq),sort(lq); cpy(rq),sort(rq); } else{ for(int i = lq+1;i&lt;=rq-1;i++) add[i] += w; for(int i = l;i&lt;(lq+1)*Q;i++) a[i] += w; for(int i = rq*Q;i&lt;=r;i++) a[i] += w; cpy(lq),sort(lq); cpy(rq),sort(rq); }}int query(int l,int r,int c){ int lq = l/Q,rq = r/Q,ans = 0; if(lq == rq || lq + 1 == rq){ for(int i = l;i&lt;=r;i++) if(a[i] + add[i/Q] &gt;= c) ans ++; return ans; } else{ for(int i = lq+1;i&lt;=rq-1;i++) ans += query(i,c-add[i]); for(int i = l;i&lt;(lq+1)*Q;i++) if(a[i] + add[i/Q] &gt;= c) ans ++; for(int i = rq*Q;i&lt;=r;i++) if(a[i] + add[i/Q] &gt;= c) ans ++; return ans; } }void solve(){ char op[10]; int l,r,c; for(int i = 1;i&lt;=m;i++){ read(op),read(l),read(r),read(c); if(op[0] == 'M') modify(l-1,r-1,c); if(op[0] == 'A') printf(\"%d\\n\",query(l-1,r-1,c)); }}int main(){ init(); solve(); return 0;}","link":"/20180909-luogu-2801/"},{"title":"「Luogu3768」简单的数学题-杜教筛","text":"求$$\\sum_{i=1}^n\\sum_{j=1}^n ij\\gcd(i,j))~mod~p$$其中 $n &lt; 10^{10}$。 题解$$ans =\\sum_{i=1}^n\\sum_{j=1}^n ij\\gcd(i,j))~mod~p\\\\=\\sum_{d=1}^n d\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}ijd^2[\\gcd(i,j) == 1]\\\\=\\sum_{d=1}^n d^3 \\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor}ij[\\gcd(i,j) == 1]\\\\$$ 如果我们令 $$f(d) = \\sum_{i=1}^{n}\\sum_{j=1}^{n}ij[\\gcd(i,j) == d]\\\\g(d) = \\sum_{d|k} f(k) = d^2\\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\sum_{j=1}^{\\lfloor\\frac{n}{d}\\rfloor} ij\\\\g(d) = d^2{\\left[\\frac{\\lfloor\\frac{n}{d}\\rfloor(\\lfloor\\frac{n}{d}\\rfloor + 1)}{2}\\right]}^2$$ 令 $sum(x) = \\frac{x(x+1)}{2}$，原式化为： $$g(d) = d^2 \\cdot sum(\\lfloor\\frac{n}{d}\\rfloor)^2$$ 就有： $$f(d) = \\sum_{d|k} \\mu(k) g(\\frac{k}{d})\\\\f(1) = \\sum_{i=1}^n \\mu (i) g(i)\\\\f(1) = \\sum_{i=1}^n \\mu (i) i^2 sum(\\lfloor\\frac{n}{i}\\rfloor)^2$$ 那么： $$ans = \\sum_{d=1}^n d^3 \\sum_{i=1}^{\\lfloor\\frac{n}{d}\\rfloor} \\mu (i) i^2 sum(\\lfloor\\frac{n}{di}\\rfloor)^2$$ 枚举 $id = T$，则有 $$ans = \\sum_{T = 1}^n sum(\\lfloor\\frac{n}{T}\\rfloor)^2 \\sum_{d|T} d^3 \\mu(\\frac{T}{d}) \\times {(\\frac{T}{d})}^2\\\\= \\sum_{T=1}^n T^2 sum(\\lfloor\\frac{n}{T}\\rfloor)^2 \\sum_{d|T} d \\mu(\\frac{T}{d}) \\\\$$ 有 $id*\\mu = \\varphi$ ， 所以 $$ans = \\sum_{T=1}^n sum(\\lfloor\\frac{n}{T}\\rfloor)^2 T^2 \\varphi(T) \\\\$$ 令 $f(x) = x^2 \\varphi(x)$，我们就有$$ans = \\sum_{T=1}^n sum(\\lfloor\\frac{n}{T}\\rfloor)^2 f(T)$$ 注意到 $\\lfloor\\frac{n}{T}\\rfloor$ 只有根号个取值，所以我们想要处理出 $f(T)$ 的前缀和。 杜教筛： $$S(n) = \\sum_{i=1}^{n} h(i) - \\sum_{d = 2}^{n} g(d)S(\\lfloor \\frac{n}{d} \\rfloor)$$ 如果我们令 $g(n) = n^2$ ，那么 $$h(i) = (g*f)(i)=\\sum_{d|i}f(d)g(\\frac{i}{d})=\\sum_{d|i}d^2\\varphi(d){(\\frac{i}{d})}^2\\\\= \\sum_{d|i}\\varphi(d)i^2 = i^3\\\\$$ 又因为$$\\sum_{i=1}^n i^3 = \\left[\\frac{n(n+1)}{2}\\right]^2$$ 所以我们就有 $$S(n) = \\sum_{i=1}^{n} h(i) - \\sum_{d = 2}^{n} g(d)S(\\lfloor \\frac{n}{d} \\rfloor)\\\\= \\left[\\frac{n(n+1)}{2}\\right]^2 - \\sum_{d = 2}^{n} d^2S(\\lfloor \\frac{n}{d} \\rfloor)\\\\$$ 综上： $$ans = \\sum_{T=1}^n sum(\\lfloor\\frac{n}{T}\\rfloor)^2 f(T)\\\\S(n) = \\left[\\frac{n(n+1)}{2}\\right]^2 - \\sum_{d = 2}^{n} d^2S(\\lfloor \\frac{n}{d} \\rfloor)\\\\$$ 代码实现一定要多取模… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 8500000;ll pow(ll x,ll k,ll p){ ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x = (x*x)%p) if(i &amp; 1) ans = (ans*x)%p; return ans;}ll inv(ll x,ll p){return pow(x,p-2,p);}ll p,n,rev_6,rev_2;map&lt;ll,ll&gt; s;ll pre_s[MAXN];void sieve(){ static ll prime[MAXN],phi[MAXN],cnt = 0; static int vis[MAXN]; phi[1] = 1; for(int i = 2;i&lt;=MAXN-1;i++){ if(vis[i] == 0){ prime[++cnt] = i; phi[i] = i-1; } for(int j = 1;i * prime[j] &lt;= MAXN-1 &amp;&amp; j&lt;=cnt;j++){ vis[i*prime[j]] = 1; if(i % prime[j] == 0){ phi[i*prime[j]] = phi[i] * (prime[j]); break; } else{ phi[i*prime[j]] = phi[i] * (prime[j]-1); } } } for(int i = 1;i&lt;=MAXN-1;i++){ pre_s[i] = phi[i]%p * i % p * i % p; pre_s[i] += pre_s[i-1]; pre_s[i] %= p; }}ll sum(ll x){x%=p;return x%p *(x+1)%p *rev_2%p;}ll sums(ll x){x%=p;return x%p *(x+1)%p *(x+x+1)%p *rev_6%p;}ll S(ll n){ if(n &lt; MAXN) return pre_s[n]; if(s.count(n))return s[n]; ll ans = sum(n)%p; ans = ans*ans%p; for(ll l = 2,r;l &lt;= n;l = r+1){ r = (n/(n/l)); ans -= S(n/l)%p * (sums(r) - sums(l-1)+p)%p; ans = ans % p; } return s[n] = ans % p;}void init(){ scanf(\"%lld %lld\",&amp;p,&amp;n); rev_6 = inv(6,p),rev_2 = inv(2,p);}ll calc(ll n){ ll ans = 0; for(ll l = 1,r;l &lt;= n;l = r+1){ r = (n/(n/l)); ll tmp = (S(r) - S(l-1) + p) % p; ll summ = sum(n/l) %p; ans += summ%p * summ%p * tmp%p; ans %= p; } return ans;}int main(){ init(); sieve(); printf(\"%lld\\n\",calc(n)); return 0;}","link":"/20181220-Luogu3768-simplemath/"},{"title":"「Luogu3765」总统选举-平衡树-线段树","text":"秋之国共有$n$个人，分别编号为$1,2,…,n$，一开始每个人都投了一票，范围$[1,n]$，表示支持对应编号的人当总统。共有$m$次预选，每次选取编号$[l_i,r_i]$内的选民展开小规模预选，在该区间内获得超过区间大小一半的票的人获胜，如果没有人获胜，则由小$C$钦定一位候选者获得此次预选的胜利（获胜者可以不在该区间内），每次预选的结果需要公布出来，并且每次会有$k_i$个人决定将票改投向该次预选的获胜者。全部预选结束后，公布最后成为总统的候选人，没有候选人的话输出$-1$。 链接Luogu P3765 题解非常有趣的一道题。 BZOJ的2456可以启发到这道题。 那道题是： 给你一个$n$个数的数列，其中某个数出现了超过$\\frac {n}{2}$次即为绝对众数，请你找出那个数。 做法则是: 如果众数出现了超过$\\frac {n}{2}$次，那么任意删除序列中的两个不同的数，众数的出现次数仍然超过一半。不停地进行下去，最终剩下的一个数即为众数。(摘自Menci’s Blog) 这件事是可以用线段树维护的。 所以可以用线段树维护这个信息，就可以在$O(\\log {n})$的时间里查询到某个区间可能的区间绝对众数。可以证明，如果区间有绝对众数，那么这个数一定就是。但是也可以发现，这个数不一定就是绝对众数，所以我们需要检验。 这个时候我们建立$n$棵平衡树，共用一个$pool$。我们可以直接用数组中的节点编号来代表它的$val$。检验的时候，找到待查询数字的根节点，然后查询在$[l,r]$区间内有多少个数，也就是$getrank(r+1) - getrank(l)$。然后就可以检验出给定的数是不是给定的区间的绝对众数了。 修改投票也很简单，线段树直接修改然后一路维护就好，平衡树的话就在旧树里删掉，新树里加上就可以了。 时间复杂度大概是 $$O((n+\\sum_{i = 1}^{n} {k_i}) \\log {n})$$ 可以过掉本题。 妙啊！ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183#include &lt;cstdio&gt;#include &lt;cctype&gt;#include &lt;cstdlib&gt;#include &lt;algorithm&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 550000;int n,m,num[MAXN];//平衡树namespace Treap{int nowcnt = 0;int p[MAXN],son[MAXN][2];int siz[MAXN];int root[MAXN];void update(int x){ siz[x] = siz[son[x][0]] + siz[son[x][1]] + 1;}void rotate(int &amp;x,int t){ int y = son[x][t]; son[x][t] = son[y][1-t]; son[y][1-t] = x; update(x),update(y); x = y;}void insert(int &amp;x,int v){ if(!x){ x = v,p[x] = rand(); } else{ int t = v &gt; x; insert(son[x][t],v); if(p[son[x][t]] &lt; p[x]) rotate(x,t); } update(x);}void erase(int &amp;x,int v){ if(x == v){ if(!son[x][0] &amp;&amp; !son[x][1]){ x = 0;return; } int t = p[son[x][0]] &gt; p[son[x][1]]; rotate(x,t); erase(x,v); } else{ erase(son[x][v &gt; x],v); } update(x);}int grank(int r,int v){ int x = r,ans = 0; while(x){ if(v &lt; x) x = son[x][0]; else if(v == x) ans += siz[son[x][0]],x = 0; else ans += siz[son[x][0]]+1,x = son[x][1]; } return ans;}void __print(int x,int dep){ if(dep == 0) printf(\"%d:-------------------\\n\",x); if(x == 0) return; __print(son[x][0],dep+1); for(int i = 0;i&lt;dep;i++) putchar(' '); printf(\"v:%d p:%d siz:%d son:%d %d\\n\",x,p[x],siz[x],son[x][0],son[x][1]); __print(son[x][1],dep+1); if(dep == 0) printf(\"---------------------\\n\");}bool check(int num,int l,int r){ return 2*(grank(root[num],r+1)-grank(root[num],l)) &gt; r-l+1;}void update(int pos,int last,int now){ erase(root[last],pos); insert(root[now],pos);}void init(int *a){ p[0] = 2147483647; for(int i = 1;i&lt;=n;i++) insert(root[a[i]],i);}}//线段树namespace seg_tree{#define lson (nown&lt;&lt;1)#define rson ((nown&lt;&lt;1)|1)#define mid ((l+r)&gt;&gt;1)#define pp pair&lt;int,int&gt;#define fr first#define sc secondpp tree[MAXN&lt;&lt;2];pp merge(pp a,pp b){ pp ans; if(a.fr == b.fr) ans.fr = a.fr,ans.sc = a.sc + b.sc; else{ ans.fr = a.sc &gt; b.sc?a.fr:b.fr; ans.sc = a.sc - b.sc; if(ans.sc &lt; 0) ans.sc *= -1; } return ans;}void update(int nown){ tree[nown] = merge(tree[lson],tree[rson]);}void build(int nown,int l,int r,int *a){ if(l == r){ tree[nown] = make_pair(a[l],1); return; } build(lson,l,mid,a); build(rson,mid+1,r,a); update(nown);}pp query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr) return tree[nown]; else{ pp ans; if(ql &lt;= mid &amp;&amp; mid+1 &lt;= qr) ans = merge(query(lson,l,mid,ql,qr),query(rson,mid+1,r,ql,qr)); else if(ql &lt;= mid) ans = query(lson,l,mid,ql,qr); else if(mid+1 &lt;= qr) ans = query(rson,mid+1,r,ql,qr); return ans; }}void update(int nown,int l,int r,int pos,int val){ if(l == r) tree[nown] = make_pair(val,1); else{ if(pos&lt;=mid) update(lson,l,mid,pos,val); if(pos&gt;=mid+1) update(rson,mid+1,r,pos,val); update(nown); }}}void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(num[i]); seg_tree::build(1,1,n,num); Treap::init(num);}void solve(){ int l,r,s,k,t,win; for(int i = 1;i&lt;=m;i++){ read(l),read(r),read(s),read(k); win = seg_tree::query(1,1,n,l,r).first; win = Treap::check(win,l,r)? win:s; for(int i = 1;i&lt;=k;i++){ read(t); Treap::update(t,num[t],win); seg_tree::update(1,1,n,t,win); num[t] = win; } print(win),print('\\n'); } win = seg_tree::query(1,1,n,1,n).first; win = Treap::check(win,1,n)?win:-1; print(win),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180425-luogu-3765/"},{"title":"「NOI2002」银河英雄传说-并查集","text":"初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。 有两种指令： 合并指令为$M i j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。 询问指令为$C i j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。 链接Luogu P1196 题解一道并查集的题目。 因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。 说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。 在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。 合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。 查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;#include &lt;algorithm&gt;#define MAXN 30010using namespace std;int f[MAXN],d[MAXN],s[MAXN],t;// f 维护父亲节点，d 维护于父亲节点的距离，s 在根节点处维护集合的元素数int find(int x){ if(f[x] == x){ return x; } else{ int w = find(f[x]); d[x] += d[f[x]]; f[x] = w; return w; }}void un(int x,int y){ int b = find(y),e = find(x); if(b == e){ return; } else{ d[e] = s[b],d[b] = 0; s[b] = s[b] + s[e],s[e] = 0; f[e] = b; return; }}int main(){ scanf(\"%d\",&amp;t); for(int i = 1;i&lt;MAXN;i++){ f[i] = i,d[i] = 0,s[i] = 1; } for(int i = 1;i&lt;=t;i++){ char op[20];int a,b; scanf(\"%s\",op); scanf(\"%d %d\",&amp;a,&amp;b); if(op[0] == 'M'){ un(a,b); } else{ int a1 = find(a),b1 = find(b); if(a1!=b1){ printf(\"-1\\n\"); } else{ printf(\"%d\\n\",abs(d[a]-d[b])-1); } } } return 0;}","link":"/20180211-NOI2002-hero/"},{"title":"「JSOI2016」最佳团体-树上背包+0/1分数规划","text":"JSOI 信息学代表队一共有 $N$ 名候选人，这些候选人从 $1$ 到 $N$ 编号。方便起见，JYY 的编号是 $0$ 号。每个候选人都由一位编号比他小的候选人$R_i$推荐。如果 $R_i = 0$ ，则说明这个候选人是 JYY 自己看上的。 为了保证团队的和谐，JYY 需要保证，如果招募了候选人 $i$，那么候选人 $R_i$ 也一定需要在团队中。当然了，JYY 自己总是在团队里的。每一个候选人都有一个战斗值 $P_i$ ，也有一个招募费用 $S_i$。JYY 希望招募 $K$ 个候选人（JYY 自己不算），组成一个性价比最高的团队。也就是，这 $K$ 个被 JYY 选择的候选人的总战斗值与总招募费用的比值最大。 链接Luogu P4322 代码这题看着很高端…事实上就是一个0/1分数规划+树形dp… 0/1分数规划的过程，就是二分选择一个答案$ans$，然后去验证能不能取到若干个$P_i - ans \\times S_i$大于0。 能不能取到这个大于$0$的东西，用$O(n^2)$的树形dp验证一下就好了。 我这个代码好像有点锅，不开O2就RE…懒得找了…就这样吧… 这里的初始化也要注意一下，还有就是循环的边界，因为这里父节点必须取，第一层循环就不能到$0$… 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cstring&gt;using namespace std;const int MAXN = 3000;const double eps = 1e-4;int n,m;double s[MAXN],p[MAXN];int siz[MAXN];double dp[MAXN][MAXN];vector&lt;int&gt; edge[MAXN];double k;double tmp[MAXN];void dfs(int x){ for(int j = 0;j &lt; MAXN;j++) dp[x][j] = -1e9; siz[x] = 1;dp[x][0] = 0;dp[x][1] = p[x] - k*s[x]; for(int i = 0;i&lt;edge[x].size();i++){ int v = edge[x][i]; dfs(v); for(int j = 0;j&lt;=siz[x] + siz[v];j++) tmp[j] = -1e9; for(int j = 0;j&lt;=siz[x];j++) tmp[j] = dp[x][j]; for(int j = siz[x];j &gt;= 1;--j) for(int w = siz[v];w &gt;= 0;--w) if(j+w &lt;= m) tmp[j+w] = max(tmp[j+w],dp[x][j] + dp[v][w]); memcpy(dp[x],tmp,sizeof(double)*(siz[x] + siz[v]+1)); siz[x] += siz[v]; }}bool check(double num){ k = num; dfs(0); return dp[0][m] &gt; -eps;}int main(){ scanf(\"%d %d\",&amp;m,&amp;n);m++; int f; for(int i = 1;i&lt;=n;i++){ scanf(\"%lf %lf %d\",&amp;s[i],&amp;p[i],&amp;f); edge[f].push_back(i); } double l = 0,r = 10000; while(r - l &gt; eps){ double mid = (l+r)/2; if(check(mid)) l = mid; else r = mid; } printf(\"%.3lf\\n\",l); return 0;}","link":"/20180618-JSOI2016-team/"},{"title":"「NOI2006」最大获利-网络流-最大权闭合子图","text":"新的技术正冲击着手机通讯市场，对于各大运营商来说，这既是机遇，更是挑战。THU 集团旗下的 CS&amp;T 通讯公司在新一代通讯技术血战的前夜，需要做太多的准备工作，仅就站址选择一项，就需要完成前期市场研究、站址勘测、最优化等项目。 在前期市场调查和站址勘测之后，公司得到了一共 $N$ 个可以作为通讯信号中转站的地址，而由于这些地址的地理位置差异，在不同的地方建造通讯中转站需要投入的成本也是不一样的，所幸在前期调查之后这些都是已知数据：建立第 $i$ 个通讯中转站需要的成本为 $P_i$ 。 另外公司调查得出了所有期望中的用户群，一共 $M$ 个。关于第 i 个用户群的信息概括为 $A_i$ , $B_i$ 和 $C_i$ ：这些用户会使用中转站 $A_i$ 和中转站 $B_i$ 进行通讯，公司可以获益 $C_i$​ 。 THU 集团的 CS&amp;T 公司可以有选择的建立一些中转站（投入成本），为一些用户提供服务并获得收益（获益之和）。那么如何选择最终建立的中转站才能让公司的净获利最大呢？（净获利 = 获益之和 – 投入成本之和） 题解最大权闭合图问题。 我们转化模型，我们把边和点都看成一个物品，那么我们有一些依赖关系：如果我们指定要选的边的集合，这个时候我们肯定希望选的点的权值和越小越好，然而我们必须要选的最少的点就是所有上文边集里面的每条边的端点的并。 转化成这样的问题之后，我们就是一个最大权闭合图的问题了。所有原图中的点在新图中都是负权值，从该点在新图的点向汇点连一个该点代价为容量的边；所有原图中的边在新图中都是负权值，从源点向该边在新图的点连一个该边收益为容量的边；剩余原图的边向两个端点各连一条 inf 的边即可。 跑出最大流即为答案。 正确性？ \\如果割掉用户的边，那么就舍弃掉一部分收益，可以看做损失。如果割掉中转站的边，那么就付出一定代价，可以看做损失。又因为不会割掉INF的边，所以就巧妙的解决了选A必须选B的问题。\\&lt;\\copy part> 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;bits/stdc++.h&gt;using namespace std;const int inf = 1e9+7;const int MAXN = 55100,MAXM = 4*MAXN;struct Edge{ int to,nex; int cap,flow;}edge[MAXM*2];int fir[MAXN],cur[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){b,fir[a],c,0}; fir[a] = ecnt++; edge[ecnt] = (Edge){a,fir[b],0,0}; fir[b] = ecnt++;}int S,T;int dis[MAXN];queue&lt;int&gt; q;bool bfs(){ memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(cur)); while(!q.empty()) q.pop(); dis[S] = 1; q.push(S); while(!q.empty()){ int nown = q.front();q.pop(); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(edge[nowe].cap &gt; edge[nowe].flow &amp;&amp; dis[v] == 0){ dis[v] = dis[nown] + 1; q.push(v); if(v == T) return 1; } } } return 0;}int dfs(int nown,int limit = inf){ if(limit == 0 || nown == T) return limit; for(int &amp;nowe = cur[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(edge[nowe].cap &gt; edge[nowe].flow &amp;&amp; dis[v] == dis[nown] + 1){ int f = dfs(v,min(limit,edge[nowe].cap - edge[nowe].flow)); if(f){ edge[nowe].flow+=f; edge[nowe^1].flow -= f; return f; } } } return 0;}int dinic(){ int ans = 0,f = 0; while(bfs()){ while(true){ f = dfs(S); if(f == 0) break; else ans+=f; } } return ans;}int n,m,a[MAXN];int u[MAXN],v[MAXN],w[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;a[i]); } for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;u[i],&amp;v[i],&amp;w[i]); }}void solve(){//边在前[1,m]，点在后 [m+1,m+n] S = n+m+1,T = n+m+2; for(int i = 1;i&lt;=n;i++)addedge(m+i,T,a[i]); for(int i = 1;i&lt;=m;i++){ addedge(S,i,w[i]); addedge(i,m+u[i],inf),addedge(i,m+v[i],inf); } int ans = -dinic(); for(int i = 1;i&lt;=m;i++){ ans += w[i]; } printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20190126-NOI2006-benefit/"},{"title":"「NOI2004」郁闷的出纳员-Splay","text":"维护一个数列。现有四种命令，新加入一个数$k$，把每个数加上$k$，把每个数减去$k$，查询第$k$大的数。如果数列中的任意数小于$min$，将它立即删除。并在最后输出总共删去的数的个数$res$。 如果新加入的数k的初值小于$min$，它将不会被加入数列。 链接Luogu P1486 题解这是一道经典的平衡树的题，被我用来练手Splay。 写完这道题之后我就觉得，我再也不会想用Splay了。debug了一天，简直浑身难受。以后尽量写旋转&amp;非旋Treap吧。 构建一颗Splay树。需要记录目前已经全体加过或者减过的数，也就是一个相对值。换算来说就是树外-相对值=树内，树内+相对值=树外。后面也就不再太多特殊说明。需要添加两个虚的最大和最小节点，也会导致排名计算的一些变化。 插入操作 先判断是否满足插入条件，即此数是否大于$min$，然后减去相对后正常插入，splay至根节点。 加上一个数 直接更改全局相对值，由于不会出现删数，不会有其他操作。 减去一个数 首先更改全局相对值，再把小于$min$的数删除，简单的来说就是吧第一个大于等于$min$的数splay到根上，然后删除左子树，补上左边的最小节点。 如果正好存在值为$min$的节点，就将它直接splay到根，完成上述操作；如果不存在，就插入一个值为$min-1$的节点，寻找它的后继，并splay到根，完成上述操作。这时统计$res$需要减去我们刚刚加上的节点。 查询第k大 直接查，然后splay到根。只需要注意我们的数列是从小到大排列的。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172#include &lt;cstdio&gt;#define MAX 0x3f3f3f3fusing namespace std;inline int qr(){ int f = 1,s = 0;char ch = getchar(); while(ch&lt;&apos;0&apos;||ch&gt;&apos;9&apos;){ if(ch == &apos;-&apos;) f = -1; ch = getchar(); } while(ch&gt;=&apos;0&apos;&amp;&amp;ch&lt;=&apos;9&apos;){ s = (s&lt;&lt;3)+(s&lt;&lt;1)+ch-48; ch = getchar(); } return f*s;}struct splay_t{ struct node_t{ int val,size,cnt; node_t *son[2],*p;node_t **null,**root; //与父亲关系 inline bool get_p(){return p-&gt;son[1] == this;} //双向连接 inline void link(node_t *dst,bool re){p = dst;dst-&gt;son[re] = this;} //更新size值 inline void update(){size = son[0]-&gt;size + son[1]-&gt;size + cnt;} //初始化**root和**null inline void init(node_t **null,node_t **root){this-&gt;null = null,this-&gt;root = root;} //获取左右节点的大小 inline int lsize(){return son[0]-&gt;size;}int rsize(){return son[1]-&gt;size;} //寻找节点前驱或者后继 node_t *uporlow(int tmp){//0前驱，1后继 splay(); node_t *t = son[tmp]; while(t-&gt;son[1-tmp] != *null) t = t-&gt;son[1-tmp]; return t; } //旋转 void rotate(){ bool re = get_p();node_t *rp = p; link(rp-&gt;p,rp-&gt;get_p()); son[1-re]-&gt;link(rp,re); rp-&gt;link(this,1-re); rp-&gt;update();update(); if(p == *null) *root = this; } //splay操作 node_t* splay(node_t *tar = NULL){ if(this == *null) return this; if(tar == NULL) tar = *null; while(p!=tar){ if(p-&gt;p == tar) rotate(); else{ if(p-&gt;get_p()==get_p()) p-&gt;rotate(),rotate(); else rotate(),rotate(); } } return this; } }; int treecnt; node_t pool[300000]; node_t *null,*root,*lb,*rb;//lb是左边的虚拟节点，rb同理 //初始化 splay_t(){ treecnt = 0; newnode(null);root = null; null-&gt;size = 0,null-&gt;val = 0; lb = insert(-MAX);rb = insert(MAX); } //新建节点 void newnode(node_t *&amp;r,int val = 0){ r = &amp;pool[treecnt++]; r-&gt;val = val; r-&gt;son[0] = r-&gt;son[1] = r-&gt;p = null; r-&gt;cnt = r-&gt;size = 1; r-&gt;init(&amp;null,&amp;root); } //寻找给定rank的数字 node_t* find_Kth(int rank){ node_t *t = root; while(t!=null){ if(rank&lt;t-&gt;lsize()) t = t-&gt;son[0]; else if((rank-=t-&gt;lsize())&lt;t-&gt;cnt) return t-&gt;splay(); else rank-=t-&gt;cnt,t = t-&gt;son[1]; } return null; } //按值寻找 node_t *find_by_val(int val){ node_t *t = root; while(t!=null){ if(val&lt;t-&gt;val) t = t-&gt;son[0]; else if(val==t-&gt;val) return t-&gt;splay(); else t = t-&gt;son[1]; } return null; } //插入给定值的节点 node_t* insert(int val){ node_t **tar = &amp;root,*parent = null; while(*tar!=null){ (*tar)-&gt;size++; if((*tar)-&gt;val == val){ (*tar)-&gt;cnt++;return *tar; } else{ parent = *tar;tar = &amp;(*tar)-&gt;son[(*tar)-&gt;val&lt;val]; } } newnode(*tar,val); (*tar)-&gt;link(parent,parent-&gt;val &lt; val); return (*tar)-&gt;splay(); } //调试用 打印树 void print(node_t *r = NULL,int depth = 0){ if(r == NULL) r = root; if(r == null) return; else{ print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(&apos; &apos;); printf(&quot;v:%d,size:%d,cnt:%d,son:%d %d,depth:%03d\\n&quot;,r-&gt;val,r-&gt;size,r-&gt;cnt,r-&gt;son[0]!=null,r-&gt;son[1]!=null,depth); print(r-&gt;son[1],depth+1); } }};splay_t x;int n,minn,res = 0,nowadd = 0;//插入一个数inline void insert(int val){if(val&gt;=minn) x.insert(val-nowadd);}//注意要减去nowadd //统一加工资inline void add(int val){nowadd+=val;}//统一减公司顺便裁人inline void decrease(int val){ nowadd-=val; splay_t::node_t *r = x.find_by_val(minn-nowadd);//注意要减去nowadd if(r!=x.null) r-&gt;splay(),res+=(x.root-&gt;lsize()-1); else x.insert(minn-nowadd-1)-&gt;uporlow(1)-&gt;splay(),res+=(x.root-&gt;lsize()-2); x.lb-&gt;link(x.root,0);x.lb-&gt;son[1] = x.null; x.root-&gt;update();}//查找工资排名K位的员工的工资inline int ask(int rank){ if(rank &gt; x.root-&gt;size - 2) return -1; return x.find_Kth(x.root-&gt;size-rank-1)-&gt;val + nowadd;//注意要加上nowadd}int main(){ n = qr();minn = qr(); for(int i = 0;i&lt;n;i++){ char op[20];int k; scanf(&quot;%s&quot;,op);k = qr(); if(op[0] == &apos;A&apos;) add(k); else if(op[0] == &apos;S&apos;) decrease(k); else if(op[0] == &apos;I&apos;) insert(k); else if(op[0] == &apos;F&apos;) printf(&quot;%d\\n&quot;,ask(k)); else if(op[0] == &apos;P&apos;) x.print(); } printf(&quot;%d\\n&quot;,res); return 0;}","link":"/20180131-NOI2004-cashier/"},{"title":"「NOI2005」聪聪与可可-期望dp","text":"给定一个 $n$ 个点， $m$ 条边的无向图。聪聪开始的时候在 S，可可在节点 T 处。以后的每个时间单位，可可都会选择去相邻的景点(可能有多个)中的一个或停留在原景点不动。而去这些地方所发生的概率是相等的。假设有 $P$ 个景点与景点 M 相邻，它们分别是景点 R、 景点 S，……，景点 Q，在时刻 $i$ 可可处在景点 M，则在 $i+1$ 时刻，可可有 $\\frac{1}{1+P}$ 的可能在景点 R，有 $\\frac{1}{1+P}$ 的可能在景点 S，……，有 $\\frac{1}{1+P}$ 的可能在景点 Q，还有 $\\frac{1}{1+P}$ 的可能停在景点 M。 当聪聪在景点 C 时，她会选一个更靠近可可的景点，如果这样的景点有多个，她会选一个标号最小的景点。如果走完第一次移动以后仍然没吃到可可，她还可以在本段时间内再向可可进行一次移动。 在每个时间单位，假设聪聪先走，可可后走。在某一时刻，若聪聪和可可位于同一个景点，则可怜的可可就被吃掉了。 请求出平均情况下，聪聪用几个时间单位就可能吃到可可。 链接Luogu P4206 题解有趣的期望dp。 我们注意到，如果我们知道可可和聪聪的位置，那么聪聪的两次移动我们都是唯一的。 所以我们用 $n$ 次 $\\text{bfs}$ 处理出所有点对间的最短路，然后针对 $n$ 个可可可能在的点，对每个节点进行一次遍历（边），找到最近的出度。以上两个过程都是 $O(n^2)$ 的。 现在我们就可以进行转移了。 设 $dp[u][v]$ 为聪聪在 $u$ ，可可在 $v$ 时的期望步数，然后转移即可。注意到我们需要遍历 $v$ 这个点对应的所有的边，但是无向图的话，所有的边会被遍历两遍，所以对于每个 $v$ ，转移是 $O(n)$ 的，然后转移的复杂度也是 $O(n^2)$ 。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;unistd.h&gt;using namespace std;const int MAXN = 1100;int n,m,s,t;vector&lt;int&gt; edge[MAXN];int dis[MAXN][MAXN],near[MAXN][MAXN];double dp[MAXN][MAXN];queue&lt;int&gt; q;void init(){ scanf(\"%d %d %d %d\",&amp;n,&amp;m,&amp;s,&amp;t); for(int i = 1;i&lt;=m;i++){ int u,v; scanf(\"%d %d\",&amp;u,&amp;v); edge[u].push_back(v); edge[v].push_back(u); }}void bfs(int st){ while(!q.empty()) q.pop(); q.push(st);dis[st][st] = 0; while(!q.empty()){ int nown = q.front();q.pop(); // printf(\"%d\\n\",nown); for(unsigned i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; // printf(\" v:%d\\n\",v); if(dis[st][v] == 0 &amp;&amp; v != st){ dis[st][v] = dis[st][nown] + 1; q.push(v); } } }}void get_near(int to){ for(int nown = 1;nown&lt;=n;nown++){ if(nown == to) continue;//cautious near[nown][to] = 0x3f3f3f3f; for(unsigned i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(dis[v][to] &lt; dis[nown][to] &amp;&amp; near[nown][to] &gt; v){ near[nown][to] = v; } } }}double dfs(int u,int v){ int uu = u,vv = v; if(dp[uu][vv] != 0) return dp[u][v]; if(u == v) return 0; if(near[u][v] == v || near[near[u][v]][v] == v){ return dp[u][v] = 1; } u = near[near[u][v]][v]; double ans = 0; for(unsigned i = 0;i&lt;edge[v].size();i++){ int to = edge[v][i]; ans += (dfs(u,to)+1); } ans += dfs(u,v)+1; return dp[uu][vv] = ans/(edge[v].size()+1);}void solve(){ for(int i = 1;i&lt;=n;i++) bfs(i); for(int i = 1;i&lt;=n;i++) get_near(i); double ans = dfs(s,t); printf(\"%.3lf\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20181002-NOI2005-clever-and-cute/"},{"title":"「NOI2009」二叉查找树-区间dp","text":"给定$n$个结点的数据值$V_i$，权值$P_i$，访问频度$T_i(T_i \\geq 0)$。对于$\\forall i,j \\in V$且$i \\neq j$，有$V_i \\neq V_j, P_i \\neq P_j$。 现令这n个点组成一颗二叉树，且满足$\\forall \\, i \\in V$，若$p$为$i$的左子节点，$q$为$i$的右子节点，则$V_p &lt; V_i &lt; V_q$且$P_i &lt; P_p,\\; P_i &lt; P_q$。可以证明，这样的二叉树是唯一的。点\u001c$i$在树中的深度$D_i$定义为它到根的距离加$1$。定义结点$i$的访问代价$E_i = T_i \\times D_i$。可以修改每个点的权值为任意实数，其代价均为给定的正整数$K$，但需保证任两点权值仍互不相同。 现求上文所述二叉树中，其 $\\sum^n _{i = 1}{E_i} + \\sum K$的最小值。原文描述： 已知一棵特殊的二叉查找树。根据定义，该二叉查找树中每个结点的数据值都比它左儿子结点的数据值大，而比它右儿子结点的数据值小。 另一方面，这棵查找树中每个结点都有一个权值，每个结点的权值都比它的儿子结点的权值要小。 已知树中所有结点的数据值各不相同；所有结点的权值也各不相同。这时可得出这样一个有趣的结论：如果能够确定树中每个结点的数据值和权值，那么树的形态便可以唯一确定。因为这样的一棵树可以看成是按照权值从小到大顺序插入结点所得到的、按照数据值排序的二叉查找树。 一个结点在树中的深度定义为它到树根的距离加1。因此树的根结点的深度为1。 每个结点除了数据值和权值以外，还有一个访问频度。我们定义一个结点在树中的访问代价为它的访问频度乘以它在树中的深度。整棵树的访问代价定义为所有结点在树中的访问代价之和。 现在给定每个结点的数据值、权值和访问频度，你可以根据需要修改某些结点的权值，但每次修改你会付出K的额外修改代价。你可以把结点的权值改为任何实数，但是修改后所有结点的权值必须仍保持互不相同。现在你要解决的问题是，整棵树的访问代价与额外修改代价的和最小是多少？ 链接Luogu P1864 BZOJ 1564 题解比较简单的区间dp。 首先对点的权值离散化，然后按照点的数据值排序。注意到点的顺序是确定的，所以如果给定区间$[l,r]$以及其根节点能取到的最大的权值$p$，就可以确定这个最小值。这个问题还满足局部最优解，所以搞一搞$dp$就可以了。定义$w(i,j)= \\sum_{k = i}^j {T_i}$。转移方程如下： $$m(l,r,p) = 0\\; (l \\geq r),$$ $$\\min_{k = l}^r{(\\, m(l,k-1,p)+m(k+1,r,p)+ K), \\;m(l,k-1,P_k)+m(k+1,r,P_k))+w(i,j) \\; \\;(l &lt; r)}$$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;#include &lt;algorithm&gt;#define pp nodeusing namespace std;const int MAXN = 80;int n,K;int sum[MAXN],num[MAXN];int dp[MAXN][MAXN][MAXN];struct node{ int fr,sc,tr; bool operator &lt; (const node a)const{ return fr &lt; a.fr; }};void init(){ scanf(\"%d %d\",&amp;n,&amp;K); pp tmp[MAXN];int t[MAXN]; for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;tmp[i].fr); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;tmp[i].sc); t[i] = tmp[i].sc; } for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;tmp[i].tr); sort(tmp+1,tmp+n+1),sort(t+1,t+n+1); for(int i = 1;i&lt;=n;i++){ num[i] = lower_bound(t+1,t+n+1,tmp[i].sc)-t; sum[i] = sum[i-1]+tmp[i].tr; }}void solve(){ int tmp; for(int w = 1;w&lt;=n;w++){ for(int l = 1,r = w;r&lt;=n;l++,r++){ for(int p = 0;p&lt;=n;p++){ dp[l][r][p] = 0x3f3f3f3f; for(int k = l;k&lt;=r;k++){ tmp = min(dp[l][k-1][p] + dp[k+1][r][p] + K, num[k] &gt; p? dp[l][k-1][num[k]] + dp[k+1][r][num[k]]: 0x3f3f3f3f); dp[l][r][p] = min(dp[l][r][p],tmp); } dp[l][r][p] += sum[r] - sum[l-1]; } } } printf(\"%d\\n\",dp[1][n][0]);}int main(){ init(); solve(); return 0;}","link":"/20180428-NOI2009-binary/"},{"title":"「NOI2009」诗人小G-动态规划+决策单调性","text":"小 $\\text{G}$ 是一个出色的诗人，经常作诗自娱自乐。但是，他一直被一件事情所困扰，那就是诗的排版问题。 一首诗包含了若干个句子，对于一些连续的短句，可以将它们用空格隔开并放在一行中，注意一行中可以放的句子数目是没有限制的。小 $\\text{G}$ 给每首诗定义了一个行标准长度（行的长度为一行中符号的总个数），他希望排版后每行的长度都和行标准长度相差不远。显然排版时，不应改变原有的句子顺序，并且小 $\\text{G}$ 不允许把一个句子分在两行或者更多的行内。在满足上面两个条件的情况下，小 $\\text{G}$ 对于排版中的每行定义了一个不协调度, 为这行的实际长度与行标准长度差值绝对值的 $P$ 次方，而一个排版的不协调度为所有行不协调度的总和。 小 $\\text{G}$ 最近又作了几首诗，现在请你对这首诗进行排版，使得排版后的诗尽量协调（即不协调度尽量小），并把排版的结果告诉他。 链接Luogu P1912 题解没看见加粗的话…因而疯狂不会做，然后回家仔细读题… 然后还是不会做。 设 $dp[i]$ 是前 $i$ 句话的不协调度的最小值，那么我们显然有以下的状态转移方程：$$dp[i] = \\min_{j=0}^{i-1}(dp[j] + {|sum[i]-sum[j]+(i-j-1)-L|}^p)$$打表发现决策单调性。 用队列维护一个决策队列，用三元组 $(p,l,r)$ ，代表在 $[l,r]$ 区间中的最有决策点都是 $p$ ，类似：$11122333356 \\rightarrow (1,1,3) + (2,4,5) + (3,6,9) + (5,10,10) + (6,11,11)$ ，然后每次从后往前 $pop$ ，直到不能 $pop$ 掉整段之后再去二分看最后一块具体的分界线在哪里，然后在每次查询之前要把 $r &lt; i-1$ 的区间给 $pop$ 掉。 路径的话记录决策点即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cstdlib&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;//#define ll long long#define ll long doubleusing namespace std;const int MAXN = 110000;ll pow(ll x,int p){ ll ans = 1; for(int i = 1;i&lt;=p;i++) ans *= x; return ans;}struct Node{ int p,l,r;};int n,l,p;char s[MAXN][50];ll sum[MAXN],dp[MAXN];int last[MAXN];ll calc(int i,int j){ return dp[j] + pow(fabs(sum[i] - sum[j] - l - 1),p);}int find(int l,int r,int now,int last){ // 找到在[l,r]区间内符合 now 决策比 last 优的最前面的位置 // last,...,last,[now],now while(l!=r){ int mid = (l+r)&gt;&gt;1; if(calc(mid,last) &gt; calc(mid,now)) r = mid; else l = mid+1; } return l;}void init(){ scanf(\"%d %d %d\",&amp;n,&amp;l,&amp;p); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s[i]); sum[i] = strlen(s[i]); sum[i] += sum[i-1] + 1; }}void solve(){ static Node q[MAXN]; memset(dp,0,sizeof(dp)); memset(last,0,sizeof(last)); int fi=0,la=1;q[0] = (Node){0,1,n}; for(int i = 1;i&lt;=n;i++){ if(fi != la &amp;&amp; q[fi].r &lt;= i-1) fi++; int j = q[fi].p; dp[i] = calc(i,j);last[i] = j; if(calc(n,q[la-1].p) &lt; calc(n,i)) continue;// 在n处i都不优于q[la-1].p while(fi != la &amp;&amp; calc(q[la-1].l,q[la-1].p) &gt; calc(q[la-1].l,i)) la--; // pop 掉整个尾段的条件：i 点在 q[la-1].l 甚至都是一个更优的决策点 if(fi==la) q[la++] = (Node){i,i+1,n}; else{ Node &amp;t = q[la-1]; int x = find(t.l,n,i,t.p); t.r = x-1; q[la++] = (Node){i,x,n}; } }}void output(){ if(dp[n] &gt; 1e18) printf(\"Too hard to arrange\\n\"); else{ static int route[MAXN]; int cnt = 0,now = n; printf(\"%lld\\n\",(long long)(dp[n])); while(now != 0){ route[++cnt] = now; now = last[now]; } for(int i = 1,t=cnt;i&lt;=n;i++){ printf(\"%s\",s[i]); if(i!=route[t]) putchar(' '); else putchar('\\n'),t--; } } printf(\"--------------------\\n\");}int main(){ int T; scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++){ init(); solve(); output(); } return 0;}","link":"/20180824-NOI2009-poet/"},{"title":"「NOI2010」航空管制-拓扑排序","text":"假设目前被延误航班共有 $n$ 个，编号为 $1$ 至 $n$ 。机场只有一条起飞跑道，所有的航班需按某个顺序依次起飞（称这个顺序为起飞序列）。定义一个航班的起飞序号为该航班在起飞序列中的位置，即是第几个起飞的航班。 起飞序列还存在两类限制条件： 第一类（最晚起飞时间限制）：编号为 $i$ 的航班起飞序号不得超过 $k_i$ ; 第二类（相对起飞顺序限制）：存在一些相对起飞顺序限制 $(a, b)$ ，表示航班 $a$ 的起飞时间必须早于航班 $b$ ，即航班 $a$ 的起飞序号必须小于航班 $b$ 的起飞序号。 小 $\\text{X}$ 思考的第一个问题是，若给定以上两类限制条件，是否可以计算出一个可行的起飞序列。第二个问题则是，在考虑两类限制条件的情况下，如何求出每个航班在所有可行的起飞序列中的最小起飞序号。 链接Luogu P1954 题解对于这些限制，我们发现可以转换成一个拓扑序的问题。但是我们发现最晚的起飞时间限制比较难达成，而两向的相对关系则是比较轻松的，所以我们考虑到可以把整个时间轴反向，那么就变成了所有飞机都有一个最早起飞的限制，那么就可以加一个虚边，按时间解锁，这个问题就可以解决了。 对于第二问，我们就相当于把这个飞机，反向之后能压多后就压多后，将拓扑排序里面的队列变为优先队列，就可以了。 复杂度是 $O(n^2 \\log{n})$，貌似不是正解，BZOJ可过，Luogu 需开 O2 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#define inf 0x3f3f3f3f#define pii pair&lt;int,int&gt;using namespace std;const int MAXN = 2100;int n,m;int k[MAXN];vector&lt;int&gt; edge[MAXN];vector&lt;int&gt; qqq[MAXN];int ans[MAXN];priority_queue&lt;pii&gt; q;int toposort(int w = 0){ // printf(\"w:%d\\n\",w); static int in[MAXN]; memset(in,0,sizeof(in)); while(!q.empty()) q.pop(); for(int x = 1;x&lt;=n;x++){ for(int i = 0;i&lt;edge[x].size();i++){ in[edge[x][i]]++; } in[x]++; } for(int j = n;j&gt;=1;--j){ for(int i = 0;i&lt;qqq[j].size();i++){ int x = qqq[j][i]; if(--in[x] == 0){ q.push(make_pair((w==x?-inf:k[x]),x)); } } int x = q.top().second;q.pop(); if(x == w) return j; ans[j] = x; for(int i = 0;i&lt;edge[x].size();i++){ int v = edge[x][i]; if(--in[v] == 0){ q.push(make_pair((w==v?-inf:k[v]),v)); } } } return 0;}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;k[i]); qqq[k[i]].push_back(i); } int a,b; for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;a,&amp;b); edge[b].push_back(a); }}void solve(){ toposort(); for(int i = 1;i&lt;=n;i++) printf(\"%d \",ans[i]); printf(\"\\n\"); for(int i = 1;i&lt;=n;i++) printf(\"%d \",toposort(i)); printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20180818-NOI2010-airplane/"},{"title":"「NOI2012」随机数生成器-矩阵快速幂","text":"给定正整数 $n,m,a,c,X[0],g$ ，求按照 $X[n+1] = (a X[n] + c) \\bmod m$ 生成出的第 $n$ 项 $X[n] \\bmod g$ 的值。 数据范围： $n,m,a,c,X[0] \\leq 10^{18}$ 链接Luogu P2044 题解构造转移矩阵： $$\\left[\\begin{matrix}a &amp; c \\\\0 &amp; 1\\end{matrix}\\right]\\times\\left[\\begin{matrix}x_{n}\\\\1\\end{matrix} \\right]=\\left[\\begin{matrix}a x_n + c \\\\0 + 1\\end{matrix} \\right]=\\left[\\begin{matrix}x_{n+1} \\\\1\\end{matrix} \\right]$$ 快速幂即可。 这里的乘法需要快速乘。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;#define ld long double#define ll long longll m,a,c,x0,n,g;ll mul(ll a,ll b){ a%=m,b%=m; return ((a*b - (ll)((ll)(((ld)a/m) * b + 1e-3) * m))%m+m)%m;}struct Matrix{ ll a[3][3]; Matrix(){ memset(a,0,sizeof(a)); }};Matrix mul(Matrix &amp;_a,Matrix &amp;_b){ Matrix ans; for(int i = 1;i&lt;=2;i++){ for(int j = 1;j&lt;=2;j++){ for(int k = 1;k&lt;=2;k++){ (ans.a[i][j] += mul(_a.a[i][k],_b.a[k][j]))%=m; } } } return ans;}Matrix pow(Matrix x,ll p){ Matrix ans; ans.a[1][1] = ans.a[2][2] = 1; for(ll i = p;i;x = mul(x,x),i&gt;&gt;=1) if(i &amp; 1) ans = mul(ans,x); return ans;}int main(){ scanf(\"%lld %lld %lld %lld %lld %lld\",&amp;m,&amp;a,&amp;c,&amp;x0,&amp;n,&amp;g);x0 %= m; Matrix tmp; tmp.a[1][1] = a % m, tmp.a[1][2] = c % m,tmp.a[2][2] = 1; tmp = pow(tmp,n); ll ans = ((mul(tmp.a[1][1],x0) + tmp.a[1][2])%m)%g; printf(\"%lld\\n\",ans); return 0;}","link":"/20180821-NOI2012-random/"},{"title":"「NOI2012」美食节-费用流","text":"美食节共有$n$种不同的菜品，每个同学都点了一份在这$n$中菜品中的菜。总共有$m$个厨师来制作这些菜品。厨师们会按照要求的顺序进行制作，并且每次只能制作一人份。第$j$个厨师制作第$i$种菜品的时间记为$t_{i,j}$。每个同学的等待时间为所有厨师开始做菜起，到自己那份菜品完成为止的时间总长度。总等待时间为所有同学的等待时间之和。 已知共有$n$种菜品，第$i$种菜品需要做$p_i$份，共有$m$个厨师。请计算出最小的总等待时间是多少。 链接Luogu P2050 BZOJ 2879 题解\b很有趣的题。\b 看起来跟「SCOI2007」修车 很像，然而这道题的数据大大加强了。 这道题主要的方法如下： 对于每一个厨师，构建$\\sum p$个点，分别代表其倒数第一个，…\b，倒数第p\b个制作的\b菜品。对于第i个菜品，由菜品节点向第j个厨师倒数第k个做的菜，连一条\b容量为1，\b费用为t_{i,j} \\times k 的边。可以发现，这条边就代表了\b所有在倒数第k个后面以及倒数第k\b个\b制作菜品中由倒数第k个菜品的制作而产生的等待时间。\b 其他还有从各个\b节点连向汇点，以及源点\b连向各菜品节点，\b\b容量为p_i的边。 但是，这个过不了。经过计算，我们发现最多的时候会有近$6000000$条边，\b显然很惨。干写这个算法大概是50-60分的样子吧。 所以我们需要作出一些\b改进，来让这个算法变成O(能过)。考虑到最主要的问题是边数太多，\b所以我们应该想办法减少边的数目。 \b这个时候就可以玄学操作了。 考虑到以下的一件事：如果一个厨师倒数第k个需要做的菜还没有做，那么不可能先做倒数第k+1个菜，因为无论做什么菜，倒数第k个做的菜价格总是更低。 所以我们先把每个厨师最后一个制作的菜品加入图中，然后进行一次$spfa$的增广。然后每次增广出来的菜和厨师，我们就加一条同一个厨师后面一个需要做的菜，这样既能保证复杂度比较低，也可以正确增广。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 100000,MAXM = 2000000;struct Edge{ int from,to; int cap,flow; int cost,nex;}edge[MAXM];int n,m,s,t,sum = 0;int ff = 0,cc = 0,p[MAXN],ti[1000][1000];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c,int d){ edge[ecnt] = (Edge){a,b,c,0,d,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,-d,fir[b]}; fir[b] = ecnt++;}int dis[MAXN],instack[MAXN],pree[MAXN];queue&lt;int&gt; q;bool spfa(){ while(!q.empty()) q.pop(); memset(dis,0x3f,sizeof(dis)); memset(instack,0,sizeof(instack)); q.push(s);dis[s] = 0; while(!q.empty()){ int nown = q.front();q.pop(); instack[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ Edge e = edge[nowe]; if(dis[e.to] &gt; dis[nown] + e.cost &amp;&amp; e.cap &gt; e.flow){ dis[e.to] = dis[nown] + e.cost; pree[e.to] = nowe; if(instack[e.to] == 0){ q.push(e.to); instack[e.to] = 1; } } } } return dis[t] &lt; 0x3f3f3f3f;}void argument(){ int nown = t,nowe = 0,limit = 0x3f3f3f3f; while(nown != s){ nowe = pree[nown]; limit = min(limit,edge[nowe].cap - edge[nowe].flow); nown = edge[nowe].from; } nown = t; while(nown != s){ nowe = pree[nown]; edge[nowe].flow += limit; edge[nowe^1].flow -= limit; nown = edge[nowe].from; } ff += limit,cc += limit * dis[t];}void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++){ read(p[i]); sum += p[i]; } for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=m;j++){ read(ti[i][j]); } }}void solve(){ s = m*sum + n + 1,t = m*sum + n + 2; for(int i = 1;i&lt;=n;i++) addedge(s,m*sum + i,p[i],0); for(int j = 1;j&lt;=m;j++){ addedge(j,t,1,0); for(int i = 1;i&lt;=n;i++){ addedge(m*sum + i,j,1,ti[i][j]); } } while(spfa()){ argument(); int x = edge[pree[t]].from; addedge(x+m,t,1,0); for(int i = 1;i&lt;=n;i++){ addedge(m*sum + i,x+m,1,ti[i][(x-1)%m+1]*((x+m-1)/m+1)); } } print(cc),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180503-NOI2012-festival/"},{"title":"「NOI2014」动物园-KMP","text":"给定一个字符串$S$，求出$num$数组——对于字符串$S$的前$i$个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作$num[i]$。 特别地，为了避免大量的输出，你不需要输出$num[i]$分别是多少，你只需要输出所有$(num[i]+1)$的乘积，对$10^9+7$取模的结果即可。 链接Luogu P2375 BZOJ 3670 题解终于开始怼字符串的题了。 这一道题让我们求$num$的个数，其实联系一下AC自动机，很容易就想到沿着$nex$数组往回跳。跳的次数就是相同前后缀的个数，这个可以在求$nex$的时候直接预处理出来，记为$cnt$数组。 但题目中有一个限制比较烦人： 该后缀与该前缀不重叠 一个简单的想法就是求出$nex$数组，对于每一个$i$，先将$nex$降到$\\frac{i}{2}$以下，然后看这个$nex$还能跳多少次。但是很遗憾，这个TLE了，只有$50$分。因为每一次都跳$nex$代价太高，gg。 一个简单的改进就可以过掉这道题。 我们只需要像跳普通的$nex$一样去跳这个地方的$nex$，只需要每次确保其在$\\frac{i}{2}$以下就可以。然后就可以找到$nex$，从而得到$num$。 说长度在$\\frac{i}{2}$以下其实不太严谨，具体看代码吧。 代码 AC代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;cstdio&gt;#include &lt;cstring&gt;#define ll long longusing namespace std;const int MAXN = 1110000;int n,p = 1000000007;int nex[MAXN],cnt[MAXN];char s[MAXN];void cal(){ memset(nex,0,sizeof(nex)); memset(cnt,0,sizeof(cnt)); nex[0] = 0; int len = strlen(s); int j = 0; for(int i = 1;i&lt;len;i++){ while(j &gt; 0 &amp;&amp; s[i]!=s[j]) j = nex[j-1]; if(s[i] == s[j]) ++j; nex[i] = j; cnt[i] = cnt[nex[i-1]]+1; } ll ans = 1; j = 0; for(int i = 1;i&lt;len;i++){ while(j &gt; 0 &amp;&amp; s[i]!=s[j]) j = nex[j-1]; if(s[i] == s[j]) ++j; while(j&gt;0 &amp;&amp; 2*j &gt; i+1) j = nex[j-1]; ans *= (cnt[j]+1),ans%=p; } printf(\"%lld\\n\",ans);}void solve(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s); cal(); }}int main(){ solve(); return 0;} 另附50分代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;#include &lt;cstring&gt;#define ll long longusing namespace std;const int MAXN = 1110000;int n,p = 1000000007;int nex[MAXN],cnt[MAXN];char s[MAXN];void cal(){ memset(nex,0,sizeof(nex)); memset(cnt,0,sizeof(cnt)); nex[0] = 0; int j = 0,len = strlen(s); ll ans = 1; for(int i = 1;i&lt;len;i++){ while(j &gt; 0 &amp;&amp; s[i]!=s[j]) j = nex[j-1]; if(s[i] == s[j]) ++j; nex[i] = j; cnt[i] = cnt[nex[i-1]]+1; } for(int i = 1;i&lt;len;i++){ j = nex[i]; while(j&gt;0 &amp;&amp; 2*j &gt; i+1) j = nex[j-1]; ans *= (cnt[j]+1),ans%=p; } printf(\"%lld\\n\",ans);}void solve(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s); cal(); }}int main(){ solve(); return 0;}","link":"/20180405-NOI2014-zoo/"},{"title":"「NOI2010」能量采集-简单数学","text":"给定两个整数$n$,$m$，对于平面上的整点$\\{(x,y)|x \\in [1,n],y \\in [1,m],x,y \\in \\mathbb Z\\}$。若$(x,y)$与$(0,0)$的连线上有$k$个整点（不包括$(0,0),(n,m)$），则产生的贡献为$2k+1$。求所有满足条件的点的贡献总和。 链接Luogu P1447 题解给出一个结论：从$(0,0)$到$(n,m)$的线路上，有$gcd(n,m)-1$个整点(不包括$(0,0),(n,m)$)。想一想很好明白：令t是n,m的公因数$(\\frac {n}{t},\\frac {m}{t})$就相当于步长，$m,n$一定时$t$越大，步长越小，整点就越多。$gcd(n,m)$是$n,m$的最大公因数，所以就是最多整点的个数了。 所以问题转化为：求 $$\\sum_{i = 1}^{n} \\sum_{j = 1}^{m}2\\times gcd(n,m)-1$$ 的值。 显然高端的数学方法我肯定是不会的。那怎么办呢。 数据范围不允许我们求出对于每一个$n,m$的$gcd$，但是我们可以想办法求出对于每一个$w$，$gcd(i,j) = w$的$(i,j)$对数，然后就可以$O(n)$的加出结果了。 这个东西的话也不太好求…但是我们可以求出以w为约数的树的个数！对于一个$w$，均以$w$为约数的$(i,j)$的个数就是$\\lfloor \\frac{n}{w} \\rfloor \\times \\lfloor \\frac{m}{w} \\rfloor$。 还有一件事情，就是以$w$为最大公因数的数的个数就是以$w$为约数的数的个数减去以$kw(k = 2,3,4…)$为最大公因数的个数。 然后我们就可以开始从上往下的递推了，计算的时候每次往上跳$w$，直到超界，然后都减去就可以了。 根据一些调和级数的东西，$1+\\frac{1}{2}+\\frac{1}{3}…+\\frac{1}{n} \\approx \\ln n$，所以最后的复杂度大约是$O(n \\ln n)$。 代码123456789101112131415161718192021222324252627282930#include &lt;cstdio&gt;#include &lt;algorithm&gt;#define int long longusing namespace std;const int MAXN = 110000;int n,m,w,f[MAXN];void init(){ scanf(\"%lld %lld\",&amp;n,&amp;m); w = min(n,m);}void solve(){ int ans = 0; for(int i = w;i&gt;=1;--i){ f[i] = (n/i) * (m/i); for(int j = 2*i;j&lt;=w;j+=i) f[i] -= f[j]; ans += f[i]*(2*i-1); } printf(\"%lld\\n\",ans);}signed main(){ init(); solve(); return 0;}","link":"/20180618-NOI2010-energy/"},{"title":"「NOI2015」品酒大会-后缀数组","text":"简单版题意： 给定一个长度为$n$的字符串，和一个长度为$n$的数列$\\{a_n\\}$，求对于$r$从$0$到$n-1$，所有满足$1 \\leq p &lt; q \\leq n$且$lcp(p,q) \\geq r$的数对个数以及满足上述条件的数对中$a_p \\times a_q$的最大值。（$a_i$可以为负数） 完整版题意： 一年一度的“幻影阁夏日品酒大会”隆重开幕了。大会包含品尝和趣味挑战 两个环节，分别向优胜者颁发“首席品酒家”和“首席猎手”两个奖项，吸引了众多品酒师参加。 在大会的晚餐上，调酒师 $Rainbow$ 调制了 $n$ 杯鸡尾酒。这 $n$ 杯鸡尾酒排成一行，其中第 $n$ 杯酒 $(1 \\leq i \\leq n)$ 被贴上了一个标签$s_i$，每个标签都是 $26$ 个小写 英文字母之一。设 $str(l, r)$表示第 $l$ 杯酒到第 $r$ 杯酒的 $r - l + 1$个标签顺次连接构成的字符串。若 $str(p, po) = str(q, qo)$，其中 $1 \\leq p \\leq po \\leq n$, $1 \\leq q \\leq qo \\leq n$, $p ≠ q$, $po - p + 1 = qo - q + 1 = r$ ，则称第 $p$ 杯酒与第 $q$ 杯酒是“ $r$ 相似” 的。当然两杯“ $r$ 相似”$(r &gt; 1)$的酒同时也是“ $1$ 相似”、“ $2$ 相似”、……、“ $(r - 1)$ 相似”的。特别地，对于任意的 $1 ≤ p$ , $q ≤ n$ ， $p ≠ q$ ，第 $p$ 杯酒和第 $q$ 杯酒都 是“ $0$ 相似”的。 在品尝环节上，品酒师 $Freda$ 轻松地评定了每一杯酒的美味度，凭借其专业的水准和经验成功夺取了“首席品酒家”的称号，其中第 $i$ 杯酒 ($1 ≤ i ≤ n$) 的 美味度为 $a_i$ 。现在 $Rainbow$ 公布了挑战环节的问题：本次大会调制的鸡尾酒有一个特点，如果把第 $p$ 杯酒与第 $q$ 杯酒调兑在一起，将得到一杯美味度为 $a_p \\times a_q$ 的酒。现在请各位品酒师分别对于 $r = 0,1,2, ⋯ , n - 1$ ，统计出有多少种方法可以 选出 $2$ 杯“ $r$ 相似”的酒，并回答选择 $2$ 杯“ $r$ 相似”的酒调兑可以得到的美味度的最大值。 链接Luogu P2178 题解注意到这个东西有$LCP$，所以我们可以上后缀数组乱怼。 $O(n^2)$的做法是显而易见的，只需要枚举$p,q$，更新$LCP$位置的值，从大往小再扫一遍就可以了。 事实上问题所求的东西可以转化成：恰好为$r$的最大值，恰好为$r$的数目。 构造出$height$数组，我们可以发现，所有$lcp$恰好为$r$的数对，必然经过至少一个$height$为$r$的位置，而且它们经过的区域的$height$应该全都大于等于$r$，随着$r$的减小这个区域是在不断扩大的，事实上就是大于$r$的联通块在不断减少。 用一个并查集维护一下就好。每次连接两个集合$x$,$y$，都会产生$siz[x] \\times siz[y]$对这样的数对。 因为有负数，所以为了获得最大值，这里我们要同时维护最大、最小值。 这道题细节挺多的，有一个地方不能合并，要特殊处理$0$相似，令人窒息。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140#include &lt;cstdio&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;using namespace std;#define inf 0x3f3f3f3f#define ll long longconst int MAXN = 310000;namespace fast_io{ //...}using namespace fast_io;namespace SA{int s[MAXN],sa[MAXN],ht[MAXN],rk[MAXN],x[MAXN],y[MAXN],cnt[MAXN];void get_sa(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] != s[sa[i-1]]?++m:m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k=j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i]-j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] =(y[sa[i]]!=y[sa[i-1]]||y[sa[i]+j]!=y[sa[i-1]+j])?++m:m; }}template&lt;typename T&gt;int mapCharToInt(int n,const T *str){ int m = *max_element(str,str+n); for(int i = 0;i&lt;=m;i++) rk[i] = 0; for(int i = 0;i&lt;n;i++) rk[(int)(str[i])] = 1; for(int i = 1;i&lt;=m;i++) rk[i] += rk[i-1]; for(int i = 0;i&lt;n;i++) s[i] = rk[(int)(str[i])]-1; return rk[m]; }void getheight(int n){ for(int i = 0,h = ht[0] = 0;i&lt;n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n&amp;&amp;j+h&lt;n&amp;&amp;s[i+h]==s[j+h]) h++; if(ht[rk[i]] = h) h--; }}void build(int n,char *str){ int m = mapCharToInt(++n,str); get_sa(n,m); getheight(n);}}namespace BCJ{ int f[MAXN],siz[MAXN]; ll maxn[MAXN],minn[MAXN]; void init(int n,ll * val){ for(int i = 0;i&lt;=n;i++){ f[i] = i,siz[i] = 1; maxn[i] = minn[i] = val[i]; } } int find(int x){ return f[x] == x?x:f[x] = find(f[x]); } bool same(int x,int y){ return find(x) == find(y); } ll unite(int x,int y,ll &amp;ans){ int fx = find(x),fy = find(y); if(fx == fy) return 0; ans = max(ans,maxn[fx]*maxn[fy]); ans = max(ans,minn[fx]*minn[fy]); f[fy] = fx; minn[fx] = min(minn[fx],minn[fy]); maxn[fx] = max(maxn[fx],maxn[fy]); ll res = 1LL*siz[fx] * siz[fy]; siz[fx] += siz[fy]; return res; }}bool cmp(int a,int b){ return SA::ht[a] &gt; SA::ht[b];}char str[MAXN];int n,m;ll a[MAXN],ans[MAXN],cnt[MAXN];void init(){ static ll min1 = inf,min2 = inf,max1 = -inf,max2 = -inf; read(n); read(str); str[n] = 'a'-1; for(int i = 1;i&lt;=n;i++){ read(a[i]); if(a[i] &lt; min1) min1=a[i]; else if(a[i] &lt; min2) min2=a[i]; if(a[i] &gt; max1) max1=a[i]; else if(a[i] &gt; max2) max2=a[i]; ans[i] = -1LL*inf*inf; } ans[0] = max(max1*max2,min1*min2);}void solve(){ static int h[MAXN]; SA::build(n,str); BCJ::init(n,a); for(int i = 1;i&lt;=n;i++) h[i] = i; sort(h+1,h+n+1,cmp); for(int i = 1;i&lt;=n;i++){ int x = h[i],ht = SA::ht[x]; if(x!=1) cnt[ht] += BCJ::unite(SA::sa[x]+1,SA::sa[x-1]+1,ans[ht]); } for(int i = n-2;i&gt;=0;i--){ cnt[i] += cnt[i+1]; ans[i] = max(ans[i],ans[i+1]); } cnt[0] = 1LL*n*(n-1)/2; for(int i = 0;i&lt;n;i++){ if(!cnt[i]) ans[i] = 0; print(cnt[i]),print(' '),print(ans[i]),print('\\n'); }}signed main(){ init(); solve(); flush(); return 0;}","link":"/20180803-NOI2015-savour/"},{"title":"「NOI2012」魔幻棋盘-差分+树套树","text":"将要读二年级的小 $Q$ 买了一款新型益智玩具——魔幻棋盘，它是一个 $N$ 行 $M$ 列的网格棋盘，每个格子中均有一个正整数。棋盘守护者在棋盘的第 $X$ 行第 $Y$ 列（行与列均从 $1$ 开始编号）并且始终不会移动。棋盘守护者会进行两种操作： 询问：他会以自己所在位置为基础，向四周随机扩展出一块大小不定的矩形区域，向你询问这一区域内所有数的最大公约数是多少。 修改：他会随意挑选棋盘上的一块矩形区域，将这一区域内的所有数同时加上一个给定的整数。 游戏说明书上附有这样一句话“聪明的小朋友，当你连续答对 $19930324$ 次询问后会得到一个惊喜噢！”。小 $Q$ 十分想得到这个惊喜，于是每天都在玩这个玩具。但由于他粗心大意，经常算错数，难以达到这个目标。于是他来向你寻求帮助，希望你帮他写一个程序来回答棋盘守护者的询问，并保证 $100\\%$ 的正确率。 为了简化问题，你的程序只需要完成棋盘守护者的 $T$ 次操作，并且问题保证任何时刻棋盘上的数字均为不超过 $2^{62} - 1$ 的正整数。 链接Luogu P2086 题解我们发现，如果只有单点修改，这个东西是很好解决的，区间修改（加）就不太好做。 我们有如下结论：$$\\gcd(a,b) = \\gcd(a,b-a)$$然后我们发现我们所有的查询都是包含同一个点的，这也可以给我们提供一点思路。 我们如果对于所有点，我们对某点做一个二维的差分（也就是矩形的前缀和等于这个位置原来的值），所以这个时候我们可以直接对这个差分进行 $\\gcd$ 的查询。 我们建立一个二维线段树，维护差分后的数组，我们需要建立两个一维线段树来辅助差分。修改矩形的时候，我们因为是以左上角差分的，所以我们需要修改四个点，就是矩形的四个角，注意 $+1$ 和 $-1$ 的问题。 在这里，我们不必以中心点为基准差分，事实上可以以任意点差分。 参考：SengXian’s Blog 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;using namespace std;#define ll long longnamespace fast_io{ //...}using namespace fast_io;const int MAXN = 510000;ll gcd(ll a,ll b){ return b==0?abs(a):gcd(b,a%b);}#define lson (nown&lt;&lt;1)#define rson (nown&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)struct SegTree1D{ ll *gg; SegTree1D(int m){gg = new ll[m&lt;&lt;2];} void build(int nown,int l,int r,const ll *lt,const ll *rt){ if(r &lt; l) return gg[nown] = 0,void(); if(l == r) gg[nown] = rt == NULL?lt[l]: gcd(lt[nown],rt[nown]); else{ build(lson,l,mid,lt,rt),build(rson,mid+1,r,lt,rt); gg[nown] = gcd(gg[lson],gg[rson]); } } ll query(int nown,int l,int r,int ql,int qr){ if(qr &lt; l || r &lt; ql) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr) return gg[nown]; else{ ll ans = 0; if(ql &lt;= mid) ans = gcd(ans,query(lson,l,mid,ql,qr)); //if(ans == 1) return ans; if(qr &gt;= mid+1) ans = gcd(ans,query(rson,mid+1,r,ql,qr)); return ans; } } void modify(int nown,int l,int r,int pos,ll v){ if(pos &lt; l || pos &gt; r) return; if(l == r) gg[nown] += v; else{ if(pos &lt;= mid) modify(lson,l,mid,pos,v); else modify(rson,mid+1,r,pos,v); gg[nown] = gcd(gg[lson],gg[rson]); } } void modify(int nown,int l,int r,int pos,const ll *ltree,const ll *rtree){ if(pos &lt; l || pos &gt; r) return; if(l == r) gg[nown] = gcd(ltree[nown],rtree[nown]); else{ if(pos &lt;= mid) modify(lson,l,mid,pos,ltree,rtree); else modify(rson,mid+1,r,pos,ltree,rtree); gg[nown] = gcd(ltree[nown],rtree[nown]); } }}*C,*D;int n,m,xx,yy,t;ll *a[MAXN],*b[MAXN];ll c[MAXN],d[MAXN],val;//c横d纵struct SegTree2D{ // 每一行建1棵1D线段树 // 一共n棵，每棵大小均为m SegTree1D *t[MAXN&lt;&lt;2]; int a,b,c,d;//行从 a-&gt;b, 列从 c-&gt;d or (a,b) ll v; void build(int nown,int l,int r,int m,ll **num){ t[nown] = new SegTree1D(m); if(l == r) t[nown]-&gt;build(1,1,m,num[l],NULL); else{ build(lson,l,mid,m,num),build(rson,mid+1,r,m,num); t[nown]-&gt;build(1,1,m,t[lson]-&gt;gg,t[rson]-&gt;gg); } } void modify(int nown,int l,int r){//(a,b) += v if(r &lt; a || l &gt; a) return; if(l == r) t[nown]-&gt;modify(1,1,m,b,v); else{ if(a &lt;= mid) modify(lson,l,mid); else modify(rson,mid+1,r); t[nown]-&gt;modify(1,1,m,b,t[lson]-&gt;gg,t[rson]-&gt;gg); } } ll query(int nown,int l,int r){ if(b &lt; l || r &lt; a) return 0; if(a &lt;= l &amp;&amp; r &lt;= b) return t[nown]-&gt;query(1,1,m,c,d); else{ ll ans = 0; if(a &lt;= mid) ans = gcd(ans,query(lson,l,mid)); //if(ans == 1) return ans; if(b &gt;= mid+1) ans = gcd(ans,query(rson,mid+1,r)); return ans; } }}T;void modify(int x,int y,ll v){ T.a = x,T.b = y,T.v = v; if(1 &lt;= x &amp;&amp; x &lt;= n &amp;&amp; 1 &lt;= y &amp;&amp; y &lt;= m) T.modify(1,1,n);}ll query(int x1,int x2,int y1,int y2){ ll ans = val; x1 = xx - x1,x2 = xx + x2,y1 = yy - y1,y2 = yy + y2; ans = gcd(ans,gcd(D-&gt;query(1,1,n,x1+1,x2),C-&gt;query(1,1,m,y1+1,y2))); T.a = x1+1,T.b = x2,T.c = y1+1,T.d = y2; ans = gcd(ans,T.query(1,1,n)); return abs(ans);}void modify(int x1,int x2,int y1,int y2,ll v){ if(x1 &lt;= xx &amp;&amp; xx &lt;= x2 &amp;&amp; y1 &lt;= yy &amp;&amp; yy &lt;= y2) val += v; if(x1 &lt;= xx &amp;&amp; xx &lt;= x2) C-&gt;modify(1,1,m,y1,v),C-&gt;modify(1,1,m,y2+1,-v); if(y1 &lt;= yy &amp;&amp; yy &lt;= y2) D-&gt;modify(1,1,n,x1,v),D-&gt;modify(1,1,n,x2+1,-v); modify(x1,y1,v),modify(x1,y2+1,-v),modify(x2+1,y1,-v),modify(x2+1,y2+1,v);}void init(){ read(n),read(m),read(xx),read(yy),read(t); for(int i = 0;i&lt;=n+10;i++){ ll t = m+10; a[i] = new ll[t],b[i] = new ll[t]; memset(a[i],0,sizeof(ll) * t),memset(b[i],0,sizeof(ll) * t); } for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=m;j++) read(a[i][j]);}void build(){ for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=m;j++) b[i][j] = a[i][j] - a[i-1][j] - a[i][j-1] + a[i-1][j-1]; for(int i = 1;i&lt;=m;i++) c[i] = a[xx][i] - a[xx][i-1]; for(int i = 1;i&lt;=n;i++) d[i] = a[i][yy] - a[i-1][yy]; val = a[xx][yy]; C = new SegTree1D(m),D = new SegTree1D(n); C-&gt;build(1,1,m,c,NULL),D-&gt;build(1,1,n,d,NULL); T.build(1,1,n,m,b);}void solve(){ static int op,x1,x2,y1,y2; static ll v; for(int i = 1;i&lt;=t;i++){ read(op),read(x1),read(y1),read(x2),read(y2); if(op == 0){ print(query(x1,x2,y1,y2)),print('\\n'); } else{ read(v); modify(x1,x2,y1,y2,v); } }}signed main(){ init(); build(); solve(); flush(); return 0;}","link":"/20180824-NOI2012-board/"},{"title":"「NOI2014」魔法森林-LCT","text":"给定一个$n$个点$m$条边的无向图，每条边有两个权值$a_i,b_i$。请你找到一条从$1 \\rightarrow n$ 的道路，令道路上所有边的集合为$S$，使$ans = \\max(a_i)+\\max(b_j),i,j \\in S$最小，求出这个最小值$ans$。 链接Luogu P2387 BZOJ 3669 题解这题告诉我们了一个$LCT$(连猫树)的新用法：动态维护最小生成树。 思考一下：如果我们有一颗生成树，现在再添加进一条边，图里必然会出现一个环。而新的最小生成树就是在这个环里面砍掉最大的那一条边而得到的。 这是非常显然的。 可以发现一个结论，就是给定一个无向图，那么$1 \\rightarrow n$路径上边权最大值最小的这些边一定在其最小生成树里面。这个只要考虑一下$Kruskal$算法的过程就很容易明白。 那么再回来看这个问题。如果这个地方只有一维的限制，那么我们就可以用并查集做。这是一个离线的做法，也就是我们把所有边一股脑的扔进去，拿到一个最小生成树，然后答案就是这两点之间的边权最大值。（其实是并查集直到两个东西联通为止） 但是现在有了$a$这一维的限制，该怎么办呢？考虑一下贪心的做法，我们可以利用$LCT$动态维护最小生成树的特点。 考虑对于$a$排序之后，就可以排除掉$a$对这个东西的干扰。然后我们按照$a$从小到大往树里面加边，每次维护最小生成树，答案就可以用$a_{now} + b_{max}$来求得，动态更新即可。 为什么这个东西是正确的呢？如果路径上的$a_{max} &lt; a_{now}$，会不会对答案造成影响？ 不会。因为如果$a_{max} &lt; a_{now}$，那么在我们加到$a_{max}$这条边的时候，其所有路径上的边应该已经出现，就可以囊括$a_{max} + b_{max}$这种情况了。而如果后面换用了其他$b$更小的边，显然$a_{max}$会扩大为$a_{now}$，算法的正确性就可以保证了。 $LCT$只能维护点权，所以我们把边换成点，每次$link$或者$cat$的时候连或者猫两下就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 151000;struct Link_Cat_Tree{ int val[MAXN],maxn[MAXN]; int c[MAXN][2],f[MAXN]; bool rev[MAXN]; int getmax(int u,int x,int y){ if(val[u] &gt;= val[maxn[x]] &amp;&amp; val[u] &gt;= val[maxn[y]]) return u; else if(val[maxn[x]] &gt;= val[maxn[y]]) return maxn[x]; else return maxn[y]; } bool noroot(int x){ return (c[f[x]][1] == x) || (c[f[x]][0] == x); } void push_up(int x){ if(!x) return; maxn[x] = getmax(x,c[x][0],c[x][1]); } void reverse(int x){ if(!x) return; swap(c[x][0],c[x][1]); rev[x]^=1; } void push_down(int x){ if(!x) return; if(rev[x]){ reverse(c[x][0]),reverse(c[x][1]); rev[x] = 0; } } void push_all(int x){ if(!x) return; if(noroot(x)) push_all(f[x]); push_down(x); } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y;c[y][t] = w; if(w) f[w] = y; f[y] = x;f[x] = z; push_up(y),push_up(x); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)) (c[z][1] == y) ^ (c[y][1] == x) ? rotate(x):rotate(y); rotate(x); } } void access(int x){ for(int y = 0;x;x=f[y=x]){ splay(x); c[x][1] = y,push_up(x); } } void makeroot(int x){ access(x);splay(x);reverse(x); } int findroot(int x){ access(x);splay(x); push_down(x); while(c[x][0]) x = c[x][0],push_down(x); return x; } void link(int x,int y){ makeroot(x); if(findroot(y) != x) f[x] = y; } void cat(int x,int y){ makeroot(x); if(findroot(y) == x &amp;&amp; f[x] == y &amp;&amp; !c[x][1]) f[x] = c[y][0] = 0,push_up(y); } void split(int x,int y){ makeroot(x),access(y),splay(y); } int querymax(int x,int y){ return split(x,y),maxn[y]; }}T;//点1-&gt;n 边n+1-&gt;n+mint n,m;struct Edge{ int from,to,a,b;}edge[MAXN];bool cmp(Edge x,Edge y){ return x.a &lt; y.a;}void init(){ read(n),read(m); int a,b,f,t; for(int i = 1;i&lt;=m;i++){ read(f),read(t),read(a),read(b); edge[i] = (Edge){f,t,a,b}; }}void solve(){ int ans = 0x3f3f3f3f; sort(edge + 1,edge+m+1,cmp); for(int i = 1;i&lt;=m;i++) T.val[n+i] = edge[i].b; for(int i = 1;i&lt;=n+m;i++) T.maxn[i] = i; int x = 0,y = 0,a = 0,b = 0; for(int i = 1;i&lt;=m;i++){ x = edge[i].from,y = edge[i].to; a = edge[i].a,b = edge[i].b; if(x == y) continue; if(T.findroot(x)!=T.findroot(y)) T.link(n+i,x),T.link(n+i,y); else{ int t = T.querymax(x,y) - n; if(edge[t].b &lt; b) continue; T.cat(n+t,edge[t].from),T.cat(n+t,edge[t].to); T.link(n+i,x),T.link(n+i,y); } if(T.findroot(1) == T.findroot(n)) ans = min(ans,a+edge[T.querymax(1,n)-n].b); } if(ans &gt; 1000000000) print(-1); else print(ans); print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180616-NOI2014-forest/"},{"title":"「NOI2015」软件包管理器-树链剖分","text":"你决定设计你自己的软件包管理器。如果软件包A依赖软件包$B$，那么安装软件包$A$以前，必须先安装软件包$B$。同时，如果想要卸载软件包$B$，则必须卸载软件包$A$。现在你已经获得了所有的软件包之间的依赖关系。除$0$号软件包以外，所有软件包都会依赖一个且仅一个软件包，而$0$号软件包不依赖任何一个软件包。依赖关系不存在环。 现在有一些安装或卸载软件包的操作，需要求出这个操作实际上会改变多少个软件包的安装状态（即安装操作会安装多少个未安装的软件包，或卸载操作会卸载多少个已安装的软件包）。 链接Luogu P2146 BZOJ 4196 题解可以说应该还是一道比较裸的树链剖分了。 先树链剖分，然后根据编号构建一颗线段树。线段树每个节点维护当前区间已经安装的软件包的个数。需要一个$lazy$标记，为$1$意味着这个区间被全部卸载，为$2$意味着这个区间被全部安装。 对于$install$操作，明显可以看出我们的需求包是从$0$号节点到$x$号节点的链上的所有节点，所以我们先求出在这条路径上的安装的软件包的个数，然后再求出这个路径的节点个数，并对整个路径进行修改，最后相减得到答案。 对于$uninstall$操作，很明显可以看出只要把以x为根节点的子树的节点全都给卸载就可以了。所有我们求出在这个子树中的安装个数（注意到一颗子树的$id$应当是连续的），这个就是查询的答案，然后我们将这个子树给卸载掉就可以了。 复杂度大约是$O(n \\; log^2{n})$或者稍小一些吧。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;namespace fast_io { ...}using namespace fast_io;struct seg_tree{ #define lson (nown&lt;&lt;1) #define rson ((nown&lt;&lt;1)|1) #define mid ((l+r)&gt;&gt;1) static const int MAXN = 110000; int sumn[MAXN&lt;&lt;2],lazy[MAXN&lt;&lt;2]; seg_tree(){ memset(sumn,0,sizeof(sumn)); memset(lazy,0,sizeof(lazy)); } //添加标记 inline void add_tag(int nown,int l,int r,int t){ if(t == 1) sumn[nown] = 0,lazy[nown] = 1; if(t == 2) sumn[nown] = r-l+1,lazy[nown] = 2; } //下传区间标记 inline void push_down(int nown,int l,int r){ if(l == r) return; if(lazy[nown]){ add_tag(lson,l,mid,lazy[nown]); add_tag(rson,mid+1,r,lazy[nown]); lazy[nown] = 0; } } //维护区间和 inline void maintain(int nown){ sumn[nown] = sumn[lson] + sumn[rson]; } //区间更新为安装（tag == 2）或未安装（tag == 2） inline void update(int nown,int l,int r,int ql,int qr,int tag){ if(ql &lt;= l &amp;&amp; r&lt;=qr) add_tag(nown,l,r,tag); else{ push_down(nown,l,r); if(ql &lt;= mid) update(lson,l,mid,ql,qr,tag); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,tag); maintain(nown); } } //区间查询安装的个数 inline int query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr) return sumn[nown]; else{ push_down(nown,l,r); int ans = 0; if(ql&lt;=mid) ans+=query(lson,l,mid,ql,qr); if(qr &gt;= mid+1) ans+=query(rson,mid+1,r,ql,qr); return ans; } }}tree;//线段树const int MAXN = 110000;int n,m;int cnt = 0;int dep[MAXN],id[MAXN],son[MAXN],fa[MAXN],top[MAXN],siz[MAXN];vector&lt;int&gt; edge[MAXN];//树链剖分void dfs1(int nown,int f,int depth){ siz[nown] = 1,fa[nown] = f; dep[nown] = depth; int maxsum = -1; for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == fa[nown]) continue; dfs1(to,nown,depth+1); siz[nown]+=siz[to]; if(siz[to] &gt; maxsum) son[nown] = to,maxsum = siz[to]; }}void dfs2(int nown,int topf){ id[nown] = ++cnt,top[nown] = topf; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == fa[nown] || to == son[nown]) continue; dfs2(to,to); }}//查询x到y的路径上的安装的个数inline int query(int x,int y){ int ans = 0; while(top[x]!=top[y]){ if(dep[top[x]] &lt; dep[top[y]]) swap(x,y); ans+=tree.query(1,1,n,id[top[x]],id[x]); x = fa[top[x]]; } if(dep[x] &gt; dep[y]) swap(x,y); ans+=tree.query(1,1,n,id[x],id[y]); return ans;}//将x到y路径上的点标记为安装或者卸载inline int update(int x,int y,int t){ int ans = 0; while(top[x]!=top[y]){ if(dep[top[x]] &lt; dep[top[y]]) swap(x,y); ans+=id[x]-id[top[x]]+1; tree.update(1,1,n,id[top[x]],id[x],t); x = fa[top[x]]; } if(dep[x] &gt; dep[y]) swap(x,y); ans+=id[y]-id[x]+1;tree.update(1,1,n,id[x],id[y],t); return ans;}//安装inline int install(int x){ int b = query(1,x); int e = update(1,x,2); return e-b;}//卸载inline int uninstall(int x){ int b = tree.query(1,1,n,id[x],id[x]+siz[x]-1); tree.update(1,1,n,id[x],id[x]+siz[x]-1,1); return b;}inline void init(){ read(n); int tmp; for(int i = 2;i&lt;=n;i++){ read(tmp); edge[i].push_back(tmp+1); edge[tmp+1].push_back(i); } dfs1(1,0,1); dfs2(1,1);}inline void solve(){ read(m); char op[20];int x; for(int i = 1;i&lt;=m;i++){ read(op),read(x); if(op[0] == 'u') print(uninstall(x+1)),print('\\n'); else if(op[0] == 'i') print(install(x+1)),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180409-NOI2015-manager/"},{"title":"「POI2000」病毒-AC自动机","text":"二进制病毒审查委员会最近发现了如下的规律：某些确定的二进制串是病毒的代码。如果某段代码中不存在任何一段病毒代码，那么我们就称这段代码是安全的。现在委员会已经找出了所有的病毒代码段，试问，是否存在一个无限长的安全的二进制代码。 链接Luogu P2444 题解对所有的模版串建立AC自动机，补全Trie图，在Trie图上找环。 注意这里不能到达单词结束的节点，也不能到达所有fail节点是单词结束的点。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;using namespace std;const int MAXN = 1001000;template &lt;int sigma_size&gt;struct AC_automaton{ bool vis[MAXN],flag; bool instack[MAXN]; int f[MAXN],c[MAXN][sigma_size],end[MAXN]; int root,cnt; AC_automaton(){root=cnt=0;} void clear(){} //qwq void insert(char *str){ int n = strlen(str),nown = root; for(int i = 0;i&lt;n;i++){ if(!c[nown][str[i]-'0']) c[nown][str[i]-'0'] = ++cnt; nown = c[nown][str[i]-'0']; } end[nown] |= 1; } void get_fail(){ queue&lt;int&gt; q; while(!q.empty()) q.pop(); for(int i = 0;i&lt;sigma_size;i++){ if(c[root][i]){ f[c[root][i]] = root; q.push(c[root][i]); } } while(!q.empty()){ int nown = q.front();q.pop(); for(int i = 0;i&lt;sigma_size;i++){ if(c[nown][i]){ f[c[nown][i]] = c[f[nown]][i]; end[c[nown][i]] |= end[f[c[nown][i]]]; q.push(c[nown][i]); } else c[nown][i] = c[f[nown]][i]; } } } bool judge(){ memset(vis,0,sizeof(vis)); memset(instack,0,sizeof(instack)); flag = 0; for(int i = 0;i&lt;=cnt;i++){ if(!vis[i] &amp;&amp; !end[i]) flag |= dfs(i); if(flag) return true; } return false; } bool dfs(int x){ instack[x] = vis[x] = 1; for(int i = 0;i&lt;sigma_size;i++){ int v = c[x][i]; if(end[v]) continue; if(instack[v] || (!vis[v] &amp;&amp; dfs(v))) return true; } instack[x] = 0; return false; }};AC_automaton&lt;2&gt; AC;int n;char s[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%s\",s); AC.insert(s); }}void solve(){ AC.get_fail(); if(AC.judge()){ printf(\"TAK\\n\"); } else{ printf(\"NIE\\n\"); }}int main(){ init(); solve(); return 0;}","link":"/20180809-POI2000-virus/"},{"title":"「NOI2016」优秀的拆分-后缀数组","text":"如果一个字符串可以被拆分为 $AABB$ 的形式，其中 $A$ 和 $B$ 是任意非空字符串，则我们称该字符串的这种拆分是优秀的。一个字符串可能没有优秀的拆分，也可能存在不止一种优秀的拆分。 现在给出一个长度为 $n$ 的字符串 $S$ ，我们需要求出，在它所有子串的所有拆分方式中，优秀拆分的总个数。这里的子串是指字符串中连续的一段。 以下事项需要注意： 出现在不同位置的相同子串，我们认为是不同的子串，它们的优秀拆分均会被记入答案。 在一个拆分中，允许出现 $A=B$。例如 $cccc$ 存在拆分 $A=B=c$。 字符串本身也是它的一个子串。 链接Luogu P1117BZOJ 4650 题解下文字符串下标均为$[0,n)$。 我们如果令$l[i]$为在$i$处开始的$AA$串的个数，$r[i]$为在i处结束的$AA$串的个数，那么$$ans = \\sum_{i = 1}^{n-1} r[i-1] \\times l[i]$$ 这个过程是$O(n)$的，所以我们需要思考怎么求出$l[i]$和$r[i]$。 我们对每一个$AA$子串的循环节长度$L$从$1$到$n/2$进行枚举考虑。如果在$0,L,2L,…,nL$的地方设为关键点，那么$AA$的左半边的循环节因为长度为$L$，一定过且仅过一个关键点，这也是我们下面考虑的基础。 我们正序、逆序建立两个后缀数组，来求得原字符串某两个后缀的$LCP$（最长公共前缀）或者某两个前缀的$LCS$（最长公共后缀）。 如果这个$AA$子串的左半边过$kL$这个关键点，那么这个时候的$AA$子串在$kL$和$(k+1)L$的位置必须相同，而且他们的$LCP+LCS$的长度必须能够接上这样一个$L$的间隔，我们才能找到一段$2L$的区间，满足$AA$串的条件。 这个时候，我们用差分的方法标记修改$l$和$r$即可。 注意要保证$AA$串(也就是我们枚举的串)左边的串的左端点、右端点都不触碰到其他的关键点，不然会重复计数。 具体看代码吧。solve函数就是最终的这一过程。 时间复杂度$O(n \\log{n})$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 210000;struct SA{int sa[MAXN],rk[MAXN],ht[MAXN],s[MAXN&lt;&lt;1],t[MAXN&lt;&lt;1];int b[MAXN],cur[MAXN],p[MAXN];#define pushS(x) sa[cur[s[x]]--] = x#define pushL(x) sa[cur[s[x]]++] = x#define inducedSort(v) \\ fill_n(b,m,0),fill_n(sa,n,-1);\\ for(int i = 0;i&lt;n;i++) b[s[i]]++;\\ for(int j = 1;j&lt;m;j++) b[j]+=b[j-1];\\ for(int j = 0;j&lt;m;j++) cur[j] = b[j]-1;\\ for(int i=n1-1;~i;--i) pushS(v[i]);\\ for(int j = 1;j&lt;m;j++) cur[j] = b[j-1];\\ for(int i = 0;i&lt;n;i++) if(sa[i]&gt;0 &amp;&amp; t[sa[i]-1]) pushL(sa[i]-1);\\ for(int j = 0;j&lt;m;j++) cur[j] = b[j]-1;\\ for(int i=n-1;~i;--i) if(sa[i]&gt;0 &amp;&amp; !t[sa[i]-1]) pushS(sa[i]-1);void sais(int n,int m,int *s,int *t,int *p){ int n1 = t[n-1] = 0,ch = rk[0] = -1,*s1 = s+n; for(int i = n-2;~i;--i) t[i] = (s[i]!=s[i+1])?s[i]&gt;s[i+1]:t[i+1]; for(int i = 1;i&lt;n;i++) rk[i] = (!t[i]&amp;&amp;t[i-1])?(p[n1]=i,n1++):-1; inducedSort(p); for(int i=0,x,y;i&lt;n;i++)if(~(x=rk[sa[i]])){ if(ch &lt; 1 || p[x+1]-p[x]!=p[y+1]-p[y]) ch++; else for(int j=p[x],k=p[y];j&lt;=p[x+1];j++,k++) if((s[j]&lt;&lt;1|t[j])!=(s[k]&lt;&lt;1|t[k])){ch++;break;} s1[y=x]=ch; } if(ch+1 &lt; n1) sais(n1,ch+1,s1,t+n,p+n1); else for(int i = 0;i&lt;n1;i++) sa[s1[i]] = i; for(int i = 0;i&lt;n1;i++) s1[i] = p[sa[i]]; inducedSort(s1);}template&lt;typename T&gt;int mapp(const T *str,int n){ int m = *max_element(str,str+n); fill_n(rk,m+1,0); for(int i = 0;i&lt;n;i++) rk[str[i]] = 1; for(int j = 0;j&lt;m;j++) rk[j+1] += rk[j]; for(int i = 0;i&lt;n;i++) s[i] = rk[str[i]] - 1; return rk[m];}template&lt;typename T&gt;void SuffixArray(const T *str,int n){ int m = mapp(str,++n); sais(n,m,s,t,p);}void getheight(int n){ for(int i = 0;i&lt;=n;i++) rk[sa[i]] = i; for(int i = 0,h = ht[0] = 0;i&lt;=n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n&amp;&amp;j+h&lt;n&amp;&amp;s[i+h]==s[j+h]) h++; if(ht[rk[i]] = h) --h; }}struct ST{ int maxn[20][MAXN]; void build(int *num,int n){ for(int i = 1;i&lt;=n;i++) maxn[0][i] = num[i]; for(int j = 1,t=2;t&lt;=n;j++,t&lt;&lt;=1)// st表取min！ for(int i = 1;i+(t&gt;&gt;1)&lt;=n;i++) maxn[j][i] = min(maxn[j-1][i],maxn[j-1][i+(t&gt;&gt;1)]); } int query(int l,int r){ if(l &gt; r) return -1; int t = log2(r-l+1); return min(maxn[t][l],maxn[t][r-(1&lt;&lt;t)+1]);// 取min！！！！ }}S;int lcp(int x,int y,int n){ x = rk[x],y = rk[y]; if(x &gt; y) swap(x,y); if(x == y) return n-x+1; return S.query(x+1,y);}template&lt;typename T&gt;void solve(const T *str,int n){ SuffixArray(str,n); getheight(n); S.build(ht,n);}}A,B;int n;char s[MAXN],tmp[MAXN];void init(){ scanf(\"%s\",s); n = strlen(s); s[n] = 'a'-1; A.solve(s,n); for(int i = 0;i&lt;n;i++) tmp[i] = s[n-i-1]; tmp[n] = 'a'-1; B.solve(tmp,n);}// Longest Common Prefixint lcp(int x,int y){ return A.lcp(x,y,n);}// Longest Common Suffixint lcs(int x,int y){ return B.lcp(n-x-1,n-y-1,n);}long long solve(){ static long long l[MAXN],r[MAXN]; long long ans = 0; memset(l,0,sizeof(l)),memset(r,0,sizeof(r)); for(int L = 1;L&lt;=n/2;L++){ for(int j = 0;j+L&lt;n;j+=L){ int ll = j,rr = j+L; if(s[ll] != s[rr]) continue; int x = ll-lcs(ll,rr)+1,y = ll + lcp(ll,rr) - 1; x = max(max(x,0),ll-L+1),y = min(ll+L-1,min(n-L-1,y)); if(y-x+1 &gt;= L){ int cnt = (y-x+1)-L+1; l[x]++,l[x+cnt]--; r[x+2*L-1]++,r[x+2*L+cnt-1]--; } } } for(int i = 1;i&lt;n;i++) l[i] += l[i-1],r[i] += r[i-1]; for(int i = 0;i&lt;n-1;i++) ans += r[i]*l[i+1]; return ans;}int main(){ int T; scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++){ init(); printf(\"%lld\\n\",solve()); } return 0;}","link":"/20180704-NOI2016-split/"},{"title":"「NOI2015」寿司晚宴-状压dp","text":"为了庆祝 $NOI$ 的成功开幕，主办方为大家准备了一场寿司晚宴。小 $G$ 和小 $W$ 作为参加 $NOI$ 的选手，也被邀请参加了寿司晚宴。 在晚宴上，主办方为大家提供了 $n−1$ 种不同的寿司，编号 $1,2,3,⋯,n-1$ ，其中第种寿司的美味度为 $i+1$（即寿司的美味度为从 $2$ 到 $n$ ）。 现在小 $G$ 和小 $W$ 希望每人选一些寿司种类来品尝，他们规定一种品尝方案为不和谐的当且仅当：小 $G$ 品尝的寿司种类中存在一种美味度为 $x$ 的寿司，小 $W$ 品尝的寿司中存在一种美味度为 $y$ 的寿司，而 $x$ 与 $y$ 不互质。 现在小 $G$ 和小 $W$ 希望统计一共有多少种和谐的品尝寿司的方案（对给定的正整数 $p$ 取模）。注意一个人可以不吃任何寿司。 链接Luogu P2150 题解难死了qaq 对于没有什么特殊背景的计数题，很大可能上都是 $dp$ ，所以我们来如何 $dp$ 。 这里面最难满足的条件是： 小 $G$ 品尝的寿司种类中存在一种美味度为 $x$ 的寿司，小 $W$ 品尝的寿司中存在一种美味度为 $y$ 的寿司，而 $x$ 与 $y$ 不互质。 两个数不互质的情况即为：两个数分解质因数之后有相同的质因子，而且与该质因子出现 $1$ 次还是 $2$ 次无关。 然后我们有注意到所有的 $n$ 均小于 $500$ ，这意味着最多只会有一个质因子大于 $\\sqrt {500} \\approx 22.36 &lt; 23$ ，小于 $23$ 的质数一共有 $8$ 个： $2,3,5,7,11,13,17,19$ ，所以我们可以压位存储这些质因数有没有出现，对于可能出现的最后一个大质因数，我们再用一个 int 存储（没有则为 $1$ ），这样的话我们就用一个简单比较的方式存储了这个数所有对选取造成影响的内容。 然后我们思考如何表示状态。 显然，我们不可能将大质数表示进状态里面，否则的话是非常难以转移而且空间大约是开不下的。 所以我们思考一下如何避免大质数的影响。 如果某些数字都具有一个大质因子，那么这些数字必然是不能同时选的，那么只有两种可能性： 只有小 $\\text{G}$ 选了具有这个大质因子的数中的某些数 只有小 $\\text{W}$ 选了具有这个大质因子的数中的某些数 两个人都没选这两个组中的任何一个数 那么我们考虑这样分类。 那么我们分别对每一个大质因数进行讨论（没有大质因数的时候，就是每一个数就相当于大质因数的改变，因为一个数不能被两个人同时选）： 设 $g[k][0/1][S_i][S_j]$ 为当前已经考虑完该组的前 $k-1$ 个数，由小 $\\text{G}$ 或者小 $\\text{W}$ 取具有这个大质数的数，目前的小 $\\text{G}$ 的小质数集合是 $S_i$ ，小 $\\text{W}$ 的小质数集合是 $S_j$ ，第 $k$ 个数的小质数集合为 $N_k$，那么我们有如下的转移：$$g ([k+1])[0][S_i \\cap N_k][S_j] = g([k])[0][S_i \\cap N_k][S_j] + g([k])[0][S_i][S_j]\\\\g ([k+1])[1][S_i][S_j \\cap N_k] = g([k])[1][S_i][S_j \\cap N_k] + g([k])[1][S_i][S_j]$$也就是对于两种情况都有两种决策：取或者不取这个数。 这里需要用滚动数组，所以第一维都打上了括号，这里需要逆序转移。 为了从分组计算转换到最后的答案，我们需要再设计一组状态，就是表达在这若干组之间的一个关系。 比如我们设 $f[k][S_i][S_j]$ 表示考虑完前 $k-1$ 组，由小 $\\text{G}$ 或者小 $\\text{W}$ 取具有这个大质数的数，目前的小 $\\text{G}$ 的小质数集合是 $S_i$ ，小 $\\text{W}$ 的小质数集合是 $S_j$ ，第 $k$ 组的数的数目是 $num_{k}$ 那么我们有如下的转移：$$f([k])[S_i][S_j] = g([num_k])[0][S_i][S_j] + g([num_k])[1][S_i][S_j] - f([k-1])[S_i][S_j]$$而且这个时候$g([0])[0/1][S_i][S-j] = f([k-1])[S_i][S_j]$ ，这个意思就是：让小 $\\text{G}$ 选这一组，或者让小 $\\text{W}$ 选这一组。但是它们都有可能很谦虚一个都不选，那么我们最后要剪掉一个两个都不选的数目。 $f$ 数组也可以用滚动数组优化。 最后空间复杂度是 $O(n \\times 2^{16})$ ，空间复杂度 $O(2\\times 2^{16})$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;#define pii pair&lt;int,int&gt;#define ll long longconst int MAXN = 256;int prime[8] = {2,3,5,7,11,13,17,19};ll n,p;ll f[MAXN][MAXN],g[2][MAXN][MAXN];pii s[MAXN*2];void init(){ scanf(&quot;%lld %lld&quot;,&amp;n,&amp;p); for(int i = 2;i&lt;=n;i++){ int t = i; for(int j = 0;j&lt;8;j++){ while(t % prime[j] == 0){ s[i].second |= (1&lt;&lt;j); t/=prime[j]; } } s[i].first = t; } sort(s+2,s+n+1);// for(int i = 2;i&lt;=n;i++){// printf(&quot;%d:%d %d\\n&quot;,i,s[i].first,s[i].second);// }}void calc(){ f[0][0] = 1; for(int i = 2;i&lt;=n;i++){ if(i==2||s[i].first==1||s[i].first != s[i-1].first){ memcpy(g[0],f,sizeof(f)),memcpy(g[1],f,sizeof(f)); } for(int j = MAXN-1;~j;--j){ for(int k = MAXN-1;~k;--k){ if((k &amp; s[i].second) == 0) (g[0][j|s[i].second][k] += g[0][j][k])%=p; if((j &amp; s[i].second) == 0) (g[1][j][k|s[i].second] += g[1][j][k])%=p; } } if(i==n || s[i].first==1||s[i].first != s[i+1].first){ for(int j = 0;j&lt;MAXN;j++){ for(int k = 0;k&lt;MAXN;k++){ if((j&amp;k)==0) f[j][k] = (g[0][j][k] + g[1][j][k] - f[j][k])%p; } } } }}void output(){ ll ans = 0; for(int i = 0;i&lt;MAXN;i++){ for(int j = 0;j&lt;MAXN;j++){ if((i&amp;j)==0) (ans += f[i][j])%=p; } } printf(&quot;%lld\\n&quot;,(ans%p+p)%p);}int main(){ init(); calc(); output(); return 0;}","link":"/20180828-NOI2015-dinner/"},{"title":"「POI2010」Antisymmetry-后缀数组","text":"对于一个 $0/1$ 字符串，如果将这个字符串 $0$ 和 $1$ 取反后，再将整个串反过来和原串一样，就称作“反对称”字符串。比如 $00001111$ 和 $010101$ 就是反对称的， $1001$ 就不是。 现在给出一个长度为 $n$ 的 $0/1$ 字符串，求它有多少个子串是反对称的。 链接LOJ 2452 Luogu P3501 题解本题是胡搞过去的…正解好像是回文自动机…后缀数复杂度多一个$\\log$…然后就被卡的死死的emmm最后$LOJ$ 1000ms极限操作233 注意到…一个串如果想是反对称的，首先要是偶数长度。而且从中间劈开往两边看每个对应位置都相反。 所以我们可以把这个串+分隔符+这个串的反向&amp;取反搞一个后缀数组出来，然后枚举中间点，在前后串对应位置取LCP就是可能的大小，然后求和即可。 如果后缀数组和ST表的初始化复杂度是$O(n \\log n)$，最后$n$次查询每次复杂度都是$O(n)$。 时间复杂度是$O(n \\log {n})$，比正解多一个$log$勉强卡过233 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102// Code By Chen Qiqian on 2018.08.10#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;inline int min(int a,int b){return a&gt;b?b:a;}int n,m;const int MAXN = 1000100,logn = 20;namespace SA{int s[MAXN],sa[MAXN],rk[MAXN],x[MAXN],y[MAXN],ht[MAXN];int cnt[MAXN];void get_SA(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (s[sa[i]]!=s[sa[i-1]])?++m:m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k = j;i&lt;n;i++) if(sa[i]&gt;=j) y[k++] = sa[i]-j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]]!=y[sa[i-1]] || y[sa[i]+j]!=y[sa[i-1]+j])?++m:m; }}void getheight(int n){ for(int i = 0, h = ht[0] = 0;i&lt;n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n&amp;&amp;j+h&lt;n&amp;&amp;s[i+h]==s[j+h]) h++; if(ht[rk[i]] = h) --h; }}void build(int n){ ++n; get_SA(n,4); getheight(n);}}int _log[MAXN];namespace ST{int minn[MAXN][logn];void build(int n,int *num){ for(int i = 1;i&lt;=n;i++) _log[i] = _log[i-1] + ((i==(1&lt;&lt;(_log[i-1]+1)))?1:0); int l = _log[n]; for(int i = 0;i&lt;=n;i++) minn[i][0] = num[i]; for(int j = 1;j&lt;=l;j++){ for(int i = 0;i+(1&lt;&lt;(j-1))&lt;=n;i++){ minn[i][j] = min(minn[i][j-1],minn[i+(1&lt;&lt;(j-1))][j-1]); } }} int query(int l,int r){ int t = _log[r-l+1]; return min(minn[l][t],minn[r-(1&lt;&lt;t)+1][t]);}}int lcp(int x,int y){ if(x == y) return n-x+1; x = SA::rk[x],y = SA::rk[y]; if(x &gt; y) swap(x,y); return ST::query(x+1,y);}char s[MAXN];void init(){ scanf(\"%d\\n\",&amp;m); fread(s,MAXN,1,stdin); for(int i = 0;i&lt;m;i++) SA::s[n++] = s[i] - ('0'-1); reverse(s,s+n); SA::s[n++] = 3; for(int i = 0;i&lt;m;i++) SA::s[n++] = (s[i]^1) - ('0'-1); SA::s[n] = 0; SA::build(n); ST::build(n+1,SA::ht);}void solve(){ long long ans = 0; for(int i = 0;i&lt;m;i++){ ans += lcp(i+1,n-i-1); } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180811-POI2010-Antisymmetry/"},{"title":"「POI2011」Tree Rotations-线段树合并","text":"现在有一棵二叉树，所有非叶子节点都有两个孩子。在每个叶子节点上有一个权值(有$n$个叶子节点，满足这些权值为$1…n$的一个排列)。可以任意交换每个非叶子节点的左右孩子。要求进行一系列交换，使得最终所有叶子节点的权值按照前序遍历序写出来，逆序对个数最少。 输入方式： 第一行一个整数n； 下面每行，一个数x； 如果$x==0$，表示这个节点非叶子节点，递归地向下读入其左孩子和右孩子的信息； 如果$x!=0$，表示这个节点是叶子节点，权值为$x$。 链接Luogu P3521// 数据太弱 BZOJ 2212// 时间限制太长 LOJ 2163 // 单点时限0.2s 十分适合卡常 题解线段树合并这里的线段树合并讨论的都是动态开点的线段树的合并。 我们注意到，如果给定元素个数（值域区间），那么这个线段树的每个节点对应的区间是唯一确定的，这也是我们可以在一个较低的复杂度里面将若干棵动态开点的线段树合到一起去的一个基础。 我们在这里假设我们可以在$O(1)$的时间里面合并两个树的叶子的信息，并从线段树的两个子树O(1)的得到更大的区间的信息（区间合并），其实这也是线段树的基础。 我们其实可以暴力的写出合并的伪代码： 12345678910111213node merge(node u,node v): if u,v 中存在一个节点为空节点: return 另一个节点 // O(1) if u,v 均为叶节点: return 合并u,v 两个叶节点 // O(1) u.leftchild = merge(u.leftchild,v.leftchild) u.rightchild = merge(u.rightchild,v.rightchild) 合并 u.leftchild 和 u.rightchild 的信息为 u // O(1) return u 线段树合并的过程也可以很容易的可持久化，只需要把上面的代码中后面的几个$u$修改成一个新创建的$w$即可。 关于复杂度，可以显而易见的注意到，merge两个动态开点线段树的时候，其复杂度与公共节点的数量成正比，也就是减少的节点数目。 动态开点线段树每次插入一个节点，其空间会增加$\\log n$。这样如果我们有了$n$颗只有一个节点的动态开点线段树，总共的点有$O(n \\log n)$个。 如果将这样$n$个动态开点的线段树合并到一棵线段树，最后剩下的节点数是在$O(n)$量级的，减少的节点数目是在$O(n \\log n)$量级的，所以这样合并的时间复杂度是$O(n \\log n)$。 题目解法这道题主要就是权值线段树合并的一个过程。我们对每个叶子结点开一个权值线段树，然后逐步合并。 考虑到一件事情：如果在原树有一个根节点x，和其左儿子$ls$，右儿子$rs$。我们要合并的是$ls$的权值线段树和$rs$的权值线段树。 发现交换$ls$和$rs$并不会对更上层之间的逆序对产生影响，于是我们只需要每次合并都让逆序对最少。 于是我们的问题转化为了给定两个权值线段树，问把它们哪个放在左边可以使逆序对个数最小，为多少。 考虑我们合并到一个节点，其权值范围为$[l,r]$，中点为$mid$。这个时候我们有两棵树，我们要分别计算出某棵树在左边的时候和某棵树在右边的时候的逆序对个数。事实上我们只需要处理权值跨过中点$mid$的逆序对，那么所有的逆序对都会在递归过程中被处理仅一次（类似一个分治的过程）。而我们这个时候可以轻易的算出两种情况的逆序对个数，不交换的话是左边那棵树的右半边乘上左边那棵树的的右半边的大小；交换的话则是左边那棵树的左半边乘上左边那棵树的的左半边的大小。 然后每次合并由于都可以交换左右子树，我们就把这次合并中交换和不交换的情况计算一下，取最小值累积就可以了。 空间复杂度：$O(n \\log n)$，时间复杂度 $O(n \\log n)$。 另，洛谷上这题数据极弱，LOJ上的数据就很强，线段树合并卡过去略微费劲，可以体验一下不断$TLE$的感觉qwq。 另另，这道题的读入很迷，附上一点人话： 第一行一个数$n$，表示该二叉树的叶节点的个数；下面若干行，每行一个数$x$：如果$x = 0$，表示这个节点不是叶节点，递归地向下读入其左孩子和右孩子的信息；如果$x \\neq 0$，表示这个节点是叶节点，权值为$x$。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;cstdio&gt;#include &lt;cctype&gt;using namespace std;#define mid ((l+r)&gt;&gt;1)typedef long long ll;inline char read(){ static const int SIZE = 1024*1024; static char *s,*t,ibuf[SIZE]; if(s == t) t = (s=ibuf) + fread(ibuf,1,SIZE,stdin); return s == t ? -1:(*s++);}template&lt;typename T&gt;inline void read(T &amp;x){ static bool iosig = 0;static char ch; for(ch = read(),iosig = 0;!isdigit(ch);ch = read()){ if(ch == -1) return; if(ch =='-') iosig = 1; } for(x = 0;isdigit(ch);ch =read()) x = (((x&lt;&lt;2)+x)&lt;&lt;1) + (ch^48); if(iosig) x = -x;}inline ll min(ll a,ll b){ return a &gt; b?b : a;}const int MAXN = 210000;ll ANS = 0,ans1 = 0,ans2 = 0;int n,pos;struct node{ int sumn,ls,rs;}aa[MAXN*30];int cnt = 0;void update(int &amp;nown,int l,int r){ if(!nown) nown = ++cnt; aa[nown].sumn++; if(l == r) return; if(pos &lt;= mid) update(aa[nown].ls,l,mid); else update(aa[nown].rs,mid+1,r);}void merge(int &amp;lx,int rx){ if(!lx || !rx){lx=lx+rx;return;} aa[lx].sumn += aa[rx].sumn; ans1 += (ll)aa[aa[lx].rs].sumn*aa[aa[rx].ls].sumn; ans2 += (ll)aa[aa[lx].ls].sumn*aa[aa[rx].rs].sumn; merge(aa[lx].ls,aa[rx].ls); merge(aa[lx].rs,aa[rx].rs);}void solve(int &amp;x){ int t,ls,rs;x = 0; read(t); if(!t){ solve(ls),solve(rs); ans1 = ans2 = 0; x = ls;merge(x,rs); ANS += min(ans1,ans2); } else pos = t,update(x,1,n);}signed main(){ read(n); int t = 0; solve(t); printf(\"%lld\\n\",ANS); return 0;}","link":"/20180723-POI2011-Tree-Rotations/"},{"title":"「POI2012」Cloakroom-类背包dp","text":"有 $n$ 件物品，每件物品有三个属性 $a[i], b[i], c[i]$ , $(a[i] &lt; b[i])$ 。 再给出 $q$ 个询问，每个询问由非负整数 $m$ , $k$ , $s$ 组成，问是否能够选出某些物品使得： 对于每个选的物品 $i$ ，满足 $a[i] \\leq m$ 且 $b[i]&gt;m+s$ 。 所有选出物品的 $c[i]$ 的和正好是 $k$ 。 链接Luogu P3537 题解好题好题。 首先我们发现，如果把 $a[i]$ 这一维 $sort$ 掉，使 $a[i]$ 单增的话，这个问题就变成了给定若干个物品，问能不能取若干个物体满足 $\\sum c[i] = k$ ，且 $\\min(b[i]) &gt; m + s$。 然后这个时候，我们想要每加入一个物品都能够更新答案，可以用 $dp$ 的方法来更新，状态的第一维也就很好设置，肯定是前 $i$ 个物品如何如何。然后看到数据范围，我们需要思考如何在 $O(\\log n)$ 或者 $O(1)$ 的时间内出解。 根据时间的限制，下面我们只能设置一维了，不可能同时表示 $\\sum c[i]$ 和 $\\min(b[i])$ 。考虑到这只是一个可行性判定，所以我们不用都存两个，只要存的这一维和$ dp$ 数组的信息能够让我们推断出来可行不可行就可以。 所以我们令 $dp[i][j]$ 表示前i个物品，$\\sum c[i]$ 为 $j$ 的情况下，所有方案中 $\\min(b[i])$ 最大的是多少。 这个时候，我们查 $dp[i][k]$ ，若其大于等于 $k$ ，则无解；否则有解。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 1100,MAXM = 1100000;struct Query{ int id; int x,y,c; bool operator &lt;(const Query &amp;_q)const{ return x &lt; _q.x; }}p[MAXN],q[MAXM];int n,m;void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d %d\",&amp;p[i].c,&amp;p[i].x,&amp;p[i].y); } scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;q[i].x,&amp;q[i].c,&amp;q[i].y); q[i].y += q[i].x; q[i].id = i; }}void solve(){ sort(p+1,p+n+1),sort(q+1,q+m+1); static int dp[MAXM],ans[MAXM]; memset(dp,0,sizeof(dp)); dp[0] = 0x3f3f3f3f; int j = 1; p[n+1].x = 0x3f3f3f3f; for(int x = 1;x&lt;=n+1;x++){ while(j &lt;= m &amp;&amp; q[j].x &lt; p[x].x){ ans[q[j].id] = dp[q[j].c] &lt;= q[j].y ? 0: 1; j++; } if(x == n+1) break; for(int i = 100000;i&gt;=p[x].c;i--) dp[i] = max(dp[i],min(dp[i-p[x].c],p[x].y)); } for(int i = 1;i&lt;=m;i++){ printf(\"%s\\n\",ans[i]?\"TAK\":\"NIE\"); }}int main(){ init(); solve(); return 0;}","link":"/20180816-POI2012-Cloakroom/"},{"title":"「POI2013」Price List-图论","text":"给定一个 $n$ 个点，$m$ 条边的无向联通图，每条边的权值均为 $a$。 在原图所有满足 $u$ 节点和 $v$ 节点间最短路为 $2 \\times a$ 的点对 $(u,v)$ 间建立一条无向边，边的权值均为 $b$。 给定一个起始节点$k$，求在上述操作后，$k$到所有节点的最短路径。 链接Luogu P3547 题解第一遍写觉得是sb题，第二遍觉得是神题oooorz 可以发现，一共有三种从k点到达其他点的方式： 全走$a$边 走$0/1$条边的$a$，剩下沿最短路走$b$ 全走$b$边（可能绕远） 第一种和第二种情况可以一遍$bfs$解决，这也就是我所想到的了。 然后交上去，$WA$。 第三种情况如果直接两次往外扩展建边，那么复杂度是$O(m^2)$。 这个时候我们有一个微小的优化，就是建两份的图，分别用作从一个点第一次和第二次扩展的用的边。 每次我们两次扩展，都把所有合法的第二次扩展的边删掉，理由是非常显然的，因为我们已经访问到了这个节点，根据bfs的性质，所有这个节点在第二张图的入边都不需要了，所以就可以删掉。 然后复杂度是$O(m \\sqrt{m})$。 具体证明如下： 首先，时间复杂度约等于遍历的边的数量，所以我们只需要考虑那些遍历了却没被删掉的边的数量。 对于每一个节点$x$，由他开始只会进行一次遍历再二次遍历中，没被删掉的边只有一种，就是在二次遍历中遍历到了一个仍然与$x$距离为$1$的点，也就是一个三元环。 所以对于这个节点x，假设和他距离为$1$的点有$k$个（也就是这个节点的度数），那么对于每一次二次遍历，那么最多有$k^2$条边遍历过但没有被删掉，只有这些边有可能在接下来的遍历中被再次遍历，又因为第一次遍历的边总共是$m$条，所以总时间复杂度就是它们的相乘。$$\\sum_{v \\in V} \\min(deg(v)^2,m) \\leq \\sum_{v \\in V} \\sqrt{deg(v)^2 \\cdot m} = \\sqrt {m} \\sum_{v \\in V} deg(v) = O(m \\sqrt{m})$$ 参考：CSDN 这个题告诉我们：适当删边可能降低一些复杂度。 orz出题人… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 210000,MAXM = 210000;struct Graph{ int to[MAXM],nex[MAXM],pre[MAXM]; int fir[MAXN];int ecnt; Graph(){ ecnt = 1; } void addedge(int u,int v){ int e = ecnt; pre[fir[u]] = e; to[e] = v,nex[e] = fir[u],pre[e] = 0; fir[u] = e; ecnt++; } void deledge(int x,int e){ int n = nex[e],p = pre[e]; if(!p) fir[x] = n; nex[p] = n,pre[n] = p; }}A,B;int n,m,k,a,b;long long ans[MAXN];long long dis[MAXN];queue&lt;int&gt; q;void init(){ scanf(\"%d %d %d %d %d\",&amp;n,&amp;m,&amp;k,&amp;a,&amp;b); int u,v; for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;u,&amp;v); A.addedge(u,v),A.addedge(v,u); B.addedge(u,v),B.addedge(v,u); }}void bfs1(){ while(!q.empty()) q.pop(); for(int i = 1;i&lt;=n;i++) dis[i] = 1000000; dis[k] = 0;q.push(k); while(!q.empty()){ int nown = q.front();q.pop(); for(int nowe = A.fir[nown];nowe;nowe = A.nex[nowe]){ int v = A.to[nowe]; if(dis[v] &gt; dis[nown] + 1){ dis[v] = dis[nown] + 1; q.push(v); } } } for(int i = 1;i&lt;=n;i++) ans[i] = min(dis[i] * a,(dis[i]/2) * b + (dis[i]%2) * a);}void bfs2(){ static bool vis[MAXN]; while(!q.empty()) q.pop(); for(int i = 1;i&lt;=n;i++) dis[i] = 1000000; dis[k] = 0;q.push(k); while(!q.empty()){ int nown = q.front();q.pop(); vis[nown] = 1; for(int e1 = A.fir[nown];e1;e1 = A.nex[e1]){ int v1 = A.to[e1]; vis[v1] = 1; } for(int e1 = A.fir[nown];e1;e1 = A.nex[e1]){ int v1 = A.to[e1]; for(int e2 = B.fir[v1];e2;e2 = B.nex[e2]){ int v2 = B.to[e2]; if(!vis[v2]){ // printf(\" v2:%d\\n\",v2); if(dis[v2] &gt; dis[nown] + 1){ dis[v2] = dis[nown] + 1; q.push(v2); } B.deledge(v1,e2); } } } for(int e1 = A.fir[nown];e1;e1 = A.nex[e1]){ int v1 = A.to[e1]; vis[v1] = 0; } vis[nown] = 0; } for(int i = 1;i&lt;=n;i++) ans[i] = min(ans[i],dis[i] * b);}void solve(){ memset(ans,0x3f,sizeof(ans)); bfs1(); bfs2(); for(int i = 1;i&lt;=n;i++){ printf(\"%lld\\n\",ans[i]); }}int main(){ init(); solve(); return 0;}","link":"/20180814-POI2013-Price-List/"},{"title":"「POI2006」Periods of Words-KMP","text":"一个串是有限个小写字符的序列,特别的,一个空序列也可以是一个串. 一个串 $P$ 是串 $A$ 的前缀, 当且仅当存在串 $B$ , 使得 $A = PB$. 如果 $P \\neq A$ 并且 $P$ 不是一个空串,那么我们说 $P$ 是 $A$ 的一个 $proper$ 前缀. 定义 $Q$ 是 $A$ 的周期, 当且仅当 $Q$ 是 $A$ 的一个 $proper$ 前缀并且 $A$ 是 $QQ$ 的前缀(不一定要是 $proper$ 前缀). 比如串 $abab$ 和 $ababab$ 都是串 $abababa$ 的周期. 串 $A$ 的最大周期就是它最长的一个周期或者是一个空串(当 $A$ 没有周期的时候), 比如说, $ababab$ 的最大周期是 $abab$ . 串 $abc$ 的最大周期是空串. 给出一个串,求出它所有前缀的最大周期长度之和. 链接Luogu P3435 题解分析一下，可以发现我们要求的是所有前缀的最短的相同的前后缀，且还有长度的限制，不能超过字符串的一半。 这个可以联想到$KMP$，所以我们思考如何在$KMP$的基础上维护这个事情。因为$KMP$在往回跳的话，是可以找到所有的相同的前后缀的。所以给定一个前缀，它沿$nex$数组的转移是确定的，我们也就可以维护一个$near[i]$，就是最近能够跳到的长度，也就是相同的前后缀最短值，所以我们就可以$O(1)$的根据$nex$数组计算这个$near$数组，然后得到最后的答案。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;cstdio&gt;using namespace std;const int MAXN = 1100000;char s[MAXN];int n,nex[MAXN],near[MAXN];void solve(){ int j;j = nex[0] = 0; for(int i = 1;i&lt;n;i++){ while(j &gt; 0 &amp;&amp; s[i] != s[j]) j = nex[j-1]; if(s[i]==s[j]) j++; nex[i] = j; } j = 0; long long ans = 0; near[0] = 0; for(int i = 1;i&lt;n;i++){ int w = nex[i] - 1; if(w &gt;= 0) near[i] = near[w] == -1?w:near[w]; else near[i] = -1; j = near[i]+1; if(j &gt; 0 &amp;&amp; j &lt;= (i+1)/2) ans += (i+1)-j; // printf(\"i:%d j:%d\\n\",i,j); } printf(\"%lld\\n\",ans);}void init(){ scanf(\"%d\",&amp;n); scanf(\"%s\",s);}int main(){ init(); solve(); return 0;}","link":"/20180814-POI2006-okr/"},{"title":"「POI2014」KUR-Couriers-主席树","text":"给一个数列$\\{a_n\\}$，每次询问区间$[l,r]$内有没有一个数出现次数超过一半。如果有，输出这个数，如果没有，输出$0$。 链接Luogu P3567 题解主席树的模版…然而蒟蒻如我居然并看不出来怎么做…不过现在对权值线段树也更了解了呢。 普通的建立一颗主席树。每个节点维护该区间内权值总和。 在查询的时候，还是两个前缀相减，往大于$\\lceil \\frac{r-l+1}{2} \\rceil$（原始的$[l,r]$）的方向去走，如果没有，就返回0，边界就是$l == r$的时候返回。 其实就是总统选举那道题的弱化版。 很简单。然而我更菜。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;cstdio&gt;#include &lt;cctype&gt;#define mid ((l+r)&gt;&gt;1)#define pp pair&lt;int,int&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 600000;namespace prSegTree{ int val[MAXN*20];int ls[MAXN*20],rs[MAXN*20]; int cnt = 1; void build(int &amp;nown,int l,int r){ nown = cnt++; if(l == r) val[nown] = 0; else{ build(ls[nown],l,mid); build(rs[nown],mid+1,r); } } void update(int &amp;nown,int pre,int l,int r,int pos,int d){ nown = cnt++;val[nown] = val[pre]+d; ls[nown] = ls[pre];rs[nown] = rs[pre]; if(l == r) return; else{ if(pos &lt;= mid) update(ls[nown],ls[pre],l,mid,pos,d); if(mid+1 &lt;= pos) update(rs[nown],rs[pre],mid+1,r,pos,d); } } int query(int nowl,int nowr,int l,int r,int limit){ if(l == r) return l; else{ if(val[ls[nowr]] - val[ls[nowl]]&gt;=limit) return query(ls[nowl],ls[nowr],l,mid,limit); if(val[rs[nowr]] - val[rs[nowl]]&gt;=limit) return query(rs[nowl],rs[nowr],mid+1,r,limit); return 0; } }}int n,m;int root[MAXN];void init(){ read(n),read(m); prSegTree::build(root[0],1,n); int tmp; for(int i = 1;i&lt;=n;i++){ read(tmp); root[i] = root[i-1]; prSegTree::update(root[i],root[i-1],1,n,tmp,1); }}void solve(){ int l,r; for(int i = 1;i&lt;=m;i++){ read(l),read(r); print(prSegTree::query(root[l-1],root[r],1,n,(r-l+1)/2+1)),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180506-POI2014-KUR/"},{"title":"「POI2015」Kinoman-线段树","text":"共有 $m$ 部电影，编号为 $1$ 到 $m$，第 $i$ 部电影的好看值为 $w[i]$。在 $n$ 天之中（从 $1$ 到 $n$ 编号）每天会放映一部电影，第 $i$ 天放映的是第 $f[i]$ 部。你可以选择 $l,r(1 \\leq l \\leq r \\leq n)$ ，并观看第 $l,l+1,\\dots , r$ 天内所有的电影。如果同一部电影你观看多于一次，你会感到无聊，于是无法获得这部电影的好看值。所以你希望最大化观看且仅观看过一次的电影的好看值的总和。 链接Luogu P3582 题解我们可以记录一个上一个出现这个电影的位置，然后我们可以用线段树维护一个后缀和的最大值，每次 $O(\\log n)$ 修改，然后 $O(\\log n)$ 查询即可。 时间复杂度： $O(n \\log n)$ 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 1100000;int n,m;int f[MAXN],pre[MAXN],w[MAXN];int last[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;f[i]); pre[i] = last[f[i]],last[f[i]] = i; } for(int i = 1;i&lt;=m;i++){ scanf(\"%d\",&amp;w[i]); }}namespace SegTree{ ll maxn[MAXN&lt;&lt;2],addn[MAXN&lt;&lt;2]; #define lson (nown&lt;&lt;1) #define rson (nown&lt;&lt;1|1) #define mid ((l+r)&gt;&gt;1) void addlabel(int nown,ll v){ maxn[nown] += v,addn[nown] += v; } void push_down(int nown){ if(addn[nown] != 0){ addlabel(lson,addn[nown]),addlabel(rson,addn[nown]); addn[nown] = 0; } } void push_up(int nown){ maxn[nown] = max(maxn[lson],maxn[rson]); } void update(int nown,int l,int r,int ql,int qr,ll v){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ addlabel(nown,v); } else{ push_down(nown); if(ql &lt;= mid) update(lson,l,mid,ql,qr,v); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,v); push_up(nown); } } ll query(int nown,int l,int r,int ql,int qr){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ return maxn[nown]; } else{ ll ans = -0x3f3f3f3f3f3f; push_down(nown); if(ql &lt;= mid) ans = max(ans,query(lson,l,mid,ql,qr)); if(qr &gt;= mid+1) ans = max(ans,query(rson,mid+1,r,ql,qr)); return ans; } }}void update(int l,int r,int x){ if(l &lt;= 0 || r &gt;= n+1 || l &gt; r) return; SegTree::update(1,1,n,l,r,x);}void solve(){ ll ans = -0x3f3f3f3f3f3f; for(int i = 1;i&lt;=n;i++){ update(pre[i]+1,i,w[f[i]]); if(pre[i] != 0) update(pre[pre[i]]+1,pre[i],-w[f[i]]); ans = max(ans,SegTree::query(1,1,n,1,i)); } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20181210-POI2015-Kinoman/"},{"title":"「POI2014」PTA-单调队列","text":"给定$n$个点的高度，规定从$1$点出发，跳到比高度小于当前点的点不消耗体力，否则消耗一点体力，最后到达$n$点。 $q$次询问，每次询问有一个步伐限制$k$，求最少耗费的体力。 链接Luogu P3752 题解很明显的一个dp。 状态转移方程： $$\\begin{equation}dp[i] = \\min_{j \\geq i-k}\\begin{cases} dp[j] + 1 &amp; ht[i] \\geq ht[j]\\\\ dp[j], &amp; ht[i] &lt; ht[j]\\end{cases}\\end{equation}$$ 注意到$j$随$i$的变化而单调递增，所以这个东西可以用单调队列来完成$O(n)$的复杂度。 不过有一点小问题，在于这个加一的问题。我们注意到，如果我们把dp的值当作第一关键字，高度当作第二关键字，如果最优解的高度较矮，加一之后也不会比次优解要差（单调队列里的最优和次优至少差$1$），所以我们可以如此优化。 时间复杂度$O(nq)$。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1100000;int n,m;int num[MAXN], dp[MAXN];deque&lt;int&gt; q;// 其中的int为posvoid init(){ scanf(\"%d\",&amp;n); num[0] = 0x3f3f3f3f; for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;num[i]);}bool cmp(int x,int y){ // 1 -&gt; x 的优先级大于y;0 -&gt; y的优先级大于x if(dp[x]!=dp[y]) return dp[x] &lt; dp[y]; return num[x] &gt; num[y];}int getans(int k){ dp[1] = 0; while(!q.empty()) q.pop_back(); q.push_back(1); for(int i = 2;i&lt;=n;i++){ while(!q.empty() &amp;&amp; q.front() &lt; i-k) q.pop_front(); dp[i] = dp[q.front()] + ((num[q.front()] &gt; num[i])? 0: 1); while(!q.empty() &amp;&amp; cmp(i,q.back())) q.pop_back(); q.push_back(i); } return dp[n];}void solve(){ scanf(\"%d\",&amp;m); int t; for(int i = 1;i&lt;=m;i++){ scanf(\"%d\",&amp;t); printf(\"%d\\n\",getans(t)); }}int main(){ init(); solve(); return 0;}","link":"/20180627-POI2014-PTA/"},{"title":"「POI2014」Salad Bar-瞎搞","text":"有一个长度为$n$的字符串，每一位只会是 $\\text{p}$ 或 $\\text{j}$ 。求一个最长子串，使得不管是从左往右还是从右往左取，都保证每时每刻已取出的 $\\text{p}$ 的个数不小于 $\\text{j}$ 的个数。 链接Luogu P3564 题解瞎搞题。 把 $p$ 看做 $1$ ，$j$ 看做 $-1$ ，那么问题转化为：求最长的子串 $s[l…r]$ ，使得$sum[l-1] \\leq sum[i] \\leq sum[r]$对于任意$i \\in [l,r]$成立。 我们首先建一个类似图的东西，把所有sum相同的位连到一起去，让 $nex[i]$ 表示下一个 $sum[x] = sum[i]$ 的位置，没有的话就是$-1$；让$to[i-1]$表示我们从第$i$位开始找到的最远的满足该性质的位置。 然后我们发现，答案就是$\\max(to[i-1]-i+1)$。 所以我们只要推出$to[i]$数组就可以了。 剩下的我就说不明白了2333，看代码感性理解吧。 为啥它是最长的我也不知道，反正能过。 复杂度$O(n)$。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int MAXN = 1100000;int n;char str[MAXN];int a[MAXN],sum[MAXN];int minsum = 0;int fir[MAXN],nex[MAXN],to[MAXN];// fir仅做建图方便用，nex表示下一个sum相同的位置// to表示区间最远能够延伸的距离void init(){ scanf(\"%d\",&amp;n); scanf(\"%s\",str + 1); memset(fir,-1,sizeof(fir)); for(int i = 1;i&lt;=n;i++){ a[i] = str[i] == 'p' ? 1 : -1; sum[i] = sum[i-1] + a[i]; minsum = min(sum[i],minsum); } for(int i = n;~i;--i){ int x = sum[i] - minsum; nex[i] = fir[x],to[i] = i,fir[x] = i; }}void solve(){ static int ans = 0; int r = n; for(int l = n;l&gt;=1;--l){ if(a[l] == -1){ r = l-1; } else{ int t = nex[l-1]; if(~t &amp;&amp; sum[to[t]] &gt;= sum[r]) r = to[t]; to[l-1] = r; ans = max(ans,r-l+1); } } printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180816-POI2014-Salad-Bar/"},{"title":"「POI2015」Myjnie-区间dp","text":"有 $n$ 家洗车店从左往右排成一排，每家店都有一个正整数价格 $p_i$ 。有 $m$ 个人要来消费，第 $i$ 个人会驶过第 $a_i$ 个开始一直到第 $b_i$ 个洗车店，且会选择这些店中最便宜的一个进行一次消费。但是如果这个最便宜的价格大于 $c_i$，那么这个人就不洗车了。 请给每家店指定一个价格，使得所有人花的钱的总和最大。 链接Luogu P3592 题解首先我们可以明显的发现一个结论：所有 $p_i$ 都只可能是给定的 $c_i$ 中的数。 所以我们可以先对 $c_i$ 离散化，这样我们的 $c_i$ 的范围就是 $[1,4000]$ 了。我们只要计算出每个人以哪个 $c_i$ 作为最小值，一样可以求得答案。 如果我们知道一个区间的最小值在什么位置，那么我们事实上可以把所有经过这个点的人的花费直接计算，剩下的人选择的区间（假设我们只考虑被 $[l,r]$ 包含的线段 ）都不会跨过中间的最小值，那么完全可以递归子问题解决。 所以我们 $dp$ 解决这个问题。 我们设 $f[i][j][k]$ 表示所有被 $[l,r]$ 包含的线段中，区间中存在最小值为 $k$ （离散化后）的点。 那么我们可以枚举值为 $k$ 的点的出现位置 $p$ ，就可以得到以下的方程： $$f[l][r][k] = \\max_{p=l}^{r}(g[l][p-1][k] + g[p+1][r][k] + v[k] \\times c[p][k])$$ 其中： $g[l][r][k] = \\max_{w = k}^{n} (f[l][r][w])$意为这个区间中最小值大于等于 $k$ 的情况下，收费的最大值；$c[p][k]$ 意为在所有被 $[l,r]$ 包含且穿过 $p$ 位置而且 $c_i \\geq k$ 的线段的个数； $v[k]$ 代表 $k$ 的真实大小。 最后答案即为 $g[1][n][1]$。 分析下复杂度： 枚举区间 $[l,r]$ 为 $O(n^2)$ ，对于每一个区间，我们计算 $c[p][k]$ 复杂度为 $O(nm)$ ；我们枚举断点、最小价格的复杂度也是 $O(nm)$；$g$ 数组计算的复杂度明显可以在一个较低的复杂度下进行，最后的时间复杂度就是 $O(n^3m)$；空间复杂度 $O(n^2m)$ 。 计算路径的时候，我们记录每个 $f[l][r][k]$ 对应的最优分割位置 $p$ 以及 $g[l][r][k]$ 的最优权值选择 $k$ ，就可以递归计算了。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;cstdio&gt;#include &lt;map&gt;#include &lt;unistd.h&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 60,MAXM = 4100;int n,m;int A[MAXM],B[MAXM],C[MAXM];map&lt;int,int&gt; S;int val[MAXM],cnt;int f[MAXN][MAXN][MAXM],g[MAXN][MAXN][MAXM];int pp[MAXN][MAXN][MAXM],gk[MAXN][MAXN][MAXM];// pp 记录 f 的位置， gk 记录 g 的权值（记录路径用）int c[MAXN][MAXM];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %d\",&amp;A[i],&amp;B[i],&amp;C[i]); S[C[i]] = 0; } for(map&lt;int,int&gt;::iterator it = S.begin();it != S.end();it++){ it-&gt;second = ++cnt; val[cnt] = it-&gt;first; } for(int i = 1;i&lt;=m;i++){ C[i] = S[C[i]]; }}void solve(){ for(int len = 1;len&lt;=n;len++){ for(int l = 1,r = len;r&lt;=n;l++,r++){ //计算c for(int pos = l;pos&lt;=r;pos++){ for(int i = 1;i&lt;=m;i++) c[pos][i] = 0; for(int s = 1;s&lt;=m;s++){ if(l &lt;= A[s] &amp;&amp; B[s] &lt;= r &amp;&amp; A[s] &lt;= pos &amp;&amp; pos &lt;= B[s]){ c[pos][C[s]]++; } } for(int i = m;i&gt;=1;i--) c[pos][i] += c[pos][i+1]; } // 转移 f 以及 pp for(int k = 1;k&lt;=m;k++){ for(int p = l;p&lt;=r;p++){ int t = g[l][p-1][k]+g[p+1][r][k]+val[k]*c[p][k]; if(t &gt; f[l][r][k]) pp[l][r][k] = p; //最优的转移位置 p f[l][r][k] = max(f[l][r][k],t); } g[l][r][k] = f[l][r][k]; } // 计算 k 以及 gk for(int k = m;k&gt;=1;k--){ gk[l][r][k] = g[l][r][k] &gt; g[l][r][k+1]?k:gk[l][r][k+1]; g[l][r][k] = max(g[l][r][k],g[l][r][k+1]); } } } printf(\"%d\\n\",g[1][n][1]); }int ans[MAXN];void output(int l,int r,int k){ if(l&gt;r) return; if(g[l][r][k] == 0){ for(int i = l;i&lt;=r;i++) ans[i] = val[cnt];// 这里要设置成最大值 // 因为这个区间不存在可能的贡献，所以我们就直接赋权值最大，防止对其他造成影响 } else{ int _k = gk[l][r][k],_p = pp[l][r][_k]; ans[_p] = val[_k]; output(l,_p-1,_k),output(_p+1,r,_k); }}void output(){ output(1,n,1); for(int i = 1;i&lt;=n;i++) printf(\"%d \",ans[i]); printf(\"\\n\");}int main(){ init(); solve(); output(); return 0;}","link":"/20180923-POI2015-Myjnie/"},{"title":"「SCOI2007」排列-状压dp","text":"给一个数字串 $s$ 和正整数 $d$ , 统计 $s$ 有多少种不同的排列能被 $d$ 整除（可以有前导 $0$）。 链接Luogu P4163 题解简单状压dp。 我们先考虑每个数字都不同的情况，然后在除掉每个数字出现次数的阶乘即可。 我们令 $s$ 的长度为 $n$，设状态 $dp[S][r]$ 为目前选了集合 $S$ ，模 $d$ 余数为 $r$ 的情况数，有如下转移方程： $$dp[S][r] = \\sum dp[S | 2^i][r*10 + s[i]],\\text{if } S \\&amp; 2^i = 0$$ 边界情况就是 $dp[2^{n+1}-1][0] = 1$ 其余均为 $0$。 $\\text{dfs}$ 即可，时间复杂度为 $O(n2^n \\times d)$，事实上跑不满… 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int MAXN = 11;char str[MAXN];int n,d;int dp[1&lt;&lt;MAXN][1001];void init(){ scanf(\"%s\",str); n = strlen(str); scanf(\"%d\",&amp;d); memset(dp,-1,sizeof(dp)); // printf(\"str:%s d:%d\\n\",str,d);}int dfs(int now,int r){ if(now == (1&lt;&lt;n)-1) return r == 0; if(dp[now][r] != -1) return dp[now][r]; int ans = 0; for(int i = 0;i&lt;n;i++){ if((now &amp; (1&lt;&lt;i)) == 0){ ans += dfs(now|(1&lt;&lt;i),(r*10+(str[i]-48))%d); } } return dp[now][r] = ans;}void solve(){ dfs(0,0); int t[MAXN],power[MAXN]; for(int i = 0;i&lt;=9;i++) t[i] = 0; for(int i = 0;i&lt;n;i++) t[int(str[i]-48)]++; power[0] = 1; for(int i = 1;i&lt;=n;i++) power[i] = power[i-1] * i; int ans = dp[0][0]; for(int i = 0;i&lt;=9;i++) ans /= power[t[i]]; printf(\"%d\\n\",ans);}int main(){ int T; scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++){ init(); solve(); } return 0;}","link":"/20181002-SCOI2007-permutation/"},{"title":"「SCOI2010」股票交易-dp+单调队列","text":"lxhgww预测到了未来$T$天内某只股票的走势，第$i$天的股票买入价为每股$AP_i$，第$i$天的股票卖出价为每股$BP_i$（数据保证对于每个$i$，都有$AP_i$&gt;=$BP_i$），第$i$天的一次买入至多只能购买$AS_i$股，一次卖出至多只能卖出$BS_i$股。两次交易（某一天的买入或者卖出均算是一次交易）之间，至少要间隔$W$天；在任何时间一个人的手里的股票数不能超过$MaxP$。 在第1天之前，lxhgww手里有数目无限的钱，但是没有任何股票，在$T$天以后，lxhgww能赚到的钱最多是多少？ 链接Luogu P2569 题解显然要dp嘛，要不然它放在dp模块里搞笑么。 如果用$dp[i][j]$表示在第$i$天的时候拥有$j$股股票的时候的最大收益。 那么状态转移： $$dp[i][j] = max\\begin{cases}{}dp[i-1][j]\\\\-ap[i]\\times j,\\; &amp;j\\leq as[i]\\\\dp[i-w][j+t] + t \\times bp[i],\\;&amp;0 &lt; t &lt; bs[i],j+t \\leq maxp\\\\dp[i-w][j-t] - t \\times ap[i],\\;&amp;0 &lt; t &lt; as[i],j-t &gt; 0\\end{cases}$$ 注意到前两个转移是$O(1)$的 ，后两个是如果直接做是$O(n)$的，然而这个东西就是在一个区间里面找最大值，后面加减的$t$ 随位置同步改变，不会改变状态的相对大小，所以用单调队列优化后面两个转移即可。 最后扫一下所有的$dp[n][i]$最大值即为答案。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 2100;int n,m,w;int ap[MAXN],bp[MAXN],as[MAXN],bs[MAXN];int dp[MAXN][MAXN];void init(){ scanf(\"%d %d %d\",&amp;n,&amp;m,&amp;w); w++; for(int i = 1;i&lt;=n;i++) scanf(\"%d %d %d %d\",&amp;ap[i],&amp;bp[i],&amp;as[i],&amp;bs[i]);}deque&lt;int&gt; q;void solve(){ for(int i = 0;i&lt;=n;i++) for(int j = 0;j&lt;=m;j++) dp[i][j] = -0x3f3f3f3f; dp[0][0] = 0; for(int i = 1;i&lt;=n;i++){ for(int j = 0;j&lt;=as[i];j++) dp[i][j]=-ap[i]*j; for(int j = 0;j&lt;=m;j++) dp[i][j] = max(dp[i][j],dp[i-1][j]); if(i-w &lt; 0) continue;//!!! while(!q.empty()) q.pop_back(); for(int j = 0;j&lt;=m;j++){ while(!q.empty() &amp;&amp; q.front() &lt; j-as[i]) q.pop_front(); while(!q.empty() &amp;&amp; dp[i-w][q.back()]-(j-q.back())*ap[i] &lt;= dp[i-w][j]) q.pop_back(); q.push_back(j); dp[i][j] = max(dp[i][j],dp[i-w][q.front()]-(j-q.front())*ap[i]); } while(!q.empty()) q.pop_back(); for(int j = m;j&gt;=0;--j){ while(!q.empty() &amp;&amp; q.front() &gt; j+bs[i]) q.pop_front(); while(!q.empty() &amp;&amp; dp[i-w][q.back()]+(q.back()-j)*bp[i] &lt;= dp[i-w][j]) q.pop_back(); q.push_back(j); dp[i][j] = max(dp[i][j],dp[i-w][q.front()] + (q.front() - j)*bp[i]); } } int ans = 0; for(int i = 0;i&lt;=m;i++) ans = max(ans,dp[n][i]); printf(\"%d\\n\",ans);}int main(){ init(); solve(); return 0;} 在写下这个题解的时候，这的确是第100篇博文了。祝贺一下自己。","link":"/20180708-SCOI2010-stock/"},{"title":"「NOI2010」海拔-网络流/最短路","text":"题面请点击查看全文 $\\text{YT}$ 市是一个规划良好的城市，城市被东西向和南北向的主干道划分为 $n\\times n$ 个区域。简单起见，可以将 $\\text{YT}$ 市看作一个正方形，每一个区域也可看作一个正方形。从而，$YT$ 城市中包括 $(n+1) \\times (n+1)$ 个交叉路口和 $2n \\times (n+1)$ 条双向道路（简称道路），每条双向道路连接主干道上两个相邻的交叉路口。 小 $\\text{Z}$ 作为该市的市长，他根据统计信息得到了每天上班高峰期间 $\\text{YT}$ 市每条道路两个方向的人流量，即在高峰期间沿着该方向通过这条道路的人数。每一个交叉路口都有不同的海拔高度值， $\\text{YT}$ 市市民认为爬坡是一件非常累的事情，每向上爬 $h$ 的高度，就需要消耗 $h$ 的体力。如果 是下坡的话，则不需要耗费体力。因此如果一段道路的终点海拔减去起点海拔的值为 $h$ (注意 $h$ 可能是负数)，那么一个人经过这段路所消耗的体力是 $\\max(0, h)$ 。 小 $\\text{Z}$ 还测量得到这个城市西北角的交叉路口海拔为 $0$ ，东南角的交叉路口海拔为 $1$ ，但其它交叉路口的海拔高度都无法得知。小 $\\text{Z}$ 想知道在最理想的情况下（即你可以任意假设其他路口的海拔高度），每天上班高峰期间所有人爬坡消耗的总体力和的最小值。 链接Luogu P2046 题解可以发现，应该所有点的海拔都要么是 $0$ ，要么是 $1$ ，可以取到最优解。而且分界线应该是一条连续的线，让我们联想到最小割。 但是这个数据范围太大了，直接跑最大流会超时，所以我们将这个图转化成对偶图，根据切割方向选择边的长度，然后跑最短路即可。注意不能用 $\\text{SPFA}$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#define ll long longusing namespace std;const int MAXN = 300000,MAXM = 2400000;const int N = 510;struct Edge{ int from,to; ll len;int nex;}edge[MAXM];int n,m,s,t;int fir[MAXN],ecnt = 2;int a[N][N],b[N][N],c[N][N],d[N][N];void addedge(int a,int b,int c){s edge[ecnt] = (Edge){a,b,c,fir[a]}; fir[a] = ecnt++;}struct Point{ int x;ll d; bool operator &lt;(const Point &amp;a)const{ return d &gt; a.d; }};ll dis[MAXN];bool vis[MAXN];priority_queue&lt;Point&gt; q;void dij(){ for(int i = 1;i&lt;=n*n+2;i++) dis[i] = 2147483647; dis[s] = 0; q.push((Point){s,0}); while(!q.empty()){ Point now = q.top();q.pop(); int nown = now.x,nowd = dis[nown]; if(vis[nown]) continue; vis[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(dis[v] &gt; nowd + l){ dis[v] = nowd + l; q.push((Point){v,dis[v]}); } } }}int _hash(int i,int j){ if(i &lt;= 0 || j &gt; n) return s; if(j &lt;= 0 || i &gt; n) return t; return (i-1)*n+j;}void init(){ scanf(\"%d\",&amp;n);n++; for(int i = 1;i&lt;=n;i++) for(int j = 1;j&lt;=n-1;j++) scanf(\"%d\",&amp;a[i][j]); for(int i = 1;i&lt;=n-1;i++) for(int j = 1;j&lt;=n;j++) scanf(\"%d\",&amp;b[i][j]); for(int i = 1;i&lt;=n;i++) for(int j = 2;j&lt;=n;j++) scanf(\"%d\",&amp;c[i][j]); for(int i = 2;i&lt;=n;i++) for(int j = 1;j&lt;=n;j++) scanf(\"%d\",&amp;d[i][j]); n--;}void solve(){ s = n*n+1,t = n*n+2; for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=n;j++){ addedge(_hash(i,j),_hash(i+1,j),a[i+1][j]); addedge(_hash(i,j),_hash(i,j+1),d[i+1][j+1]); addedge(_hash(i,j),_hash(i-1,j),c[i][j+1]); addedge(_hash(i,j),_hash(i,j-1),b[i][j]); } } for(int i = 1;i&lt;=n;i++){ addedge(s,_hash(1,i),a[1][i]); addedge(s,_hash(i,n),b[i][n+1]); //addedge(,s,),addedge(,s,); } for(int i = 1;i&lt;=n;i++){ addedge(_hash(i,1),t,b[i][1]); addedge(_hash(n,i),t,a[n+1][i]); //addedge(t,,),addedge(t,,); } dij(); printf(\"%lld\\n\",dis[t]);}signed main(){ init(); solve(); return 0;}","link":"/20180821-NOI2010-altitude/"},{"title":"「SCOI2008」奖励关-期望dp","text":"系统将依次随机抛出$k$次宝物，每次你都可以选择吃或者不吃。宝物一共有$n$种，系统每次抛出这$n$种宝物的概率都相同且相互独立。 吃一次第 $i$ 种宝物将得到 $P_i$ 分，但并不是每种宝物都是可以随意获取的。第 $i$ 种宝物有一个前提宝物集合 $S_i$ 。只有当 $S_i$ 中所有宝物都至少吃过一次，才能吃第 $i$ 种宝物。注意，$P_i$ 可以是负数。 假设你采取最优策略，平均情况你一共能在奖励关得到多少分值？ 链接Luogu P2473 题解为了方便最后答案的计算，我们设$dp[i][S]$为当前已经吃了$i$次，并且已经吃到的宝物的集合为$S$，到最后（吃完$k$次）能够获得。 然后状态转移（$W_i$为单独取$i$的集合）： $$dp[i][S] = \\frac{1}{n}\\sum_{i = 1}^{n}\\begin{cases}min(dp[i+1][S],dp[i+1][S \\cup W_i] + P_i),S_i \\subset S\\\\dp[i+1][S],S_i \\not\\subset S\\end{cases}$$ 状压，转移即可。 代码123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 110;int k,n;int q[MAXN],p[MAXN],t;double dp[MAXN][1&lt;&lt;16];//1&lt;&lt;type代表第i种void init(){ scanf(\"%d %d\",&amp;k,&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d\",&amp;p[i],&amp;t); while(t!=0) q[i] |= (1&lt;&lt;(t-1)),scanf(\"%d\",&amp;t); }}void solve(){ for(int i = k-1;i&gt;=0;i--){ for(int j = 0;j&lt;=(1&lt;&lt;n)-1;j++){ for(int w = 1;w&lt;=n;w++) dp[i][j] += max(dp[i+1][j],(q[w]&amp;j)==q[w]?dp[i+1][j|(1&lt;&lt;w-1)]+p[w]:-1e9); dp[i][j]/=n; } } printf(\"%.6lf\\n\",dp[0][0]);}int main(){ init(); solve(); return 0;}","link":"/20180803-SCOI2008-award/"},{"title":"「SCOI2010」连续攻击游戏-二分图匹配","text":"lxhgww最近迷上了一款游戏，在游戏里，他拥有$n$个装备（$n &lt; 1000000$），每种装备都有$2$个属性，这些属性的值用$[1,10000]$之间的数表示。当他使用某种装备时，他只能使用该装备的某一个属性。并且每种装备最多只能使用一次。 游戏进行到最后，lxhgww遇到了终极boss，这个终极boss很奇怪，攻击他的装备所使用的属性值必须从$1$开始连续递增地攻击，才能对boss产生伤害。现在lxhgww想知道他最多能连续攻击boss多少次？ 链接Luogu P1640 BZOJ 1854 题解可以看出，这个东西可以转换成二分图的模版。左边的$10000$个点代表属性值，右边的n个点代表装备。 从属性值$1$开始跑匈牙利的$dfs$，如果能增广，就接着往下。不能的话，输出答案返回。复杂度不太会算…不过可以过的。 值得一提的是，网络流虽然我每次直接在残量网络上增广…但仍然慢的要死…$40$分TLE再也优化不了了… 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 2000000,MAXM = 5000000;namespace fast_io { //...}using namespace fast_io;struct Edge{ int from,to; int nex;}edge[MAXM];int fir[MAXN],ecnt = 1;void addedge(int a,int b){ edge[ecnt] = (Edge){a,b,fir[a]}; fir[a] = ecnt++;}int n,a,b;int pre[1100000],vis[11000];void init(){ read(n); for(int i = 1;i&lt;=n;i++){ read(a),read(b); addedge(a,100000+i),addedge(b,100000+i); }}bool dfs(int nown){ if(vis[nown]) return 0; vis[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(!pre[v] || dfs(pre[v])){ pre[v] = nown; return 1; } } return 0;}void solve(){ int ans = 0; for(int i = 1;i&lt;=10000;i++){ memset(vis,0,sizeof(vis)); if(dfs(i)) ans++; else break; } print(ans);}int main(){ init(); solve(); flush(); return 0;}","link":"/20180427-SCOI2010-game/"},{"title":"「SCOI2013」多项式的运算-Splay","text":"维护一个动态的关于$x$的无穷多项式 ，这个多项式初始时对于所有$i$有$a_i = 0$ $f(x)=a_0x^0+a_1x^1+a_2x^2…$操作者可以进行四种操作： mul L R V表示将 $x^L$ 到 $x^R$ 这些项的系数乘上某个定值$v$； add L R V表示将$x^L$ 到 $x^R $这些项的系数加上某个定值$v$； mulx L R表示将$x^L$ 到 $x^R$ 这些项乘上x变量； query V求$f(v)$的值。 操作集中在前三种，第四种操作不会出现超过$10$次。 链接Luogu P3278 题解Splay大毒瘤题。 前两个操作让我们想到线段树的模板，第三个操作如果从序列的角度来看就像是把一个序列向右移动，在把被冲掉的那一个位置加到原来的位数上去。 显然啊！同志们，这是送分题啊！Splay套套套… add操作：提取区间，打标记，维护信息。 mul操作：提取区间，打标记，维护信息。 mulx操作：呃…先找到rank为l-1,l,r,r+1,r+2的节点。删除掉r+1号节点，把其值加到r上去，然后在l-1和l之间插入一个值为0的节点，维护信息。 注意：push_down操作先传muln，再传addn。 打标记几乎同线段树模板，就不说了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175#include &lt;cstdio&gt;#include &lt;unistd.h&gt;#include &lt;cctype&gt;#define ll long longusing namespace std;const int MAXN = 210000;const ll p = 20130426LL;namespace fast_io { //...}using namespace fast_io;inline void mod(ll &amp;x){x %= p;}struct Splay{ ll val[MAXN],addn[MAXN],muln[MAXN]; int f[MAXN],c[MAXN][2],siz[MAXN],tot,root; int newnode(int v = 0){ val[++tot] = v; siz[tot] = 1; addn[tot] = 0,muln[tot] = 1; return tot; } void add(int x,int num){ if(!x) return; addn[x] += num,val[x] += num; mod(val[x]),mod(addn[x]); } void mul(int x,int num){ if(!x) return; muln[x] *= num,addn[x] *= num,val[x] *= num; mod(addn[x]),mod(muln[x]),mod(val[x]); } void push_down(int x){ if(!x) return; if(muln[x]!=1){ mul(c[x][0],muln[x]); mul(c[x][1],muln[x]); muln[x] = 1; } if(addn[x] != 0){ add(c[x][0],addn[x]); add(c[x][1],addn[x]); addn[x] = 0; } } void push_up(int x){ if(!x) return; siz[x] = siz[c[x][0]] + siz[c[x][1]] + 1; } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1]==x),w = c[x][1-t]; push_down(y),push_down(x); f[x] = z;f[y] = x; if(w) f[w] = y; c[x][1-t] = y,c[y][t] = w; if(z) c[z][c[z][1]==y] = x; push_up(y),push_up(x); if(!f[x]) root = x; } void splay(int x,int target = 0){ while(f[x]!=target){ int y = f[x],z = f[y]; if(z!=target) (c[z][1]==y) ^ (c[y][1]==x)?rotate(x):rotate(y); rotate(x); } } int qrank(int r){ int x = root; while(2333){ if(r &lt;= siz[c[x][0]]) x = c[x][0]; else if(r == siz[c[x][0]] + 1) break; else r -= siz[c[x][0]] + 1,x = c[x][1]; } return x; } int __build(int l,int r,int fa){ if(l &gt; r) return 0; int mid = (l+r)&gt;&gt;1; int x = newnode(); f[x] = fa; c[x][0] = __build(l,mid-1,x); c[x][1] = __build(mid+1,r,x); push_up(x); return x; } void build(int num){ root = __build(1,num,0); } void __output(int x,ll *a){ if(!x) return; push_down(x); __output(c[x][0],a); a += siz[c[x][0]],*a = val[x]; __output(c[x][1],a+1); } void output(ll *a){ __output(root,a); } void add(int l,int r,int num){ int lb = qrank(l),rb = qrank(r+2); splay(lb),splay(rb,lb); add(c[rb][0],num); push_up(rb),push_up(lb); } void mul(int l,int r,int num){ int lb = qrank(l),rb = qrank(r+2); splay(lb),splay(rb,lb); mul(c[rb][0],num); push_up(rb),push_up(lb); } void mulx(int l,int r){ int x = qrank(l),y = qrank(l+1),z = qrank(r+1),a = qrank(r+2),b = qrank(r+3); splay(z),splay(b,z); c[b][0] = 0;push_up(b),push_up(z); val[z] += val[a]; splay(x),splay(y,x); c[y][0] = newnode(),f[c[y][0]] = y; push_up(y),push_up(x); }}T;int n,m = 110000;ll query(ll v){ static ll o[MAXN]; T.output(o); ll ans = 0; for(int i = m;i&gt;=1;i--){ ans = ans * v + o[i]; mod(ans); } return ans;}void init(){ read(n); T.build(m+3);}void solve(){ char op[10];int l,r,v; for(int i = 1;i&lt;=n;i++){ read(op); if(op[0] == 'q'){ read(v); print(int(query(v))),print('\\n'); } else{ read(l),read(r); if(op[3] == 'x') T.mulx(l+1,r+1); else{ read(v); if(op[0] == 'm') T.mul(l+1,r+1,v); else if(op[0] == 'a') T.add(l+1,r+1,v); } } }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180601-SCOI2013-function/"},{"title":"「SCOI2014」方伯伯的OJ-动态开点线段树","text":"方伯伯正在做他的 OJ 。现在他在处理 OJ 上的用户排名问题。 OJ 上注册了 $n$ 个用户，编号为 $1$ ～ $n$ ，一开始他们按照编号排名。 方伯伯会按照心情对这些用户做以下四种操作，修改用户的排名和编号 ，共有 $m$ 次操作： 操作格式为 1 x y ，意味着将编号为 $x$ 的用户编号改为 $y$ ，而排名不变，执行完该操作后需要输出该用户在队列中的位置，数据保证 $x$ 必然出现在队列中，同时， $y$ 是一个当前不在排名中的编号。 操作格式为 2 x ，意味着将编号为 $x$ 的用户的排名提升到第一位，执行完该操作后需要输出执行该操作前编号为 $x$ 用户的排名。 操作格式为 3 x ，意味着将编号为 $x$ 的用户的排名降到最后一位，执行完该操作后需要输出执行该操作前编号为 $x$ 用户的排名。 操作格式为 4 k，意味着查询当前排名为 $k$ 的用户编号，执行完该操作后需要输出当前操作用户的编号。 对于 $100\\%$ 的数据， $1 \\leq n \\leq 10^8,1 \\leq m \\leq 10^5$。 强制在线。 链接Luogu P3285 题解一道有(du)趣(liu)的数据结构题。 注意到 $n$ 的范围比较大， $m$ 的范围比较小，所以不能直接把平衡树建出来，要不然空间/时间咕咕咕… 所以我们需要想办法优化一下。注意到 $m$ 的范围是 $10^5$ ，而且只有在两端添加的操作，所以我们可以用动态开点线段树代替平衡树。 NOIP 2017 D2T3 告诉我们，如果一个平衡树只有在末尾/开头添加和删除操作，那么我们完全可以用动态开点线段树取代它。实现复杂度和时间复杂度都会大幅优化。 我们用一个很大很大的动态开点线段树取代平衡树，具体来说就是我们假装我们线段树的 $[1,10^8]$ 之间都塞满了数，但是事实上一个都没有，只有我们要对它进行修改的时候才去把某个位置到根的路径变成真实存在的即可。 把一个数放到头部就相当于在原位置标记我们已经删除了这个数，然后在 $(- \\infty,0]$ 这个区间里顺次往外插入即可；放到尾部同理，就相当于从内向外在 $[n+1,+\\infty)$ 往里插入数即可。 然后我们还要记录一个数在线段树重的位置，这里使用一个 map ，在线段树中 $x$ 数出现的位置，没有该 key 则为没有动过，仍在 $x$ 位置。 由于 $m$ 较 $n$ 比较小，所以时间复杂度 $O(m \\log n)$ ，空间复杂度 $O(m \\log n)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#include &lt;cstdio&gt;#include &lt;map&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 100000,logn = 35;const int L = -1e7,R=1e8+1e7;struct SegTree{ int siz[MAXN*logn],val[MAXN*logn],ls[MAXN*logn],rs[MAXN*logn]; int root,cnt; #define mid ((l+r)&gt;&gt;1) void update(int &amp;nown,int l,int r,int pos,int v){ if(!nown) nown = ++cnt; if(l == r) val[nown] = v,siz[nown] = 0; else{ if(pos &lt;= mid) update(ls[nown],l,mid,pos,v); if(pos &gt;= mid+1) update(rs[nown],mid+1,r,pos,v); siz[nown] = siz[ls[nown]] + siz[rs[nown]]; } } void remove(int &amp;nown,int l,int r,int pos){ if(!nown) nown = ++cnt; if(l == r) siz[nown] = -1; else{ if(pos &lt;= mid) remove(ls[nown],l,mid,pos); if(pos &gt;= mid+1) remove(rs[nown],mid+1,r,pos); siz[nown] = siz[ls[nown]] + siz[rs[nown]]; } } int kth(int nown,int l,int r,int k,int &amp;v){ if(k &gt; (r-l+1) + siz[nown]) return -1; if(l == r){ v = val[nown]; return l; } else{ int sz = (mid-l+1) + siz[ls[nown]]; if(k &lt;= sz) return kth(ls[nown],l,mid,k,v); if(k &gt; sz) return kth(rs[nown],mid+1,r,k-sz,v); return -1; } } int getsum(int nown,int l,int r,int ql,int qr){ if(!nown) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr){ return siz[nown]; } else{ int ans = 0; if(ql &lt;= mid) ans += getsum(ls[nown],l,mid,ql,qr); if(qr &gt;= mid+1) ans += getsum(rs[nown],mid+1,r,ql,qr); return ans; } } void update(int pos,int v){update(root,L,R,pos,v);} void remove(int pos){remove(root,L,R,pos);} int kth(int k){int v=0,t = kth(root,L,R,k,v);return v!=0?v:t;} int getsum(int l,int r){return getsum(root,L,R,l,r);}}T;int n,m,nowl,nowr;map&lt;int,int&gt; M;//在线段树中 x 出现的位置，没有则为没有动过int getpos(int x){ return M.count(x)?M[x]:x;}int push_top(int x){ int pos = getpos(x),ans = (pos-nowl+1) + T.getsum(nowl,pos); T.remove(pos),T.update(--nowl,x); M[x] = nowl; return ans;}int push_bottom(int x){ int pos = getpos(x),ans = (pos-nowl+1) + T.getsum(nowl,pos); T.remove(pos),T.update(++nowr,x); M[x] = nowr; return ans;}int change_id(int x,int y){ int pos = getpos(x),ans = (pos-nowl+1) + T.getsum(nowl,pos); T.update(pos,y); M[y] = pos; return ans;}int query_id(int k){ return T.kth((nowl-L)+k);}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); nowl = 1,nowr = n;}void solve(){ int lastans = 0; for(int i = 1;i&lt;=m;i++){ int op,x,y,k; scanf(\"%d\",&amp;op); if(op == 1){ scanf(\"%d %d\",&amp;x,&amp;y); x -= lastans,y -= lastans; lastans = change_id(x,y); } else if(op == 2){ scanf(\"%d\",&amp;x);x -= lastans; lastans = push_top(x); } else if(op == 3){ scanf(\"%d\",&amp;x);x -= lastans; lastans = push_bottom(x); } else if(op == 4){ scanf(\"%d\",&amp;k);k -= lastans; lastans = query_id(k); } printf(\"%d\\n\",lastans); }}int main(){ init(); solve(); return 0;}","link":"/20181003-SCOI2014-onlinejudge/"},{"title":"「SCOI2015」小凸玩密室-树形dp","text":"小凸和小方相约玩密室逃脱，这个密室是一棵有$n$个节点的完全二叉树，每个节点有一个灯泡。点亮所有灯泡即可逃出密室。 每个灯泡有个权值$a_i$，每条边也有个权值$b_i$。点亮第$1$个灯泡不需要花费，之后每点亮$1$个新的灯泡$v$的花费，等于上一个被点亮的灯泡$u$到这个点$v$的距离$D_{u,v}$，乘以这个点的权值$a_v$。在点灯的过程中，要保证任意时刻所有被点亮的灯泡必须连通，在点亮一个灯泡后必须先点亮其子树所有灯泡才能点亮其他灯泡。 请告诉他们，逃出密室的最少花费是多少。 链接BZOJ 4446 Luogu 4253 题解这个树形dp真是可以说神了orz…最近做到的神题真多…（萌萌哒，$LCA$，再加上这个… 思考一下怎么表示状态。如果我们已经第一个点亮了一个点（假设其他点都未被点亮），那么我们必须先点亮这两个子树。由于必须联通而且必须只能点子树，下一步只能点亮两个儿子之一。而点亮的那个儿子的子树肯定要先被全部点亮，然后才能点亮另一个一个子树。 如果我们忽略上一个点点在哪里的话，那么我们事实上发现上述的过程是一个无后效性的子结构，这个东西就可以设置成状态了。但这个事情的最关键的问题在于我们忽略了上一个点点在哪里，那我们怎样去表示这个$D_{u,v} \\times a_v$的过程呢？ 这个时候我们发现我们不知道上一个点点在哪里，但是我们可以知道下一个点点在哪里。如果我们发现我们点完了一个子树，我们现在只有两种情况： 我们所有目前点完的点构成了一颗更大的完整的子树，这个时候我们就只能去点这个更大的完整的子树的根节点的父节点。 我们现在所有点完的点不能构成一棵更大的完整的子树，这个时候我们就必须点完最近的没有点的一个子树。 事实上只有两种情况，也就是到某个祖先，或者某个祖先的兄弟。 所以我们用$dp[i][j][0]$表示点完以第$i$个点为根节点的子树之后，再去点其第$j$个祖先的过程需要的最小花费，$dp[i][j][1]$表示点完以第$i$个点为根节点的子树之后，再去点其第$j$个祖先的另一个儿子的过程需要的最小花费。注意到这是一个完全二叉树，所以保证了我们的状态的数目是$O(n \\log{n})$的。 转移方程太长，不写了，简单说一说如何转移。 简单来说，需要分成三类讨论：没有儿子；只有一个儿子；有两个儿子。 没有儿子的没啥好说的。有一个儿子的就相当于不变结束节点进入这个子树。有两个儿子的就有两种情况：先进左子树和先进右子树，分开讨论即可。状态转移是$O(1)$的。 具体来说的话看代码注释。 以上只是我们计算答案的一个辅助。 我们发现，如果选定一个点作为固定的起点，那么这个东西它点的顺序就是确定的。所以我们按照点灯规则确定子树的顺序，再加上子树之间转移的代价，就可以推出答案。这里需要对有没有兄弟节点进行分类讨论。由于树的高度是严格$O(\\log n)$的，所以我们的每个点的递推也是$O(\\log n)$的。 时间复杂度与空间复杂度都是$O(n \\log n)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;#define ll long longconst int SIZE = 1024*1024;char ibuf[SIZE],*s,*t;inline char read(){ if(s==t) t=(s=ibuf)+fread(ibuf,1,SIZE,stdin); return s==t?-1:*s++;}template &lt;typename T&gt;inline void read(T &amp;x){ static char c;bool iosig; for(c=read(),iosig=0;!isdigit(c);c=read()){ if(c==-1) return; iosig |= (c=='-'); } for(x=0;isdigit(c);c=read()) x = (((x&lt;&lt;2)+x)&lt;&lt;1) + (c^48); if(iosig) x = -x;}const int MAXN = 210000,logn = 20;int n;ll num[MAXN]; ll dp[MAXN][logn][2];//点亮了i这个节点和子树的所有节点，下一个点亮到？级祖先的？儿子的最小代价 ll dis[MAXN][logn];//从i节点向上j个节点的长度 #define p(i,j) (((1&lt;&lt;(j-1))&lt;=i)?(i&gt;&gt;j):-1)//i的j祖先，上设虚拟0节点，其他均为-1//num[0] = 0,dis[1][1] = 0#define b(i,j) ((i&gt;&gt;(j-1))^1)//i的j祖先的另一个儿子#define lson (i&lt;&lt;1)#define rson ((i&lt;&lt;1)|1)void init(){ read(n); for(int i = 1;i&lt;=n;i++) read(num[i]); dis[1][1] = 0; for(int i = 2;i&lt;=n;i++){ read(dis[i][1]); for(int j = 2;~p(i,j);j++) dis[i][j] = dis[p(i,1)][j-1] + dis[i][1]; }}void solve(){ //0 祖先 1 兄弟 for(int i = n;i &gt;= 1;--i){ for(int j = 1;~p(i,j);j++){ dp[i][j][0] = dp[i][j][1] = 0x3f3f3f3f3f3f3f3f; if((i&lt;&lt;1) &gt; n){//一个儿子都没有 dp[i][j][0] = dis[i][j] * num[p(i,j)]; dp[i][j][1] = (dis[i][j] + dis[b(i,j)][1]) * num[b(i,j)]; } else if(((i&lt;&lt;1)|1) &gt; n){//只有左儿子 //注意要加上从根节点到儿子的代价 dp[i][j][0] = dp[lson][j+1][0] + dis[lson][1] * num[lson]; dp[i][j][1] = dp[lson][j+1][1] + dis[lson][1] * num[lson]; } else{//有两个儿子 //两种转移方式，左-&gt;右 or 右-&gt;左 ，注意要加上从根节点到儿子的代价 dp[i][j][0] = min(dp[i][j][0],dp[lson][1][1]+dp[rson][j+1][0] + dis[lson][1] * num[lson]); dp[i][j][0] = min(dp[i][j][0],dp[rson][1][1]+dp[lson][j+1][0] + dis[rson][1] * num[rson]); dp[i][j][1] = min(dp[i][j][1],dp[lson][1][1]+dp[rson][j+1][1] + dis[lson][1] * num[lson]); dp[i][j][1] = min(dp[i][j][1],dp[rson][1][1]+dp[lson][j+1][1] + dis[rson][1] * num[rson]); } } } //计算答案 ll ans = 0x3f3f3f3f3f3f3f3f; for(int s = 1;s&lt;=n;s++){ //从s点开始，先点亮所有s子树的节点和s的父亲 ll tmp = dp[s][1][0]; for(int i = p(s,1),last = s;~i;i = p(i,1),last = p(last,1)){ //last节点的子树即i节点已经被点亮，现在要点亮i的父亲节点 //有兄弟，就需要去先点亮兄弟，再点亮i的父亲（last兄弟的祖父）节点 if(b(last,1) &lt;= n) tmp += dis[b(last,1)][1] * num[b(last,1)] + dp[b(last,1)][2][0]; else tmp += dis[i][1] * num[p(i,1)]; //加上从i到i的父亲节点的代价 } ans = min(ans,tmp); } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20180608-SCOI2015-room/"},{"title":"「SCOI2015」情报传递-树链剖分-主席树","text":"给定一个 $n$ 个节点的有根树，开始时每个节点的权值都为 $0$ 。一共有 $q$ 个时刻，每个时刻可能有如下两个操作之一： 给定一个节点 $x$ ，从下一个时刻起每个时刻都给该节点的权值 $+1$（每个节点只会有一次该操作）； 给定两个节点 $x,y$ 以及一个数 $C$ ，求这两个节点的简单路径上权值大于 $C$ 的节点个数，以及简单路径上的所有节点个数。 链接Luogu P4216 题解设目前时刻 $t$，那么第二个操作事实上可以转化成进行一操作时间在 $t-C$ 之前的节点个数，那么我们可以离线操作，建一棵以树链剖分 $\\text{dfs}$ 序为序列下标的主席树，在结合树链剖分，我们可以在 $O(log^2 n)$ 的时间内回答询问。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;const int MAXN = 200100,logn = 17;int n,q;vector&lt;int&gt; edge[MAXN];int rt,fa[MAXN];int dep[MAXN],siz[MAXN],son[MAXN];int top[MAXN],id[MAXN],last[MAXN],cnt;int ti[MAXN];struct Query{ int t,x,y,c;}Q[MAXN*2];int qcnt;void init(){ scanf(\"%d\",&amp;n); int p; for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;p); if(p != 0){ edge[p].push_back(i); fa[i] = p; } else{ rt = i; } } scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++){ int op,x,y,c; scanf(\"%d\",&amp;op); if(op == 1){ scanf(\"%d %d %d\",&amp;x,&amp;y,&amp;c); Q[++qcnt] = (Query){i,x,y,c}; } else{ scanf(\"%d\",&amp;x); ti[x] = i; } }}void dfs1(int nown,int depth){ siz[nown] = 1,dep[nown] = depth; for(unsigned i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; dfs1(v,depth+1); siz[nown] += siz[v]; if(siz[v] &gt; siz[son[nown]]) son[nown] = v; }}void dfs2(int nown,int topf){ top[nown] = topf;id[nown] = ++cnt; last[cnt] = nown; if(!son[nown]) return; dfs2(son[nown],topf); for(unsigned i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(v == son[nown]) continue; dfs2(v,v); }}namespace prSegTree{ int ls[MAXN*logn],rs[MAXN*logn],sumn[MAXN*logn],cnt; #define mid ((l+r)&gt;&gt;1) void insert(int &amp;nown,int pre,int l,int r,int pos,int val){ nown = ++cnt;ls[nown] = ls[pre],rs[nown] = rs[pre],sumn[nown] = sumn[pre]; if(l == r){ sumn[nown] += val; } else{ if(pos &lt;= mid) insert(ls[nown],ls[pre],l,mid,pos,val); if(pos &gt;= mid+1) insert(rs[nown],rs[pre],mid+1,r,pos,val); sumn[nown] = sumn[ls[nown]] + sumn[rs[nown]]; } } int query(int nown,int l,int r,int ql,int qr){ if(ql &gt; qr) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr){ return sumn[nown]; } else{ int ans = 0; if(ql &lt;= mid){ ans += query(ls[nown],l,mid,ql,qr); } if(qr &gt;= mid+1){ ans += query(rs[nown],mid+1,r,ql,qr); } return ans; } }}int root[MAXN];int query_tree(int l,int r,int c){ return prSegTree::query(root[r],1,q+1,1,c) - prSegTree::query(root[l-1],1,q+1,1,c);}void build(){ dfs1(rt,1); dfs2(rt,rt); for(int i = 1;i&lt;=n;i++){ if(ti[last[i]]) prSegTree::insert(root[i],root[i-1],1,q+1,ti[last[i]]+1,1); else root[i] = root[i-1]; }}void query(int x,int y,int c,int &amp;tot,int &amp;ans){ ans = 0;tot = 0; while(top[x] != top[y]){ if(dep[top[x]] &lt; dep[top[y]]) swap(x,y); tot += dep[x] - dep[top[x]] + 1; ans += query_tree(id[top[x]],id[x],c); x = fa[top[x]]; } if(dep[x] &gt; dep[y]) swap(x,y); tot += dep[y] - dep[x] + 1; ans += query_tree(id[x],id[y],c);}void solve(){ int ans = 0,tot = 0; for(int i = 1;i&lt;=qcnt;i++){ Query &amp; qq = Q[i]; query(qq.x,qq.y,qq.t-qq.c,tot,ans); printf(\"%d %d\\n\",tot,ans); }}int main(){ init(); build(); solve(); return 0;}","link":"/20181002-SCOI2015-intelligence/"},{"title":"「SDOI2008」仪仗队-欧拉函数","text":"作为体育委员， $C$ 君负责这次运动会仪仗队的训练。仪仗队是由学生组成的 $N \\times N$ 的方阵，为了保证队伍在行进中整齐划一， $C$ 君会跟在仪仗队的左后方，根据其视线所及的学生人数来判断队伍是否整齐(如下图)。 现在， $C$ 君希望你告诉他队伍整齐时能看到的学生人数。 链接Luogu P2158 题解学了一年 $\\text{OI}$ 才会做这道题，退役退役QAQ 我们观察右下三角形的情况，答案只要再做一些简单的加减乘除就可以了。 $(x,y)$ 从 $(0,0)$ 能被看见的条件，就是在这两个点之间没有其他整点。可以发现，如果有不少于一个整点，那么必然这个区间会被整点若干等分（这若干个整点之间斜率相同），所以也就是满足 $\\gcd(x,y) &gt; 1$ ，所以我们只需要求：$$\\sum_{i = 1}^{n-1} \\sum_{j=1}^{n-1} [\\gcd(i,j) = 1]$$两个循环相同，直接用欧拉函数求解就好。 时间复杂度：$O(n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;cstdio&gt;using namespace std;const int MAXN = 100000;bool flag[MAXN];int prime[MAXN],cnt;int phi[MAXN];void sieve(int n){ phi[1] = 1;flag[1] = 1; for(int i = 2;i&lt;=n;i++){ if(flag[i] == 0){ prime[++cnt] = i,phi[i] = i-1; } for(int j = 1;j&lt;=cnt &amp;&amp; i * prime[j] &lt;= n;j++){ flag[i*prime[j]] = 1; if(i % prime[j]){ phi[i * prime[j]] = phi[i] * (prime[j]-1); } else{ phi[i * prime[j]] = phi[i] * prime[j]; break; } } }}int main(){ int n; scanf(\"%d\",&amp;n); sieve(n); long long ans = 0; for(int i = 2;i&lt;=n-1;i++){ ans += phi[i]; } printf(\"%lld\\n\",n==1?0:ans*2+3); return 0;}","link":"/20180909-SDOI2008-guard/"},{"title":"「SCOI2016」美味-可持久化线段树","text":"一家餐厅有 $n$ 道菜，编号 $1,\\dots,n$ ，大家对第 $i$ 道菜的评价值为 $a_i(1 \\leq i \\leq n)$。有 $m$ 位顾客，第 $i$ 位顾客的期望值为 $b_i$，而他的偏好值为 $x_i$ 。因此，第 $i$ 位顾客认为第 $j$ 道菜的美味度为 $b_i \\text{XOR} (a_j+x_i)$ ，$\\text{XOR}$ 表示异或运算。 第 $i$ 位顾客希望从这些菜中挑出他认为最美味的菜，即美味值最大的菜，但由于价格等因素，他只能从第 $l_i$ 道到第 $r_i$ 道中选择。请你帮助他们找出最美味的菜。 链接Luogu P3293 题解我们观察到区间限制，很容易让我们想到主席树，再观察到异或运算、最大，很容易联想到 0/1 Trie 树。 所以我们就按照主席树的方法建一颗 0/1 可持久化 Trie 树。 如果没有 $x_i$ 的运算，上面的解法就可以解决了。我们直接按照 $a_j$ 从高往低每位贪心取反即可，但我们注意到有了一个 $(a_j + x_i)$ 的限制。 这个问题中，我们需要建立一个权值线段树（可持久化），再每位贪心，但是我们需要再线段树上把那一段找出来，然后再走向左右区间。 时间复杂度是两个 $log$ ，因为其特殊性不能在线段树上直接二分，因此复杂度：$O(m \\log^2 10^5 )$。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;using namespace std;const int MAX = 210000;const int MAXN = 210000,logn = 19;int n,m,a[MAXN],rt[MAXN];namespace prSegTree{ int sumn[MAXN*logn],ls[MAXN*logn],rs[MAXN*logn],cnt; #define mid ((l+r)&gt;&gt;1) void update(int &amp;nown,int pre,int l,int r,int pos,int v){ nown = ++cnt;ls[nown] = ls[pre],rs[nown] = rs[pre],sumn[nown] = sumn[pre]; if(l == r) sumn[nown] += v; else{ if(pos &lt;= mid) update(ls[nown],ls[pre],l,mid,pos,v); if(pos &gt;= mid+1) update(rs[nown],rs[pre],mid+1,r,pos,v); sumn[nown] = sumn[ls[nown]] + sumn[rs[nown]]; } } int query(int nown,int l,int r,int ql,int qr){ if(!nown) return 0; if(ql &lt;= l &amp;&amp; r &lt;= qr){ return sumn[nown]; } else{ int ans = 0; if(ql &lt;= mid) ans += query(ls[nown],l,mid,ql,qr); if(qr &gt;= mid+1) ans += query(rs[nown],mid+1,r,ql,qr); return ans; } } int query(int lx,int rx,int ql,int qr){ ql = max(1,ql),qr = min(qr,MAX); if(ql &gt; qr) return 0; return query(rx,1,MAX,ql,qr) - query(lx,1,MAX,ql,qr); }}void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]); for(int i = 1;i&lt;=n;i++) prSegTree::update(rt[i],rt[i-1],1,MAX,a[i],1);}int query(int b,int x,int l,int r){ int ans = 0,tmp = 0; for(int i = 20;i&gt;=0;i--){//该考虑 (1&lt;&lt;i) 的位置 if(b&amp;(1&lt;&lt;i)){ if(prSegTree::query(rt[l-1],rt[r],tmp-x,tmp+(1&lt;&lt;i)-x-1) &gt; 0) ans += (1&lt;&lt;i); else tmp += (1&lt;&lt;i); } else{ if(prSegTree::query(rt[l-1],rt[r],tmp+(1&lt;&lt;i)-x,tmp+(1&lt;&lt;(i+1))-x-1) &gt; 0) ans += (1&lt;&lt;i),tmp += (1&lt;&lt;i); } } return ans;}void solve(){ for(int i = 1;i&lt;=m;i++){ int b,x,l,r; scanf(\"%d %d %d %d\",&amp;b,&amp;x,&amp;l,&amp;r); printf(\"%d\\n\",query(b,x,l,r)); }}int main(){ init(); solve(); return 0;}","link":"/20181211-SCOI2016-delicious/"},{"title":"「SDOI2008」洞穴勘测-LCT","text":"辉辉热衷于洞穴勘测。 辉辉有一台监测仪器可以实时将通道的每一次改变状况，并在辉辉手边的终端机上显示： Connect u v代表监测到洞穴u和洞穴v之间出现了一条通道，Destroy u v代表监测到洞穴u和洞穴v之间的通道被毁。Query u v，代表向监测仪询问此时洞穴u和洞穴v是否连通。 保证无论通道怎么改变，任意时刻任意两个洞穴之间至多只有一条路径。 已知在第一条指令显示之前，洞穴群中没有任何通道存在。 链接Luogu P2147 BZOJ2049 题解利用动态树维护森林的连通性。 每次寻找在对应原树中的根，一样就联通，否则不连通。不加更多解释。 注意判断一下加边和切边的合法性判断。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 20000;struct Link_Cat_Tree{ int f[MAXN],c[MAXN][2]; bool rev[MAXN]; inline bool noroot(int x){ return (c[f[x]][0] == x) || (c[f[x]][1] == x); } inline void reverse(int x){ if(!x) return; swap(c[x][0],c[x][1]); rev[x] ^= 1; } inline void push_down(int x){ if(!x) return; if(rev[x]){ reverse(c[x][0]),reverse(c[x][1]); rev[x] = 0; } } void push_all(int x){ if(!x) return; if(noroot(x)) push_all(f[x]); push_down(x); } inline void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1] == y] = x; c[y][t] = w,c[x][1-t] = y; if(w) f[w] = y; f[y] = x,f[x] = z; } inline void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ if((c[z][1] == y) ^ (c[y][1] == x)) rotate(x); else rotate(y); }rotate(x); } } inline void access(int x){ for(int y = 0;x;x = f[y=x]) splay(x),c[x][1] = y; } inline void makeroot(int x){ access(x);splay(x);reverse(x); } inline int find(int x){ access(x),splay(x); push_down(x); while(c[x][0]) x = c[x][0],push_down(x); return x; } inline void link(int x,int y){ makeroot(x); if(find(y)!=x) f[x] = y; } inline void cat(int x,int y){ makeroot(x); if(find(y) == x &amp;&amp; f[x] == y &amp;&amp; !c[x][1]) f[x] = c[y][0] = 0; } inline int query(int x,int y){ return int(find(x) == find(y)); }};Link_Cat_Tree S;int n,m;char yes[6] = \"Yes\\n\",no[5] = \"No\\n\";void solve(){ read(n),read(m); char op[20];int a,b; for(int i = 1;i&lt;=m;i++){ read(op);read(a),read(b); if(op[0] == 'C') S.link(a,b); if(op[0] == 'D') S.cat(a,b); else if(op[0] == 'Q') print(S.query(a,b) ? yes:no); }}int main(){ solve(); flush(); return 0;}","link":"/20180512-SDOI2008-cave/"},{"title":"「SDOI2008」递归数列-矩阵快速幂","text":"一个由自然数组成的数列按下式定义： 对于 $i \\leq k$ ：$a_i = b_i$ 对于 $i &gt; k$ : $a_i = c_1a_{i-1} + c_2a_{i-2} + … + c_ka_{i-k}$ 其中 $b_j$ 和 $c_j$ （ $1 \\leq j \\leq k$）是给定的自然数。写一个程序，给定自然数 $m \\leq n$, 计算 $a_m + a_{m+1} + a_{m+2} + … + a_n$, 并输出它除以给定自然数 $p$ 的余数的值。 对于 100% 的测试数据： $1 \\leq k \\leq 15,1 \\leq m \\leq n \\leq 10^{18},0 \\le b_1, b_2,… b_k, c_1, c_2,…, c_k \\leq 10^9,1 \\leq p \\leq 10^8$ 链接Luogu P2461 题解$$a_i = \\sum _{j=1}^{k} c_k a_{j-k}$$ 构造一个矩阵 $$M_i=\\begin{bmatrix}S_i \\\\a_i \\\\a_{i-1}\\\\ \\vdots\\\\a_{i-k+2}\\\\a_{i-k+1}\\\\\\end{bmatrix}$$ 转移矩阵为： $$Z=\\begin{bmatrix}1 &amp; c_{1} &amp; c_{2} &amp; \\cdots &amp; c_{k-1} &amp; c_{k} \\\\0 &amp; c_{1} &amp; c_{2} &amp; \\cdots &amp; c_{k-1} &amp; c_{k} \\\\0 &amp; 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; 0 &amp; 0\\\\0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\\0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\\\end{bmatrix}$$ 初始的矩阵为 $$C=\\begin{bmatrix}S_k\\\\b_k \\\\b_{k-1}\\\\ \\vdots\\\\b_{2}\\\\b_{1} \\\\\\end{bmatrix}$$ $$Z \\times C = M_{k+1}\\\\Z \\times M_i = M_{i+1}\\\\$$ 我们有 $$Z^{n-k} \\times C = M_{n}$$ 矩阵快速幂即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cstdlib&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;const int MAXN = 20;ll N,M,K,P,S;ll b[MAXN],c[MAXN];struct Matrix{ ll num[MAXN][MAXN]; Matrix(int op = 0){ memset(num,0,sizeof(num)); if(op){for(int i = 1;i&lt;MAXN;i++) num[i][i] = 1;} } ll* operator [] (const int n){ return num[n]; }};Matrix mul(Matrix &amp;_x,Matrix &amp;_y){ Matrix ans; for(int i = 1;i&lt;=S;i++){ for(int j = 1;j&lt;=S;j++){ for(int k = 1;k&lt;=S;k++){ ans[i][j] += _x[i][k] * _y[k][j]; } ans[i][j] %= P; } } return ans;}Matrix pow(Matrix x,ll k){ Matrix ans(1); for(ll i = k;i;i&gt;&gt;=1,x = mul(x,x)){ if(i &amp; 1) ans = mul(ans,x); } return ans;}Matrix Z,C;void init(){ scanf(\"%lld\",&amp;K); S = K+1; for(int i = 1;i&lt;=K;i++) scanf(\"%lld\",&amp;b[i]); for(int i = 1;i&lt;=K;i++) scanf(\"%lld\",&amp;c[i]); scanf(\"%lld %lld %lld\",&amp;M,&amp;N,&amp;P); for(int i = 1;i&lt;=K;i++) b[i] %= P,c[i] %= P;}ll query(ll x){ ll ans = 0; if(x &lt;= K){ for(int i = 1;i&lt;=x;i++) ans += b[i]; } else{ Matrix a = pow(Z,x-K); for(int i = 1;i&lt;=S;i++) ans += C[i][1] * a[1][i]; } return ans % P;}void build(){ ll sum = 0; for(int i = 1;i&lt;=K;i++){ C[S-i+1][1] = b[i]; sum += b[i]; } C[1][1] = sum % P; Z[1][1] = 1; for(int i = 1;i&lt;=K;i++){ Z[1][i+1] = c[i]; Z[2][i+1] = c[i]; } for(int i = 2;i&lt;=K;i++){ Z[i+1][i] = 1; }}int main(){ init(); build(); printf(\"%lld\\n\",((query(N)-query(M-1))%P+P)%P); return 0;}","link":"/20181101-SDOI2008-sequence/"},{"title":"「SDOI2009」HH去散步-矩阵快速幂+dp","text":"HH又是个喜欢变化的人，所以他不会立刻沿着刚刚走来的路走回。 又因为HH是个喜欢变化的人，所以他每天走过的路径都不完全一样，他想知道他究竟有多少种散步的方法。 现在给你学校的地图（假设每条路的长度都是一样的都是$1$），问长度为$t$，从给定地点$A$走到给定地点$B$共有多少条符合上述条件的路径。 链接Luogu P2151 题解可以发现这是一道dp。 如果令状态为$dp[i][t]$，在第$i$个点，再走t步到达B点的方案数。但是我们注意到这个就很难满足： 他不会立刻沿着刚刚走来的路走回 的限制条件。 所以我们为了体现出刚走过的边，同时还能体现出刚走过的点，就重新设计一下状态： 令$dp[e][t]$为刚刚走过第$e$条边，再走$t$步到达$B$点的方案数。 具体实现的时候要建两条单向边，然后状态转移方程大概是： $$dp[e][t] = \\sum dp[e’][t-1]$$ 其中$e’$为所有从$e.to$出发的边，除了$e$的反向边。 注意到这里$t$的范围比较大，对于任意时候的$t$和某个$e$，转移的路径，也就是$e’$都不会变，所以我们用矩阵快速幂优化这一过程。 这里的模数要用define样式的比较好，对于常数比较有利。 时间复杂度：$O((2m)^3 \\times \\log{t})$ 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;const int MAXN = 200;typedef long long ll;#define mod 45989int n,m,t,A,B;struct Edge{ int to,nex;}edge[MAXN];int fir[MAXN],ecnt = 2;inline void addedge(int u,int v){ edge[ecnt] = (Edge){v,fir[u]}; fir[u] = ecnt++;}struct Matrix{ ll a[MAXN][MAXN]; Matrix(){ memset(a,0,sizeof(a)); }};inline Matrix mul(const Matrix &amp;_a,const Matrix &amp;_b){ Matrix tmp; for(int i = 1;i&lt;=2*m;i++){ for(int j = 1;j&lt;=2*m;j++){ for(int k = 1;k&lt;=2*m;k++){ tmp.a[i][j] += _a.a[i][k] * _b.a[k][j]; } if(tmp.a[i][j] &gt;= mod) tmp.a[i][j] %= mod; } } return tmp;}inline Matrix pow(Matrix x,int k){ Matrix ans; for(int i = 1;i&lt;=2*m;i++) ans.a[i][i] = 1; for(int i = k;i;i&gt;&gt;=1,x = mul(x,x)){ if(i&amp;1) ans = mul(ans,x); } return ans;}inline void init(){ scanf(\"%d %d %d %d %d\",&amp;n,&amp;m,&amp;t,&amp;A,&amp;B); A++,B++; int u,v; for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d\",&amp;u,&amp;v); u++,v++; addedge(u,v); addedge(v,u); } m++; edge[2*m] = (Edge){A,fir[0]}; fir[0] = 1;}void solve(){ Matrix M,I; for(int e = 2;e&lt;=2*m;e++){ int x = edge[e].to; if(x == B) I.a[e][1] = 1; for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ if((e^1)==nowe) continue; M.a[e][nowe] = 1; } } M = pow(M,t); static ll ans[MAXN]; for(int i = 1;i&lt;=2*m;i++){ for(int j = 1;j&lt;=2*m;j++){ ans[i] += M.a[i][j] * I.a[j][1]; } } printf(\"%lld\\n\",ans[2*m] % mod);}int main(){ init(); solve(); return 0;}","link":"/20180809-SDOI2009-walk/"},{"title":"「SDOI2010」古代猪文-Lucas+CRT","text":"猪王国的文明源远流长，博大精深。 iPig 在大肥猪学校图书馆中查阅资料，得知远古时期猪文文字总个数为 $N$ 。当然，一种语言如果字数很多，字典也相应会很大。当时的猪王国国王考虑到如果修一本字典，规模有可能远远超过康熙字典，花费的猪力、物力将难以估量。故考虑再三没有进行这一项劳猪伤财之举。当然，猪王国的文字后来随着历史变迁逐渐进行了简化，去掉了一些不常用的字。 iPig 打算研究古时某个朝代的猪文文字。根据相关文献记载，那个朝代流传的猪文文字恰好为远古时期的 $k$ 分之一，其中 $k$ 是 $N$ 的一个正约数（可以是 $1$ 和 $N$ ）。不过具体是哪 $k$ 分之一，以及 $k$ 是多少，由于历史过于久远，已经无从考证了。 iPig觉得只要符合文献，每一种能整除 $N$ 的 $k$ 都是有可能的。他打算考虑到所有可能的 $k$ 。显然当 $k$ 等于某个定值时，该朝的猪文文字个数为 $\\frac{N}{k}$。然而从 $N$ 个文字中保留下 $\\frac{N}{k}$ 个的情况也是相当多的。iPig预计，如果所有可能的 $k$ 的所有情况数加起来为 $P$ 的话，那么他研究古代文字的代价将会是 $G$ 的 $P$ 次方。 现在他想知道猪王国研究古代文字的代价是多少。由于iPig觉得这个数字可能是天文数字，所以你只需要告诉他答案除以999911659的余数就可以了。 链接题解依据题意推出式子 $$t = \\sum_{k|N} C^{k}_{N}\\\\ans = G^t$$ 我们有指数的一个性质 $$a ^ b \\equiv a ^ {b \\bmod p-1} \\pmod p$$ 也就是指数的循环节是 $p-1$ 。 所以我们只需要 $$ans = G^t = G^{t \\bmod (p-1)} \\pmod p$$ 所以我们只需要算出 $t \\bmod p-1$ 即可。 我们注意到 $p-1 = 999911659-1 = 2 \\times 3 \\times 4679 \\times 35617$ ，分别 $Lucas$ 再 $CRT$ 合并即可。 事实上我们可以只做一次 $CRT$ ，即我们每次都算出在模某数意义下的 $t$ ，最后合并一次即可。 还要特判 $G = P$ 的情况。 时间复杂度大约是 $O(\\sqrt n \\times \\log n )$ 。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstdlib&gt;#define ll long longusing namespace std;const ll P = 999911659;const int MAXN = 100000;ll pow(ll x,ll k,ll p){ ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x = x*x%p) if(i &amp; 1) ans = (ans * x) % p; return ans;}ll inv(ll x,ll p){return pow(x,p-2,p);}ll mod[5] = {2,3,4679,35617},pw[MAXN];void init(ll p){ pw[0] = 1; for(int i = 1;i&lt;p;i++) pw[i]= pw[i-1] * i % p;}ll c(ll n,ll m,ll p){//C_n^m mod mod[num] if(m &gt; n) return 0; return (pw[n] * inv(pw[m],p) % p) * inv(pw[n-m],p) % p;}ll lucas(ll n,ll m,ll p){ if(!m) return 1; return c(n%p,m%p,p) * lucas(n/p,m/p,p) % p;}ll N,G,ans[5];ll CRT(){ ll sum = 0; for(int i = 0;i&lt;4;i++){ ll now = (P-1)/mod[i]; sum = sum + ans[i] * now * inv(now,mod[i]); sum %= (P-1); } return sum;}ll solve(){ for(int num = 0;num&lt;4;num++){ ll p = mod[num],q = sqrt(N); init(p); ans[num] = 0; for(int i = 1;i&lt;=q;i++){ if(N % i != 0) continue; ans[num] = ans[num] + lucas(N,i,p); if(i * i == N) continue; ans[num] = ans[num] + lucas(N,N/i,p); ans[num] %= p; } } return CRT();}int main(){ scanf(\"%lld %lld\",&amp;N,&amp;G); if(G == P) printf(\"%d\\n\",0); else printf(\"%lld\\n\",pow(G,solve(),P)); return 0;}","link":"/20181023-SDOI2010-pig/"},{"title":"「SDOI2009」HH的项链-莫队or树状数组","text":"给定一个长度为$n$的正整数序列$A$,有$m$次询问在$[l,r]$区间内有多少个不同的数。 链接Luogu P1972 题解这道题目前我只会两种离线的做法。（在线的主席树我还不会 做法一：莫队其实做这道题的时候我是不会莫队了。但现在会了，又想写篇莫队的笔记，所以我把这篇题解写出来了。 莫队的核心思想在这篇文章里面已经介绍，这道题又是非常像模版的一道题，也就不详细说了。 首先对序列分块，以查询的左端点所在块的序号为第一关键字，右端点的位置为第二关键字排序，然后暴力转移。 时间复杂度： $O((m+n) \\sqrt{n})$ 或者简单点： $O(n^\\frac{3}{2})$ 代码见最后。 做法二：离散化+树状数组注意到，我们最重要的需要处理的就是重复的问题。如果不需要处理重复的问题，那么就可以直接用树状数组或者前缀和出解了。所以我们考虑到这样一个事情，能否使用某些玄学高端操作，使得我们不需要考虑重复的问题呢？ 可以发现，如果一个数已经出现，那么我们就不需要考虑这个数在其他位置上的出现。因此我们有如下的思路： 把查询按照查询的右端点位置从小到大排序。为了发现某个数是否会在我们的查询的序列中出现，我们需要记录这个数最后一次在序列中出现的位置。如果查询区间的左端点在这个数的位置以左，那么查询区间内一定有这个数；而在这个数以右的话，查询区间里一定没有这个数。由于这个数出现多少次我们都只能算一次，所以这个最后出现的数就是我们判断是否含有这个数的依据。 所以我们在树状数组中只给每个数最后出现的这一位赋值$1$,其余的由于上述，不能计入个数，值也就是$0$。这样操作就满足了区间可减性，然后直接树状数组前缀和相减就可以得到每次的结果。 由于数字的范围较大，应该需要离散化。但由于这个跟时间复杂度关系不大，只与空间复杂度有关，所以我就没有这么写。 时间复杂度：$O((m+n) \\log{n})$ 或者大体来说 $O(n \\log{n})$ 代码见下。 代码这里提供两种方法的代码。 莫队代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;struct Query{ int id,l,r;}query[201000];int times[1001000],res[201000],num[51000];int n,m,q;bool cmp(Query a,Query b){ if(a.l/q!=b.l/q) return a.l/q&lt;b.l/q; else return a.r&lt;b.r;}int main(){ scanf(&quot;%d&quot;,&amp;n); q = sqrt(n);//q是分块大小 for(int i = 1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;num[i]); scanf(&quot;%d&quot;,&amp;m); for(int i = 0;i&lt;m;i++){ scanf(&quot;%d %d&quot;,&amp;query[i].l,&amp;query[i].r); query[i].id = i; } sort(query,query+m,cmp);//排序 int l = 1,r = 1; int ans = 1;times[num[1]]++; for(int i = 0;i&lt;m;i++){ int ql = query[i].l,qr = query[i].r; //转移时先扩大再缩小 while(ql&lt;l){ l--; if(times[num[l]]++ == 0) ans++; } while(r&lt;qr){ r++; if(times[num[r]]++ == 0) ans++; } while(l&lt;ql){ if(--times[num[l]] == 0) ans--; l++; } while(qr&lt;r){ if(--times[num[r]] == 0) ans--; r--; } res[query[i].id] = ans; } for(int i = 0;i&lt;m;i++) printf(&quot;%d\\n&quot;,res[i]); return 0;} 离散化+树状数组代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;inline int lowbit(int x){ return x&amp;(-x);}int n,m,num[51000],ans[201000],last[1001000];int tree[201000];struct que{ int id,l,r,res;}qq[1000000];bool cmp(que a,que b){ if(a.r!=b.r) return a.r&lt;b.r; return a.l&lt;b.l;}inline void insert(int nown,int val){ for(int i = nown;i&lt;=n;i+=lowbit(i)) tree[i]+=val;}inline int query(int nown){ int res = 0; for(int i = nown;i&gt;0;i-=lowbit(i)) res += tree[i]; return res;}int main(){ scanf(&quot;%d&quot;,&amp;n); for(int i = 1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;num[i]); scanf(&quot;%d&quot;,&amp;m); for(int i = 0;i&lt;m;i++){ scanf(&quot;%d %d&quot;,&amp;qq[i].l,&amp;qq[i].r); qq[i].id = i; } sort(qq,qq+m,cmp); int end = 0; for(int i = 0;i&lt;m;i++){ while(end&lt;qq[i].r){//更新last&amp;树状数组 end++; if(last[num[end]]!=0)//原来出现过就抹去last位置的数 insert(last[num[end]],-1); insert(end,1);//树状数组加入新标记 last[num[end]] = end;//更新last值 } ans[qq[i].id] = query(qq[i].r) - query(qq[i].l-1); } for(int i = 0;i&lt;m;i++) printf(&quot;%d\\n&quot;,ans[i]); return 0;}","link":"/20180205-SDOI2009-necklace/"},{"title":"「SDOI2011」工作安排-费用流","text":"你的公司需要提供$n$类产品，其中第$i$类产品共需要$C_{i}$件。公司共有$m$名员工。员工能够制造的产品种类有所区别，我们用一个由$0$和$1$组成的$m\\times n$的矩阵$\\mathbb {A}$来描述每名员工能够制造哪些产品。 对于员工$i$，给出$S_i$。定义他的愤怒值与他制作的产品数量之间的函数是一个$S_i+1$段的分段函数。设$T_{i,0}=0$,$T_{i,S_{i+1}}=+\\infty$，那么当他制造第$[T_{i,j-1}+1,T_{i,j}]$件产品时，每件产品会使他的愤怒值增加$W_{i,j}$， $1\\leq j\\leq S_{i+1}$。保证$0&lt;W_{i,j} &lt; W_{i,j+1}, \\; 0 &lt; T_{i,j} &lt; T_{i,j+1}$。 你的任务是制定出一个产品的分配方案，使得订单条件被满足，并且所有员工的愤怒值之和最小。 链接Luogu P2488 BZOJ 2245 题解一道费用流的题目。 每个产品的数量可以用一条边来限制，主要需要满足的就是愤怒值分段函数式的结构。 注意到每个人的愤怒值的分段函数与做了具体哪类产品无关，所以我们可以在人这边的边上动点手脚。我们可以拆边，按段来拆边，每段给一条边，通过容量来满足分段的要求。 具体建图： 令$1$至$m$为$m$个员工所代表的点，$m+1$至$m+n$为$n$类产品代表的点，$s$为源点，$t$为汇点。 对于$A$矩阵，如果$A_{i,j}$是$1$，那么我们就连一条起点为$i$，终点为$m+j$，容量为$+\\infty$，费用为$0$的边。 对于第$i$个商品种类，我们连一条起点为$m+i$，终点为$t$，容量为$C_{i}$，费用为$0$的边。 对于第$i$个人，我们连$S_{i}+1$条边，起点均为$s$，终点均为$i$，令第$j$条边的容量为$S_{i,j}-S_{i,j-1}$，$j \\in [1,S_{i}+1]$，费用为$W_{i,j}$。 跑最小费用最大流，得到的费用即为结果。 注意需要开$long long$… 值得一提的是，由于我有一个$j$写成了$i$，导致我绝望的找了$15$分钟的$bug$…令人窒息。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cctype&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;namespace fast_io { //...}using namespace fast_io;const int MAX = 1e9;const int MAXN = 1000,MAXM = 200000;struct Edge{ int from,to; int flow,cap; int cost; int nex;}edge[MAXM];int n,m,s,t,ecnt = 2;int fir[MAXN],pree[MAXN];ll dis[MAXN];int instack[MAXN];queue&lt;int&gt; q;void addedge(int a,int b,int c,int d){ //printf(\"%lld %lld %lld %lld\\n\",a,b,c,d); edge[ecnt].from = a,edge[ecnt].to = b; edge[ecnt].cap = c,edge[ecnt].flow = 0; edge[ecnt].cost = d,edge[ecnt].nex = fir[a]; fir[a] = ecnt++; edge[ecnt].from = b,edge[ecnt].to = a; edge[ecnt].cap = 0,edge[ecnt].flow = 0; edge[ecnt].cost = -d,edge[ecnt].nex = fir[b]; fir[b] = ecnt++;}bool spfa(){ while(!q.empty()) q.pop(); memset(dis,0x3f,sizeof(dis)); dis[s] = 0;q.push(s); while(!q.empty()){ int nown = q.front();q.pop(); instack[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ Edge e = edge[nowe]; if(dis[e.to] &gt; dis[nown] + e.cost &amp;&amp; e.cap &gt; e.flow){ dis[e.to] = dis[nown] + e.cost; pree[e.to] = nowe; if(instack[e.to] == 0){ instack[e.to] = 1; q.push(e.to); } } } } return dis[t] &lt; 0x3f3f3f3f3f3f3f3f;}void argument(ll &amp;sumf,ll &amp;sumc){ int nown = t,nowe,delta = MAX; while(nown!=s){ nowe = pree[nown]; delta = min(delta,edge[nowe].cap - edge[nowe].flow); nown = edge[nowe].from; } nown = t; while(nown!=s){ nowe = pree[nown]; edge[nowe].flow+=delta,edge[nowe^1].flow-=delta; nown = edge[nowe].from; } sumf+=delta,sumc+=delta*dis[t];}void min_cost_flow(){ ll f = 0,c = 0; while(spfa()) argument(f,c); printf(\"%lld\\n\",c);}void init(){ read(m),read(n); s = m+n+1,t = m+n+2; int tmp = 0; for(int i = 1;i&lt;=n;i++){ read(tmp); addedge(m+i,t,tmp,0); } for(int i = 1;i&lt;=m;i++){ for(int j = 1;j&lt;=n;j++){ read(tmp); if(tmp) addedge(i,m+j,MAX,0); } } int b[10]; for(int i = 1;i&lt;=m;i++){ read(tmp); for(int j = 1;j&lt;=tmp;j++) read(b[j]); b[0] = 0;b[tmp+1] = MAX; for(int j = 1;j&lt;=tmp+1;j++){ int w;read(w); addedge(s,i,b[j]-b[j-1],w); } }}int main(){ init(); min_cost_flow(); return 0;}","link":"/20180406-SDOI2011-arrange/"},{"title":"「SDOI2011」拦截导弹-CDQ分治优化dp","text":"某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度、并且能够拦截任意速度的导弹，但是以后每一发炮弹都不能高于前一发的高度，其拦截的导弹的飞行速度也不能大于前一发。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。 在不能拦截所有的导弹的情况下，我们当然要选择使国家损失最小、也就是拦截导弹的数量最多的方案。但是拦截导弹数量的最多的方案有可能有多个，如果有多个最优方案，那么我们会随机选取一个作为最终的拦截导弹行动蓝图。 我方间谍已经获取了所有敌军导弹的高度和速度，你的任务是计算出在执行上述决策时，每枚导弹被拦截掉的概率。 链接Luogu P2487 题解​ $\\text{CDQ}$ 分治优化 $dp$​ 。 这是一个三维偏序问题。 如果我们令 $a_i$ 为第 $i$ 个导弹的高度， $b_i$ 为第 $i$ 个导弹的速度，$dp[i]$ 为以第 $i$ 个结尾的导弹能拦截的最大数量， $sum[i]$ 为以第 $i$ 个导弹为结尾能够拦截最大导弹数的方案数，那么我们有如下的转移： $$dp[i] =\\left\\{\\begin{aligned}{}&amp;0&amp;,\\;&amp;\\text{if } i = 0\\\\&amp;\\max_{j=0}^{i-1}{(dp[j] + 1)}&amp;,\\;&amp; \\text{if } a_j \\geq a_i \\text{ and } b_j \\geq b_i\\end{aligned}\\right.$$ $$sum[i] =\\left\\{\\begin{aligned}{}&amp;1&amp;,\\;&amp;\\text{if } i = 0\\\\&amp;\\sum_{j=0}^{i-1}{sum[j]}&amp;,\\;&amp; \\text{if } a_j \\geq a_i \\text{ and } b_j \\geq b_i \\text{ and }dp[j] = dp[i]-1\\end{aligned}\\right.$$ 我们设 $M = \\max_{i=1}^n dp[i]$，那么我们可以计算出所有的长度为最长值的序列的个数，就是： $$tot = \\sum_{i=1}^{n} [dp[i] = M] \\times sum[i]$$ 然后我们只要计算出每个点经过的路径条数就可以了。 对于 $sum[i]$ ，其实我们可以在 $\\text{CDQ}$ 分治的途中一并计算。 注意到，每个位置上我事实上都维护了一个最大值，它标记着从 $（i-\\text{lowbit}(i),i]$ 的最大值，我们在同样的位置维护一个 $sum$ 即可。 我们把数字取反，数组翻转，再做一遍 $\\text{CDQ}$ 分治，然后得到的两个对应位置上，如果有 $dp1[i] + dp2[i] - 1 = M$ ，那么我们的 $path[i] = sum1[i] \\times sum2[i]$ ，否则就是 $0$。 注意这题要离散化。 这道题得到的启示： 我们有的时候计算经过某点的路径可以按照该点分别计算两个路径然后乘法原理。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;map&gt;using namespace std;const int MAXN = 100000;struct T{ int a,b;}q[MAXN];int cnt = 0;int n;struct BIT{ int maxn[MAXN];double sumn[MAXN]; int lowbit(int x){ return x &amp; (-x); } void update(int x,int mx,double g){ while(x &lt;= n){ if(maxn[x] == mx) sumn[x] += g; else if(mx &gt; maxn[x]) sumn[x] = g; maxn[x] = max(maxn[x],mx); x += lowbit(x); } } void query(int x,int &amp;mx,double &amp;s){ mx = s = 0; while(x &gt;= 1){ if(maxn[x] == mx) s += sumn[x]; else if(maxn[x] &gt; mx) s = sumn[x]; mx = max(mx,maxn[x]); x -= lowbit(x); } } void clear(int x){ while(x &lt;= n){ maxn[x] = 0,sumn[x] = 0; x += lowbit(x); } }}T;int nowa[MAXN],nowb[MAXN];map&lt;int,int&gt; A,B;void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d\",&amp;q[i].a,&amp;q[i].b); A[q[i].a] = 0; B[q[i].b] = 0; } for(map&lt;int,int&gt;::iterator it = A.begin();it!=A.end();it++) it-&gt;second = ++cnt; cnt = 0; for(map&lt;int,int&gt;::iterator it = B.begin();it!=B.end();it++) it-&gt;second = ++cnt; for(int i = 1;i&lt;=n;i++){ q[i].a = n-A[q[i].a]+1; q[i].b = n-B[q[i].b]+1; }}bool cmpa(int x,int y){return nowa[x] &lt; nowa[y];}bool cmpid(int x,int y){return x &lt; y;}int cdq[MAXN];int tmp1d[MAXN];int dp[MAXN];double sum[MAXN];int dp1[MAXN],dp2[MAXN],mx;double ans1[MAXN],ans2[MAXN],tot;void CDQ1d(int *w,int l,int r){ if(l == r) return; int mid = (l+r)&gt;&gt;1; CDQ1d(w,l,mid); sort(w+l,w+mid+1,cmpa),sort(w+mid+1,w+r+1,cmpa); int L = l,R = mid+1,c = l; while(c &lt;= r){ if(R &gt; r || (L &lt;= mid &amp;&amp; nowa[w[L]] &lt;= nowa[w[R]])){ T.update(nowb[w[L]],dp[w[L]],sum[w[L]]); c++;L++; } else{ int mx = 0;double g = 0; T.query(nowb[w[R]],mx,g); mx++; if(mx == dp[w[R]]) sum[w[R]] += g; else if(mx &gt; dp[w[R]]) sum[w[R]] = g; dp[w[R]] = max(mx,dp[w[R]]); sum[w[R]] = max(1.0,sum[w[R]]); c++;R++; } } for(int i = l;i&lt;=mid;i++) T.clear(nowb[w[i]]); sort(w+l,w+r+1,cmpid); CDQ1d(w,mid+1,r);}void solve(){ memset(dp,0,sizeof(dp)),memset(sum,0,sizeof(sum)); dp[1] = 1,sum[1] = 1; for(int i = 1;i&lt;=n;i++) cdq[i] = i,nowa[i] = q[i].a,nowb[i] = q[i].b; CDQ1d(cdq,1,n); for(int i = 1;i&lt;=n;i++) mx = max(mx,dp[i]); for(int i = 1;i&lt;=n;i++){ if(dp[i] == mx) tot += sum[i]; dp1[i] = dp[i]; ans1[i] = sum[i]; } memset(dp,0,sizeof(dp)),memset(sum,0,sizeof(sum)); dp[1] = 1,sum[1] = 1; for(int i = 1;i&lt;=n;i++) cdq[i] = i,nowa[i] = n - q[n-i+1].a + 1,nowb[i] = n - q[n-i+1].b + 1; CDQ1d(cdq,1,n); for(int i = 1;i&lt;=n;i++){ dp2[i] = dp[n-i+1]; ans2[i] = sum[n-i+1]; } printf(\"%d\\n\",mx); for(int i = 1;i&lt;=n;i++){ if(dp1[i] + dp2[i] - 1 == mx) printf(\"%.10lf \",double(ans1[i]) * ans2[i] / tot); else printf(\"%.10lf \",0.0); } printf(\"\\n\");}int main(){ init(); solve(); return 0;}","link":"/20180920-SDOI2011-missile/"},{"title":"「SDOI2011」染色-树链剖分+线段树","text":"给定一棵有$n$个节点的无根树和$m$个操作，操作有$2$类： 将节点$a$到节点$b$路径上所有点都染成颜色$c$； 询问节点$a$到节点$b$路径上的颜色段数量（连续相同颜色被认为是同一段），如“$112221$”由3段组成：“$11$”、“$222$”和“$1$”。请你写一个程序依次完成这$m$个操作。 链接Luogu P2486 题解这道题是一道不是很难的树链剖分+线段树的题目。虽然我感觉我考场上根本不可能写出来&amp;调出来… 很明显是一道树链剖分的题目，我们只需要搞明白：如何维护区间的颜色块的数目。 很容易想到用线段树来维护这个东西。所以我们只要维护三个东西：左端点的颜色，右端点的颜色，总共的颜色块数目。 在合并的时候，如果左边块的右端点的颜色等于右边块的左端点颜色，就给总颜色块数目减1，就可以达成合并区间的目的。合并后的块的左颜色等于左孩子的左颜色，右颜色等于右孩子的右颜色。总共的颜色块数目是两块颜色块的数目加起来，再判一下前文提到的相同的颜色就行了 由于我太菜了，所以有的地方懒得去想，就多加了几个if else...了事，代码也就长些。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;#define lson (nown&lt;&lt;1)#define rson (nown&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)using namespace std;//快读模版namespace fast_io { inline char read() {...} inline void read(int &amp;x) {...} inline void read(char *a){...} const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) {...} inline void print(int x) {...} inline void print(char *a){...} inline void flush() {...}}using namespace fast_io;const int MAXN = 110000;int n,m;int son[MAXN],top[MAXN],fa[MAXN],siz[MAXN],dep[MAXN];int id[MAXN],id_to[MAXN],num[MAXN],cnt = 1;vector&lt;int&gt; edge[MAXN];//线段树节点定义struct node{ int num,lcol,rcol; bool lazy; node(int n = 0,int l = 0,int r = 0):num(n),lcol(l),rcol(r){}; bool empty(){ return num == 0; }}pool[MAXN&lt;&lt;2];//线段树节点的合并inline node merge(node l,node r){ //特判！！！ if(l.empty()) return r; if(r.empty()) return l; node ans; ans.num = l.num+r.num; if(l.rcol == r.lcol) ans.num-=1; ans.lcol = l.lcol,ans.rcol = r.rcol; return ans;}//线段树的标记下传inline void push_down(int nown,int l,int r){ if(pool[nown].lazy){ int c = pool[nown].lcol; pool[lson] = node(1,c,c),pool[lson].lazy = 1; pool[rson] = node(1,c,c),pool[rson].lazy = 1; pool[nown].lazy = 0; }}//反转区间inline node reverse(node nown){ swap(nown.lcol,nown.rcol); return nown;}//建树inline void build(int nown,int l,int r){ pool[nown].lazy = 0; if(l == r) pool[nown] = node(1,num[id_to[l]],num[id_to[l]]); else{ build(lson,l,mid); build(rson,mid+1,r); pool[nown] = merge(pool[lson],pool[rson]); }}//线段树区间更新inline void update(int nown,int l,int r,int ql,int qr,int c){ if(ql&lt;=l&amp;&amp;r&lt;=qr){ pool[nown] = node(1,c,c); pool[nown].lazy = 1; } else{ push_down(nown,l,r); if(ql&lt;=mid) update(lson,l,mid,ql,qr,c); if(qr&gt;=mid+1) update(rson,mid+1,r,ql,qr,c); pool[nown] = merge(pool[lson],pool[rson]); }}//线段树区间查询颜色块树inline node query(int nown,int l,int r,int ql,int qr){ if(ql&lt;=l&amp;&amp;r&lt;=qr) return pool[nown];//这里的返回值是整个结构体 else{ push_down(nown,l,r); if(ql&lt;=mid &amp;&amp; mid+1&lt;=qr){ node ls,rs; ls = query(lson,l,mid,ql,qr); rs = query(rson,mid+1,r,ql,qr); return merge(ls,rs); } else if(qr&lt;=mid) return query(lson,l,mid,ql,qr); else if(ql&gt;=mid+1) return query(rson,mid+1,r,ql,qr); }}/*--- 以下为树链剖分模版 ---*/inline void dfs1(int nown,int f,int depth){ dep[nown] = depth,fa[nown] = f,siz[nown] = 1; son[nown] = 0;int maxsum = -1; for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == f) continue; dfs1(to,nown,depth+1); siz[nown]+=siz[to]; if(siz[to]&gt;maxsum) maxsum = siz[to],son[nown] = to; }}inline void dfs2(int nown,int topf){ top[nown] = topf,id[nown] = cnt,id_to[cnt] = nown;cnt++; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == fa[nown]||to == son[nown]) continue; dfs2(to,to); }}void update_range(int x,int y,int c){ while(top[x]!=top[y]){ if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); update(1,1,n,id[top[x]],id[x],c); x = fa[top[x]]; } if(dep[x]&gt;dep[y]) swap(x,y); update(1,1,n,id[x],id[y],c);}//这里多用了几个if else 和reverse来让颜色块接对方向//可以同时交换lans和rans等来完成这一项(未经验证)int query_range(int x,int y){ node lans = node(0,0,0),rans = node(0,0,0); while(top[x]!=top[y]){ if(dep[top[x]] &gt; dep[top[y]]){ lans = merge(lans,reverse(query(1,1,n,id[top[x]],id[x]))); x = fa[top[x]]; } else{ rans = merge(query(1,1,n,id[top[y]],id[y]),rans); y = fa[top[y]]; } } if(dep[x]&lt;dep[y]) lans = merge(lans,query(1,1,n,id[x],id[y])); else rans = merge(reverse(query(1,1,n,id[y],id[x])),rans); return merge(lans,rans).num;}/*--- 以上为树链剖分模版 ---*///程序的初始化inline void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(num[i]); int a,b; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b); edge[a].push_back(b); edge[b].push_back(a); } dfs1(1,0,1); dfs2(1,1); build(1,1,n);}//回应询问void solve(){ char op[20];int a,b,c; for(int i = 1;i&lt;=m;i++){ read(op),read(a),read(b); if(op[0] == &apos;C&apos;) read(c),update_range(a,b,c); else if(op[0] == &apos;Q&apos;) print(query_range(a,b)),print(&apos;\\n&apos;); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180314-SDOI2011-colour/"},{"title":"「SDOI2011」消防-树的直径+单调队列","text":"某个国家有$n$个城市，这$n$个点之间的边构成一棵树。 现求一条边长度和不超过$S$的路径（两端都是城市，可以只为一个城市），使得所有城市到这条路径的距离的最大值最小，并输出这个最小值。 链接Luogu P2491 题解很有趣的题。 很明显，这条路径必须全部位于直径上。具体证明不会，大概可以感性理解一下。 那么我们就要考虑，在直径上选出一段长度不大于S的路径，如何维护这颗树上的所有点到这条路径的长度的最大值。 考虑到只有两种情况： 在树的直径上叉出来的一支 路径上的两个端点到同侧直径端点的距离 第一个先$O(n)$预处理出来，第二个记录直径的一个端点到直径上所有点的距离，然后可以$O(1)$的计算。 我们枚举路径的右端点$r$，然后把左端点$l$推到最左侧可以满足 $d \\leq S$ 的点，这个过程是$O(n)$的，注意到$l,r$都是单调递增的，我们可以用一个单调队列维护$[l,r]$的最大值，然后再与第二个情况取一个$max$。然后最小值就是我们的$ans$。 总时间复杂度$O(n)$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;queue&gt;#include &lt;cctype&gt;#define pp pair&lt;int,int&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 310000;struct Edge{ int from,to; int len;};int n,k;vector&lt;Edge&gt; edge[MAXN];void init(){ read(n),read(k); int a,b,c; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b),read(c); edge[a].push_back((Edge){a,b,c}); edge[b].push_back((Edge){b,a,c}); }}int dis[MAXN],f[MAXN];void dfs(int nown,int fa){ f[nown] = fa; for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i].to,l = edge[nown][i].len; if(v == f[nown]) continue; dis[v] = dis[nown] + l; dfs(v,nown); }}int getmax(int nown){ int ans = dis[nown]; for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i].to; if(v == f[nown]) continue; ans = max(ans,getmax(v)); } return ans;}int num[MAXN],d[MAXN],maxn[MAXN],tot = 0;void build(){ int u = 0,v = 0; dis[1] = 0; dfs(1,0); for(int i = 1;i&lt;=n;i++) if(dis[u] &lt; dis[i]) u = i; dis[u] = 0; dfs(u,0); for(int i = 1;i&lt;=n;i++) if(dis[v] &lt; dis[i]) v = i; for(int i = v;i;i = f[i]) num[++tot] = i; reverse(num+1,num+tot+1); for(int i = 1;i&lt;=tot;i++) d[i] = dis[num[i]]; for(int i = 1;i&lt;=tot;i++){ int nown = num[i]; for(int j = 0;j&lt;edge[nown].size();j++){ int v = edge[nown][j].to; if(v == num[i+1] || v == num[i-1]) continue; maxn[i] = max(maxn[i],getmax(v)); } if(maxn[i]) maxn[i] -= d[i]; }}void solve(){ deque&lt;pp&gt; q; int l = 1,ans = 0x3f3f3f3f; for(int i = 1;i&lt;=tot;i++){ while(!q.empty() &amp;&amp; q.back().second &lt; maxn[i]) q.pop_back(); q.push_back(make_pair(i,maxn[i])); while(d[i] - d[l] &gt; k) l++; while(!q.empty() &amp;&amp; q.front().first &lt; l) q.pop_front(); ans = min(ans,max(max(d[l],d[tot] - d[i]),q.front().second)); } printf(\"%d\\n\",ans);}int main(){ init(); build(); solve(); flush(); return 0;}","link":"/20180521-SDOI2011-fireman/"},{"title":"「SDOI2011」计算器-快速幂+扩展欧几里得+BSGS算法","text":"你被要求设计一个计算器完成以下三项任务： 给定 $y,z,p$ ，计算 $y^z \\bmod p$ 的值； 给定 $y,z,p$ ，计算满足 $xy \\equiv z \\pmod p$ 的最小非负整数 $x$； 给定 $y,z,p$ ，计算满足 $y^x \\equiv z \\pmod p$ 的最小非负整数 $x$。 保证 $p$ 为质数。 链接Luogu P2485 题解第一个快速幂，第二个扩展欧几里得，第三个 $\\text{BSGS}$ 算法。 模版题，不说了。 BSGS算法介绍： Miskcoo’s Blog 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;cstdio&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define ll long longusing namespace std;ll gcd(ll a,ll b){ return b == 0?a:gcd(b,a%b);}ll pow(ll x,ll k,ll p){ ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x = (x*x)%p) if(i &amp; 1) ans = (ans * x)%p; return ans;}ll exgcd(ll a,ll b,ll &amp;x,ll &amp;y){ if(b == 0){ x = 1,y = 0; return a; } else{ ll d = exgcd(b,a%b,y,x); y -= (a/b) * x; return d; }}ll module_formation(ll a,ll b,ll p){ ll x,y,d = exgcd(a,p,x,y); //printf(\"%lld*%lld+%lld*%lld=%lld\\n\",a,x,p,y,d); if(b%d) return -1; x *= b/d; return (x % (p/d) + (p/d)) % (p/d);}ll bsgs(ll a,ll b,ll p){ // 求解 A^x \\equiv B (mod p) a %= p,b %= p;// 利用同余性质对 p 取模 if(b == 1) return 0; ll t = 1,cnt = 0; for(ll g = gcd(a,p);g != 1;g = gcd(a,p)){// 排除所有公因数，使 (a,p) = 1 if(b % g) return -1; b/=g,p/=g,t = t * a/g % p; cnt++; if(b == t) return cnt; } map&lt;ll,ll&gt; hash; int m = int(sqrt(p)) + 1; ll base = b; for(int i = 0;i&lt;m;i++){ // 计算 A 的 0 -&gt; m-1 次方 hash[base] = i; base = base * a % p; } ll now = t;base = pow(a,m,p); for(int i = 1;i&lt;=m+1;i++){// 枚举 A^{im} 次方，寻找相等的 A^j // 这里的枚举上限是 m+1 因为后面的 j 是减过去的 now = now * base % p; if(hash.count(now)) // 答案即为 A^{im-j(+cnt)} return i * m - hash[now] + cnt; } return -1;}ll n,k,a,b,p;void init(){ scanf(\"%lld %lld\",&amp;n,&amp;k);}void solve(){ for(int i = 1;i&lt;=n;i++){ scanf(\"%lld %lld %lld\",&amp;a,&amp;b,&amp;p); ll ans = -1; if(k == 1) ans = pow(a,b,p); if(k == 2) ans = module_formation(a,b,p); if(k == 3) ans = bsgs(a,b,p); if(ans == -1) printf(\"Orz, I cannot find x!\\n\"); else printf(\"%lld\\n\",ans); }}int main(){ init(); solve(); return 0;}","link":"/20180911-SDOI2011-calculator/"},{"title":"「SDOI2011」消耗战-虚树+树形dp","text":"给定一个 $n$ 个点，以 $1$ 为根的有根树，砍断第 $i$ 条边的代价为 $c_i$。有 $m$ 次询问，每次给出 $k_i$ 个关键点（保证关键点不含 $1$ 号节点），询问能够使 $1$ 号节点不能到达任何关键点，所要砍断边的代价和最小是多少。 数据范围：$n,m \\leq 250000,\\sum {k_i} \\leq 5 \\times 10^5$ 链接Luogu P2495 题解可以先思考只有一个询问的情况。 如果设 $i$ 到 $1$ 的路径上所有边代价最小的边的代价为 $w[i]$，使 $i$ 的子树里面的所有点都不能到达 $1$ 节点的最小代价为 $f[i]$ ，那么有如下的转移（ $v$ 是 $i$ 的子节点）： $$f[i] = \\min(w[i],\\sum {f[v]})$$ 这个 $\\text{dp}$ 的正确性好像并不是那么显然…简单证明可以这样：$\\min$ 中的第一个是非常显然的一个可行解，第二个有这么几种情况：如果存在某个 $f[v]$ 由 $w[v]$ 转移而来，那么如果存在 $w[v] = w[i]$，那么必然就是第一种情况再加上若干条边，取 $\\min$ 之后显然不影响答案。 我们注意到以上 $\\text{dp}$ 的复杂度为 $O(\\text{树的节点数})$，而我们的 $\\sum{k_i}$ 是 $500000$ 。如果 $O(n)$ 的 $\\text{dfs}$ 预处理出树链剖分和 $w[i]$ ，对于每次询问用 $O(k_i \\log n)$ 的时间建出虚树（虚树上只需要维护 $w[i]$ ），再 $O(k_i)$ 的做一次树形 $\\text{dp}$，最后时间复杂度就是 $O( n + \\sum k_i \\log n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152// Code By Chen Qiqian on 2018.10.13#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;unistd.h&gt;#define ll long long#define inf 0x3f3f3f3f3f3fusing namespace std;const int MAXN = 610000;struct Edge{ int to,len,nex;}edge[MAXN];int ecnt = 2,fir[MAXN];void addedge(int a,int b,int c){ edge[ecnt] = (Edge){b,c,fir[a]}; fir[a] = ecnt++;}int n,m;ll w[MAXN];int dep[MAXN],siz[MAXN],son[MAXN],fa[MAXN],top[MAXN],dfn[MAXN],tot;void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n-1;i++){ int u,v,c; scanf(\"%d %d %d\",&amp;u,&amp;v,&amp;c); addedge(u,v,c),addedge(v,u,c); }}void dfs1(int nown,int f,int depth){ dep[nown] = depth,fa[nown] = f; siz[nown] = 1,son[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(v == fa[nown]) continue; w[v] = min(w[nown],(ll)l); dfs1(v,nown,depth+1); siz[nown] += siz[v]; if(siz[v] &gt; siz[son[nown]]) son[nown] = v; }}void dfs2(int nown,int topf){ dfn[nown] = ++tot;top[nown] = topf; if(!son[nown]) return; dfs2(son[nown],topf); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to;//l = edge[nowe].len; if(v == fa[nown] || v == son[nown]) continue; dfs2(v,v); }}int lca(int x,int y){ if(x == 0 || y == 0) return 0; while(top[x] != top[y]){ if(dep[top[x]] &lt; dep[top[y]]) swap(x,y); x = fa[top[x]]; } if(dep[x] &gt; dep[y]) swap(x,y); return x;}void build(){ w[1] = inf; dfs1(1,0,1); dfs2(1,1);}int k,kp[MAXN],type[MAXN];bool cmp(int a,int b){ return dfn[a] &lt; dfn[b];}Edge _edge[MAXN];int _ecnt = 2,_fir[MAXN];void _addedge(int a,int b,int c = 0){ _edge[_ecnt] = (Edge){b,c,_fir[a]}; _fir[a] = _ecnt++;}ll _dfs(int nown){ ll tmp = 0; if(type[nown]) return (ll)w[nown]; for(int nowe = _fir[nown];nowe;nowe = _edge[nowe].nex){ int v = _edge[nowe].to; tmp += _dfs(v); } return min(tmp,(ll)w[nown]);}void solve_tree(){ sort(kp+1,kp+k+1,cmp); _ecnt = 2; static int stk[MAXN];int top = 0,cnt = k;//[0,top] for(int i = 1;i&lt;=k;i++){ type[kp[i]] = 1; int L = lca(kp[i],stk[top]); if(L == stk[top]) stk[++top] = kp[i]; else{ while(top &gt;= 1 &amp;&amp; dep[stk[top-1]] &gt;= dep[L]){ int nown = stk[top-1],v = stk[top]; _addedge(nown,v); top--; } if(stk[top] != L){ _addedge(L,stk[top]); stk[top] = L; kp[++cnt] = L; } stk[++top] = kp[i]; } } while(top &gt;= 1) _addedge(stk[top-1],stk[top]),top--; type[1] = 0; printf(\"%lld\\n\",_dfs(1)); for(int i = 1;i&lt;=k;i++) type[kp[i]] = 0; for(int i = 1;i&lt;=cnt;i++) _fir[kp[i]] = 0;}void solve(){ scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ scanf(\"%d\",&amp;k); for(int j = 1;j&lt;=k;j++) scanf(\"%d\",&amp;kp[j]); kp[++k] = 1; solve_tree(); }}signed main(){ init(); build(); solve(); return 0;}","link":"/20181015-SDOI2011-war/"},{"title":"「SDOI2013」森林-主席树+LCA+启发式合并","text":"小Z有一片森林，含有$N$个节点，每个节点上都有一个非负整数作为权值。初始的时候，森林中有$M$条边。 小Z希望执行$T$个操作，操作有两类： Q x y k查询点$x$到点$y$路径上所有的权值中，第$k$小的权值是多少。此操作保证点$x$和点$y$连通，同时这两个节点的路径上至少有$k$个点。 L x y在点$x$和点$y$之间连接一条边。保证完成此操作后，仍然是一片森林。 强制在线。 对于所有的数据$n,m,T \\leq 8 \\times 10^4$。 链接Luogu P3302 题解恶心的大数据结构。 对于合并操作，我们会想到LCT，而对于查询路径上的第$k$大，又让我们想到主席树。 只能牺牲一种操作。注意到这里没有cut，所以我们可以通过启发式合并的方式，减少一个$\\log$。 用并查集维护森林的大小，每次合并的时候强势暴力dfs修改树上路径主席树，以及求lca的倍增数组即可。 然后就是常规操作了。 需要用离散化，这里用了$map$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159#include &lt;cstdio&gt;#include &lt;map&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 81000,maxb = 20,logn = 500;namespace prSegTree{ int sumn[MAXN*logn],ls[MAXN*logn],rs[MAXN*logn],cnt = 1; #define mid ((l+r)&gt;&gt;1) void insert(int &amp;nown,int pre,int l,int r,int pos,int d){ nown = ++cnt;ls[nown] = ls[pre],rs[nown] = rs[pre]; sumn[nown] = sumn[pre] + d; if(l == r) return; else{ if(pos &lt;= mid) insert(ls[nown],ls[pre],l,mid,pos,d); if(mid+1 &lt;= pos) insert(rs[nown],rs[pre],mid+1,r,pos,d); } } int query(int x1,int x2,int y1,int y2,int l,int r,int k){ if(l == r) return l; else{ int sum = sumn[ls[x1]] + sumn[ls[x2]] - sumn[ls[y1]] - sumn[ls[y2]]; if(k &lt;= sum) return query(ls[x1],ls[x2],ls[y1],ls[y2],l,mid,k); if(sum+1 &lt;= k) return query(rs[x1],rs[x2],rs[y1],rs[y2],mid+1,r,k-sum); } } void build(int &amp;nown,int l,int r){ nown = ++cnt; if(l == r) return; else{ build(ls[nown],l,mid); build(rs[nown],mid+1,r); } }}int fir[MAXN];int to[MAXN*2],nex[MAXN*2],ecnt = 1;int n,m,q,num[MAXN],last[MAXN],tot = 0;int rt[MAXN];int f[MAXN][maxb],dep[MAXN];map&lt;int,int&gt; S;void addedge(int u,int v){ to[ecnt] = v,nex[ecnt] = fir[u],fir[u] = ecnt++; to[ecnt] = u,nex[ecnt] = fir[v],fir[v] = ecnt++;}namespace BCJ{ int f[MAXN],siz[MAXN]; int find(int x){ return f[x]==x?x:find(f[x]); } int query(int x){ return siz[find(x)]; } void un(int x,int y){ //y-&gt;x int xx = find(x),yy = find(y); f[yy] = xx;siz[xx] += siz[yy]; } void init(){ for(int i = 1;i&lt;=n;i++) f[i] = i,siz[i] = 1; }}void pre_dfs(int nown,int fa,int depth){ prSegTree::insert(rt[nown],rt[fa],1,tot,S[num[nown]],1); dep[nown] = depth; f[nown][0] = fa; for(int j = 1;j&lt;maxb;j++) f[nown][j] = f[ f[nown][j-1] ][j-1]; for(int i = fir[nown];i;i=nex[i]){ int v = to[i]; if(v == fa) continue; pre_dfs(v,nown,depth+1); }}int lca(int u,int v){ if(dep[u] &lt; dep[v]) swap(u,v); for(int j = maxb-1;j&gt;=0;j--) if(dep[f[u][j]] &gt;= dep[v]) u = f[u][j]; if(u == v) return u; for(int j = maxb-1;j&gt;=0;j--) if(f[u][j] != f[v][j]) u = f[u][j],v = f[v][j]; return f[u][0]; }void init(){ int T; read(T); read(n),read(m),read(q); BCJ::init(); for(int i = 1;i&lt;=n;i++){ read(num[i]); S[num[i]] = 0; } for(map&lt;int,int&gt;::iterator it = S.begin();it!=S.end();it++){ it-&gt;second = ++tot;last[tot] = it-&gt;first; } int a,b; for(int i = 1;i&lt;=m;i++){ read(a),read(b); addedge(a,b); BCJ::un(a,b); }}void build(){ for(int i = 1;i&lt;=n;i++){ if(BCJ::find(i)==i) pre_dfs(i,0,1); }}void link(int u,int v){ addedge(u,v); if(BCJ::query(u) &lt; BCJ::query(v)) swap(u,v); pre_dfs(v,u,dep[u]+1); BCJ::un(u,v);}int query(int u,int v,int k){ int l = lca(u,v),fl = f[l][0]; int ans = prSegTree::query(rt[u],rt[v],rt[l],rt[fl],1,tot,k); //printf(\"query: u:%d v:%d l:%d fl:%d k:%d ANS:%d\\n\",u,v,l,fl,k,ans); return last[ans];}void solve(){ char op[10];int a,b,k,last = 0; for(int i = 1;i&lt;=q;i++){ read(op);read(a),read(b); a^=last,b^=last; if(op[0] == 'L') link(a,b); else if(op[0] == 'Q') read(k),k^=last,print(last = query(a,b,k)),print('\\n'); }}int main(){ init(); build(); solve(); flush(); return 0;}","link":"/20180521-SDOI2013-forest/"},{"title":"「SDOI2013」随机数生成器-BSGS算法","text":"小 $W$ 喜欢读书，尤其喜欢读《约翰克里斯朵夫》。最近小W准备读一本新书，这本书一共有 $P$ 页，页码范围为 $0 … P-1$。 小 $W$ 很忙，所以每天只能读一页书。为了使事情有趣一些，他打算使用 $\\text{NOI2012}$ 上学习的线性同余法生成一个序列，来决定每天具体读哪一页。 我们用 $X_i$ 来表示通过这种方法生成出来的第 $i$ 个数，也即小 $W$ 第 $i$ 天会读哪一页。这个方法需要设置 $3$ 个参数 $a,b,X_1$ ，满足 $0 \\leq a,b,X_1 \\leq p-1$ ，且 $a,b,X_1$ 都是整数。按照下面的公式生成出来一系列的整数：$X_{i+1} =(aX_i+b)\\bmod p$ 其中 $\\bmod$ 表示取余操作。 但是这种方法可能导致某两天读的页码一样。 小 $W$ 要读这本书的第 $t$ 页，所以他想知道最早在哪一天能读到第 $t$ 页，或者指出他永远不会读到第 $t$ 页。 链接Luogu P3306 题解先忽略模数，求 $X_n$ 的通项公式。 刚学的高中数学必修五，我们可以知道，这个函数可以变形成类等比数列。 因为 $a,b$ 都是常数，所以我们可以设： $$X_{i+1} + \\lambda= a(X_i + \\lambda)\\\\X_{i+1} = aX_i + \\lambda(a-1)\\\\$$所以： $$\\lambda(a-1) = b\\\\\\lambda = \\frac{b}{a-1}$$ 设 $Y_i = X_i+\\lambda$ ，则有：$$Y_{i+1} = a Y_i$$ 又 $Y_1 = X_1 + \\lambda$，所以得到 $Y_i$ 的通项公式： $$Y_i = (X_1+\\lambda) \\times a^{i-1}$$ 则： $$X_i = Y_i - \\lambda = (X_1+\\lambda) \\times a^{i-1} - \\lambda$$ 那么问题就转换成求： $$(X_1+\\lambda) \\times a^{i-1} - \\lambda \\equiv t \\pmod p$$ 的最小正整数解 $i$。 如果我们用 $x$ 代表 $i-1$，那么就变成求： $$ a^{x} \\equiv (t + \\lambda) \\times (X_1+\\lambda)^{-1} \\pmod p$$然后这里的 $\\lambda = b \\times a^{-1}$ 。 如果令 $A = a, B = (t + \\lambda) \\times (X_1+\\lambda)^{-1}$ ，那么这个式子就变成了 $\\text{BSGS}$ 的标准式： $$A^x \\equiv B \\pmod p$$套用 $\\text{BSGS}$ 算法解出 $x$，$x+1$ 即是答案。 注意处理无解和特殊情况。 当 $a = 1$ 时，这个东西不再能化成类等比数列，就是一个类等差数列，用逆元求解即可。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#define ll long longusing namespace std;ll pow(ll x,ll k,ll p){ x %= p; ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x=x*x%p) if(i&amp;1) ans = ans*x%p; return ans;}ll inv(ll x,ll p){ return pow(x%p,p-2,p);}ll gcd(ll a,ll b){ return b == 0?a:gcd(b,a%b);}ll bsgs(ll a,ll b,ll p){ //printf(\"bsgs a:%lld b:%lld p:%lld\\n\",a,b,p); a %= p,b %= p; ll t = 1,cnt = 0; if(b == 1) return 0; for(ll g = gcd(a,p);g != 1;g = gcd(a,p)){ if(b % g) return -2; a /= g,p /= g,t = t * a/g % p; ++cnt; if(b == t) return cnt; } map&lt;ll,ll&gt; S; ll m = (ll)(sqrt(p)) + 1; ll base = b; for(int i = 0;i&lt;m;i++){ S[base] = i; base = base * a % p; } base = pow(a,m,p); ll now = t; for(int i = 1;i&lt;=m+1;i++){ now = now * base % p; if(S.count(now)) return i * m - S[now] + cnt; } return -2;}ll cal(ll p,ll a,ll b,ll x_1,ll t){ if(x_1 == t) return 1; if(a == 0){ if(x_1==t) return 1; else if(b==t) return 2; else return -1; } if(a == 1){ //X_i = X_1 + (n-1) * b if(b == 0){ if(x_1 == t) return 1; else return -1; } else{ return (((t-x_1+p)%p) * inv(b,p) % p)%p + 1; } } else{ ll lam = b * inv(a-1,p); ll A = a, B = ((t + lam)%p) * inv(x_1+lam,p) % p; return bsgs(A,B,p)+1; }}void solve(){ ll p,a,b,x_1,t; scanf(\"%lld %lld %lld %lld %lld\",&amp;p,&amp;a,&amp;b,&amp;x_1,&amp;t); printf(\"%lld\\n\",cal(p,a,b,x_1,t));}int main(){ int T; scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++){ solve(); } return 0;}","link":"/20180911-SDOI2013-random/"},{"title":"「SDOI2013」直径-树的直径","text":"定义一棵树上最长的路径为树的直径。树的直径可能不唯一。 给定的一棵$n$个结点的树，求其直径的长度，以及有多少条边满足所有的直径都经过该边。 链接Luogu P3304 BZOJ 3124 题解很有趣的一道题 首先找直径。先从任取点$t$出发，到达最远的一个点$u$。再从$u$出发，到达最远的点$v$，$u$，$v$之间的路径即为树的直径。 这比较显然。 令$\\delta (u,v)$为$u,v$两点间路径，其数值即为路径长度。 引理：在一棵树中，$x$、$y$ 和 $z$ 是三个不同的结点。当 $x$ 到 $y$ 的最短路与 $y$ 到 $z$ 的最短路不重合时，$x$ 到 $z$ 的最短路就是这两条最短路的拼接。 定理1：在一棵树中，以任意结点出发所能到达的最远结点，一定是该树直径的端点之一。 证明：假设这条直径是$\\delta (u,v)$。分两种情况： 当出发结点 $y$ 在$\\delta(u,v)$上时，假设到达的最远结点 $z$ 不是 $u,v$ 中的任一个。这时将$\\delta(y,z)$与不与之重合的$\\delta(y,u)$拼接（也可以假设不与之重合的是直径的另一个方向），可以得到一条更长的路径，矛盾。 当出发结点 $y$ 不在$\\delta(u,v)$上时，分两种情况： 当 $y$ 到达的最远结点 $z$ 横穿$\\delta(u,v)$时，记与之相交的结点为 $x$。此时有$\\delta(y,z)=\\delta(y,x)+\\delta(x,z)$。而此时$\\delta(y,z)&gt;\\delta(y,v)$，故可得$\\delta(x,z)&gt;\\delta(x,v)$。由$1$的结论可知该假设不成立。 当 $y$ 到达的最远结点 $z$ 与$\\delta(u,v)$不相交时，记 $y$ 到 $v$ 的最短路首先与$\\delta(u,v)$相交的结点是 $x$。由假设$\\delta(y,z)&gt;\\delta(y,x)+\\delta(x,v)$。而$\\delta(y,z)+\\delta(y,x)+\\delta(x,u)$又可以形成$\\delta(z,u)$，而$\\delta(z,u)&gt;\\delta(x,u)+\\delta(x,v)+2\\delta(y,x)=\\delta(u,v)+2\\delta(y,x)$矛盾。 先求出了直径，我们就发现一件好玩的事情。 定理2：对于一个边权为正数的树，其所有的直径必然两两有交点。 证明：设树的一条直径为$\\delta (u,v)$，任取另一直径为$\\delta (u’,v’)$。其长度设为$d$。 若两直径有公共部分，显然有公共点。 若没有公共部分，则必有一条路径$\\delta (x,y)$连接两条直径，$x$在$\\delta (u,v)$上，$y$在$\\delta (u’,v’)$上。 在$\\delta(u,x)$和$\\delta(x,v)$中，不妨设$\\delta(u,x) \\geq \\frac{1}{2} \\times d$。同理设$\\delta(u’,y) \\geq \\frac{1}{2} \\times d$，又因为$\\delta (x,y) &gt; 0$，所以$\\delta (u,u’) = \\delta(u,x) + \\delta(x,y) + \\delta(y,u’) &gt; d = \\delta(u,v)$，矛盾。 我们要求的是有多少个边在在所有的直径上。我们已经求得了一条直径$\\delta(u,v)$。 令$x$为在$\\delta(u,v)$上离$u$点最远的点，满足存在点$u’$，使得$\\delta(x,u’) = \\delta(x,u)$，且$u \\neq u’$，则可得$\\delta(u’,v)$也是一条直径。 同理$y$为在$\\delta(u,v)$上离$v$点最远的点，满足存在点$v’$，使得$\\delta(x,v’) = \\delta(x,v)$，且$v \\neq v’$，则可得$\\delta(u,v’)$也是一条直径。 这两个东西都可以在找出直径之后一边扫直径一边$dfs$出来。这个时候我们注意到，$x$应当在$y$左侧，且$x$在直径左半部，$y$在直径右半部，排列顺序大概是这个样子$u\\leftrightarrow x \\leftrightarrow y \\leftrightarrow v$。很容易看出，$x$与$y$之间的部分，就是所有直径的公共边。答案即为$\\delta(x,y)$。 时间复杂度大约是一个常数比较大的$O(n)$。 代码懒得写bfs，于是就比较的慢… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;namespace fast_io {//快速输入模板 inline char read(){ static const int IN_LEN=1000000;static char buf[IN_LEN],*s,*t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))==s)?-1:*s++) : *s++; } inline void read(int &amp;x){ static bool iosig;static char c; for (iosig=false,c=read();!isdigit(c);c=read()){ if(c=='-')iosig=true;if(c==-1)return; } for(x=0;isdigit(c);c=read()) x=((x+(x&lt;&lt;2))&lt;&lt;1)+(c^'0'); if(iosig)x=-x; }}using namespace fast_io;const int MAXN = 300000;struct Edge{ int from,to,len;};int n,u=0,v=0,fa[MAXN];ll dis[MAXN],ans1,ans2;vector&lt;Edge&gt; edge[MAXN];void addedge(int a,int b,int c){ edge[a].push_back((Edge){a,b,c}); edge[b].push_back((Edge){b,a,c});}void init(){ read(n); int a,b,c; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b),read(c); addedge(a,b,c); }}void dfs(int nown,int f){//寻找从nown节点出发的最长路 fa[nown] = f; for(int i = 0;i&lt;edge[nown].size();i++){ Edge e = edge[nown][i]; if(e.to == f) continue; dis[e.to] = dis[nown] + e.len; dfs(e.to,nown); }}void find(){ memset(dis,0,sizeof(dis)); dfs(1,0); for(int i = 1;i&lt;=n;i++)//第一次搜到的节点记作直径的一个端点u if(dis[i] &gt; dis[u]) u = i; memset(dis,0,sizeof(dis)); dfs(u,0); for(int i = 1;i&lt;=n;i++)//第二次搜到的节点记作直径的另一个端点v if(dis[i] &gt; dis[v]) v = i;}bool dfs2(int nown,ll len){//dfs寻找是否从某个节点存在长度为len的路径 if(len == 0) return true; for(int i = 0;i &lt; edge[nown].size();i++){ Edge e = edge[nown][i]; if(e.to == fa[nown]) continue; if(dfs2(e.to,len - e.len)) return true; } return false;}void solve(){ static int nex[MAXN]; int t = v,tmp = 0;//tmp为直径长度 while(t!=u){//记录从u到v的路径 nex[fa[t]] = t; t = fa[t]; tmp++; } //l代表到右节点最近的满足上文性质的点，r代表到左节点最近的满足上文性质的点 int l = 0,r = tmp,nowt = 0; //循环中dis[t] = d(u,t) for(t = u;t!=v;t = nex[t]){ for(int i = 0;i&lt;edge[t].size();i++){ Edge e = edge[t][i]; if(e.to == fa[t] || e.to == nex[t]) continue; if(dfs2(e.to,dis[t] - e.len)) l = max(nowt,l);//寻找离u最远的t,满足d(u',t) = d(u,t),得到即为x,名字叫做l else if(dfs2(e.to,(dis[v] - dis[t])- e.len)) r = min(r,nowt);//寻找离v最远的t,满足d(t,v') = d(t,v),得到即为y,名字叫做r } nowt++; } ans1 = dis[v];//直径长度 ans2 = r - l;//在这里事实上是求了r和l的位置并求出ans2}int main(){ init(); find(); solve(); printf(\"%lld\\n%lld\\n\",ans1,ans2); return 0; }","link":"/20180512-SDOI2013-diameter/"},{"title":"「SDOI2014」旅行-树链剖分+动态开点线段树","text":"给定一棵$n$个节点的树，对于每个点都有两个权值$w_i,c_i$。 存在$m$个操作，分为4类。 “CC x c”：将$c_x$更改为$c$； “CW x w”：将$w_x$更改为$w$； “QS x y”：对所有满足在$x$到$y$路径上且$c_i = c_x = c_y$的节点$i$，求$\\sum w_i$； “QM x y”：对所有满足在$x$到$y$路径上且$c_i = c_x = c_y$的节点$i$，求$\\max(w_i)$； 对于后两个操作，保证$c_x = c_y$。 对于所有数据，$n,m \\leq 10^5$，在任意时刻均满足$w_i \\leq 10^4,c_i \\leq 10^5,\\; w_i,c_i \\in \\mathbb{N}^+$。 链接Luogu P3313 题解没什么太多好说的。几乎是裸题了。 对于每一种$c$，建立一颗动态开点的线段树，每个节点维护当前区间的最大值和区间和。 对于树进行树链剖分，查询的时候直接按照树链剖分查询就好了。 时间复杂度$O(m \\log^{2}{n})$，空间复杂度$O(m \\log n)$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { //...}using namespace fast_io;const int MAXN = 110000,logn = 30;int n,m,cnt;int son[MAXN],dep[MAXN],fa[MAXN],siz[MAXN],top[MAXN],id[MAXN];vector&lt;int&gt; edge[MAXN];void dfs1(int nown,int f,int depth){ siz[nown] = 1,fa[nown] = f; dep[nown] = depth,son[nown] = 0; for(int i = 0;i&lt;edge[nown].size();i++){ int v = edge[nown][i]; if(v == f) continue; dfs1(v,nown,depth+1); siz[nown] += siz[v]; if(siz[v] &gt; siz[son[nown]]) son[nown] = v; }}void dfs2(int nown,int topf){ top[nown] = topf;id[nown] = ++cnt; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i &lt; edge[nown].size();i++){ int v = edge[nown][i]; if(v == fa[nown] || v == son[nown]) continue; dfs2(v,v); }}namespace SegTree{ int sumn[MAXN*logn],maxn[MAXN*logn],ls[MAXN*logn],rs[MAXN*logn],cnt = 0; #define mid ((l+r)&gt;&gt;1) void maintain(int nown){ maxn[nown] = max(maxn[ls[nown]],maxn[rs[nown]]); sumn[nown] = sumn[ls[nown]] + sumn[rs[nown]]; } int query_sum(int nown,int l,int r,int ql,int qr){ if(nown == 0 || (ql &lt;= l &amp;&amp; r &lt;= qr) ) return sumn[nown]; else{ int ans = 0; if(ql &lt;= mid) ans += query_sum(ls[nown],l,mid,ql,qr); if(mid+1 &lt;= qr) ans += query_sum(rs[nown],mid+1,r,ql,qr); return ans; } } int query_max(int nown,int l,int r,int ql,int qr){ if(nown == 0 || (ql &lt;= l &amp;&amp; r &lt;= qr)) return maxn[nown]; else{ int ans = 0; if(ql &lt;= mid) ans = max(ans,query_max(ls[nown],l,mid,ql,qr)); if(mid+1 &lt;= qr) ans = max(ans,query_max(rs[nown],mid+1,r,ql,qr)); return ans; } } void update(int &amp;nown,int l,int r,int pos,int d){ if(!nown) nown = ++cnt,ls[nown] = 0,rs[nown] = 0; if(l == r) sumn[nown] = maxn[nown] = d; else{ if(pos &lt;= mid) update(ls[nown],l,mid,pos,d); if(mid+1 &lt;= pos) update(rs[nown],mid+1,r,pos,d); maintain(nown); } }}int rt[MAXN],r[MAXN],b[MAXN];int query_max(int u,int v,int k){ int ans = 0; while(top[u]!=top[v]){ if(dep[top[u]] &lt; dep[top[v]]) swap(u,v); ans = max(ans,SegTree::query_max(rt[k],1,n,id[top[u]],id[u])); u = fa[top[u]]; } if(dep[u] &gt; dep[v]) swap(u,v); ans = max(ans,SegTree::query_max(rt[k],1,n,id[u],id[v])); return ans;}int query_sum(int u,int v,int k){ int ans = 0; while(top[u]!=top[v]){ if(dep[top[u]] &lt; dep[top[v]]) swap(u,v); ans += SegTree::query_sum(rt[k],1,n,id[top[u]],id[u]); u = fa[top[u]]; } if(dep[u] &gt; dep[v]) swap(u,v); ans += SegTree::query_sum(rt[k],1,n,id[u],id[v]); return ans;}void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(r[i]),read(b[i]); int a,b; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b); edge[a].push_back(b); edge[b].push_back(a); }}void build(){ dfs1(1,0,1),dfs2(1,1); for(int i = 1;i&lt;=n;i++) SegTree::update(rt[b[i]],1,n,id[i],r[i]);}void solve(){ char op[10];int x,y; for(int i = 1;i&lt;=m;i++){ read(op),read(x),read(y); if(op[0] == 'C'){ if(op[1] == 'W'){ SegTree::update(rt[b[x]],1,n,id[x],y); r[x] = y; } else if(op[1] == 'C'){ SegTree::update(rt[b[x]],1,n,id[x],0); SegTree::update(rt[y],1,n,id[x],r[x]); b[x] = y; } } else if(op[0] == 'Q'){ if(op[1] == 'S') print(query_sum(x,y,b[x])),print('\\n'); else if(op[1] == 'M') print(query_max(x,y,b[x])),print('\\n'); } }}int main(){ init(); build(); solve(); flush(); return 0;}","link":"/20180524-SDOI2014-journey/"},{"title":"「SHOI2012」随机树-期望dp","text":"题面以图片显示，请点击“阅读全文”查看。 链接Luogu P3830 题解这题有两问。 第一问如果令$dp[x]$为有$x$个叶节点的时候叶节点的平均深度，那么有如下方程：$$\\begin{aligned}{}dp[x] &amp;= \\frac{(x-1)dp[x-1] - dp[x-1] + 2 \\times (dp[x-1]+1)}{x}\\\\&amp;=dp[x-1] + \\frac{2}{x}\\end{aligned}$$ 初始$dp[1] = 0$，$O(n)$递推或者搞一搞通项即可qwq。 第二问树的深度不太好搞。 定理：$$E(x) = \\sum_{i=1}^{+\\infty} P(i \\leq x)$$ 感性理解：大小为$x$的可能性就会被从$i = 1$到$i = x$一直累积，累积正好就是$x$次，就是这种可能性的值，所以这个式子的值就是期望。 所以我们只要求出在树的叶节点有$x$个的时候，求出树的深度$i$大于$1$，大于$2$，…，一直到大于$n-1$的概率，然后求和之后就是树的期望深度了。 令$dp[x][j]$为有$x$个叶节点时树的深度大于$j$的概率，因为展开在两侧时完全等概率的，所以我们有如下方程： $$dp[x][j] = \\frac{1}{x-1}(\\sum_{i=1}^{x-1} dp[i][j-1] + dp[x-i][j-1] - dp[i][j-1] \\times dp[x-i][j-1])$$ 很简单的容斥。转移即可。注意一下边界，和根结点深度为0即可。 代码1234567891011121314151617181920212223242526272829303132#include &lt;cstdio&gt;using namespace std;const int MAXN = 200;double cal(int n,int op){ double ans = 0; if(op == 1) for(int i = 2;i&lt;=n;i++) ans += (2/double(i)); else { static double d[MAXN][MAXN]; for(int i = 1;i&lt;=n;i++) d[i][0] = 1; for(int i = 2;i&lt;=n;i++){ for(int j = 1;j&lt;i;j++){ for(int k = 1;k&lt;=i-1;k++) d[i][j] += d[k][j-1] + d[i-k][j-1]- d[k][j-1] * d[i-k][j-1]; d[i][j] /= (i-1); } } for(int i = 1;i&lt;=n-1;i++)//从1开始枚举 ans += d[n][i]; } return ans;}int main(){ int q,n; scanf(\"%d %d\",&amp;q,&amp;n); printf(\"%lf\\n\",cal(n,q)); return 0;}","link":"/20180719-SHOI2012-tree/"},{"title":"「SHOI2014」概率充电器-树形dp","text":"著名的电子产品品牌 SHOI 刚刚发布了引领世界潮流的下一代电子产品—— 概率充电器： “采用全新纳米级加工技术，实现元件与导线能否通电完全由真随机数决定！SHOI 概率充电器，您生活不可或缺的必需品！能充上电吗？现在就试试看吧！” SHOI 概率充电器由 $n-1$ 条导线连通了 $n$ 个充电元件。进行充电时，每条导 线是否可以导电以概率决定，每一个充电元件自身是否直接进行充电也由概率 决定。随后电能可以从直接充电的元件经过通电的导线使得其他充电元件进行间接充电。 作为 SHOI 公司的忠实客户，你无法抑制自己购买 SHOI 产品的冲动。在排 了一个星期的长队之后终于入手了最新型号的 SHOI 概率充电器。你迫不及待地将 SHOI 概率充电器插入电源——这时你突然想知道，进入充电状态的元件个数的期望是多少呢？ 链接Luogu P4284 题解我们注意到这道题可以用树形dp的方法来解决。 设 $f[x]$ 表示 $x$ 节点由不被其子节点（含本身）点亮的概率，那么我们有如下转移： 对于每个子节点， $f[x]$ 分为这几部分：子节点不被点亮 或 该节点的边 不被点亮，用公式表示即为： 我们令 $s(i,j) = i+j-i \\times j$， 令 $w[x] = s(f[v],1-q_{(fa[x],x)})$，那么： $$f[x] = (1-p[x]) \\prod_{\\text{v is x’s son}} w[v]$$ 我们定义该节点不被其父节点点亮的概率为 $g[x]$。 $g[x]$ 即为 父节点不被其父节点点亮 且 父节点不被其他子节点（含本身）点亮 或 导线不通，可以得到 $g[x]$ 表达式为： $$g[x] = s(q_{(fa[x],x)} , g[fa[x]] \\times \\frac{f[x]}{w[x]} )$$（此处若 $w[x] = 0$，则直接令 $g[x] = 0$ 即可） 答案即为 $$ans[x] = 1 - f[x] \\times g[x]$$ 树形 $dp$ 即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;using namespace std;const int MAXN= 510000;struct Edge{ int to,nex; double q;}edge[MAXN*2];int ecnt = 2;int fir[MAXN];void addedge(int a,int b,double q){ edge[ecnt] = (Edge){b,fir[a],q}; fir[a] = ecnt++;}int n;double p[MAXN];double f[MAXN],g[MAXN],w[MAXN];double s(double i,double j){ return i+j-i*j;}void dfs1(int x,int fa){ f[x] = 1; for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to;double q = edge[nowe].q; if(v == fa) continue; dfs1(v,x); w[v] = s(f[v],1-q); f[x] *= w[v]; } f[x] *= (1-p[x]);}void dfs2(int x,int fa){ for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to;double q = edge[nowe].q; if(v == fa) continue; if(w[v] != 0){ g[v] = s(1-q,g[x] * f[x] / w[v]); } dfs2(v,x); }}void solve(){ g[1] = 1; dfs1(1,0),dfs2(1,0); double ans = 0; for(int i = 1;i&lt;=n;i++){ //printf(\"f:%lf g:%lf\\n\",f[i],g[i]); ans += 1-f[i]*g[i]; } printf(\"%.6lf\\n\",ans);}void init(){ scanf(\"%d\",&amp;n); for(int i = 2;i&lt;=n;i++){ int a,b,p; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;p); addedge(a,b,double(p)/100); addedge(b,a,double(p)/100); } for(int i = 1;i&lt;=n;i++){ scanf(\"%lf\",&amp;p[i]); p[i]/=100; }}int main(){ init(); solve(); return 0;}","link":"/20181018-SHOI2014-charger/"},{"title":"「SHOI2013」发牌-fhq Treap","text":"在一些扑克游戏里，如德州扑克，发牌是有讲究的。一般称呼专业的发牌手为荷官。荷官在发牌前，先要销牌。所谓销牌，就是把当前在牌库顶的那一张牌移动到牌库底，它用来防止玩家猜牌而影响游戏。 假设一开始，荷官拿出了一副新牌，这副牌有 $N$ 张不同的牌，编号依次为 $1$ 到 $N$ 。由于是新牌，所以牌是按照顺序排好的，从牌库顶开始，依次为 $1, 2, \\dots$ 直到$N$ ，$N$ 号牌在牌库底。为了发完所有的牌，荷官会进行$N$ 次发牌操作，在第 $i$ 次发牌之前，他会连续进行 $R_i$ 次销牌操作， $R_i$ 由输入给定。请问最后玩家拿到这副牌的顺序是什么样的？ 链接Luogu P3988 题解$\\text{fhq Treap}$ 模拟即可。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 800000;namespace treap{ int val[MAXN],fhq[MAXN],siz[MAXN],c[MAXN][2]; int cnt,root; void push_up(int x){ if(!x) return; siz[x] = siz[c[x][0]] + siz[c[x][1]] + 1; } int newnode(int v){ int x = ++cnt; val[x] = v;fhq[x] = rand(); push_up(x); return x; } void split(int x,int k,int &amp;l,int &amp;r){ if(!x){ l = r = 0; return; } if(siz[c[x][0]] + 1 &lt;= k) l = x,split(c[x][1],k-siz[c[x][0]]-1,c[l][1],r); else r = x,split(c[x][0],k,l,c[r][0]); push_up(l),push_up(r); } int merge(int l,int r){//小根堆 if(l == 0 || r == 0) return l+r; int x; if(fhq[l] &lt;= fhq[r]){ x = l,c[x][1] = merge(c[l][1],r); } else{ x = r,c[x][0] = merge(l,c[r][0]); } push_up(x); return x; } void build(int n){ for(int i = 1;i&lt;=n;i++){ root = merge(root,newnode(i)); } } int del(int k){// 删除并返回 rnk = k 的数字的值 int a,b; int l,m,r; split(root,k,a,b); split(a,k-1,l,m),r = b; root = merge(r,l); return val[m]; }}int n;void solve(){ scanf(\"%d\",&amp;n); treap::build(n); for(int i = 1;i&lt;=n;i++){ int r; scanf(\"%d\",&amp;r); r %= (n-i+1); printf(\"%d\\n\",treap::del(r+1)); }}int main(){ solve(); return 0;}","link":"/20181015-SHOI2013-card/"},{"title":"「SHOI2016」随机序列-线段树","text":"你的面前有 $n$ 个数排成一行，分别为 $a_1,a_2,…,a_n$ 。你打算在每相邻的两个 $a_i$c和 $a_{i+1}$ 间都插入一个加号、减号或者乘号。那么一共有 $3^{n-1}$ 种可能的表达式。 你对所有可能的表达式的值的和非常感兴趣。但这毕竟太简单了，所以你还打算支持一个修改操作，可以修改某个 $a_i$ 的值。 你能够编写一个程序对每个修改都输出修改完之后所有可能表达式的和吗？注意，修改是永久的，也就是说每次修改都是在上一次修改的基础上进行，而不是在最初的表达式上进行。 链接Luogu P4340 题解好题好题。可以运用人类的智慧解决。 可以发现，所有表达式的和里面，有一些加号和减号其实是可以抵消的。 我们重点关注所有表达式第一个不是乘号的位置。 如果我们有这么一个表达式： $$a_1 \\times a_2 \\times … \\times a_i + (a_{i+1} … a_{n})$$ 那么必然有一个表达式： $$a_1 \\times a_2 \\times … \\times a_i - (a_{i+1} … a_{n})$$ 那么他们的和就是： $$2 \\times a_1 \\times a_2 \\times … \\times a_i$$ 这样的对数一共有 $3^{n-i-1}$ 对，所以所有在第 $i$ 个数字后出现第一个非乘号的这样的表达式的和是$$2 \\times 3^{n-i-1} \\times a_1 \\times a_2 \\times … \\times a_i$$ 所以我们可以推出所有的表达式的和就是： $$\\sum_{i = 1}^{n-1} (2 \\times 3^{n-i-1} \\times a_1 \\times a_2 \\times … \\times a_i)$$ 如果按照 $i$ 建立一棵线段树，那么我们发现，每次修改的都是某些连续的区间，除去原来的数，然后乘上新的数即可。因为模数是一个素数，所以除去一个数可以用乘上逆元来代替。 建好树之后只需维护一个支持区间乘法，维护区间和的线段树即可。 时间复杂度：$O(q (\\log{n} + \\log{\\text{mod}}))$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cstdio&gt;using namespace std;typedef long long ll;#define mod 1000000007const int MAXN = 110000;ll pow(ll x,ll k){ ll ans = 1; for(ll i = k;i;i&gt;&gt;=1,x = (x*x)%mod) if(i&amp;1) ans = (ans * x)%mod; return ans;}ll niyuan(ll x){ return pow(x,mod-2);}namespace SegTree{ll sum[MAXN&lt;&lt;2],lazy[MAXN&lt;&lt;2];#define lson (nown&lt;&lt;1)#define rson (nown&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)void push_up(int nown){ sum[nown] = (sum[lson] + sum[rson])%mod;}void build(int nown,int l,int r,ll *num){ lazy[nown] = 1; if(l == r) sum[nown] = num[l]; else{ build(lson,l,mid,num); build(rson,mid+1,r,num); push_up(nown); }}void addlabel(int nown,ll v){ (sum[nown] *= v)%=mod; (lazy[nown] *= v)%=mod;}void push_down(int nown){ if(lazy[nown]){ addlabel(lson,lazy[nown]),addlabel(rson,lazy[nown]); lazy[nown] = 1; }}void update(int nown,int l,int r,int ql,int qr,ll v){ if(ql &lt;= l &amp;&amp; r &lt;= qr){ addlabel(nown,v); } else{ push_down(nown); if(ql &lt;= mid) update(lson,l,mid,ql,qr,v); if(qr &gt;= mid+1) update(rson,mid+1,r,ql,qr,v); push_up(nown); }}ll query(){ return sum[1];}}int n,m;ll a[MAXN];ll s[MAXN];ll tmp[MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++) scanf(\"%lld\",&amp;a[i]);}void build(){ s[1] = s[2] = 1; for(int i = 3;i&lt;=n;i++) s[i] = (s[i-1] * 3)%mod; for(int i = 2;i&lt;=n;i++) (s[i] *= 2)%=mod; tmp[n+1] = 1; for(int i = 1;i&lt;=n;i++){ int ttt = n-i+1; tmp[ttt] = (tmp[ttt+1] * a[i])%mod; } for(int i = 1;i&lt;=n;i++) (tmp[i] *= s[i]) %= mod; SegTree::build(1,1,n,tmp);}void solve(){ ll pos,v; for(int i = 1;i&lt;=m;i++){ scanf(\"%lld %lld\",&amp;pos,&amp;v); SegTree::update(1,1,n,1,n-pos+1,(niyuan(a[pos]) * v)%mod); a[pos] = v; printf(\"%lld\\n\",SegTree::query()); }}int main(){ init(); build(); solve(); return 0;}","link":"/20180818-SHOI2016-sequence/"},{"title":"「SPOJ16549」QTREE6-LCT","text":"给你一棵 $n$ 个点的树，编号 $1$~$n$ 。每个点可以是黑色，可以是白色。初始时所有点都是黑色。有两种操作： 0 u ：询问有多少个节点 $v$ 满足路径 $u$ 到 $v$ 上所有节点（包括端点）都拥有相同的颜色 1 u ：翻转 $u$ 的颜色 链接Luogu 题解我就不想用两个 LCT 做！ 然后在 BZOJ 上就被卡常了…无所谓了！ 我们考虑类似 QTREE457 ，维护一下虚子的联通块情况即可。需要注意的是，代表一个 $splay$ 的颜色应该是最左侧的颜色，也就是代码中的 lc[x] 。 套路也是相同的，push_up 会写的稍微麻烦点，access 要考虑虚子的变化对维护的虚子信息的影响。 时间复杂度: $O(n\\log n)$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000;struct LCT{ int c[MAXN][2],f[MAXN]; int w[MAXN];// 代表颜色 0白 1黑 int lc[MAXN],rc[MAXN];// 代表当前splay子树的最左侧和最右侧的颜色 int lsum[MAXN],rsum[MAXN];// 代表左侧的连痛块和右侧的联通块的大小， int vsum[MAXN][2],siz[MAXN][2];// 根节点的虚子树，根节点颜色为 0/1 的大小 void init(int n){ for(int i = 1;i&lt;=n;i++) w[i] = 1; } bool noroot(int x){return c[f[x]][0]==x||c[f[x]][1]==x;} void push_up(int x){ #define ls (c[x][0]) #define rs (c[x][1]) siz[x][0] = siz[ls][0] + siz[rs][0] + (w[x]==0); siz[x][1] = siz[ls][1] + siz[rs][1] + (w[x]==1); lc[x] = ls?lc[ls]:w[x],rc[x] = rs?rc[rs]:w[x]; int xl = 1 + vsum[x][w[x]] + (rc[ls]==w[x]?rsum[ls]:0); int xr = 1 + vsum[x][w[x]] + (lc[rs]==w[x]?lsum[rs]:0); lsum[x] = lsum[ls],rsum[x] = rsum[rs]; if(!ls || (!siz[ls][1-lc[ls]] &amp;&amp; lc[ls] == w[x])) lsum[x] += xr; if(!rs || (!siz[rs][1-rc[rs]] &amp;&amp; rc[rs] == w[x])) rsum[x] += xl; #undef ls #undef rs } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1]==x),w = (c[x][1-t]); if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[x] = z,f[y] = x; push_up(y); } void splay(int x){ while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x); vsum[x][lc[c[x][1]]] += lsum[c[x][1]]; vsum[x][lc[y]] -= lsum[y]; c[x][1] = y,push_up(x); } } void modify(int x){access(x),splay(x),w[x] ^= 1,push_up(x);} int query(int x){access(x),splay(x);return rsum[x];}}T;struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}void dfs(int x,int fa){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(v == fa) continue; dfs(v,x); T.f[v] = x,T.vsum[x][T.w[v]] += T.lsum[v]; } T.push_up(x);}int n,m;void init(){ scanf(\"%d\",&amp;n);T.init(n); for(int i = 1;i&lt;=n-1;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b),addedge(b,a); } dfs(1,0);}void solve(){ scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ int op,x; scanf(\"%d %d\",&amp;op,&amp;x); if(op == 0) printf(\"%d\\n\",T.query(x)); else if(op == 1) T.modify(x); }}int main(){ init(),solve(); return 0;}","link":"/20190317-SPOJ16549-QTREE6/"},{"title":"「SPOJ2666」QTREE4-LCT","text":"你被给定一棵 $n$ 个点的带边权的树（边权可以为负）。每个点可能有两种颜色：黑或白。我们定义 $dist(a,b)$ 为点 $a$ 至点 $b$ 路径上的边权值之和。一开始所有的点都是白色的。 要求作以下操作： C a 将点a的颜色反转（黑变白，白变黑） A 询问 $dist(a,b)$ 的最大值。$a,b$ 点都必须为白色（ $a$ 与 $b$ 可以相同），显然如果树上仍存在白点，查询得到的值一定是个非负数。特别地，如果进行 A 操作时树上没有白点，输出 They have disappeared.。 链接Luogu 题解可以用LCT解决这个问题。 我们先考虑链上的情况。如果这个问题在链上，我们可以用线段树维护若干个变量：区间左端点往右最远的白点，区间右端点往左最远的白点的距离，这个区间内部两个白点之间的距离。这样我们就可以在 $O(\\log n)$ 的时间内合并区间。 我们考虑树上没有修改的问题。我们都会点分治：在考虑每个树的时候，我们找到不同子树里面最长的两个链，他们合并到一起 和 子树内部的最长链 取最大值，答案就是这个子树里面最长白点之间的距离，分治之后就是 $O(n \\log n)$。 我觉得 LCT 的解法颇有 2 合 1 的意思。 我们令 1 号节点为根，然后所有点的权值都是这个点到父亲的边的权值（ $1$ 号节点的权值为 $0$ ），这样两个节点之间的距离就是两个点上的简单路径的权值之和。 每个节点我们需要维护以下信息： sum[x] ： $x$ 的 splay 上子树的链和（到链的父节点） lmax[x]，rmax[x] ： $x$ 所在 $splay$ 的子树上对应原树上最浅（深）的点（最浅的点的父亲）出发能够到达最远的白点（只在当前节点的 $splay$ 和虚子树的并里面走） maxs[x] ：我们只考虑这个 splay 和这个 splay 对应的节点的虚子树里面乱跑，能获得的最长的路径 两个 multiset ： chain[x] , path[x] 表示 $x$ 节点的虚子树里面到 $x$ 节点的最长链 和 最长路径 我们主要有两个特异的函数： 一个特别长的 push_up ：具体维护在代码里面里面看吧qwq 稍微有些不同的 access：其实是维护虚子树的常规操作：考虑消除和新添影响即可。 我们就 win 掉了。 时间复杂度为 $O(n \\log^2 n)$ 。 为什么跑的飞快啊… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 210000;struct Edge{ int to,len; int nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){b,c,fir[a]}; fir[a] = ecnt++;}inline int _f(multiset&lt;int&gt; &amp;S){return S.size()?*S.rbegin():-inf;}inline int _s(multiset&lt;int&gt; &amp;S){return S.size()&gt;1?*(++S.rbegin()):-inf;}struct LCT{ int c[MAXN][2],w[MAXN],f[MAXN],sum[MAXN],len[MAXN]; int lmax[MAXN],rmax[MAXN],maxs[MAXN],ans; multiset&lt;int&gt; Ch[MAXN],Pa[MAXN]; void init(int n){for(int i = 0;i&lt;=n;i++) lmax[i] = rmax[i] = maxs[i] = -inf;} bool noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;} void push_up(int x){assert(x); #define ls c[x][0] #define rs c[x][1] // sum[x] : 链子的长度，由左右加起来 sum[x] = sum[ls] + sum[rs] + len[x]; // maxc : 从虚子树里面 最长的到这个点的链的长度 // L/R ：从这个点左/右侧（或者虚子树）过来能够跑最远的距离 // l/rmax : 这个子 splay 里面最浅的节点的父节点 / 最深的点 能够走到最远的距离 int maxc = max(w[x],_f(Ch[x])); int L = max(maxc,rmax[ls]+len[x]),R=max(maxc,lmax[rs]); lmax[x] = max(lmax[ls],R + sum[ls] + len[x]); rmax[x] = max(rmax[rs],L + sum[rs]); maxs[x] = -inf; // 1 : 两个虚子树里面组合 2 : 虚子树里面的最长路径 // 3 &amp; 4 : 一个虚子树和左/右 出来到 右/左侧 边中 // 5 &amp; 6 ： 两个子 splay 中的最长路径 // 7 : 虚子树中的链到这个节点的距离 maxs[x] = max(maxs[x],max(_f(Ch[x])+_s(Ch[x]),_f(Pa[x]))); maxs[x] = max(maxs[x],max(rmax[ls]+len[x]+R,lmax[rs]+L)); maxs[x] = max(maxs[x],max(maxs[ls],maxs[rs])); if(w[x]==0) maxs[x] = max(maxs[x],_f(Ch[x])),maxs[x] = max(maxs[x],0); #undef ls #undef rs } void rotate(int x){ int y = f[x],z = f[y],t = c[y][1] == x,w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[y] = x,f[x] = z; push_up(y); } void splay(int x){ while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x); if(c[x][1]) Ch[x].insert(lmax[c[x][1]]),Pa[x].insert(maxs[c[x][1]]); if(y) Ch[x].erase(Ch[x].find(lmax[y])),Pa[x].erase(Pa[x].find(maxs[y])); c[x][1] = y,push_up(x); } } void modify(int x){ access(x),splay(x); w[x] = w[x]==0?-inf:0; push_up(x); ans = maxs[x]; } void add(int x,int v){ Ch[x].insert(lmax[v]),Pa[x].insert(maxs[v]); } int query(){return ans;} void print(int n){ printf(\"--------------------\\n\"); for(int x = 1;x&lt;=n;x++){ printf(\"%d: c:%d %d f:%d | sum:%d len:%d w:%d | max: l:%d r:%d s:%d\\n\",x,c[x][0],c[x][1],f[x],sum[x],len[x],w[x],lmax[x],rmax[x],maxs[x]); printf(\"Ch: \"); for(auto x : Ch[x]) printf(\"%d \",x); printf(\"\\n\"); printf(\"Pa: \"); for(auto x : Pa[x]) printf(\"%d \",x); printf(\"\\n\"); } printf(\"--------------------\\n\"); }}T;void dfs1(int x,int fa){ for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(v == fa) continue; T.f[v] = x,T.len[v] = l,dfs1(v,x); T.add(x,v); } T.push_up(x);}int n,q;void init(){ scanf(\"%d\",&amp;n); for(int i = 2;i&lt;=n;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(a,b,c),addedge(b,a,c); } T.init(n);dfs1(1,0);T.ans = T.maxs[1];}void solve(){ scanf(\"%d\",&amp;q); char op[10];int x; for(int i = 1;i&lt;=q;i++){ scanf(\"%s\",op); if(op[0] == 'A'){ int ans = T.query(); if(ans &gt;= 0) printf(\"%d\\n\",ans); else printf(\"They have disappeared.\\n\"); }else if(op[0] == 'C') scanf(\"%d\",&amp;x),T.modify(x); }}int main(){ init(); solve(); return 0;}","link":"/20190312-SPOJ2666-QTREE4-LCT/"},{"title":"「SPOJ16580」QTREE7-LCT","text":"一棵树,每个点初始有个点权和颜色(输入会给你) 0 u : 询问所有 $u,v$ 路径上的最大点权,要满足 $u,v$ 路径上所有点的颜色都相同 1 u : 反转 $u$ 的颜色 2 u w :把 $u$ 的点权改成 $w$ $color_i \\in [0,1],w_i \\in [-10^9,10^9],n,m \\le 10^5$ 链接Luogu 题解我就是要用一个 LCT 做！ 这次在 BZOJ 上也没有被卡常！ 我们维护两个 multiset 维护每个点的虚子树（顶点不同颜色）的最大联通块（表现为 lmx[x]），每次 access 的时候更新一下就好了。 一定记住，access的时候该删的删，该加的加，是相对于子树来说的！别搞错了(大哭 时间复杂度：$O(n \\log^2 n)$ 。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 110000;int _f(multiset&lt;int&gt; &amp;S){return S.empty()?-inf:*(S.rbegin());}struct LCT{ int c[MAXN][2],f[MAXN],v[MAXN],w[MAXN],sum[MAXN][2]; int lc[MAXN],rc[MAXN],lmx[MAXN],rmx[MAXN]; multiset&lt;int&gt; vmx[MAXN][2]; void init(){lmx[0] = rmx[0] = -inf+1;} bool noroot(int x){return c[f[x]][0]==x||c[f[x]][1]==x;} void push_up(int x){ #define ls c[x][0] #define rs c[x][1] sum[x][0] = sum[ls][0] + sum[rs][0] + (w[x]==0); sum[x][1] = sum[ls][1] + sum[rs][1] + (w[x]==1); lc[x] = ls?lc[ls]:w[x],rc[x] = rs?rc[rs]:w[x]; int maxl = max(max(v[x],_f(vmx[x][w[x]])) , rc[ls] == w[x]?rmx[ls]:-inf); int maxr = max(max(v[x],_f(vmx[x][w[x]])) , lc[rs] == w[x]?lmx[rs]:-inf); lmx[x] = lmx[ls],rmx[x] = rmx[rs]; if(!ls || (!sum[ls][1-lc[x]] &amp;&amp; w[x] == lc[x])) lmx[x] = max(lmx[x],maxr);//!!! if(!rs || (!sum[rs][1-rc[x]] &amp;&amp; w[x] == rc[x])) rmx[x] = max(rmx[x],maxl);//!!! #undef ls #undef rs } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1]==x),w = c[x][1-t];//!!! if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[y] = x,f[x] = z; push_up(y); } void splay(int x){ while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x); vmx[x][ lc[c[x][1]] ].insert(lmx[ c[x][1] ]);//!!! vmx[x][ lc[y] ].erase(lmx[y]);//!!! c[x][1] = y,push_up(x);//!!! } } void m_node(int x,int c,int val){w[x] = c,v[x] = val;} void m_fa(int x,int fa){f[x] = fa,vmx[fa][lc[x]].insert(lmx[x]);} void m_color(int x){access(x),splay(x),w[x]^=1,push_up(x);} void m_value(int x,int val){access(x),splay(x),v[x] = val,push_up(x);} int q_max(int x){access(x),splay(x);return rmx[x];}}T;int n,q;int col[MAXN],val[MAXN];struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}void dfs(int x,int fa){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(v == fa) continue; T.m_node(v,col[v],val[v]); dfs(v,x); T.push_up(v),T.m_fa(v,x); }}void init(){ scanf(\"%d\",&amp;n);T.init(); for(int i = 1;i&lt;=n-1;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b),addedge(b,a); } for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;col[i]); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;val[i]); T.m_node(1,col[1],val[1]);dfs(1,0);}void solve(){ scanf(\"%d\",&amp;q); for(int i = 1;i&lt;=q;i++){ int op,x,v; scanf(\"%d %d\",&amp;op,&amp;x); if(op == 0) printf(\"%d\\n\",T.q_max(x)); else if(op == 1) T.m_color(x); else if(op == 2) scanf(\"%d\",&amp;v),T.m_value(x,v); }}int main(){ init(); solve(); return 0;}","link":"/20190318-SPOJ16580-QTREE7-LCT/"},{"title":"「SPOJ26374」QTREE5-LCT","text":"你被给定一棵 $n$ 个点的树，点从 $1$ 到 $n$ 编号。每个点可能有两种颜色：黑或白。我们定义 $dist(a,b)$ 为点 $a$ 至点 $b$ 路径上的边个数。一开始所有的点都是黑色的。 要求作以下操作： 0 i 将点 $i$ 的颜色反转（黑变白，白变黑） 1 v 询问 $dist(u,v)$ 的最小值。$u$ 点必须为白色（ $u$ 与 $v$ 可以相同），显然如果 $v$ 是白点，查询得到的值一定是 $0$ 。 特别地，如果作 1 操作时树上没有白点，输出 $-1$ 。 链接Luogu 题解我直接复制了 QTREE4 的代码… 主要改动如下： 把所有的 $\\max$ 改成了 $\\min$ 把所有的边权改成 $1$ 去除所有跟路径有关的东西 然后就ok了… 时间复杂度： $O(n \\log^2 n)$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 210000;struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}inline int _f(multiset&lt;int&gt; &amp;S){return S.size()?*S.begin():inf;}struct LCT{ int c[MAXN][2],w[MAXN],f[MAXN],sum[MAXN]; int lmin[MAXN],rmin[MAXN]; multiset&lt;int&gt; Ch[MAXN]; void init(int n){for(int i = 0;i&lt;=n;i++) w[i] = lmin[i] = rmin[i] = inf;} bool noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;} void push_up(int x){assert(x); #define ls c[x][0] #define rs c[x][1] sum[x] = sum[ls] + sum[rs] + 1; int minc = min(w[x],_f(Ch[x])); int L = min(minc,rmin[ls] + 1),R=min(minc,lmin[rs]); lmin[x] = min(lmin[ls],R + sum[ls] + 1); rmin[x] = min(rmin[rs],L + sum[rs]); #undef ls #undef rs } void rotate(int x){ int y = f[x],z = f[y],t = c[y][1] == x,w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[y] = x,f[x] = z; push_up(y); } void splay(int x){ while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x); if(c[x][1]) Ch[x].insert(lmin[c[x][1]]); if(y) Ch[x].erase(Ch[x].find(lmin[y])); c[x][1] = y,push_up(x); } } void modify(int x){ access(x),splay(x); w[x] = w[x]==0?inf:0; push_up(x); } int query(int x){ access(x),splay(x); return rmin[x]; } void add(int x,int v){Ch[x].insert(lmin[v]);}}T;void dfs1(int x,int fa){ for(int nowe = fir[x];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == fa) continue; T.f[v] = x,dfs1(v,x); T.add(x,v); } T.push_up(x);}int n,q;void init(){ scanf(\"%d\",&amp;n); for(int i = 2;i&lt;=n;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b),addedge(b,a); } T.init(n);dfs1(1,0);}void solve(){ scanf(\"%d\",&amp;q); int op, x; for(int i = 1;i&lt;=q;i++){ scanf(\"%d %d\",&amp;op,&amp;x); if(op == 1){ int ans = T.query(x); if(ans &lt; inf) printf(\"%d\\n\",ans); else printf(\"-1\\n\"); }else if(op == 0) T.modify(x); }}int main(){ init(); solve(); return 0;}","link":"/20190318-SPOJ26374-QTREE5-LCT/"},{"title":"「SPOJ375」QTREE1-LCT","text":"给定 $n$ 个点的树，边按输入顺序编号为 $1,2,…,n-1$，要求作以下操作： CHANGE i v ：将第 $i$ 条边权值改为 $v$ QUERY a b ：询问从 $a$ 点到 $b$ 点路径上的最大边权 有多组测试数据，每组数据以 DONE 结尾。 链接Luogu 题解可以用 LCT 完成本题。 我们考虑每个边和每个点建立一个 LCT 中的点，然后边的点的点权就是边的边权，这样就可以修改边的权值了。 查询的话，直接 split 出来查询最大值即可，点对应的 LCT 中的点的权值为 $-\\inf$。 时间复杂度： $O(n \\log n)$ 代码Luogu 版本； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 210000;struct LCT{ int c[MAXN][2],f[MAXN],v[MAXN],mx[MAXN],r[MAXN]; void init(int n){for(int i = 0;i&lt;=n;i++) v[i]=mx[i] = -inf, c[i][0]=c[i][1]=f[i]=r[i] = 0;} bool noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;} void push_up(int x){mx[x] = max(v[x],max(mx[c[x][0]],mx[c[x][1]]));} void rev(int x){r[x] ^= 1,swap(c[x][0],c[x][1]);} void push_down(int x){if(r[x]) rev(c[x][0]),rev(c[x][1]),r[x] = 0;} void push_all(int x){ static int S[MAXN];S[0] = 0; while(noroot(x)) S[++S[0]] = x,x = f[x]; S[++S[0]] = x; for(int i = S[0];i&gt;=1;--i) push_down(S[i]); } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[x] = z,f[y] = x; push_up(y); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1] == x) ^ (c[z][1] == y) ? rotate(x) : rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x),c[x][1] = y,push_up(x); } } void makeroot(int x){access(x),splay(x),rev(x);} void update(int x,int val){v[x] = val,push_up(x);} void modify(int x,int val){access(x),splay(x),update(x,val);} void split(int x,int y){makeroot(x),access(y),splay(y);} int query(int x,int y){return x == y ? 0 : (split(x,y),mx[y]);} void addedge(int x,int fa){f[x] = fa;}}T;struct Edge{ int id,to,len,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int id,int a,int b,int c){ edge[ecnt] = (Edge){id,b,c,fir[a]}; fir[a] = ecnt++;}void _clear(int n){ecnt = 2;for(int i = 1;i&lt;=n;i++) fir[i] = 0;}int n,q;void dfs(int x,int fa){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to,l = edge[e].len,id = edge[e].id; if(v == fa) continue; T.update(n+id,l),T.addedge(v,n+id),T.addedge(n+id,x); dfs(v,x); }}void init(){ scanf(\"%d\",&amp;n); _clear(2*n); T.init(2*n); for(int i = 1;i&lt;=n-1;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(i,a,b,c),addedge(i,b,a,c); } dfs(1,0);}void solve(){ char op[10];int x,y; while(true){ scanf(\"%s\",op); if(op[0] == 'D') break; scanf(\"%d %d\",&amp;x,&amp;y); if(op[0] == 'C') T.modify(n+x,y); else if(op[0] == 'Q') printf(\"%d\\n\",T.query(x,y)); }}int main(){ int T = 1; for(int i = 1;i&lt;=T;i++) init(),solve(); return 0;} SPOJ 版本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;stdio.h&gt;#define inf 0x3f3f3f3f#define MAXN 210000int max(int x,int y){return x &gt; y ? x : y;}int swap(int *x,int *y){(*x) ^= (*y),(*y) ^= (*x),(*x) ^= (*y);}int c[MAXN][2],f[MAXN],v[MAXN],mx[MAXN],r[MAXN];void _init_(int n){for(int i = 0;i&lt;=n;i++) v[i]=mx[i] = -inf, c[i][0]=c[i][1]=f[i]=r[i] = 0;}int noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;}void push_up(int x){mx[x] = max(v[x],max(mx[c[x][0]],mx[c[x][1]]));}void rev(int x){r[x] ^= 1,swap(&amp;c[x][0],&amp;c[x][1]);}void push_down(int x){if(r[x]) rev(c[x][0]),rev(c[x][1]),r[x] = 0;}void push_all(int x){ static int S[MAXN];S[0] = 0; while(noroot(x)) S[++S[0]] = x,x = f[x]; S[++S[0]] = x; for(int i = S[0];i&gt;=1;--i) push_down(S[i]);}void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[x] = z,f[y] = x; push_up(y);}void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1] == x) ^ (c[z][1] == y) ? rotate(x) : rotate(y); }rotate(x); }push_up(x);}void access(int x){ for(int y = 0;x;x = f[y=x]){ splay(x),c[x][1] = y,push_up(x); }}void makeroot(int x){access(x),splay(x),rev(x);}void update(int x,int val){v[x] = val,push_up(x);}void modify(int x,int val){access(x),splay(x),update(x,val);}void split(int x,int y){makeroot(x),access(y),splay(y);}int query(int x,int y){split(x,y);return x == y ? 0 : mx[y];}void _addedge(int x,int fa){f[x] = fa;}struct Edge{ int id,to,len,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int id,int a,int b,int c){ edge[ecnt].id = id,edge[ecnt].to = b,edge[ecnt].nex = fir[a],edge[ecnt].len = c; fir[a] = ecnt++;}int n,q;void dfs(int x,int fa){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to,l = edge[e].len,id = edge[e].id; if(v == fa) continue; update(n+id,l),_addedge(v,n+id),_addedge(n+id,x); dfs(v,x); }}void _clear(int n){ ecnt = 2;for(int i = 1;i&lt;=n;i++) fir[i] = 0;}void init(){ scanf(\"%d\",&amp;n); _clear(2*n); _init_(2*n); for(int i = 1;i&lt;=n-1;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(i,a,b,c),addedge(i,b,a,c); } dfs(1,0);}void solve(){ char op[10];int x,y; while(1){ scanf(\"%s\",op); if(op[0] == 'D') break; scanf(\"%d %d\",&amp;x,&amp;y); if(op[0] == 'C') modify(n+x,y); else if(op[0] == 'Q') printf(\"%d\\n\",query(x,y)); }}int main(){ int T = 0; scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++) init(),solve(); return 0;}","link":"/20190315-SPOJ375-QTREE1-LCT/"},{"title":"「SPOJ913」QTREE2-LCT","text":"给定一棵 $n$ 个点的树，边具有边权。要求作以下操作： DIST a b 询问点 $a$ 至点 $b$ 路径上的边权之和 KTH a b k 询问点 $a$ 至点 $b$ 有向路径上的第k个点的编号 有多组测试数据，每组数据以 DONE 结尾。 链接Luogu 题解我们接着用LCT爆搞这个题。 我们还是把边拆成点，分别向两边连边，然后距离就是路径点权和；查询第 $k$ 个点就是 split 之后在 $splay$ 上乱跑找 kth 。 时间复杂度： $O(n \\log n)$ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;bits/stdc++.h&gt;#define ll long longusing namespace std;const int MAXN = 21000;struct LCT{ int c[MAXN][2],f[MAXN],siz[MAXN],r[MAXN]; ll v[MAXN],sum[MAXN]; void init(int n){for(int i=1;i&lt;=n;i++)c[i][0]=c[i][1]=f[i]=r[i]=v[i]=sum[i]=0,siz[i]=1;} bool noroot(int x){return c[f[x]][0] == x || c[f[x]][1] == x;} void rev(int x){r[x]^=1,swap(c[x][0],c[x][1]);} void push_down(int x){if(r[x])rev(c[x][0]),rev(c[x][1]),r[x]=0;} void push_up(int x){ siz[x] = siz[c[x][0]] + siz[c[x][1]] + 1; sum[x] = sum[c[x][0]] + sum[c[x][1]] + v[x]; } void push_all(int x){ static int S[MAXN];S[0] = 0; while(noroot(x)) S[++S[0]] = x,x = f[x]; S[++S[0]] = x; for(int i = S[0];i&gt;=1;--i) push_down(S[i]); } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1]==x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[x][1-t] = y,c[y][t] = w; if(w) f[w] = y; f[x] = z,f[y] = x; push_up(y); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); }push_up(x); } void access(int x){ for(int y = 0;x;x = f[y=x]) splay(x),c[x][1] = y,push_up(x); } void makeroot(int x){access(x),splay(x),rev(x);} void m_node(int x,int fa,int val = 0){v[x] = sum[x] = val,f[x] = fa;} void split(int x,int y){makeroot(x),access(y),splay(y);} ll query_sum(int x,int y){return (split(x,y),sum[y]);} int query_kth(int x,int y,int k){ split(x,y);int t = y; if(k &gt; siz[y]) return -1; while(true){ push_down(t); if(k &lt;= siz[c[t][0]]) t = c[t][0]; else if(k == siz[c[t][0]] + 1) break; else k -= siz[c[t][0]]+1,t = c[t][1]; } if(t) splay(t);return t; }}T;struct Edge{ int id,to,len,nex;}edge[MAXN];int fir[MAXN],ecnt = 2;void __clear(int n){ecnt = 2;for(int i = 1;i&lt;=n;i++) fir[i] = 0;}void addedge(int id,int a,int b,int c){ edge[ecnt] = (Edge){id,b,c,fir[a]}; fir[a] = ecnt++;}//---------------//int n;void dfs(int x,int fa){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to,len = edge[e].len,id = edge[e].id; if(v == fa) continue; T.m_node(n+id,x,len),T.m_node(v,n+id); dfs(v,x); }}void init(){ scanf(\"%d\",&amp;n);T.init(2*n),__clear(2*n); for(int i = 1;i&lt;=n-1;i++){ int a,b,c; scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(i,a,b,c),addedge(i,b,a,c); } dfs(1,0);}void solve(){ char op[10];int x,y,k; while(true){ scanf(\"%s\",op); if(op[1] == 'O') break; scanf(\"%d %d\",&amp;x,&amp;y); if(op[0]=='K') scanf(\"%d\",&amp;k),printf(\"%d\\n\",T.query_kth(x,y,2*k-1)); else if(op[0] == 'D') printf(\"%lld\\n\",T.query_sum(x,y)); }}int main(){ int T = 0;scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++)init(),solve(); return 0;}","link":"/20190316-SPOJ913-QTREE2-LCT/"},{"title":"「TJOI2015」棋盘-状压dp+矩阵快速幂","text":"有一个 $n$ 行 $m$ 列的棋盘，棋盘上可以放很多特殊的棋子，每个棋子的攻击范围是 $3$ 行 $p$ 列。输入数据用一个 $3 \\times p$ 的矩阵给出了棋子攻击范围的模板，棋子被默认在模板中的第 [二] 行，第 [$k+1$] 列，模板中棋子能攻击到的位置标记为 1，不能攻击到的位置是 0 $(1 \\leq p \\leq m, 0 \\leq k &lt; p)$。输入数据保证模板中的第 [二] 行第 [$k+1$] 列是 1。 打开门的密码是这样的：在要求棋子互相不能攻击到的前提下，摆放棋子的方案数。注意什么棋子都不摆也算作一种可行方案。请求出方案对 $2^{32}$ 取余的结果即可。 注：为使题面符合正常人的思维，对其做了微小的修改，已经用粗体标出。 题解很显然， $m$ 那么小，我们肯定可以状态压缩了。 我们注意到，相当于你在某一行放置的棋子，都只会对本行和前后各一行行产生影响，所以事实上如果我们记录前一行就可以完成状态的记录。 我们可以得到一个状态转移方程，令 $i$ 为还剩下的行数， $S$ 为上一行的状态： $$dp[i][S] =\\left\\{\\begin{aligned}{}&amp;[S\\text{为合法状态}]&amp;,&amp;i = 0\\\\&amp;\\sum dp[i-1][S’] ,SS’\\text{满足条件A} &amp;,&amp;i \\neq 0 \\\\\\end{aligned}\\right.$$ 其中条件 $A$ 为 $S,S’均合法 且 SS’ 不冲突$。 计算合法、不冲突就直接状压按照规则来就可以了，枚举每个位置，然后计算不能放棋子的位置，在取一个与即可。 注意到复杂度有些高…貌似是 $O(n(2^m)^2) = 10^6 \\times 64 \\times 64 \\approx 4 \\times 10^9$ ，再加上我们对于任意的 $i$ ，我们的转移是一样，就可以套上矩阵快速幂，复杂度即为 $O((2^m)^3 \\times \\log n) \\approx 5 \\times 10^6$ 可过… 取模使用 unsigned int 自然溢出即可。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#define ui unsigned intusing namespace std;const int MAXN = 70;int n,m,p,k,M;int limit[3];struct Matrix{ ui num[MAXN][MAXN]; Matrix(int op = 0){ memset(num,0,sizeof(num)); for(int i = 0;i&lt;MAXN;i++){num[i][i] = op;} } ui * operator [](int n){return num[n];}};Matrix mul(Matrix &amp;_x,Matrix &amp;_y){ Matrix ans; for(int i = 0;i&lt;M;i++) for(int j = 0;j&lt;M;j++) for(int k = 0;k&lt;M;k++) ans[i][j] += _x[i][k] * _y[k][j]; return ans;}Matrix pow(Matrix x,int k){ Matrix ans(1); for(int i = k;i;i&gt;&gt;=1,x = mul(x,x)) if(i&amp;1) ans = mul(ans,x); return ans;}int getv(int x,int op){ int ans = 0; for(int i = 0;i&lt;m;i++) if(x&amp;(1&lt;&lt;i)) ans |= (i&lt;=k?limit[op]&gt;&gt;(k-i):limit[op]&lt;&lt;(i-k)); return ans;}bool judge_self(int x){return x &amp; getv(x,1);}bool judge_next(int L,int R){return (L &amp; getv(R,0)) || (R &amp; getv(L,2));}void init(){ scanf(\"%d %d %d %d\",&amp;n,&amp;m,&amp;p,&amp;k);M = 1 &lt;&lt; m; for(int i = 0;i&lt;3;i++){ for(int j = 0;j&lt;p;j++){ int t;scanf(\"%d\",&amp;t); limit[i] |= t * (1&lt;&lt;j); } } limit[1] -= (1&lt;&lt;k);}void solve(){ Matrix a; for(int i = 0;i&lt;M;i++){ if(judge_self(i)) continue; for(int j = 0;j&lt;M;j++){ if(judge_self(j)) continue; if(!judge_next(j,i)){ a[i][j]++; } } } a = pow(a,n); ui ans = 0; for(int i = 0;i&lt;M;i++){ if(!judge_self(i)) ans += a[0][i]; } printf(\"%u\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20181004-TJOI2015-board/"},{"title":"广州旅游记","text":"本游记是真的游玩过程记录。 这篇文章每个阶段都是过完就直接写了…有可能比较啰嗦，会有比较多的心理啥的吧… Day-?,2019-12-xx不可描述。 upd on Day1渐渐后悔。我也许就不应该接受的吧。 Day-2,2019-01-19若干天前订好了乘坐CA1315航班从北京飞往广州。今天十一点可以值机之后发现，竟然从原来的777-300ER换成了747-8I，感觉有一种中奖的意思。 值机值了一个在飞机最后的位置，应该还算是比较宽敞，只不过是没有靠窗的位置。 回家收拾行李，被训斥不会生活qwq就带了一个大的双肩背包就滚粗了。 Day-1,2019-01-20早早到机场，发现飞机早就在等我们了。 还看到了一个汉莎的747-8降落，太美了。也看到了国航彩绘的 77W ，感觉十分舒适。上飞机前还看了一集空中浩劫，感觉十分舒适。 上飞机之后不到五分钟就把自己的小电视搞坏了，于是开始写代码。 写 SA 写到一半发现座位底下的插座充不上电，于是收起电脑开始玩手机，发现并没有单机游戏，于是就开始颓废， 广州的云超级低 &amp; 厚，到了 1200 米以下之后才能勉强看到地面，所以虽然我们从南侧进场五边下面经过广州市区，但是什么都看不见.jpeg， 下飞机之后就是去酒店，从市区北边巨远到市区东边巨远的酒店先住一晚上。几天前就知道要和可爱的（并不）男孩子住一个大床房，还有些激动（并不）。 到了酒店之后发现酒店有一个阳台，景色超级美丽的诶！直接促成了我决定在23号晚上溜出来在酒店住一晚上， 晚饭之前另一屋在玩炉石，我过去开了一包搞出来个橙卡，据说rp–？？？ 晚饭去吃了蒸汽火锅（也许不是），感到非常赛艇。 这天晚上还有一场 8 点的 Div2 的 CF ，于是四人开黑局，结果是一个奇葩场，ABC三道SB题，D是个模拟，E是个爆搜？？？我学的算法有什么用吗？？？不会做 E，询问隔壁神仙，得到回复：“爆搜，” 然后就 PP 了， 赛后特别搞笑，某人的 E 被同屋神仙 X 掉了，然而并没有FST，令人发指， Day1,2019-01-21七点半起床，感到非常舒适，大概是近若干天睡的最多的一次..？早上吃饭，看到一车长郡的同学（忽然害怕），估计所有人都比我厉害（快哭了） 吃完饭尾随长郡大军前往广州二中，长郡的人走的巨快，甚至完全跟不上他们的走路，巨佬们果然擅长走路… 到地方之后领了胸牌，领了衣服，领了袋子，然后去宿舍，宿舍是在旁边的实验学校，大概离考试的地方有一个大操场+一栋大楼那么远。 这个大操场很nice，有10个跑道，还是天然草（虽然我们到的时候已经几乎只剩下土了），篮球场有10块，（简单寻觅），还有室内的带看台的篮球馆&amp;羽毛球馆，比破校简直不知道高到哪里去了。 然后就是试机，电脑还不错，有的时候有阳光真是非常emmm，VSCode环境妙啊，配完之后敲了个后缀数组和FWT，后缀数组还敲错了好多（捂脸）FWT甚至没有写完，感到非常不妙。 一路围观神仙不敢搭话，于是回宿舍待了会。宿舍存在一个机器不断挖土（捣地）发出巨大的声音。在宿舍看了看 LCT 板子，和一大堆其他的板子，然后就要去吃饭了。 吃饭的地方和一大堆广州二中的学生一起吃了饭，盛饭盛的巨多，甚至没有吃完… 下午的考试不提，大概就是均分200菜鸡分数40…成为学校 rk-1 …自己讲过的莫队都不会，把问题想成二维的然后就偏偏了…心情不是很好，大概需要继续认清自己菜鸡的事实。 开幕式没什么好玩的。讲话 * n。 广东的妹子平均质量比北方高。嗯。 感觉并不是非常好，在考场上坐了5个小时啥都不会的感觉真的让人自闭。第一次（也许省选的时候才是第一次）感到这么绝望…你希望能够做好的事情却没有改变的能力…也许三个月前根本就不应该继续呢… Day2,2019-01-22早饭没什么好玩的qwq 早上八点钟到考场坐好，考试没啥好玩的…A掉了T1之后不会求凸包，卡在T3不能动弹，又混了个比大众分–的分数，令人不爽qaq 发现这个学校的基础设施真是好啊，还有露天的游泳池…不知道比我们高到哪里去了qaq 吃完饭和本校选手谈笑风生，大家谈论自己挂的分emmm惨案现场… 晚上考试令人自闭…又困又累… 一共八道题，3h。工程实现大赛，库函数实现大赛…卡在T4发现要实现CRC，然后直到考试结束前30分钟才发现CRC可以暴力！真令人自闭…","link":"/20190120-GuangZhou-trip-2019/"},{"title":"「TJOI2017」DNA-后缀数组","text":"加里敦大学的生物研究所发现了决定人喜不喜欢吃藕的基因序列$S$,有这个序列的碱基序列就会表现出喜欢吃藕的性状，但是研究人员发现对碱基序列$S$,任意修改其中不超过$3$个碱基，依然能够表现出吃藕的性状。现在研究人员想知道这个基因在$DNA$链$S0$上的位置。所以你需要统计在一个表现出吃藕性状的人的$DNA$序列$S0$上，有多少个连续子串可能是该基因，即有多少个$S0$的连续子串修改小于等于三个字母能够变成$S$。 链接Luogu P3763 题解先把两个串拼到一起，然后处理出后缀数组，建立出RMQ的ST表。然后对于每一位都判断是否满足条件即可，即往后取三个LCP，然后判断长度关系即可。 时间复杂度O(n)。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;const int MAXN = 210000;namespace SA{int sa[MAXN],rk[MAXN],ht[MAXN],s[MAXN&lt;&lt;1],t[MAXN&lt;&lt;1];int p[MAXN],b[MAXN],cur[MAXN];#define pushS(x) sa[cur[s[x]]--] = x#define pushL(x) sa[cur[s[x]]++] = x#define inducedSort(v)\\ fill_n(b,m,0),fill_n(sa,n,-1);\\ for(int i=0;i&lt;n;i++) b[s[i]]++;\\ for(int j=1;j&lt;m;j++) b[j]+=b[j-1];\\ for(int j=0;j&lt;m;j++) cur[j] = b[j]-1;\\ for(int i=n1-1;~i;--i) pushS(v[i]);\\ for(int j=1;j&lt;m;j++) cur[j] = b[j-1];\\ for(int i=0;i&lt;n;i++) if(sa[i]&gt;0 &amp;&amp; t[sa[i]-1]) pushL(sa[i]-1);\\ for(int j=0;j&lt;m;j++) cur[j] = b[j]-1;\\ for(int i=n-1;~i;--i) if(sa[i]&gt;0 &amp;&amp; !t[sa[i]-1]) pushS(sa[i]-1);void sais(int n,int m,int *s,int *t,int *p){ int n1 = t[n-1] = 0,ch = rk[0] = -1,*s1 = s+n; for(int i=n-2;~i;--i) t[i] = s[i]==s[i+1]?t[i+1]:s[i]&gt;s[i+1]; for(int i=1;i&lt;n;i++) rk[i] = (t[i-1]&amp;&amp;!t[i])?(p[n1] = i,n1++):-1; inducedSort(p); for(int i=0,x,y;i&lt;n;i++)if(~(x=rk[sa[i]])){ if(ch&lt;1||p[x+1]-p[x]!=p[y+1]-p[y]) ch++; else for(int j=p[x],k=p[y];j&lt;=p[x+1];j++,k++) if((s[j]&lt;&lt;1|t[j]) != (s[k]&lt;&lt;1|t[k])){ch++;break;} s1[y=x] = ch; } if(ch+1 &lt; n1) sais(n1,ch+1,s1,t+n,p+n1); else for(int i = 0;i&lt;n1;i++) sa[s1[i]] = i; for(int i = 0;i&lt;n1;i++) s1[i] = p[sa[i]]; inducedSort(s1);}template &lt;typename T&gt;int mapChartoInt(int n,const T *str){ int m = *max_element(str,str+n); fill_n(rk,m+1,0);//+1!!! for(int i = 0;i&lt;n;i++) rk[str[i]] = 1;//=1! for(int j = 0;j&lt;m;j++) rk[j+1] += rk[j]; for(int i = 0;i&lt;n;i++) s[i] = rk[str[i]]-1; return rk[m];}// str[n] yange zidianxu zuixiaotemplate &lt;typename T&gt;void suffixArray(int n,const T *str){ int m = mapChartoInt(++n,str); sais(n,m,s,t,p);}void getHeight(int n){ // 这里的循环一定要到a！ for(int i = 0;i&lt;=n;i++) rk[sa[i]] = i; for(int i = 0,h = ht[0] = 0;i&lt;=n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n &amp;&amp; j+h&lt;n &amp;&amp; s[i+h] == s[j+h]) h++; if(ht[rk[i]] = h) --h; }}}int n,x,y;char s[MAXN];namespace ST{ int st[20][MAXN]; void build(int n,int *num){ for(int i = 1;i&lt;=n;i++) st[0][i] = num[i]; for(int j = 1,t = 2;t&lt;=n;j++,t&lt;&lt;=1) for(int i = 1;i+(t&gt;&gt;1)&lt;=n;i++) st[j][i] = min(st[j-1][i],st[j-1][i+(t&gt;&gt;1)]); } int query(int l,int r){ int t = log2(r-l+1); return min(st[t][l],st[t][r-(1&lt;&lt;t)+1]); }}void init(){ scanf(\"%s\",s); x = strlen(s); scanf(\"%s\",s+x); n = strlen(s); y = n-x; s[n] = 'A'-1; SA::suffixArray(n,s); SA::getHeight(n); ST::build(n,SA::ht);}int lcp(int a,int b){ if(a == b) return n - a + 1; a = SA::rk[a],b = SA::rk[b]; if(a &gt; b) swap(a,b); return ST::query(a+1,b);}bool judge(int p){ int cnt = 0,len = 0; while(len &lt; y){ len += lcp(p+len,x+len); if(cnt &gt;= 3 &amp;&amp; len &lt; y) return false; len++,cnt++; } return true;}void solve(){ int ans = 0; for(int i = 0;i&lt;=x-y;i++) if(judge(i)) ans++; printf(\"%d\\n\",ans);}int main(){ int T;scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++) init(),solve(); return 0;}","link":"/20180623-TJOI2017-DNA/"},{"title":"「TJOI2013」单词-后缀数组+二分","text":"可读版题意： 给定$n$个字符串，第$i$个字符串的长度为$M_i$，求每个字符串在所有字符串中出现的次数。 数据范围：$n \\leq 100, M = \\sum M_i \\leq 10^6$. 原题面： 小张最近在忙毕设,所以一直在读论文。一篇论文是由许多单词组成但小张发现一个单词会在论文中出现很多次,他想知道每个单词分别在论文中出现了多少次。 链接Luogu P3966 题解首先我们加不同的分隔符，将所有字符串拼成一个整串。 注意到这个问题，其实可以转化为\b\b若干个子串在母串中的出现次数。 \b套路题吧…找到这个子串出现位置的后缀在$ht$数组里面的位置，往两侧延伸（这个地方二分答案），看最多的$ht \\geq len$的范围，这个区间里面的所有串都是出现的位置。然后计算一下长度\b就可以得到答案。 时间复杂度$O(M \\log {M} + n \\log{M})$。 \b开始写了一个$O(NM)$的暴力\b死活过不去，还以为自己常数\b大…233 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;unistd.h&gt;#include &lt;cctype&gt;#include &lt;cmath&gt;using namespace std;const int MAXN = 1001000,logn = 21,MAXM = 300;namespace SA{int s[MAXN],sa[MAXN],rk[MAXN],x[MAXN],y[MAXN],ht[MAXN];int cnt[MAXN];void get_SA(int n,int m){ for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[s[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[s[i]]] = i; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = s[sa[i]] != s[sa[i-1]]?++m:m; for(int j = 1;;j&lt;&lt;=1){ if(++m == n) break; for(int i = 0;i&lt;j;i++) y[i] = n-j+i; for(int i = 0,k = j;i&lt;n;i++) if(sa[i] &gt;= j) y[k++] = sa[i]-j; for(int i = 0;i&lt;n;i++) x[i] = rk[y[i]]; for(int i = 0;i&lt;m;i++) cnt[i] = 0; for(int i = 0;i&lt;n;i++) cnt[x[i]]++; for(int i = 1;i&lt;m;i++) cnt[i] += cnt[i-1]; for(int i = n-1;~i;--i) sa[--cnt[x[i]]] = y[i],y[i] = rk[i]; m = rk[sa[0]] = 0; for(int i = 1;i&lt;n;i++) rk[sa[i]] = (y[sa[i]]!=y[sa[i-1]] || y[sa[i]+j]!=y[sa[i-1]+j])?++m:m; }}void getheight(int n){ for(int i = 0,h = ht[0] = 0;i&lt;n;i++){ int j = sa[rk[i]-1]; while(i+h&lt;n&amp;&amp;j+h&lt;n&amp;&amp;s[i+h]==s[j+h]) ++h; if(ht[rk[i]] = h) --h; }}template &lt;typename T&gt;void build(int n,const T *str){ int m = 128+200;++n; for(int i = 0;i&lt;n;i++) s[i] = str[i]; get_SA(n,m); getheight(n);}}namespace ST{int minn[MAXN][logn];void build(int n,int *num){ int l = log2(n); for(int i = 0;i&lt;=n;i++) minn[i][0] = num[i]; for(int j = 1;j&lt;=l;j++){ for(int i = 0;i+(1&lt;&lt;(j-1))&lt;=n;i++){ minn[i][j] = min(minn[i+(1&lt;&lt;(j-1))][j-1],minn[i][j-1]); } }}int query(int l,int r){ int t = log2(r-l+1); return min(minn[l][t],minn[r-(1&lt;&lt;t)+1][t]);}}int n,m;int query(int p,int len){ p = SA::rk[p]; int l,r,b = 0,e = p; while(b!=e){ int mid = (b+e)&gt;&gt;1; if(ST::query(mid+1,p)&lt;len) b = mid+1; else e = mid; } l = b; b = p+1,e = n; while(b!=e){ int mid = (b+e)&gt;&gt;1; if(ST::query(p+1,mid)&gt;=len) b = mid+1; else e = mid; } r = b; return r-l;}int ans[MAXM];int b[MAXM],len[MAXM];int s[MAXN];char t[MAXN];void init(){ scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ scanf(\"%s\",t); len[i] = strlen(t),b[i] = n; for(int j = 0;j&lt;len[i];j++) s[n++] = t[j]; s[n++] = 127+i; } s[n] = 'a' - 1; SA::build(n,s); ST::build(n+1,SA::ht);}void solve(){ for(int i = 1;i&lt;=m;i++){ printf(\"%d\\n\",query(b[i],len[i])); }}int main(){ init(); solve(); return 0;}","link":"/20180811-TJOI2013-word/"},{"title":"「WC2011」最大XOR路径-dfs+线性基","text":"考虑一个边权为非负整数的无向连通图，节点编号为 $1$ 到 $N$ ，试求出一条从 $1$ 号节点到 $N$ 号节点的路径，使得路径上经过的边的权值的 $\\text{XOR}$ 和最大。 路径可以重复经过某些点或边，当一条边在路径中出现了多次时，其权值在计算 $\\text{XOR}$ 和时也要被计算相应多的次数。 图中可能有重边或自环。 链接Luogu P4151 题解一个有可能比较常见的套路： 考虑 $1\\rightarrow n$ 的路径，一定由一条路径和一些环获得。 我们注意到考虑挂在路径上的环的影响时，不必考虑环如何到达路径，因为我们必然有一条路径使得“去环”和“离开环”恰好抵消。因此我们可以随便加环。 我们甚至还注意到，$1\\rightarrow n$ 路径也可以随便选，因为如果是另一条路径的话，事实上异或一个经过 $1$ 和 $n$ 的大环就可以得到另一条 $1 \\rightarrow n$ 的路径了。 找环就用 dfs ，其中每一条返祖边都可以对应一个环。即使是有公共边的环也可以用小环异或出来，所以返祖边直接处理环即可。 时间复杂度 $O(n \\times 64)$. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;cstdio&gt;using namespace std;typedef long long ll;const int MAXN = 51000,MAXM = 110000,logn = 61;struct LB{ ll basis[logn]; void insert(ll x){ if(!x) return; for(int i = logn-1;i&gt;=0;--i){ if((x &amp; (1LL&lt;&lt;i)) == 0) continue; if(basis[i] == 0){ basis[i] = x; break; } else{ x ^= basis[i]; } } } ll getmax(ll ans = 0){ for(int i = logn-1;i&gt;=0;--i){ if((ans^basis[i]) &gt; ans){ ans ^= basis[i]; } } return ans; }}B;struct Edge{ int to,nex; ll len;}edge[MAXM*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b,ll c){ edge[ecnt] = (Edge){b,fir[a],c}; fir[a] = ecnt++;}int n,m;void init(){ scanf(\"%d %d\",&amp;n,&amp;m); int a,b;ll c; for(int i = 1;i&lt;=m;i++){ scanf(\"%d %d %lld\",&amp;a,&amp;b,&amp;c); addedge(a,b,c); addedge(b,a,c); }}ll dis[MAXN];bool vis[MAXN];void dfs(int nown){ vis[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to;ll len = edge[nowe].len; if(vis[v] == 1){ B.insert(dis[nown]^dis[v]^len); } else{ dis[v] = dis[nown] ^ len; dfs(v); } }}void solve(){ dfs(1); printf(\"%lld\\n\",B.getmax(dis[n]));}int main(){ init(); solve(); return 0;}","link":"/20181127-WC2011-xor/"},{"title":"「ZJOI2007」报表统计-平衡树","text":"有一个长度为$n$的整数序列，并且有以下三种操作： $INSERT i k$：在原数列的第$i$个数后面添加一个新数$k$；如果原数列的第$i$个数已经添加了若干数，则添加在这些数的最后 $MIN GAP$：查询相邻两个数的之间差值（绝对值）的最小值 $MIN SORT GAP$：查询所有数中最接近的两个数的差值（绝对值） 链接Luogu P1110 题解一道近乎于裸的Treap，然而由于我十分蒟蒻而且好久没敲Treap，调了两个小时才调完。 这道题我们维护两棵平衡树，一颗$b$记录所有相邻数的差的绝对值，一颗$b$记录所有的数；一个列表，记录每个块的最前面和最后面的数。我们注意到询问三的结果随插入的数不增，所以只需要维护一个最小值$minn$就可以了。 $insert$ 操作：首先根据列表内容从$b$里删除对应位置块间两数的差，然后把插入后多出来的相邻元素差，这个数与这一块结尾，下一块最前面的数的差分别插入平衡树$b$，注意i == n时需要特判；并把插入的数加到$a$里面，根据其与前驱后继的差更新$minn$，注意需要判断一下是否这个数已经在平衡树里面存在。 相邻元素的差值最小值：直接在$b$里求最小值并输出。 排序后的最小差值：直接输出$minn$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { ...//隐去快读模版}using namespace fast_io;namespace normal_io{ inline char read(){ return getchar(); } inline void read(char *c){ scanf(\"%s\",c); } inline void read(int &amp;x){ scanf(\"%d\",&amp;x); } inline void print(int x){ printf(\"%d\",x); } inline void print(char x){ putchar(x); } inline void flush(){ return; }}using namespace normal_io;struct treap{ struct node{ int val,p,cnt; node* son[2]; }; const static int MAXN = 1000000; int treapcnt; node pool[MAXN],*null,*root; treap(){ treapcnt = 0; newnode(null); srand(19260817); null-&gt;val = -0x3f3f3f3f; null-&gt;p = 2147483647; null-&gt;cnt = 0; root = null; } void rotate(node *&amp;r,int tmp){ node *t = r-&gt;son[1-tmp]; r-&gt;son[1-tmp] = t-&gt;son[tmp]; t-&gt;son[tmp] = r; r = t; } void newnode(node *&amp;r){ r = &amp;pool[treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null; } void __insert(node *&amp;r,int v){ if(r == null){ newnode(r); r-&gt;val = v;r-&gt;p = rand();r-&gt;cnt = 1; } else{ if(r-&gt;val == v) r-&gt;cnt++; else{ int tmp = v &gt; r-&gt;val; __insert(r-&gt;son[tmp],v); if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p) rotate(r,1-tmp); } } } node *find(node *r,int t){ while(r-&gt;son[t]!=null) r = r-&gt;son[t]; return r; } void __erase(node *&amp;r,int v){ if(r-&gt;val == v){ if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else{ if(r-&gt;son[0] == null&amp;&amp;r-&gt;son[1] == null){ r = null;return; } else{ int tt = r-&gt;son[0]-&gt;p &gt; r-&gt;son[1]-&gt;p; rotate(r,1-tt); __erase(r,v); } } } else{ int tmp = v &gt; r-&gt;val; __erase(r-&gt;son[tmp],v); } } node *nei(int v,int t){ node* nown = root,*last = null; while(nown!=null&amp;&amp;nown-&gt;val!=v){ //printf(\"2\\n\"); int tmp = v &gt; nown-&gt;val; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; } if(nown-&gt;son[t]!=null){ last = find(nown-&gt;son[t],1-t); } return last; } bool find(int v){ node *r = root; while(r!=null&amp;&amp;r-&gt;val!=v){ int tmp = v &gt; r-&gt;val; r = r-&gt;son[tmp]; } return r != null; } inline void __print(node *r,int depth = 0){ if(r == null) return; else{ __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' '); printf(\"val:%d cnt:%d P:%d son?:%d %d\\n\",r-&gt;val,r-&gt;cnt,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); } } void insert(int v){ __insert(root,v); } void erase(int v){ __erase(root,v); } void print(){ __print(root); }};//以上treap常规模版treap a,b;const int MAXN = 1000000;int head[MAXN],tail[MAXN],minn,n,m;//a是所有数，b是所有相邻数差值//head记录此块最前数，tail记录最后数。void init(){ minn = 0x3f3f3f3f; read(n),read(m); static int tmp[MAXN]; for(int i = 1;i&lt;=n;i++){ int t;read(t); a.insert(t); head[i] = tail[i] = tmp[i] = t; } sort(tmp+1,tmp+n+1); for(int i = 2;i&lt;=n;i++){ //更新初始的两个查询答案 b.insert(abs(head[i]-head[i-1])); minn = min(minn,tmp[i]-tmp[i-1]); }}void solve(){ char op[20];int x,y; for(int i = 1;i&lt;=m;i++){ read(op); if(op[4] == 'G'){ print(b.find(b.root,0)-&gt;val),print('\\n'); //寻找最小相邻元素差值 } else if(op[4] == 'S'){ print(minn),print('\\n'); //寻找排序元素差值 } else if(op[4] == 'R'){ read(x),read(y); if(x != n){ b.erase(abs(head[x+1]-tail[x])); b.insert(abs(head[x+1]-y)); } b.insert(abs(tail[x]-y)); tail[x] = y; //更新查询2答案 if(a.find(y)) minn = 0; else{ int low = a.nei(y,0)-&gt;val,up = a.nei(y,1)-&gt;val; minn = min(minn,min(abs(y-low),abs(up-y))); } a.insert(y); //更新查询3答案 } else if(op[4] =='P'){ a.print(); printf(\"------------------------\\n\"); b.print(); //调试用 } //printf(\"Finish\\n\"); } }int main(){ init(); solve(); flush(); return 0;}","link":"/20180303-ZJOI2007-count/"},{"title":"「ZJOI2007」时态同步-树形dp","text":"给定一棵由$n$个节点构成的树。 在树上存在一个“激发器”，标号为$s$。当激发器工作后，电流会延边传向每一个相邻节点。而中间节点接收到电流后，会将该电流传向与它连接并且尚未接收到电流的节点。对于每条边$e$，电流通过它需要的时间为$t_e$，电流的转发可以认为是在瞬间完成的。最终，激电流将到达一些“终止节点”――接收电流之后不再转发的节点。 使用一次道具可以使得电流通过某条边的时间增加一个单位。请问最少使用多少次道具才可达到每一个“终止节点”同时收到电流？ 链接Luogu P1131 题解注意到子树无论怎么搞，对上面的选择有影响的只是一个最后电流到达终点同步的时间，所以我们把这个设计进状态里面。 注意到如果子树的同步的时间最少的话，那么它的消耗道具次数就应该是最少的，同时因为这棵子树的每一层之间，至少含有一条边，那么如果子树的同步时间变多$x$，那么在子树上的道具消耗次数就一定要变多大于等于$x$，而这个时候在子树与父节点的同步中，子树的根节点与父节点间的边的同步时间最多减少$x$，所以可以证明父节点的最优消耗道具次数一定是在子节点的最优同步时间下取得的，也就可以证明$dp$的正确性。 状态转移方程： $$time[u] = max(time[v]+len(u,v))$$ $$ans[u] = sum(ans[v]+time[u]-(time[v]+len(u,v))$$ 其中$u$，$v$\b有一条边，且$v$\b非\u001d$u$的父亲。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;#define int long longusing namespace std;namespace fast_io { ...//省略快读模版}using namespace fast_io;namespace normal_io{ inline char read(){ return getchar(); } inline void read(int &amp;x){ scanf(\"%lld\",&amp;x); } inline void print(int x){ printf(\"%lld\",x); } inline void print(char x){ putchar(x); } inline void flush(){ return; }}using namespace normal_io;const int MAXN = 510000;int n,s;struct Edge{ int t,l; Edge(int b = 0,int c = 0):t(b),l(c){};};vector&lt;Edge&gt; edge[MAXN];int ans[MAXN],times[MAXN];bool vis[MAXN];void addedge(int a,int b,int c){ edge[a].push_back(Edge(b,c)); edge[b].push_back(Edge(a,c));}void init(){ read(n),read(s); int a,b,c; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b),read(c); addedge(a,b,c); }}void dp(int nown){ vis[nown] = 1; int tmpsum = 0,mintime = 0,k = 0; for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i].t,len = edge[nown][i].l; if(vis[to] == 1) continue; dp(to); ans[nown] += ans[to]; mintime = max(mintime,times[to]+len); tmpsum += (times[to]+len); k++; } ans[nown] += k * mintime - tmpsum,times[nown] = mintime;}void solve(){ dp(s); print(ans[s]);}main(){ init(); solve(); flush(); return 0;}","link":"/20180303-ZJOI2007-sync/"},{"title":"「Violet」蒲公英-分块","text":"给定一个数列${a_n}$，$m$次询问在$[l,r]$区间内的最小众数。强制在线。 链接Luogu P4168 题解为了在课上讲分块，特地做了一道大分块的题。 做法一：预处理出$z[i][j]$，表示在$[i,j]$个块的区间中的众数；$cnt[i][c]$，表示在前i个数中颜色为c的数的个数。 可以证明，一个区间的众数，肯定在整块的众数和零散块中出现的数中。 每次查询，先将答案设成整块的众数。对于零散的数，暴力统计出在零散块中出现的次数，然后加上在整块出现的次数（前缀和相减），尝试更新答案。 可以证明，复杂度大约是$O(n \\sqrt{n} )$。 做法二：预处理出$z[i][j]$，表示在$[i,j]$个块的区间中的众数；对于每一种颜色，开一个vector把这个数每次出现的位置，按从前到后顺序加进去。这样，我们可以在$O(\\log{n})$的时间内通过二分查询出一个数在[l,r]区间出现了多少次。 可以证明，一个区间的众数，肯定在整块的众数和零散块中出现的数中。 每次查询，先将答案设成整块的众数，并且记录其在$[l,r]$出现次数，然后对于每一个零散块中的数，查询其在[l,r]中出现的次数，并尝试更新答案。 可以证明，复杂度大约是$O(n \\sqrt {n} \\log{n})$。这个复杂度存在被卡死的可能。 由于数据范围很大，需要离散化并且记录离散化后的数对应之前的数是什么。 代码做法一： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;//快读模版namespace fast_io { inline char read() {...} inline void read(int &amp;x) {...} inline void read(char *a){...} const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) {...} inline void print(int x) {...} inline void print(char *a){...} inline void flush() {...}}using namespace fast_io;const int MAXN = 101000,MAXQ = 1000;struct pu{ int col,id,belong;}pgy[MAXN];int n,m,Q;int bl[MAXQ],br[MAXQ],id_to[MAXN],numc = 0;int z[MAXQ][MAXQ],cnt[MAXN][MAXQ],t[MAXN];bool cmp1(pu a,pu b){return a.col &lt; b.col;}bool cmp2(pu a,pu b){return a.id &lt; b.id;}void init(){ read(n),read(m);Q = sqrt(n); for(int i = 1;i&lt;=n;i++){ read(pgy[i].col); pgy[i].id = i,pgy[i].belong = (i-1)/Q+1; if(!bl[pgy[i].belong]) bl[pgy[i].belong] = i; br[pgy[i].belong] = i; } sort(pgy+1,pgy+n+1,cmp1); int lastc = 0; for(int i = 1;i&lt;=n;i++){ if(pgy[i].col!=lastc) numc++,id_to[numc] = pgy[i].col; lastc = pgy[i].col; pgy[i].col = numc; } sort(pgy+1,pgy+n+1,cmp2); for(int i = 1;i&lt;=n;i++) cnt[pgy[i].col][pgy[i].belong]++; for(int i = 1;i&lt;=numc;i++) for(int j = 1;j&lt;=n/Q;j++) cnt[i][j] += cnt[i][j-1];}void build(){ for(int i = 1;i&lt;=n;i+=Q){ memset(t,0,sizeof(t)); int maxn = 0; for(int j = i;j&lt;=n;j++){ int nowc = pgy[j].col; t[nowc]++; if(t[nowc] &gt; t[maxn] ||(t[nowc] == t[maxn] &amp;&amp; nowc &lt; maxn)) maxn = nowc; if(j%Q == 0) z[(i-1)/Q+1][j/Q] = maxn; } }}int answer(int ql,int qr){ int lb = pgy[ql].belong,rb = pgy[qr].belong,maxn = 0; //printf(\"lblock:%d rblock:%d\\n\",lb,rb); if(lb == rb || lb+1 == rb){ for(int i = ql;i&lt;=qr;i++) t[pgy[i].col] = 0; for(int i = ql;i&lt;=qr;i++){ int nowc = pgy[i].col; t[nowc]++; if(t[nowc] &gt; t[maxn] ||(t[nowc] == t[maxn] &amp;&amp; nowc &lt; maxn)) maxn = nowc; } } else{ for(int i = ql;i&lt;bl[lb+1];i++) t[pgy[i].col] = 0; for(int i = br[rb-1]+1;i&lt;=qr;i++) t[pgy[i].col] = 0; maxn = z[lb+1][rb-1]; t[maxn] = 0; for(int i = ql;i&lt;bl[lb+1];i++){ int nowc = pgy[i].col; t[nowc]++; int maxnum = t[maxn] + cnt[maxn][rb-1]-cnt[maxn][lb]; int tmp = t[nowc] + cnt[nowc][rb-1]-cnt[nowc][lb]; if(tmp &gt; maxnum || (tmp == maxnum &amp;&amp; nowc &lt; maxn)) maxn = nowc; } for(int i = br[rb-1]+1;i&lt;=qr;i++){ int nowc = pgy[i].col; t[nowc]++; int maxnum = t[maxn] + cnt[maxn][rb-1]-cnt[maxn][lb]; int tmp = t[nowc] + cnt[nowc][rb-1]-cnt[nowc][lb]; if(tmp &gt; maxnum || (tmp == maxnum &amp;&amp; nowc &lt; maxn)) maxn = nowc; } } return id_to[maxn];}void solve(){ int a,b,lastans = 0; for(int i = 1;i&lt;=m;i++){ read(a),read(b); a = (a+lastans-1)%n+1,b = (b+lastans-1)%n+1; if(a &gt; b) swap(a,b); lastans = answer(a,b); print(lastans),print('\\n'); }}int main(){ init(); build(); solve(); flush(); return 0;} 做法二： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;//快读模版namespace fast_io { inline char read() {...} inline void read(int &amp;x) {...} inline void read(char *a){...} const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) {...} inline void print(int x) {...} inline void print(char *a){...} inline void flush() {...}}using namespace fast_io;const int MAXN = 101000,MAXQ = 1000;vector&lt;int&gt; pos[MAXN];int n,m,Q;struct pu{ int col,id;}pgy[MAXN];//在[i,j]块中的众数int z[MAXQ][MAXQ];int id_to[MAXN];bool cmp1(pu a,pu b){ return a.col &lt; b.col;}bool cmp2(pu a,pu b){ return a.id &lt; b.id;}void init(){ read(n),read(m);Q = sqrt(n*5); for(int i = 1;i&lt;=n;i++) read(pgy[i].col),pgy[i].id = i; sort(pgy+1,pgy+n+1,cmp1); int lastc = 0,numc = 0; for(int i = 1;i&lt;=n;i++){ if(pgy[i].col!=lastc) numc++,id_to[numc] = pgy[i].col; lastc = pgy[i].col; pgy[i].col = numc; } sort(pgy+1,pgy+n+1,cmp2); for(int i = 1;i&lt;=n;i++){ pos[pgy[i].col].push_back(i); }}void build(){ static int t[MAXN]; for(int i = 1;i&lt;=n;i+=Q){ memset(t,0,sizeof(t)); int maxn = 0; for(int j = i;j&lt;=n;j++){ int nowc = pgy[j].col; t[nowc]++; if(t[nowc] &gt; t[maxn] ||(t[nowc] == t[maxn] &amp;&amp; nowc &lt; maxn)) maxn = nowc; if(j%Q == 0) z[(i-1)/Q+1][j/Q] = maxn; } }}int count_num(int lb,int rb,int num){ return lower_bound(pos[num].begin(),pos[num].end(),rb+1)-lower_bound(pos[num].begin(),pos[num].end(),lb);}int answer(int ql,int qr){ int lb = floor(double(ql-2)/Q)+2,rb = qr/Q,maxn = 0,maxnum = 0; if(lb &lt;= rb) maxn = z[lb][rb],maxnum = count_num(ql,qr,maxn); //printf(\"lblock:%d rblock:%d\\n\",lb,rb); lb = (lb-1)*Q+1,rb = rb*Q; //printf(\"lbound:%d rbound:%d maxn:%d\\n\",lb,rb,maxn); while(ql &lt; lb){ --lb; int c = pgy[lb].col,w = count_num(ql,qr,c); if(w &gt; maxnum || (w == maxnum &amp;&amp; c &lt; maxn)) maxn = c,maxnum = w; } while(rb &lt; qr){ rb++; int c = pgy[rb].col,w = count_num(ql,qr,c); if(w &gt; maxnum || (w == maxnum &amp;&amp; c &lt; maxn)) maxn = c,maxnum = w; } return id_to[maxn];}void solve(){ int a,b,lastans = 0; for(int i = 1;i&lt;=m;i++){ read(a),read(b); a = (a+lastans-1)%n+1,b = (b+lastans-1)%n+1; if(a &gt; b) swap(a,b); lastans = answer(a,b); print(lastans),print('\\n'); }}int main(){ init(); build(); solve(); flush(); return 0;}","link":"/20180331-violet-dandelions/"},{"title":"「ZJOI2008」树的统计-树链剖分","text":"\b给定一颗$n$个节点的树，节点编号为$1$到$n$，每个节点都有一个权值$w_i$。 有以下三种操作或询问： I. $CHANGE u t$ : 把结点$u$的权值改为$t$ II. $QMAX u v$: 询问从点$u$到点$v$的路径上的节点的最大权值 III. $QSUM u v$: 询问从点$u$到点$v$的路径上的节点的权值和 链接Luogu P2590 题解树链剖分模版题。 进行树链剖分之后，由于注意到这里只有单点修改，所以我们用一个$zkw$线段树来维护这些信息。 对于$CHANGE$操作，我们直接更改叶子节点的值，然后进行$zkw$线段树的从下到上的更新操作，直到根。 对于$QMAX$操作，我们就用树链剖分的常规操作，每一步求一个最大值，然后更新答案即可。$QSUM$同理。 事实上，这个题凸显出来$zkw$线段树在单点修改上真是不一般的快，以我的垃圾coding水平居然能在bzoj上排到第一页。 $zkw$大法好！ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 31000;inline int max(int a,int b){ return b&gt;a?b:a;}namespace fast_io { inline char read() { //return getchar(); static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))== s)?-1:*s++) : *s++; } inline void read(int &amp;x) { static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) { if (c == '-') iosig = true; if (c == -1) return; } for (x = 0; isdigit(c); c = read()) x = ((x + (x &lt;&lt; 2)) &lt;&lt; 1)+(c^48); if (iosig) x = -x; } inline void read(char *a){ static char c = read(); while(c!= -1&amp;&amp;(c == ' '||c =='\\n')) c = read(); while(c!= -1&amp;&amp;c!=' '&amp;&amp;c!='\\n') *a++ = c,c = read(); *a = 0; } const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) { if(ooh == obuf+OUT_LEN) fwrite(obuf,1,OUT_LEN,stdout),ooh=obuf; *ooh++ = c; } inline void print(int x) { static int buf[30], cnt; if(x == 0) print('0'); else { if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); } } inline void print(char *a){ while(*a) print(*a++); } inline void flush() { fwrite(obuf, 1, ooh - obuf, stdout); }}using namespace fast_io;int maxn[MAXN&lt;&lt;2],sumn[MAXN&lt;&lt;2];int n,M,q,num[MAXN];//top数组是链子最上面的节点，fa是父节点，son是重儿子节点，siz是子树大小，dep是dfs深度int top[MAXN],fa[MAXN],son[MAXN],siz[MAXN],dep[MAXN];//id_to 是i号id指向的节点编号，id就是i号节点的dfs编号int id_to[MAXN],id[MAXN];int cnt = 1;vector&lt;int&gt; edge[MAXN];//zkw线段树初始化inline void init_seg(){ for(M = 1;M&lt;n+2;M&lt;&lt;=1); for(int i = 1;i&lt;=n;i++) maxn[M+i] = sumn[M+i] = num[id_to[i]]; for(int i = M-1;i;i--) maxn[i]=max(maxn[i&lt;&lt;1],maxn[i&lt;&lt;1|1]),sumn[i]=sumn[i&lt;&lt;1]+sumn[i&lt;&lt;1|1];}//zkw线段树区间最值inline int max_seg(int l,int r){ int ans = -100000; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1){ if(~l&amp;1 &amp;&amp; maxn[l^1]&gt;ans) ans = maxn[l^1]; if(r&amp;1 &amp;&amp; maxn[r^1]&gt;ans) ans = maxn[r^1]; } return ans;}//zkw线段树区间求和inline int sum_seg(int l,int r){ int ans = 0; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1){ if(~l&amp;1) ans += sumn[l^1]; if(r&amp;1) ans += sumn[r^1]; } return ans;}//zkw线段树修改inline void upd_seg(int pos,int x){ int nown = pos+M; maxn[nown] = sumn[nown] = x; while(nown&gt;&gt;=1){ maxn[nown] = max(maxn[nown&lt;&lt;1],maxn[nown&lt;&lt;1|1]); sumn[nown] = sumn[nown&lt;&lt;1]+sumn[nown&lt;&lt;1|1]; }}//树链剖分的第一个dfsinline void dfs1(int nown,int f,int depth){ son[nown] = 0,dep[nown] = depth,siz[nown] = 1,fa[nown] = f; int maxsum = 0; for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == f) continue; dfs1(to,nown,depth+1); siz[nown]+=siz[to]; if(siz[to]&gt;maxsum) maxsum = siz[to],son[nown] = to; }}//树链剖分的第二个dfsinline void dfs2(int nown,int topf){ id[nown] = cnt; id_to[cnt++] = nown; top[nown] = topf; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++){ int to = edge[nown][i]; if(to == son[nown]||to == fa[nown]) continue; dfs2(to,to); }}//查询路径和inline int query_sum(int x,int y){ int ans = 0; while(top[x]!=top[y]){ if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans+=sum_seg(id[top[x]],id[x]); x = fa[top[x]]; } if(dep[x]&gt;dep[y]) swap(x,y); ans+=sum_seg(id[x],id[y]); return ans;}//查询路径最大值inline int query_max(int x,int y){ int ans = -100000; while(top[x]!=top[y]){ if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans = max(ans,max_seg(id[top[x]],id[x])); x = fa[top[x]]; } if(dep[x]&gt;dep[y]) swap(x,y); ans = max(ans,max_seg(id[x],id[y])); return ans;}//修改某个节点inline void update(int pos,int x){ upd_seg(id[pos],x);}//初始化图和线段树还有两次dfsvoid init(){ read(n); int a,b; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b); edge[a].push_back(b); edge[b].push_back(a); } for(int i = 1;i&lt;=n;i++) read(num[i]); dfs1(1,0,1); dfs2(1,1); init_seg();}//进行操作以及回答询问void solve(){ read(q); char op[20]; int a,b; for(int i = 1;i&lt;=q;i++){ read(op),read(a),read(b); if(op[1] == 'M') print(query_max(a,b)),print('\\n'); else if(op[1] == 'S') print(query_sum(a,b)),print('\\n'); else if(op[1] == 'H') update(a,b); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180310-ZJOI2008-count/"},{"title":"「ZJOI2008」骑士-基环树+dp","text":"每个骑士都有且仅有一个自己最厌恶的骑士（当然不是他自己），他是绝对不会与自己最厌恶的人一同出征的。 请你从所有的骑士中选出一个骑士军团，使得军团内没有矛盾的两人（不存在一个骑士与他最痛恨的人一同被选入骑士军团的情况），并且使得这支骑士军团最具有战斗力。 为了描述战斗力，我们将骑士按照 $1$ 至 $n$ 编号，给每名骑士一个战斗力的估计，一个军团的战斗力为所有骑士的战斗力总和。 链接LuoguP2607 题解先考虑一个 $n$ 条边、 $n$ 个点的无向连通图的情况。这个环中只有一个环，我们在任意位置断掉这个环（并查集），让这个图成为一个树，记两端点为 $X$,$Y$。 注意到由于 $X$ 和 $Y$ 不能同时取得，如果我们分别以 $X$ 和 $Y$ 作为树根进行一次树形 dp ，那么我们的答案肯定在第一次的 $dp[X][0]$ 和第二次的 $dp[Y][0]$ 中的某一个，因为不可能两个都选，我们令一个不选之后，剩下的就只剩下树的限制，我们也一定能够达成最大的情况。 不是特别好理解，但好好理一下也不是特别难吧。 这里没有保证联通，但对于任意一个联通块由于其特殊的建图方式，导致也均为基环树或树。 时间复杂度： $O(n)$. 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;const int MAXN = 1e6+10;struct Edge{ int to,nex;}edge[MAXN*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b){ edge[ecnt] = (Edge){b,fir[a]}; fir[a] = ecnt++;}int n;namespace BCJ{ int f[MAXN]; void init(int n){ for(int i = 1;i&lt;=n;i++){ f[i] = i; } } int find(int x){ return f[x] == x ? x : f[x] = find(f[x]); }}int X[MAXN],Y[MAXN],cnt;bool vis[MAXN];ll p[MAXN];void init(){ scanf(\"%d\",&amp;n); BCJ::init(n); int a,b; for(int i = 1;i&lt;=n;i++){ scanf(\"%lld %d\",&amp;p[i],&amp;b); a = i; int fa = BCJ::find(a),fb = BCJ::find(b); if(fa == fb){ X[++cnt] = a, Y[cnt] = b; } else{ addedge(a,b),addedge(b,a); BCJ::f[fa] = fb; } }}ll dp[MAXN][2];void dfs(int nown,int fa){ dp[nown][0] = dp[nown][1] = 0; vis[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(v == fa) continue; dfs(v,nown); dp[nown][1] += dp[v][0]; dp[nown][0] += max(dp[v][0],dp[v][1]); } dp[nown][1] += p[nown];}void solve(){ ll ans = 0; for(int i = 1;i&lt;=cnt;i++){ ll tmp = 0; dfs(X[i],0); tmp = max(dp[X[i]][0],tmp); dfs(Y[i],0); tmp = max(dp[Y[i]][0],tmp); ans += tmp; } for(int i = 1;i&lt;=n;i++){ if(vis[i] == 0){ dfs(i,0); ans += max(dp[i][0],dp[i][1]); } } printf(\"%lld\\n\",ans);}int main(){ init(); solve(); return 0;}","link":"/20181127-ZJOI2008-knight/"},{"title":"「ZJOI2007」最大半连通子图-强连通分量-dp","text":"给定一个有向图$G$，请求出$G$的最大半连通子图拥有的节点数$K$，以及不同的最大半连通子图的数目$C$。 由于$C$可能比较大，仅要求输出$C$对$X$的余数。 具体定义： 一个有向图$G=(V,E)$称为半连通的$(Semi-Connected)$，如果满足：$\\forall u,v∈V$，存在$u→v$或$v→u$。即对于图中任意两点$u,v$，存在一条$u$到$v$的有向路径或者从$v$到$u$的有向路径。 若$G’=(V’,E’)$满足$V’\\subset V$，$E’$是$E$中所有跟$V’$有关的边，则称$G’$是$G$的一个导出子图。 若$G’$是$G$的导出子图，且$G’$半连通，则称$G’$为$G$的半连通子图。 若$G’$是$G$所有半连通子图中包含节点数最多的，则称$G’$是$G$的最大半连通子图。 链接Luogu P2272 BZOJ 1093 题解经过观察和分析发现，一个有向图是一个半连通子图当且仅当其缩点后成为一条链。 这个很显然，画画图就发现了。那么现在问题就变成了寻找一张有向无环图里面最长链的长度及个数。 可以用dp的方法来求。 状态转移方程： $$len[u] = max(len[v])+1 ,\\quad \\{u,v\\} \\in E$$$$num[u] = sum(num[v]) ,\\quad \\{u,v\\} \\in E , \\;len[u] = len[v] + 1$$ 有一点很坑的就是，不能有重边，要不然就会死的很惨，重复计算导致答案偏大。 所以重建图要去重！！！ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include &lt;cstdio&gt;#include &lt;cctype&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;namespace fast_io { ...}using namespace fast_io;const int MAXN = 110000,MAXM = 2100000;struct stack{ int num[MAXN],topnum; stack(){topnum = 0;} void pop(){topnum--;} int top(){return num[topnum-1];} void push(int val){num[topnum++] = val;} bool empty(){return topnum != 0;}}a;int n,m,ecnt = 1,X;int fir[MAXN];int cnt = 1,cnum = 0;int low[MAXN],dfn[MAXN],siz[MAXN];int col[MAXN];int instack[MAXN];struct Edge{ int from,to,nex; bool operator &lt; (Edge a)const{ if(from == a.from) return to &lt; a.to; return from &lt; a.from; }}edge[MAXM];void addedge(int a,int b){ edge[ecnt].from = a,edge[ecnt].to = b; edge[ecnt].nex = fir[a];fir[a] = ecnt++;}void dfs(int nown){ low[nown] = dfn[nown] = cnt++; instack[nown] = 1;a.push(nown); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dfn[v] == 0) dfs(v),low[nown] = min(low[v],low[nown]); else if(instack[v] == 1) low[nown] = min(dfn[v],low[nown]); } if(low[nown] == dfn[nown]){ cnum++;int j = -1; do{ j = a.top();a.pop(); instack[j] = 0; col[j] = cnum; siz[cnum]++; }while(j!=nown); }}void tarjan(){ for(int i = 1;i&lt;=n;i++) if(dfn[i] == 0) dfs(i); for(int i = 1;i&lt;=m;i++){ edge[i].from = col[edge[i].from]; edge[i].to = col[edge[i].to]; } memset(fir,0,sizeof(fir)); //去重！！！ sort(edge+1,edge+m+1); int lastu = 0,lastv = 0; for(int i = 1;i&lt;=m;i++){ int u = edge[i].from,v = edge[i].to; if(u!=v&amp;&amp;(!(u==lastu&amp;&amp;v==lastv))) addedge(u,v); lastu = u,lastv = v; }}int dp[MAXN],num[MAXN];void dfs2(int nown){ dp[nown] = siz[nown],num[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dp[v] == 0) dfs2(v); if(dp[nown] &lt; dp[v] + siz[nown]) dp[nown] = dp[v] + siz[nown],num[nown] = num[v]; else if(dp[nown] == dp[v] + siz[nown]) num[nown] += num[v], num[nown] %= X; }}void solve(){ for(int i = 1;i&lt;=cnum;i++) if(num[i] == 0) dfs2(i); int ans1 = 0,ans2 = 0; for(int i = 1;i&lt;=cnum;i++){ if(dp[i] &gt; ans1) ans1 = dp[i],ans2 = num[i]; else if(dp[i] == ans1) ans2 += num[i],ans2 %=X; } print(ans1),print('\\n'),print(ans2),print('\\n');}void init(){ read(n),read(m),read(X); int a,b; for(int i = 1;i&lt;=m;i++){ read(a),read(b); addedge(a,b); }}int main(){ init(); tarjan(); solve(); flush(); return 0;}","link":"/20180405-ZJOI2007-semi-connected/"},{"title":"「ZJOI2007」仓库建设-斜率优化","text":"L 公司有 $N$ 个工厂，由高到底分布在一座山上。工厂 $1$ 在山顶，工厂 $N$ 在山脚。 由于地形的不同，在不同工厂建立仓库的费用可能是不同的。第 $i$ 个工厂目前已有成品 $P_i$ 件，在第 $i$ 个工厂位置建立仓库的费用是 $C_i$ 。 对于没有建立仓库的工厂，其产品应被运往其他的仓库进行储藏，而由于 L 公司产品的对外销售处设置在山脚的工厂 $N$ ，故产品只能往山下运（即只能运往编号更大的工厂的仓库），当然运送产品也是需要费用的，假设一件产品运送 $1$ 个单位距离的费用是 $1$ 。 假设建立的仓库容量都都是足够大的，可以容下所有的产品。你将得到以下数据： 工厂 $i$ 距离工厂 $1$ 的距离 $X_i$（其中 $X_1=0$ ）; 工厂 $i$ 目前已有成品数量 $P_i$ ; 在工厂 $i$ 建立仓库的费用 $C_i$ ; 请你帮助 L 公司寻找一个仓库建设的方案，使得总的费用（建造费用+运输费用）最小。 链接Luogu P2120 题解暴力搞搞式子： $$dp[i] = \\min_{j=0}^{i-1}(dp[j] + c_i +\\sum_{w=j+1}^{i} (x_i - x_w)\\times p_w)\\\\dp[i] = \\min_{j=0}^{i-1}(dp[j] + c_i +\\sum_{w=j+1}^{i} (x_i \\times p_w - x_w \\times p_w) )\\\\dp[i] = \\min_{j=0}^{i-1}(dp[j] +x_i \\sum_{w=j+1}^{i}p_w - \\sum_{w=j+1}^{i} x_w \\times p_w) ) + c_i $$ 令 $a_i = \\sum_{w=1}^{i} p_w$ ， $b_i = \\sum_{w=1}^{i} x_w \\times p_w$，原式化为 $$dp[i] = \\min_{j=0}^{i-1}(dp[j] +x_i \\times(a_i-a_j) - (b_i-b_j) ) + c_i$$ 如果令 $j &lt; k &lt; i$ ，则 $k$ 比 $j$ 优等价于： $$dp[j] +x_i \\times(a_i-a_j) - (b_i-b_j) \\geq dp[k] +x_i \\times(a_i-a_k) - (b_i-b_k)\\\\dp[j] - x_i \\times a_j + b_j \\geq dp[k] -x_i \\times a_k + b_k\\\\(dp[j]+b_j) - (dp[k] + b_k) \\geq x_i(a_j-a_k)$$ 因为 $a_j &lt; a_k$ ，即 $a_j - a_k &lt; 0$ ，所以有 $$\\frac{(dp[j]+b_j) - (dp[k] + b_k)}{a_j-a_k} \\leq x_i$$ 注意到 $x_i$ 单调递增，即如果在某个时刻 $k$ 比 $j$ 优，则以后其会一直更优，单调队列维护即可。 代码12","link":"/20181018-ZJOI2007-warehouse/"},{"title":"「ZJOI2009」假期的宿舍-二分图匹配","text":"有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 链接Luogu P2055 题解这道题其实\b可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有\b本校学生床放在二分图另一侧，再将认识的人&amp;床连边（包括自己和自己的床），注意上面的\b人不包括回家的人。 然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&amp;当前弧优化。 然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。\b\b\b最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。\b缘妙不可言啊。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#include &lt;algorithm&gt;using namespace std;struct Edge{ int from,to,flow,cap; int next;}edge[20000];int fir[300],dis[300],cur[300];int n,T,home[300],local[300],s,t,tot;bool bfs(){ queue&lt;int&gt; q; memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(fir)); q.push(s);dis[s] = 1; while(!q.empty()){ int nown = q.front();q.pop(); for(int e = fir[nown];e!=0;e = edge[e].next){ int v = edge[e].to; if(dis[v] == 0 &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[nown]+1; q.push(v); } } } return dis[t];}int dfs(int nown,int limit = 0x3f3f3f3f){ if(nown == t || limit == 0) return limit; for(int &amp;e = cur[nown];e!=0;e = edge[e].next){ int f,v = edge[e].to; if(dis[v] == dis[nown]+1&amp;&amp;edge[e].flow &lt;edge[e].cap){ int f = dfs(v,min(edge[e].cap-edge[e].flow,limit)); if(f&gt;0){ edge[e].flow+=f; edge[e^1].flow-=f; return f; } } } return 0;}int dinic(){ int ans = 0,f; while(bfs()){ while((f = dfs(s)&gt;0)) ans+=f; } return ans;}void addedge(int from,int to,int c){ edge[tot].from = from;edge[tot].to = to; edge[tot].cap = c;edge[tot].flow = 0; edge[tot].next = fir[from];fir[from] = tot; tot++;}int main(){ scanf(\"%d\",&amp;T); for(int i = 1;i&lt;=T;i++){ scanf(\"%d\",&amp;n); //清零 memset(edge,0,sizeof(edge)); memset(home,0,sizeof(home)); memset(local,0,sizeof(local)); memset(fir,0,sizeof(fir)); tot = 2;int cnt = 0; s = 2*n+1,t = 2*n+2; //是否\b本校 for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;local[i]); } //是否回家 for(int i = 1;i&lt;=n;i++){ scanf(\"%d\",&amp;home[i]); if(local[i] == 0) home[i] = 0; } //是否认识且符合条件 for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=n;j++){ int tmp;scanf(\"%d\",&amp;tmp); if(i == j) tmp = 1; if(home[i] == 1||local[j] == 0||tmp == 0) continue; else addedge(i,j+n,1),addedge(j+n,i,0); } } //超级源点&amp;&amp;汇点 for(int i = 1;i&lt;=n;i++){ if(home[i] == 0) addedge(s,i,1),addedge(i,s,0),cnt++; if(local[i] == 1) addedge(i+n,t,1),addedge(t,i+n,0); } if(dinic()==cnt) printf(\"^_^\\n\"); else printf(\"T_T\\n\"); } return 0;}","link":"/20180208-ZJOI2009-vacation/"},{"title":"「ZJOI2010」数字计数-数位dp","text":"给定两个正整数$a$和$b$，求在$[a,b]$中的所有整数中，每个数码(digit)各出现了多少次。 链接Luogu P2602 题解比较入门的数位dp…很适合我这种蒟蒻。 令$dp[i][j]$为当倒数第$i$位为$j$时，后$i$位的数码总计（一个储存着十个整数的结构体，加减即为对位加减）。若$j=10$，则代表这位是前导$0$。(感觉这个搞法有点笨拙…巨佬能不能教教我…) 令$sum(i,j)$为有$i$数码有$j$个，其他均为$0$的状态。 则状态转移方程为： $$dp[1][j] = sum(j,1)$$ $$dp[i][j] = sum(j,10^{i-1}) + \\sum_{w = 0}^{9} dp[i-1][w]\\; ,0\\leq j \\leq 9$$ $$dp[i][10] = \\sum_{w = 1}^{10} dp[i-1][w]$$ 计算答案时，这个实在不太好说…看代码的注释会更好理解… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;cstdio&gt;using namespace std;#define ll long long ll a,b;const int MAXN = 20;struct sum{ ll num[10]; sum(int pos = -1,ll d = 1){ for(int i = 0;i&lt;10;i++) num[i] = 0; if(~pos) num[pos] = d; } sum operator +(const sum a)const{ sum ans = sum(); for(int i = 0;i&lt;=9;i++) ans.num[i] = this-&gt;num[i] + a.num[i]; return ans; } sum operator *(const int a)const{ sum ans = sum(); for(int i = 0;i&lt;=9;i++) ans.num[i] = this-&gt;num[i] * a; return ans; } sum operator -(const sum a)const{ sum ans = sum(); for(int i = 0;i&lt;=9;i++) ans.num[i] = this-&gt;num[i] - a.num[i]; return ans; }};sum dp[MAXN][MAXN];ll t[MAXN];//dp[i][j] -&gt; 后i位，倒数第i位为j,j == 10 代表为先导0void init(){ scanf(\"%lld %lld\",&amp;a,&amp;b); t[0] = 1; for(int i = 1;i&lt;=15;i++) t[i] = 10*t[i-1];}void build(){ for(int j = 0;j&lt;=9;j++) dp[1][j] = sum(j,1); for(int i = 2;i&lt;=15;i++){ for(int j = 0;j&lt;=9;j++){ dp[i][j] = sum(j,t[i-1]); for(int w = 0;w&lt;=9;w++) dp[i][j] = dp[i][j] + dp[i-1][w]; } dp[i][10] = sum(); for(int w = 1;w&lt;=10;w++) dp[i][10] = dp[i][10] + dp[i-1][w]; }}sum getnum(ll a){ ll tmp = a; sum ans = sum(0,1); if(a == 0) return sum(0,1); int num[15],cnt = 0; while(a){ num[++cnt] = a % 10; a/=10; } ans = ans + dp[cnt][10] - dp[cnt][0]; //加上在这一位有前导0，再除去在这一位是0的 for(int i = cnt;i&gt;=1;--i){ for(int j = 0;j&lt;num[i];++j) ans = ans + dp[i][j]; //加上所有比当前位置小的数的数码 ans = ans + sum(num[i],tmp%t[i-1]+1); //补上后面的数中不再计算的这一位的数码 } return ans;}void solve(){ sum ans = getnum(b)-getnum(a-1); for(int i = 0;i&lt;=9;i++){ printf(\"%lld \",ans.num[i]); } printf(\"\\n\");}int main(){ init(); build(); solve(); return 0;}","link":"/20180618-ZJOI2010-count/"},{"title":"「ZJOI2010」网络扩容-网络流-费用流","text":"给定一张有向图，每条边都有一个容量$C$和一个扩容费用$W$。这里扩容费用是指将容量扩大$1$所需的费用。 现在请你编写一个程序求出： 在不扩容的情况下，$1$到$N$的最大流； 将$1$到$N$的最大流增加$K$所需的最小扩容费用。 链接Luogu P2604 BZOJ 1834 题解一道最大流和费用流的题。 第一问不说了。第二问事实上我们注意到我们可以把每条边想像成，$C$的免费流量和费用为$W$的流量。因为答案问我们在最大流为$ans+k$的时候，最小费用是多少，所以我们需要引入一条边来控制流量，再跑得到的费用流就是最小费用了。 怎么来达成边的约束呢？事实上拆边为两条就好，一条免费边，一条收费边。 具体建图方法如下。 先按照费用流的样子建图，所有边的费用为$0$，源点为$1$，终点为$n$，然后跑Dinic得到$ans1$。 关于$ans2$，稍微复杂一些。 保留原图。对于图中的每条边，再建一条容量为$ans1+k$，费用为$w_i$的边。由$n$号节点向$n+1$号节点建一条容量为$ans1+K$，费用为$0$的边，并把汇点设置为$n+1$，注意把流量初始需要设置成$ans1$。直接在残量网络上跑费用流，得到费用即为$ans2$。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include &lt;bits/stdc++.h&gt;using namespace std;namespace fast_io { ...}using namespace fast_io;const int MAXN = 6000,MAXM = 110000;int fx[MAXM],tx[MAXM],cx[MAXM],wx[MAXM];struct Edge{ int from,to; int flow,cap; int cost,nex;}edge[MAXM];int n,m,s,t,k;int fir[MAXN],cur[MAXN],pree[MAXN],ecnt = 2;void addedge(int a,int b,int ca,int co = 0,int f = 0){ edge[ecnt].from = a,edge[ecnt].to = b; edge[ecnt].cost = co,edge[ecnt].cap = ca; edge[ecnt].flow = f; edge[ecnt].nex = fir[a],fir[a] = ecnt; ecnt++; edge[ecnt].from = b,edge[ecnt].to = a; edge[ecnt].cost = -co,edge[ecnt].cap = 0; edge[ecnt].flow = -f; edge[ecnt].nex = fir[b],fir[b] = ecnt; ecnt++;}int dis[MAXN],instack[MAXN];queue&lt;int&gt; q;//Dinicbool bfs(){ memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(fir)); while(!q.empty()) q.pop(); q.push(s);dis[s] = 1; while(!q.empty()){ int nown = q.front();q.pop(); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dis[v] == 0 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow){ dis[v] = dis[nown]+1; q.push(v); if(v == t) return true; } } } return false;}int dfs(int nown,int limit = 0x3f3f3f3f){ if(nown == t||limit == 0) return limit; for(int &amp;nowe = cur[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(dis[v] == dis[nown]+1 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow){ int f = dfs(v,min(limit,edge[nowe].cap - edge[nowe].flow)); if(f&gt;0){ edge[nowe].flow+=f; edge[nowe^1].flow-=f; return f; } } } return 0;}int dinic(){ int ans = 0,f; while(bfs()) while((f=dfs(s))&gt;0) ans+=f; return ans;}//费用流bool spfa(){ while(!q.empty()) q.pop(); memset(dis,0x3f,sizeof(dis)); memset(instack,0,sizeof(instack)); dis[s] = 0;q.push(s); while(!q.empty()){ int nown = q.front();q.pop(); instack[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ Edge e = edge[nowe]; if(dis[e.to]&gt;dis[nown]+e.cost&amp;&amp;e.cap&gt;e.flow){ dis[e.to] = dis[nown]+e.cost; pree[e.to] = nowe; if(instack[e.to] == 0){ q.push(e.to); instack[e.to] = 1; } } } } return dis[t] &lt; 0x3f3f3f3f;}void argument(int &amp;sumc,int &amp;sumf){ int nown = t,delta = 0x3f3f3f3f; while(nown!=s){ delta = min(delta,edge[pree[nown]].cap - edge[pree[nown]].flow); nown = edge[pree[nown]].from; } nown = t; while(nown!=s){ edge[pree[nown]].flow += delta; edge[pree[nown]^1].flow -= delta; nown = edge[pree[nown]].from; } sumf+=delta,sumc+=delta*dis[t];}int min_cost_flow(int ans){ int c = 0,f = ans; while(spfa()) argument(c,f); return c;}//主程序void init(){ read(n),read(m),read(k);s = 1,t = n; for(int i = 1;i&lt;=m;i++){ read(fx[i]),read(tx[i]),read(cx[i]),read(wx[i]); addedge(fx[i],tx[i],cx[i]); }}void solve(){ int ans1 = dinic(),ans2; for(int i = 1;i&lt;=m;i++) addedge(fx[i],tx[i],ans1+k,wx[i]); addedge(n,n+1,ans1+k,0,ans1);t = n+1; //注意这个地方需要改变汇点，加边的时候需要给定初始流量 ans2 = min_cost_flow(ans1); print(ans1),print(' '),print(ans2),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180405-ZJOI2010-network/"},{"title":"「ZJOI2012」网络-LCT","text":"有一个无向图$G$，每个点有个权值，每条边有一个颜色。这个无向图满足以下两个条件： 对于任意节点连出去的边中，相同颜色的边不超过两条。 图中不存在同色的环，同色的环指相同颜色的边构成的环。 在这个图上，你要支持以下三种操作： 修改一个节点的权值。 修改一条边的颜色。 查询由颜色$c$的边构成的图中，$u$到节点$v$之间的简单路径上的节点的权值的最大值。 对于$100%$的数据，保证颜色不多于$10$种。 链接Luogu P2173 题解对于每一种颜色维护一颗维护最大值的$LCT$，点权对于所有的树都要改，改边的颜色的话相当于删边再加边，最大值查询就好。 错误判断的话就是LCT的正常操作，再维护一个度数就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;inline char read(){ const int SIZE = 1024*1024; static char *s,*t,ibuf[SIZE]; if(s == t) t = (s = ibuf) + fread(ibuf,1,SIZE,stdin); return s == t ? -1: (*s++);}inline void read(int &amp;x){ static bool iosig = 0;char ch; for(ch = read(),iosig = 0;!isdigit(ch);ch= read()){ if(ch == '-') iosig = 1; if(ch == -1) return; } for(x = 0;isdigit(ch);ch = read()) x = (((x&lt;&lt;2)+x)&lt;&lt;1) + (ch^48); if(iosig) x = -x;}const int MAXN = 13000;struct Link_Cat_Tree{ int v[MAXN],maxn[MAXN]; int f[MAXN],c[MAXN][2]; bool rev[MAXN]; void push_up(int x){ maxn[x] = max(max(maxn[c[x][0]],maxn[c[x][1]]),v[x]); } void reverse(int x){ swap(c[x][0],c[x][1]); rev[x] ^= 1; } void push_down(int x){ if(rev[x]){ reverse(c[x][0]),reverse(c[x][1]); rev[x] = 0; } } bool noroot(int x){ return c[f[x]][0] == x || c[f[x]][1] == x; } void push_all(int x){ if(noroot(x)) push_all(f[x]); push_down(x); } void rotate(int x){ int y = f[x],z = f[y],t = (c[y][1] == x),w = c[x][1-t]; if(noroot(y)) c[z][c[z][1]==y] = x; c[y][t] = w,c[x][1-t] = y; if(w) f[w] = y; f[x] = z,f[y] = x; push_up(y),push_up(x); } void splay(int x){ push_all(x); while(noroot(x)){ int y = f[x],z = f[y]; if(noroot(y)){ if((c[y][1]==x)^(c[z][1]==y)) rotate(x); else rotate(y); }rotate(x); } } void access(int x){ for(int y = 0;x;x = f[y = x]){ splay(x);c[x][1] = y; push_up(x); } } void makeroot(int x){ access(x),splay(x),reverse(x); } void split(int x,int y){//split后y位于树根（代表整条链 makeroot(x),access(y),splay(y); } int find(int x){ access(x),splay(x); push_down(x); while(c[x][0]){ x = c[x][0],push_down(x); } return x; } bool link(int x,int y){ makeroot(x); if(find(y) != x){ f[x] = y; return 1; }else return 0; } bool judge(int x,int y){ makeroot(x); return find(y) == x &amp;&amp; f[x] == y &amp;&amp; !c[x][1]; } bool cat(int x,int y){ makeroot(x);//find 之后 y 位于 树根 if(find(y) == x &amp;&amp; f[x] == y &amp;&amp; !c[x][1]){ f[x] = c[y][0] = 0;push_up(y); return 1; }else return 0; } void update(int x,int val){ makeroot(x); v[x] = val,push_up(x); } int query(int x,int y){ makeroot(x); if(find(y)!=x) return -1; else{ access(y),splay(y); return maxn[y]; } }}T[10];// Tree 0 -&gt; 9int d[MAXN][10];// degree int n,m,c,k;void update(int x,int v){ for(int i = 0;i&lt;c;i++) T[i].update(x,v);}int change(int u,int v,int w){ if(T[w].judge(u,v)) return 0; for(int i = 0;i&lt;c;i++){ if(T[i].judge(u,v)){ if(d[u][w] &gt;= 2 || d[v][w] &gt;= 2) return 1; else{ if(!T[w].link(u,v)) return 2; else{ d[u][i]--,d[v][i]--; T[i].cat(u,v); d[u][w]++,d[v][w]++; return 0; } } } } return -1;}void init(){ read(n),read(m),read(c),read(k); int u,v,w; for(int i = 1;i&lt;=n;i++){ read(v); update(i,v); } for(int i = 1;i&lt;=m;i++){ read(u),read(v),read(w); T[w].link(u,v); d[u][w]++,d[v][w]++; }}int query(int u,int v,int w){ return T[w].query(u,v);}void solve(){ int op,u,v,w; for(int i = 1;i&lt;=k;i++){ read(op); if(op == 0){ read(u),read(v); update(u,v); } else if(op == 1){ read(u),read(v),read(w); int t = change(u,v,w); if(t&gt;0) printf(\"Error %d.\\n\",t); else if(t==-1) printf(\"No such edge.\\n\"); else printf(\"Success.\\n\"); } else if(op == 2){ read(w),read(u),read(v); printf(\"%d\\n\",query(u,v,w)); } }}int main(){ init(); solve(); return 0;}","link":"/20180803-ZJOI2012-network/"},{"title":"「ZJOI2012」小蓝的好友-Treap","text":"简单版题意： 给定一个 $R \\times C$ 的矩形，在其中 $N$ 个位置有资源点。现在请你求出在所有的子矩形中，至少包含一个资源点的矩形数量。 完整版题意： 终于到达了这次选拔赛的最后一题，想必你已经厌倦了小蓝和小白的故事，为了回馈各位比赛选手，此题的主角是贯穿这次比赛的关键人物——小蓝的好友。 在帮小蓝确定了旅游路线后，小蓝的好友也不会浪费这个难得的暑假。与小蓝不同，小蓝的好友并不想将时间花在旅游上，而是盯上了最近发行的即时战略游戏——SangoCraft。但在前往通关之路的道路上，一个小游戏挡住了小蓝的好友的步伐。 “国家的战争其本质是抢夺资源的战争”是整款游戏的核心理念，这个小游戏也不例外。简单来说，用户需要在给定的大小为 $R \\times C$ 长方形土地上选出一块子矩形，而系统随机生成了 $N$ 个资源点，位于用户所选的长方形土地上的资源点越多，给予用户的奖励也越多。悲剧的是，小蓝的好友虽然拥有着极其优秀的能力，但同时也有着极差的RP，小蓝的好友所选的区域总是没有一个资源点。 终于有一天，小蓝的好友决定投诉这款游戏的制造厂商，为了搜集证据，小蓝的好友想算出至少包含一个资源点的区域的数量。作为小蓝的好友，这自然是你分内之事。 数据范围：对于$100\\%$的数据，$R,C \\leq 40000$, $N \\leq 100000$，资源点的位置两两不同，且位置为 随机生成 。 链接Luogu P2611 题解神题orz 首先把问题转化成不包含一个资源点的子矩形数目。 简直不可做好吗！枚举矩形都gg，简直很不可做… 所以说，我们需要用一些东西来加速这个过程。我也不知道，怎么就想到了笛卡尔树… 笛卡尔树是一棵二叉树，树的每个节点有两个值，一个为 $\\text{key}$，一个为 $\\text{val}$。光看 $\\text{key}$ 的话，笛卡尔树是一棵二叉搜索树，每个节点的左子树的 $\\text{key}$ 都比它小，右子树都比它大；光看 $\\text{val}$ 的话，笛卡尔树有点类似堆，根节点的 $\\text{val}$ 是最小（或者最大）的，每个节点的 $\\text{val}$ 都比它的子树要大。 From: SengXian’s Blog 我们用扫描线，从上往下扫描，然后我们的笛卡尔树维护的是每一列，中序遍历就是列从左到右的顺序，每一个节点的 $\\text{val}$ 就是这条扫描线到这一列最低的资源点的高度。 这里的笛卡尔树，我们不维护 $\\text{key}$ ，是以序列下标来建树，类似文艺平衡树的 Splay ；堆则是小根堆。 由于高度的随机性，我们可以发现，这棵笛卡尔树的期望高度是 $O(\\log{n})$ 的。 所以我们可以维护一点东西，来加速我们的运算。 我们维护一个$sum$，代表下界在当前扫描线，上界在这个节点高度以下的子矩形的个数。我们可以发现，当前的节点的siz，就是上界高度在其下的宽度（列数），然后我们可以得出满足这个条件的子矩形。然后所有的下界在扫描线上的矩形，都可以在这个笛卡尔树的所有节点处被不重不漏的包含。 然后我们思考如何更新。扫描线往下的话就是所有的 $ht+1$，发现可以打标记 $O(1)$ 解决。出现一个点事实上就是单点修改优先值（ $\\text{val}$ ），然后往上转，也可以在 $O(\\log {n})$ 内解决。 然后计算就好了。有不少细节…怪难调的…要不是数据结构基础好估计就gg了… 最后的复杂度大约是$O(C + N \\log R)$？ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;#define ll long longtypedef int T;using namespace std;#define calc(x) (((ll)(x)*((x)+1))/2)namespace fast_io{ //...}using namespace fast_io;const int MAXN = 110000;namespace Treap{ //小根堆 #define ls c[x][0] #define rs c[x][1] ll ans[MAXN],addn[MAXN]; int ht[MAXN],siz[MAXN]; int c[MAXN][2],cnt = 0; int root; void maintain(int x){//确保合法才能maintain siz[x] = siz[ls] + siz[rs] + 1; ans[x] = ans[ls] + ans[rs]; ans[x] += (ll)(ht[ls] - ht[x])*calc(siz[ls]); ans[x] += (ll)(ht[rs] - ht[x])*calc(siz[rs]); } int __build(int l,int r){ if(l &gt; r) return 0; int x = ++cnt,mid = (l+r)&gt;&gt;1; siz[x] = 1; ls = __build(l,mid-1),rs = __build(mid+1,r); maintain(x); return x; } void add(int x,int v){ addn[x] += v,ht[x] += v; } void push_down(int x){ if(addn[x]){ add(ls,addn[x]),add(rs,addn[x]); addn[x] = 0; } } void rotate(int &amp;x,int t){ int y = c[x][t]; c[x][t] = c[y][1-t]; c[y][1-t] = x; maintain(x),maintain(y); x = y; } void modify(int &amp;x,int r){ push_down(x);int t = siz[ls] + 1; if(r == t){ ht[x] = 0;maintain(x);return; } else{ if(r &lt; t){ modify(ls,r); if(ht[ls]&lt;ht[x]) rotate(x,0); else maintain(x); } else{ modify(rs,r-t); if(ht[rs]&lt;ht[x]) rotate(x,1); else maintain(x); } } } void add(){add(root,1);} void modify(int r){modify(root,r);} ll query(){return ans[root];} int getheight(){return ht[root];} void build(int n){root = __build(1,n);}}int n,m,k;struct Point{ int x,y; bool operator &lt; (const Point &amp; _a)const{ if(x != _a.x) return x &lt; _a.x; else return y &lt; _a.y; }}p[MAXN];void init(){ read(n),read(m),read(k); for(int i = 1;i&lt;=k;i++){ read(p[i].x),read(p[i].y); }}void build(){ sort(p+1,p+k+1); Treap::build(m);}void solve(){ static ll ans = calc(n)*calc(m); for(int i = 1,j = 1;i&lt;=n;i++){ Treap::add(); //printf(\"%d %d\\n\",p[j].x,p[j].y); while(j &lt;= k &amp;&amp; p[j].x == i){ Treap::modify(p[j].y);j++; } ans -= Treap::query() + calc(Treap::siz[Treap::root]) * Treap::getheight(); } printf(\"%lld\\n\",ans);}int main(){ init(); build(); solve(); return 0;}","link":"/20180816-ZJOI2012-friend/"},{"title":"「ZJOI2013」K大数查询-整体二分","text":"有$N$个位置，$M$个操作。 操作有两种： 如果是1 a b c的形式表示在第$a$个位置到第$b$个位置，每个位置加入一个数$c$； 如果是2 a b c形式，表示询问从第$a$个位置到第$b$个位置，第$C$大的数是多少。 链接Luogu P3332 题解可以树套树。然后基本上就会死在树上。 正解整体二分。 比较模板，就不讲思路了，主要说一说实现。这个地方的区间加数其实和单点加数是一样的，只不过把原来单点修改的树状数组改成区间修改的线段树。 注意，整体二分是按答案二分，每次二分我们的在原区间上处理范围仍然是整个区间，不要搞错成啥的… 还有注意，这里每一层递归的复杂度一定只能与你的正在处理的询问的个数有关！不能带有其他项，所以我们这里归零线段树的时候是一个个减回去，复杂度就是$O(n \\log {n})$。 递归的每层都要处理$n$个操作，一共有$\\log n$层，处理每个询问的时间是$O(\\log n)$，最后的复杂度就是$O(n \\log ^{2} {n})$。 莫名跑的就特别慢…明明我写了$zkw$线段树啊…BZOJ莫名$RE$…明明我luogu和codevs上全$AC$了啊… 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cctype&gt;using namespace std;#define ll long long#define mid ((l+r)&gt;&gt;1)const int MAXN = 51000;namespace fast_io{ //...}using namespace fast_io;struct ZKW{ //区间修改、求和zkw线段树 ll sumn[MAXN&lt;&lt;2],addn[MAXN&lt;&lt;2]; int M; void init(int n){ for(M = 1;M&lt;=n+2;M&lt;&lt;=1); } void update(int l,int r,ll d){ int i=1,L=0,R=0; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1,i&lt;&lt;=1){ sumn[l]+=L*d,sumn[r]+=R*d; if(~l&amp;1) addn[l^1]+=d,sumn[l^1]+=d*i,L+=i; if(r&amp;1) addn[r^1]+=d,sumn[r^1]+=d*i,R+=i; } sumn[l]+=L*d,sumn[r]+=R*d; while(l&gt;&gt;=1) sumn[l]+=(L+R)*d; } ll query(int l,int r){ ll ans = 0;int i=1,L=0,R=0; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1,i&lt;&lt;=1){ ans+=addn[l]*L,ans+=addn[r]*R; if(~l&amp;1) ans+=sumn[l^1],L+=i; if(r&amp;1) ans+=sumn[r^1],R+=i; } ans+=addn[l]*L,ans+=addn[r]*R; while(l&gt;&gt;=1) ans+=addn[l]*(L+R); return ans; }}tree;struct Q{ int o,ql,qr; ll k; // o == 0 -&gt; update l r val; o == 1 -&gt; query l r k Q(){} Q(int a,int b,int c,ll d):o(a),ql(b),qr(c),k(d){}}query[MAXN];int tl[MAXN],tr[MAXN],ans[MAXN];void solve(int *a,int n,int l,int r){ //表示要处理的询问在q[0]-&gt;q[n-1]，二分答案范围为[l,r] if(n == 0) return;//一个微小的剪枝 if(l == r){ //递归边界 for(int i = 0;i&lt;n;i++) ans[a[i]] = l; return; } int n1 = 0,n2 = 0;ll sum; for(int i = 0;i&lt;n;i++){ Q &amp;q = query[a[i]]; if(q.o == 1){ //修改如果值大于mid，就应用修改；否则不管 if(q.k &gt; mid) tree.update(q.ql,q.qr,1),tr[n2++] = a[i]; else tl[n1++] = a[i]; } else if(q.o == 2){ //查询的结果sum大于k，二分到右边；否则左边 sum = tree.query(q.ql,q.qr); if(q.k &lt;= sum) tr[n2++] = a[i]; else q.k -= sum,tl[n1++] = a[i]; } } //原样减回去 for(int i = 0;i&lt;n;i++){ Q &amp;q = query[a[i]]; if(q.o == 1 &amp;&amp; q.k &gt; mid) tree.update(q.ql,q.qr,-1); } memcpy(a,tl,sizeof(int) * n1),memcpy(a+n1,tr,sizeof(int) * n2); //递归二分 solve(a,n1,l,mid),solve(a+n1,n2,mid+1,r);}int n,m,t[MAXN];void init(){ read(n),read(m); tree.init(n); int op,l,r;ll c; for(int i = 0;i&lt;m;i++){ read(op),read(l),read(r),read(c); query[i] = Q(op,l,r,c); t[i] = i; }}void solve(){ solve(t,m,-n,n); for(int i = 0;i&lt;m;i++){ if(query[i].o == 2) print(ans[i]),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;}","link":"/20180606-ZJOI2013-kth/"},{"title":"「ZJOI2014」力-快速傅立叶变换","text":"给出$n$个数$q_i$，给出$F_j$定义为： $$F_j = \\sum_{i &lt; j}\\frac{q_i q_j}{(i-j)^2} - \\sum_{i &gt; j}\\frac{q_i q_j}{(i-j)^2}$$ 令$$E_i = \\frac{F_i}{q_i}$$ 求$E_i$的值。 链接Luogu P3338 题解先化简：$$E_j = \\sum_{i &lt; j}\\frac{q_i}{(i-j)^2} - \\sum_{i &gt; j}\\frac{q_i}{(i-j)^2}$$ 注意到我们只需要求：$$E_j’ = \\sum_{i = 1}^{j-1}\\frac{q_i}{(i-j)^2}$$ 注意到卷积的形式： $$(f * g)[i] = \\sum_{j = 0}^{i} f[j]\\,g[i-j]$$ 在上式中，令$f[i] = q_i,g[i] = i^{-2}$，由卷积的定义可以发现： $$E_i’ = (f * g)[i]$$ 这个过程可以用快速傅立叶变换优化，达到$O(n \\log n)$的复杂度。 然后把序列反转，再做一遍，组合一下就是最后的答案。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 500000;typedef complex&lt;double&gt; complex_t;namespace FFT{const double PI = acos(-1.0);// n = 2^kvoid fft(complex_t *P,int n,int op){ static int r[MAXN]; int len = log2(n); for(int i = 0;i&lt;n;i++) r[i] = (r[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(len-1)); for(int i = 0;i&lt;n;i++) if(i &lt; r[i]) swap(P[i],P[r[i]]); for(int i = 1;i&lt;n;i&lt;&lt;=1){ complex_t x(cos(PI/i),sin(PI/i)*op); for(int j = 0;j&lt;n;j+=(i&lt;&lt;1)){ complex_t y(1,0); for(int k = 0;k&lt;i;k++,y*=x){ complex_t p = P[j+k],q = y*P[i+j+k]; P[j+k] = p+q,P[i+j+k] = p-q; } } }}void mul(double *a,double *b,double *res,int n){ static complex_t c[MAXN],d[MAXN]; for(int i = 0;i&lt;n;i++) c[i] = d[i] = 0; for(int i = 0;i&lt;n;i++) c[i] = a[i],d[i] = b[i]; fft(c,n,1),fft(d,n,1); for(int i = 0;i&lt;n;i++) c[i] *= d[i]; fft(c,n,-1); for(int i = 0;i&lt;n;i++) res[i] = double(c[i].real())/double(n);}}int n;double q[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++) scanf(\"%lf\",&amp;q[i]);}void solve(){ static double ans[MAXN],tmp[MAXN],a[MAXN],b[MAXN]; int m = 1; for(;m&lt;=2*n;m&lt;&lt;=1); // 注意这里的b[i]一定只能到n！ for(int i = 1;i&lt;=n;i++) a[i] = q[i],b[i] = (1.0/double(i))/double(i);// 这里可能会爆一点什么东西 FFT::mul(a,b,tmp,m); for(int i = 1;i&lt;=n;i++) ans[i] += tmp[i]; reverse(a+1,a+n+1); FFT::mul(a,b,tmp,m); for(int i = 1;i&lt;=n;i++) ans[i] -= tmp[n-i+1]; for(int i = 1;i&lt;=n;i++) printf(\"%lf\\n\", ans[i]);}int main(){ init(); solve(); return 0;}","link":"/20180719-ZJOI2014-force/"},{"title":"「国家集训队」数颜色-带修改莫队","text":"墨墨购买了一套$N$支彩色画笔（其中有些颜色可能相同）。墨墨会向你发布如下指令： Q L R代表询问你从第$L$支画笔到第$R$支画笔中共有几种不同颜色的画笔。 R P Col 把第P支画笔替换为颜色$Col$。 链接Luogu P1903 题解带修改的莫队裸题。思路可以去这篇文章里看。 主要需要注意的就是自加自减时间。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cctype&gt;#include &lt;vector&gt;using namespace std;namespace fast_io { ...}using namespace fast_io;const int MAXN = 11000,MAX = 1100000;int n,m,Q;int col[MAXN],re_col[MAXN],re_pos[MAXN],cnum = 1;int l = 0,r = 0,x = 0;int num[MAX],ans = 0;struct Query{ int id,ql,qr,qx,ans; //运算符重载 bool operator &lt; (Query b)const{ if(ql/Q != b.ql/Q) return ql/Q &lt; b.ql/Q; if(qr/Q != b.qr/Q) return qr/Q &lt; b.qr/Q; return qx &lt; b.qx; }};bool cmp(Query a,Query b){ return a.id &lt; b.id;}vector&lt;Query&gt; query;void init(){ read(n),read(m);Q = sqrt(n*2); for(int i = 1;i&lt;=n;i++) read(col[i]); for(int i = 1;i&lt;=m;i++){ char op[10];int a,b; read(op);read(a),read(b); if(op[0] == 'Q'){ Query w;w.ql = a,w.qr = b,w.qx = cnum-1; w.id = i;query.push_back(w); } else if(op[0] == 'R'){ re_pos[cnum] = a,re_col[cnum] = b; cnum++; } } sort(query.begin(),query.end());}//加入第pos个数并更新答案void add(int pos){ if(num[col[pos]]++ == 0) ans++;}//删去第pos个数并更新答案void del(int pos){ if(--num[col[pos]] == 0) ans--;}//进行第times次修改void change(int times){ if(l&lt;=re_pos[times]&amp;&amp; re_pos[times] &lt;= r){ if(num[re_col[times]]++ == 0) ans++; if(--num[col[re_pos[times]]] == 0) ans--; } swap(re_col[times],col[re_pos[times]]);}void solve(){ for(int i = 0;i&lt;query.size();i++){ //莫队核心转移 Query w = query[i]; while(l &gt; w.ql) add(--l); while(r &lt; w.qr) add(++r); while(l &lt; w.ql) del(l++); while(r &gt; w.qr) del(r--); while(x &lt; w.qx) change(++x); while(x &gt; w.qx) change(x--); query[i].ans = ans; } sort(query.begin(),query.end(),cmp); for(int i = 0;i&lt;query.size();i++) print(query[i].ans),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180331-count-color/"},{"title":"「国家集训队」最长双回文子串-回文自动机","text":"输入长度为 $n$ 的串 $S$ ，求 $S$ 的最长双回文子串 $T$,即可将 $T$ 分为两部分$X$ ， $Y$ ， （ $∣X∣,∣Y∣ \\geq 1$ ）且 $X$ 和 $Y$ 都是回文串。 题解几乎是模版题。 正反跑一遍回文自动机，找出每个位置往两个方向的最长回文后缀，加起来就是答案。 时间复杂度: $O(n)$ 注意 $0$ 和 a 的混淆，务必加上 s[0] = -1 。 代码1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 110000;struct PAM{ int s[MAXN],c[MAXN][26],fa[MAXN],len[MAXN],tcnt,last; void init(){ s[0] = -1; last = 0,tcnt = 1; fa[0] = fa[1] = 1; len[0] = 0,len[1] = -1; } int getfail(int n,int p){ while(s[n-len[p]-1] != s[n]) p = fa[p]; return p; } int ins(int n,int x){// 返回最长回文后缀长度 s[n] = x; int p = getfail(n,last),&amp;q = c[p][x]; if(!q){ int f = c[getfail(n,fa[p])][x]; q = ++tcnt,len[q] = len[p]+2,fa[q] = f; } last = q; return len[q]; }}A,B;int n;char s[MAXN];int a[MAXN],b[MAXN];int main(){ scanf(\"%s\",s+1);n = strlen(s+1); A.init(),B.init(); for(int i = 1;i&lt;=n;i++) a[i] = A.ins(i,s[i]-'a');//,printf(\"%d:%d\\n\",i,a[i]); for(int i = n;i&gt;=1;--i) b[i] = B.ins(n-i+1,s[i]-'a');//,printf(\"%d:%d\\n\",i,b[i]); int ans = 0; for(int i = 1;i&lt;=n-1;i++) ans = max(ans,a[i]+b[i+1]); printf(\"%d\\n\",ans); return 0;}","link":"/20190310-longest-double-palindrome/"},{"title":"「国家集训队」聪聪可可-点分治","text":"有一颗$n$（$n&lt;20000$）个节点的树，每条边都有边权。接下来由聪聪和可可分别随即选一个点，如果两点之间简单路径上的边权和是$3$的倍数，则判聪聪赢，否则可可赢。 聪聪非常爱思考问题，希望知道对于这张图自己的获胜概率是多少。 链接Luogu P2634 题解点分治比较模版的一道题吧。 树上的路径问题，也可以提示我们点分治。 所以问题转化为：怎么在$O(n)$或者$O(n \\log{n})$的时间内求出过一个点的所有，起点终点不在同一子树中，边权和为$3$的倍数的路径个数。 事实上，我们发现，这个问题不难解决。如果只有经过一个点这个条件，那么就很简单：$dfs$一遍求出这个点到所有点的距离除$3$余数，然后$num[0] \\times num[0] + num[1] \\times num[2] + num[2] \\times num[1]$即为所求。 比较难搞的是第二个条件，也就是我们要求这个路径的起点和终点不在一个子树内。我们可以考虑采用容斥原理。即对每一颗子树分别$dfs$求出$3$个$num’$，然后减去这个子树内过上面根节点的路径个数。这个个数我们上面好像已经求过了，事实上就是$num’[0] \\times num’[0] + num’[1] \\times num’[2] + num’[2] \\times num’[1]$。 所以我们就可以$O(n)$的时间处理完这件事情了。再加上点分治，我们最终的复杂度就是$O(n \\log {n})$。 有一些比较容易错的地方，比如要注意开始的时候$num[0]$要置做$1$，而$num’[0]$就不用。这是比较显然的，然而我还是错了好久…还有就是在加边的时候可以对$3$取模…后面也要不断对$3$取模…要不然会炸。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;cstdio&gt;#include &lt;algorithm&gt;#define ll long longusing namespace std;ll gcd(ll a,ll b){// a &lt; b; return a == 0?b:gcd(b%a,a);}const int MAXN = 110000;struct Edge{ int from,to; int len,nex;}edge[MAXN];int ecnt = 2;int fir[MAXN];void addedge(int a,int b,int l){ edge[ecnt] = (Edge){a,b,l,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,l,fir[b]}; fir[b] = ecnt++;}//----int n,m;int f[MAXN],siz[MAXN],vis[MAXN];int rt,sz;int num[3],tmp[3];ll ans = 0;void getroot(int nown,int fa){ siz[nown] = 1,f[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v] || v == fa) continue; getroot(v,nown); siz[nown] += siz[v]; f[nown] = max(f[nown],siz[v]); } f[nown] = max(f[nown],sz - siz[nown]); if(f[nown] &lt; f[rt]) rt = nown;}void getdeep(int nown,int fa,int d){ num[d]++; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(vis[v] || v == fa) continue; getdeep(v,nown,(d+l)%3); }}void work(int nown){ tmp[0] = 1;tmp[1] = tmp[2] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(vis[v]) continue; num[0] = num[1] = num[2] = 0; getdeep(v,nown,l); ans -= num[0]*num[0] + 2*num[1]*num[2]; tmp[0] += num[0],tmp[1]+=num[1],tmp[2]+=num[2]; } ans += tmp[0] * tmp[0] + 2*tmp[1] * tmp[2];}void solve(int nown){ vis[nown] = 1; work(nown); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v]) continue; f[rt = 0] = sz = siz[v]; getroot(v,rt); solve(rt); }}void init(){ scanf(\"%d\",&amp;n); int a,b,c; for(int i = 1;i&lt;=n-1;i++){ scanf(\"%d %d %d\",&amp;a,&amp;b,&amp;c); addedge(a,b,c%3); }}void solve(){ f[rt = 0] = sz = n; getroot(1,rt); solve(rt); ll ans2 = n*n; printf(\"%lld/%lld\\n\",ans/gcd(ans,ans2),ans2/gcd(ans,ans2));}int main(){ init(); solve(); return 0;}","link":"/20180422-clever-and-cute/"},{"title":"「摘录」青春设计师-年级范文","text":"青春真的是一个非常空泛而又令人迷茫的词汇。 青春设计师 文章来自我校年级范文。 我是一名新晋的青春设计师，为人们设计平行宇宙中另一个自己的青春。等他们到了那里，就能过上自己想要的生活。 网站提示音一响。第一单！我激动的打开信息单：要求栏只写着两个字：完美。 完美的青春是什么样子？我开始构想。 他要生活在温馨的家庭，父亲要严格而不失幽默，为他树立生活中的权威和条框。母亲要慈善贤惠，让他感到世界的温度与和善。他要和父母保持良好的关系。他要在亲子的对话中了解这个世界真实的样子，并学会为人处事的方法，从而形成健全的心理和独立的人格……当我看着自己的设定十分满意时，心中却出现了别的声音：用自己的血肉触碰世界的条框，用自己的方式理解世界，不正是青春的意义吗？我陷入了迷茫，点击了“暂存”。 他要擅长一项体育运动，并从中结交一群朋友，都说“无运动，不青春”，球场上矫健的身影才是青春该有的样子。这是他在青春岁月里竭尽全力的方式。他为了目标——进球得分，挥汗如雨，拼尽全力。结束的哨声即将响起，他第一次体会何谓放手一搏。肌肉的力量，意志的坚定，再加上一点运气，球进！场外女孩子的尖叫划破天空，如赞歌般充斥着他的双耳。他双眼模糊，倒在兄弟的手臂上。那是他第一次站上世界之巅。他尝到了自信和成功的味道…我一遍遍为这美妙的体验鼓掌，而多疑的神经又占据了脑海：在青春年华，我们也会经常犯错啊！但正是在青春时期的不断跌倒和再次爬起，铸就了我们心智的成熟和未来成功的基石。谬赞的浪潮使人膨胀，而膨胀和自负恰是成熟的杀手。他的青春该如何描绘？接连不断的成功，还是令人沮丧的失败？我再次按下“暂存”。 他要在青春年华初尝爱情的甜蜜。从见到那个女孩的第一面起，他的目光就再没离开过她。他对她并无半点杂念，单纯的注视就已经能让他感到幸福。她的一颦一笑，一举一动是那么纯真，澄澈。她就是天使。那个炎热的下午，他用了一节课的时间，终于在桌子下面牵到了她的手。他呆呆地盯着桌上树叶交错斑驳的影子，半个身子都涌上热流。之后的日子里，他们的甜蜜一如初见。二人心有灵犀，琴瑟和鸣，无不羡煞旁人。 我审视这纯粹而完美的爱情，恍惚间像看到一场青春的大梦。激烈的争吵和内心的大雨滂沱何不是青春花园的一部分？争端和误解正是启蒙，带我们走进异性的世界。在人生的雨季，我们修炼爱情，不断成长，不正是青春的幸福吗？两个青春的爱情怎样才算是完美，我有些茫然。 呆坐在电脑前，浏览着刚刚写下的文字，无论怎么修改，我总觉得距离“完美”还差了一点。我盯着要求栏里的“完美”两字，从午后盯到黄昏，甚至拿出放大镜，想通过透镜看出什么来。良久，我终于看出了两个字： “遗憾”。 我明白了。 成长即破碎，青春终有遗憾。 我快速的找到“个人履历”一栏，复制，粘贴，发送。 之后，我关掉了网站，再不设计青春。 文章来自我校年级范文。如果作者同学对于我擅自的发表有任何意见，我会将文章立刻撤下。 青春 以下是我随便乱写的 或许青春永远都不存在所谓“完美”。 我曾经思考过我的过去、现在和未来。 我的过去，何时回忆起来也不免欢欣。 我的家长，对于我的管教应该说还算是比较严格，小学每天八点半都要上床睡觉，即使到了中考前夕，九点半点之前也必须要在床上躺着。这的确对我有极大的帮助。如果说到学校，其实我对于小学的记忆已经渐渐模糊了，甚至连在哪里上的课都不太记得。但我恐怕一辈子也不能忘记，在那里懵懵懂懂的成长的时光。在那个最纯真的时候，我收获的不止几段最为美丽的友情，更有许多的成长。小的时候每天都坐班车，虽然没有什么人愿意跟我说话，但我也因此在车上读了许多许多的书。或许我现在对人生的许多看法，也是在那几年的班车上获得的。初中，在我当时看来，可以说是侥幸混到了本区最好的初中吧。同学都是很棒的一些人。有的人擅长学习，在学习上给了我许多的帮助；有的人思想深邃，教会我去如何更好的理解这个世界。相对于小学，我倒是更认为初中的老师让我成长更多。无论如何，我的初中生活很快也就结束了。一个懵懂的孩童终于长成一个少年，当然要归功于我亲爱的老师和同学们，还有我的家长。 我的现在，是一个近乎完美的现在。 不负众望的，我考进了本校的高中。一个三年，接下来的又是一个三年。小学的六年，并没有给我留下什么印象；而中学的六年，则会是人生中不可磨灭的一部分。同学自然十分优秀，老师也是非常有才华，我现在所拥有的一切恐怕是以前连梦都不敢梦的所有。一切一切，都让我一直认为，我的现在，已经是最好的现在了。 我的未来，大约也会是令人向往的远方。 我所拥有的一切，都在激励着我继续前行。我有负责的家人，给我的奋斗最大的支持；我有热爱的事业，并且我在这上面也获得了无可比拟的成就感；我有深深爱着的人，无论何时都会给我我安慰与鼓励；我有负责任的老师，会给我在学业上一切可能的帮助；我有一群可爱的同学，始终让我在每天放学都能带着微笑回家，不论生活的繁忙与否；而我现在所取得的一切，也告诉我：未来充满着希望。人生中最美好的事情或许也就莫过于，每一天都是怀揣着希望而前行吧。 当时看到这篇范文，突然就想到了自己。感谢我生命里遇到的所有人，不论是到现在已经相忘，还是依旧相随而行；不论我们之间是至今不渝的友情，还是无法弥补的伤痕，感谢你们让我完全地成长，让我拥有这么一个完美的青春。 鲁迅也说过：“使精神的丝缕还牵着已逝的寂寞的时光，又有什么意义呢。” 虽说青春终有遗憾，但如果这一切都是你爱的人和爱你的人一起为你写就，那么是否遗憾，或许也不那么重要。 你说呢。 这篇文章写的匆忙，来不及细细打磨，如果有文意疏漏之处，在所难免，请观者原谅。","link":"/20180603-youth-designer/"},{"title":"「模板」陌上花开-CDQ分治+树状数组","text":"有$n$朵花,每朵花有三个属性:花形($s$)、颜色($c$)、气味($m$)，用三个整数表示。显然，两朵花可能有同样的属性。 定义一朵花$A$比另一朵花$B$要美丽，当且仅$S_a\\geq S_b$,$C_a\\geq C_b$,$M_a \\geq M_b$。定义一朵花的等级是它拥有的美丽能超过的花的数量。 求出每个等级的花的数量。 陌上花开，可缓缓归矣。 链接BZOJ 3262 Luogu P3810 题解这道题还有一个名字叫「三维偏序」，题面如下： 有 $n$ 个元素，第 $i$ 个元素有 $a_i$ 、$b_i$ 、$c_i$ 三个属性，设 $f(i)$ 表示满足 $a_j \\leq a_i$ 且 $b_j \\leq b_i$ 且 $c_j \\leq c_i$ 的 $j$ 的数量。 对于$d \\in [0, n)$，求$f(i) = d$的数量 我在这里使用上面的题面。（虽然是一样的。 这是一道三维偏序的模版题。很多一些二维的问题经过转化也可以变成三维偏序的类似问题，套用排序+CDQ分治+BIT来解决。 假设所有的$(a,b,c)$互不相同。 第一维：排序 按照$a$的大小排序从新编号$1 -&gt; n$，排序完成后就可以发现对于第$i$个元素，满足条件的元素只存在于$[1,i-1]$中。问题转化为：在$[1,i-1]$中有多少个满足$b_i \\geq b_j$ 且 $c_i \\geq c_j$的元素。 这个问题其实就是二维数点。因为$b$乱序添加，所以不能离线解决，可以用树套树在线解决。 但是呢，我们用$CDQ$，就可以化动态为静态。 第二维：$CDQ$分治 什么是$CDQ$分治呢？在这里就是一个类似归并排序的东西，因为我们要统计的是小于一个数的个数。 事实上在这里，我们对于每一个元素$i$，都将其看成同样内容的一次询问和一次修改。 我们在解决一个询问的区间$[L,R]$时，我们只需要累计这个区间里左半部分的修改对右半部分的查询的贡献就可以了。正确性不太显然，跟树状数组类似，查询时能够涵盖$[1,i-1]区间。 第三维也可以接着用$CDQ$分治，那就真的是归并排序了。就像归并统计逆序对似的，我们在第三维按$c$进行归并排序。只需要多维护一个标记，标记在上一维里面其属于左区间还是右区间，来决定在归并时是否累及答案。 第三维：树状数组 第三维有更方便的做法，也就是用树状数组。 第二维中，我们只需要将左侧的$c$按照$b$在归并中的顺序加入树状数组，然后归并加入右侧元素的时候查询比$c$小的数累积答案，最后得到的就是在左半区间所有b比它小，而且$c$也比它小的数的个数。 相同元素怎么处理？ 在改之前强行累积一下就可以了，把后面的数对于前面的贡献给预先加上去就可以了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;bits/stdc++.h&gt;using namespace std;int n,k;const int MAXN = 210000;namespace fast_io{ //...}using namespace fast_io;namespace BIT{ int sumn[MAXN]; int lowbit(int x){return x &amp; (-x);} void add(int x,int d){ for(;x &lt;= k;x += lowbit(x)) sumn[x] += d; } int query(int x){ int ans = 0; for(;x &gt;= 1;x -= lowbit(x)) ans += sumn[x]; return ans; }}struct Q{ int a,b,c; Q(){} Q(int x,int y,int z):a(x),b(y),c(z){} bool operator &lt; (Q w)const{ if(a != w.a) return a &lt; w.a; if(b != w.b) return b &lt; w.b; else return c &lt; w.c; } bool operator == (Q w)const{ return a == w.a &amp;&amp; b == w.b &amp;&amp; c == w.c; }}q[MAXN];bool judge(int x,int y){ // 用于第二维的归并判断 if(q[x].b!=q[y].b) return q[x].b &lt; q[y].b;//比较两数的c if(q[x].c!=q[y].c) return q[x].c &lt; q[y].c;//比较两数的c else return x &lt; y;//最后比较两数的id}int d[MAXN],ans[MAXN],tt[MAXN];int tmp[MAXN];int tot,l,r;void CDQ(int *t,int num,int depth = 0){ //t[0] -&gt; t[num-1] (num个元素） if(num == 1) return; int mid = num/2; CDQ(t,mid,depth+1),CDQ(t+mid,num-mid,depth+1); // 递归分治问题 for(tot = 0,l = 0,r = mid;l &lt; mid &amp;&amp; r &lt; num;tot++){ //归并过程，统计左半区间对右半区间的贡献 //如果在左区间，就把其当作修改，更新树状数组 //如果在右区间，就把其当作查询，查询树状数组，更新答案 if(judge(t[l],t[r])) BIT::add(q[t[l]].c,1),tmp[tot] = t[l++]; else ans[t[r]] += BIT::query(q[t[r]].c),tmp[tot] = t[r++]; } //剩余的归并 while(l &lt; mid) BIT::add(q[t[l]].c,1),tmp[tot++] = t[l++]; while(r &lt; num) ans[t[r]] += BIT::query(q[t[r]].c),tmp[tot++] = t[r++]; for(int i = 0;i&lt;mid;i++) BIT::add(q[t[i]].c,-1);//清空树状数组 memcpy(t,tmp,sizeof(int) * num);//拷贝数组}void init(){ read(n),read(k); int a,b,c; for(int i = 1;i&lt;=n;i++){ read(a),read(b),read(c); q[i] = Q(a,b,c); }}void solve(){ sort(q+1,q+n+1); for(int i = n;i&gt;=1;--i){ // 累计相同元素的贡献 if(q[i] == q[i+1]) ans[i] = ans[i+1] + 1; tt[i] = i; } CDQ(tt+1,n); for(int i = 1;i&lt;=n;i++) ++d[ans[i]]; for(int i = 0;i&lt;n;i++) print(d[i]),print('\\n');}int main(){ init(); solve(); flush(); return 0;}","link":"/20180606-template-flowers/"},{"title":"「红楼一梦」","text":"最近在做红楼的总结，莫名的也就想来写上两句。 葬花吟-双笙 怎么说呢。红楼梦这本书，越读越令人悲伤。至六十三回以后，便已无心漫卷，至七十八回以后，也就不想再读下去。 要依我来见，六十二回即是红楼女儿绝唱，最后一次齐聚的宴欢，最后一次惬意的愉悦。湘云醉卧石上，竟让我恍惚觉得，一切还在半年以前，还在那个春天。 但世事不复啊。自此以后，大观园中也只剩下了潇湘之悲戚，蘅芜之孤冷。司琴、入画、四儿、芳官、晴雯也一个个离开这如梦似幻的大观园，旧时的欢宴已经不存。贾母月圆夜宴，老人的心里，也知道一切恐也再难挽回，不如「人多些」，好聚好散。 是啊。盛筵难久，万事终有离散的一天。 要说读到五十余回，就已经有万千心绪。不知何时，许多原本只能在贾府边缘的许多小人物，竟也如此多在书中出现。似乎从那时往后，红楼一梦已经不再是儿女的情长，不是单纯的情娱与风月，而是家族的凝着血泪的真史。 女孩，男孩们梦中的生活，怎么可能持久呢。红楼一题早就告诉你，这不过是「真事隐」，不过是「假语存」，不过是「温柔乡里的一场梦幻处」。殊不知，时年从十八回的元宵到六十回的春日，不过是一年轮回。但一年，一年也太长了。所有的事情，都变化了许多。 「女孩子在没出嫁前像是一枚珍珠，而出嫁之后就变成了鱼眼珠一般」。 红楼梦就在小姐们出嫁时戛然而止了。君不见王夫人的爽利，君不见贾母的风华，君不见宝钗小时的淘气。但时间呵，也许不曾带走什么，但却一定带给了他们无法抗拒的改变。 不知道是不是在这个年龄，总会有意无意的把自己往主角的位置里带入，而这样也就更能体会到那种心有悲伤而不能语。 「眼看他起朱楼， 眼看他宴宾客， 眼看他楼塌了。」 就像这样吧。 如果让我来选，我希望时间能够永远停在那一年的春夏。停在并头读西厢。停在葬花绝世吟。停在海棠诗社起。停在那虚幻而又美好，朦胧而又恬美的梦里。 动情真的是，令人沉迷，也令人癫狂。 「假作真时真亦假；无为有处有还无。」「身后有余忘缩手，眼前无路想回头」 情也许就是这样吧。 来源：Pixiv","link":"/20180217-a-dream-of-red-mansions/"},{"title":"「网络流 24 题」圆桌聚餐-网络最大流","text":"假设有来自 $m$ 个不同单位的代表参加一次国际会议。每个单位的代表数分别为 $r_i$ 。会议餐厅共有 $n$ 张餐桌，每张餐桌可容纳 $c_i$ 个代表就餐。 为了使代表们充分交流，希望从同一个单位来的代表不在同一个餐桌就餐。 试设计一个算法，给出满足要求的代表就餐方案。 链接LOJ6004 题解我们可以把这个题转化成网络最大流解决。 每个单位一个点 $1$ ～ $m$ ，每个餐桌一个点 $m+1$ ～ $m+n$ ，源点向单位连边，餐桌向汇点连边，分别是对应容量；每个单位向每个餐桌连边，容量为 $1$ 。 如果最大流等于人数，就有解，否则无解。 输出方案我们考虑对每个单位的点，遍历出边，找出连向餐桌的有流量的边的另一段，对应餐桌的就是单位的每个人去的餐桌。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 500,MAXM = MAXN*MAXN*2;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]},fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]},fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1,q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x]+1;q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int n,m;int sa[MAXN],sb[MAXN];vector&lt;int&gt; ANS[MAXN];void init(){ scanf(\"%d %d\",&amp;m,&amp;n); for(int i = 1;i&lt;=m;i++) scanf(\"%d\",&amp;sb[i]); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;sa[i]);}void solve(){ int S = n+m+1,T = S+1,sum = 0; for(int i = 1;i&lt;=m;i++) addedge(S,i,sb[i]),sum += sb[i]; for(int i = 1;i&lt;=n;i++) addedge(m+i,T,sa[i]); for(int i = 1;i&lt;=m;i++){ for(int j = 1;j&lt;=n;j++){ addedge(i,m+j,1); } } int ans = dinic(S,T); if(ans != sum) return (printf(\"0\\n\"),void(0)); printf(\"1\\n\"); for(int x = 1;x&lt;=m;x++){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(edge[e].flow == 1) printf(\"%d \",v-m); } printf(\"\\n\"); }}int main(){ init(); solve();}","link":"/20190320-loj6004/"},{"title":"「网络流 24 题」搭配飞行员-二分图最大匹配","text":"飞行大队有若干个来自各地的驾驶员，专门驾驶一种型号的飞机，这种飞机每架有两个驾驶员，需一个正驾驶员和一个副驾驶员。由于种种原因，例如相互配合的问题，有些驾驶员不能在同一架飞机上飞行，问如何搭配驾驶员才能使出航的飞机最多。 因为驾驶工作分工严格，两个正驾驶员或两个副驾驶员都不能同机飞行。 链接LOJ6000 题解注意到这就是一个二分图匹配问题。 我们把左侧放置正飞行员（ $1$ - $m$ ），右侧放置副飞行员（ $m+1$ - $n$ ），然后在可以配对的正副飞行员之间连边，二分图最大匹配即为答案。 可以用网络最大流解决这个问题。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 110,MAXM = 110*110;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]};fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]};fir[b] = ecnt++;}int n,m,dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x]+1;q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1 &amp;&amp; edge[e].cap &gt; edge[e].flow){ int f = dfs(v,t,min(edge[e].cap - edge[e].flow,limit)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int w[MAXN][MAXN];void init(){ scanf(\"%d %d\",&amp;n,&amp;m);int a,b; while(scanf(\"%d %d\",&amp;a,&amp;b) == 2) w[a][b] = 1;}void solve(){ // 建图：每个飞行员一个点，正 1-&gt; m ，副 m+1 -&gt; n int S = n+1,T = n+2; for(int i = 1;i&lt;=m;i++) addedge(S,i,1); for(int i = 1;i&lt;=m;i++) for(int j = m+1;j&lt;=n;j++) if(w[i][j] == 1) addedge(i,j,1); for(int j = m+1;j&lt;=n;j++) addedge(j,T,1); printf(\"%d\\n\",dinic(S,T));}int main(){ init(); solve(); return 0;}","link":"/20190319-loj6000/"},{"title":"「网络流 24 题」方格取数-二分图最大独立集","text":"在一个有 $m \\times n$ 个方格的棋盘中，每个方格中有一个正整数。 现要从方格中取数，使任意 $2$ 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。 链接LOJ 6007 题解可以发现，这是一个二分图的带权最大独立集的问题。 对于这个问题，我们可以这么解决： 我们对于二分图的 $S$ 集和 $T$ 集，原点向 $S$ 集合上连边， $T$ 集合的所有点向汇点连边，边流量为点权；所有有约束的边直接连边，权值 $\\inf$ ；答案就是边权和减去最大流的流量。 怎么证明？可以感性证明。 求出来的最小割一定是一个合法方案。我们割掉了哪条边，意味着我们付出了一个代价，也就是我们不选了这个物品。如果我们同时选了在二分图两侧有连边的节点（没有割边），那么我们这个图就不可能被割开（中间是无穷大），这个图就不是一个合法的最小割了。反向应当也是可以证明的。 所以这个算法的正确性是可以保障的。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 10000,MAXM = 50000;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]},fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]},fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x] + 1,q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f,edge[e].flow += f,edge[e^1].flow -= f; if(limit == 0) break; } } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int m,n,val[110][110],sum;int _hash(int x,int y){return (x-1)*n+y;}bool judge(int x,int y){return (x+y)&amp;1;}int main(){ scanf(\"%d %d\",&amp;m,&amp;n); for(int i = 1;i&lt;=m;i++) for(int j = 1;j&lt;=n;j++) scanf(\"%d\",&amp;val[i][j]),sum += val[i][j]; int S = n*m+1,T = S + 1; for(int i = 1;i&lt;=m;i++){ for(int j = 1;j&lt;=n;j++){ if(judge(i,j)) addedge(S,_hash(i,j),val[i][j]); else addedge(_hash(i,j),T,val[i][j]); if(!judge(i,j)){ if(i &gt; 1) addedge(_hash(i-1,j),_hash(i,j),inf); if(i &lt; m) addedge(_hash(i+1,j),_hash(i,j),inf); if(j &gt; 1) addedge(_hash(i,j-1),_hash(i,j),inf); if(j &lt; n) addedge(_hash(i,j+1),_hash(i,j),inf); } } } printf(\"%d\\n\",sum-dinic(S,T)); return 0;}","link":"/20190324-loj6007/"},{"title":"「网络流 24 题」太空飞行计划-最大权闭合子图","text":"W 教授正在为国家航天中心计划一系列的太空飞行。每次太空飞行可进行一系列商业性实验而获取利润。现已确定了一个可供选择的实验集合 $E = \\{ E_1, E_2, \\cdots, E_m \\}$ ，和进行这些实验需要使用的全部仪器的集合 $I = \\{ I_1, I_2, \\cdots, I_n \\}$ 。实验 $E_j$ 需要用到的仪器是 $I$ 的子集 $R_j \\subseteq I$ 。配置仪器 $I_k$ 的费用为 $c_k$ 美元。实验 $E_j$ 的赞助商已同意为该实验结果支付 $p_j$ 美元。W 教授的任务是找出一个有效算法，确定在一次太空飞行中要进行哪些实验并因此而配置哪些仪器才能使太空飞行的净收益最大。这里净收益是指进行实验所获得的全部收入与配置仪器的全部费用的差额。 对于给定的实验和仪器配置情况，编程找出净收益最大的试验计划。 链接LOJ6001 题解这种问题事实上是一个最大权闭合子图的问题。 我们把一个实验抽象成一个点（编号 $1$ - $m$ ），一个仪器也抽象成一个点（编号 $m+1$ - $m+n$），再从每个实验往其需要的器材连一条有向边。 这个时候我们需要求出的是一个最大权的闭合子图，节点的权值可正可负（实验正，仪器负）。 这个时候我们怎么做呢？我们把 $S$ 向所有正权值的点连权值容量的边，所有原图中的边都连$\\inf$ ，所有负权值的点都向 $T$ 连一个权值的绝对值容量的边。 这个时候所有正权值的和减去 $S$ 和 $T$ 的最小割就是答案。如何证明？我们考虑每次割都是一个代价，也就是选了负权和不选正权，都会带来一个代价，然后我们想让这个代价最小，所以就是最小割。 这个时候可以发现，和 $S$ 联通（能够通过非满流边到达）的都是要选的实验和仪器， dfs 一次即可完成。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 110,MAXM = MAXN*MAXN;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]};fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]};fir[b] = ecnt++;}int n,m, dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x] + 1;q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(x == t || limit == 0) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x]+1 &amp;&amp; edge[e].cap &gt; edge[e].flow){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}vector&lt;int&gt; node[MAXN];int val[MAXN],cost[MAXN];vector&lt;int&gt; ans1,ans2;void dfs1(int x){ if(1 &lt;= x &amp;&amp; x &lt;= m) ans1.push_back(x); if(m+1 &lt;= x &amp;&amp; x &lt;= m+n) ans2.push_back(x-m); int t = 0;swap(t,dis[x]); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == t+1) dfs1(v); }}void init(){ scanf(\"%d %d\",&amp;m,&amp;n); // 1 -&gt; m 实验，m+1 -&gt; m+n \b物品 static char s[MAXN*10]; for(int i = 1;i&lt;=m;i++){ scanf(\"%d\",&amp;val[i]); int t; while(scanf(\"%[\\n\\r]\",s)!=1){ scanf(\"%d\",&amp;t); node[i].push_back(t); } } for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;cost[i]);}void solve(){ int S = n+m+1,T = S+1,sum = 0; for(int i = 1;i&lt;=m;i++) addedge(S,i,val[i]),sum += val[i]; for(int i = 1;i&lt;=m;i++) for(auto x : node[i]) addedge(i,m+x,inf); for(int i = 1;i&lt;=n;i++) addedge(m+i,T,cost[i]); int ans = sum - dinic(S,T); bfs(S,T); dfs1(S); sort(ans1.begin(),ans1.end()),sort(ans2.begin(),ans2.end()); for(unsigned i = 0;i&lt;ans1.size();i++){ printf(\"%d\",ans1[i]);putchar(i != ans1.size()-1?' ':'\\n'); } for(unsigned i = 0;i&lt;ans2.size();i++){ printf(\"%d\",ans2[i]);putchar(i != ans2.size()-1?' ':'\\n'); } printf(\"%d\\n\",ans);}int main(){ init(); solve();}","link":"/20190319-loj6001/"},{"title":"「网络流 24 题」最小路径覆盖-二分图最大匹配","text":"给定有向图 $G = (V, E)$。设 $P$ 是 $G$ 的一个简单路（顶点不相交）的集合。如果 $V$ 中每个顶点恰好在 $P$ 的一条路上，则称 $P$ 是 $G$ 的一个路径覆盖。 $P$ 中路径可以从 $V$ 的任何一个顶点开始，长度也是任意的，特别地，可以为 $0$ 。 $G$ 的最小路径覆盖是 $G$ 的所含路径条数最少的路径覆盖。 设计一个有效算法求一个有向无环图 $G$ 的最小路径覆盖。 链接LOJ6002 题解这个题可以转化成二分图匹配来做。 因为顶点不相交，所以每个顶点至多有一个入度 &amp; 出度，所以如果两个边能接上，我们的答案就可以减掉一个 1 。 什么情况下答案可以减掉 1 ？就是我们能通过一条边连起来两个点的时候。然后放到原来的图上，连起来自然就是答案。那么这样的话，我们就可以构建一个二分图，把每个点拆成两个，原图上的边从左侧出，右侧入即可。 输出方案的话，就遍历每条边（就是二分图里面满流的边），记录一下每个点的往后走和往前走的节点是什么，然后找到所有链头一路往后跳就可以了。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 410,MAXM = MAXN*MAXN*2;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]};fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]};fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x] + 1,q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int n,m,S,T;int pre[MAXN],nxt[MAXN];void print_chain(){ for(int x = 1;x&lt;=n;x++){ for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!(n &lt;= v &amp;&amp; v &lt;= 2*n)) continue; if(edge[e].flow == 1){ pre[v-n] = x,nxt[x] = v-n; } } } for(int x = 1;x&lt;=n;x++){ if(pre[x] == 0){// 链子头 for(int t = x;t;t = nxt[t]) printf(\"%d \",t); printf(\"\\n\"); } }}void init(){ scanf(\"%d %d\",&amp;n,&amp;m);S = 2*n+1,T = S + 1; for(int i = 1;i&lt;=m;i++){ int a,b; scanf(\"%d %d\",&amp;a,&amp;b); addedge(a,b+n,1); } for(int i = 1;i&lt;=n;i++) addedge(S,i,1),addedge(i+n,T,1);}void solve(){ int ans = n - dinic(S,T); print_chain(); printf(\"%d\\n\",ans);}int main(){ init(),solve(); return 0;}","link":"/20190319-loj6002/"},{"title":"「网络流 24 题」试题库-网络最大流","text":"假设一个试题库中有 $n$ 道试题。每道试题都标明了所属类别。同一道题可能有多个类别属性。现要从题库中抽取 $m$ 道题组成试卷。并要求试卷包含指定类型的试题。试设计一个满足要求的组卷算法。 链接LOJ 6006 题解对每道题建一个点，对每个类型建一个点，每道题向它能成为的类型连边，原点向题连边，类型向汇点连边，跑最大流即可。 方案就看一下哪些边是满流输出即可。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 1100,MAXM = 1100*25*2;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]},fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]},fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1,q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x] + 1,q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; if(limit == 0) break; } } } return sumf;}int dinic(int s,int t){ int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int k,n,m;int main(){ scanf(\"%d %d\",&amp;k,&amp;n); int S = k + n + 1,T = S + 1; for(int i = 1;i&lt;=k;i++){ int tmp;scanf(\"%d\",&amp;tmp); addedge(S,i,tmp),m += tmp; } for(int i = 1;i&lt;=n;i++){ int p,tmp; scanf(\"%d\",&amp;p); addedge(i+k,T,1); for(int x = 1;x &lt;= p;x++){ scanf(\"%d\",&amp;tmp); addedge(tmp,i+k,1); } } int ans = dinic(S,T); if(ans != m) printf(\"No Solution!\\n\"); else{ for(int i = 1;i&lt;=k;i++){ printf(\"%d: \",i); for(int e = fir[i];e;e = edge[e].nex){int v = edge[e].to; if(k+1&lt;=v &amp;&amp; v&lt;=k+n &amp;&amp; edge[e].flow == 1) printf(\"%d \",v-k); } printf(\"\\n\"); } } return 0;}","link":"/20190324-loj6006/"},{"title":"「网络流 24 题」最长递增子序列-dp+网络最大流","text":"给定正整数序列 $x_1 \\sim x_n$ ，以下递增子序列均为非严格递增。 计算其最长递增子序列的长度 $s$ 。 计算从给定的序列中最多可取出多少个长度为 $s$ 的递增子序列。 如果允许在取出的序列中多次使用 $x_1$ 和 $x_n$ ，则从给定序列中最多可取出多少个长度为 $s$ 的递增子序列。 链接LOJ6005 题解这个问题需要用dp和网络流搭配解决。 第一问：直接 $O(n^2)$ dp 即可。 第二问：在第一问的基础上，我们考虑网络流。 我们把每个点拆成两个点： $(i,0)$ 和 $(i,1)$ $S$ 向所有 $dp[i] = 1$ 的 $(i,0)$ 连边 所有 $dp[i] = s$ 的点向 T 连边 对于每个 $j$，向所有满足： $j &lt; i \\le n,x[j] \\le x[i],dp[j] + 1 = dp[i]$ ，连一条 $(i,1)$ 向 $(j,0)$ 的边 最后每个 $(i,0)$ 向 $(i,1)$ 连边。 然后 dinic 大概就可以了。 第三问：把四个边增加到正无穷：$(1,0) \\rightarrow (1,1)$ , $(n,0) \\rightarrow (n,1)$ , $S \\rightarrow (1,0)$ , $(n,1) \\rightarrow T$（如果有） 。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 1100,MAXM = MAXN*MAXN;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]};fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]};fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1,q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x]+1;q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit =inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x]+1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; if(limit == 0) break; } } } return sumf;}int dinic(int s,int t){ static int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int n;int x[MAXN],dp[MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++) scanf(\"%d\",&amp;x[i]);}void solve(){ int ans = 0,S = n+1,T = 2*n+3;// 0 -&gt; n &amp;&amp; n+1 -&gt; 2*n+1 for(int i = 1;i&lt;=n;i++) addedge(i,i+n+1,1); for(int i = 1;i&lt;=n;i++){ for(int j = 0;j&lt;i;j++)if(x[j] &lt;= x[i]) dp[i] = max(dp[i],dp[j]+1); for(int j = 0;j&lt;i;j++)if(x[j] &lt;= x[i] &amp;&amp; dp[j] + 1 == dp[i]) addedge(j+n+1,i,1); ans = max(ans,dp[i]); } for(int i = 1;i&lt;=n;i++) if(dp[i] == ans) addedge(i+n+1,T,1); printf(\"%d\\n\",ans); printf(\"%d\\n\",dinic(S,T)); addedge(1,1+n+1,n*n-1),addedge(n,n+n+1,n*n-1); addedge(S,1,n*n-1); if(dp[n] == ans) addedge(n+n+1,T,n*n-1); printf(\"%d\\n\",dinic(S,T));}int main(){ init(),solve(); return 0;}","link":"/20190321-loj6005/"},{"title":"「随笔」无题","text":"随笔昨天回家的路上，在海淀黄庄路口的西北角上，有一位街头歌手在弹唱着吉他。 我站在路边等着红灯，离他的音箱很近。以我微薄的音乐鉴赏能力来看，他唱的大约是那种最近被称为“民谣”的类型。声音很大，让我不得不摘下耳机，去尝试听一听他的弹唱。歌词是什么，我都已经忘记。 那天晚上风很大，呼呼啦啦的吹着槐树的叶子。他只穿着一个短袖，却丝毫看不出来他有感觉到冷风的呼啸。一个吉他盒子摆在他面前，上面写着四个字“原创音乐”，还有零零散散的一些零钱。 一切看起来都再普通不过了。 但这里是海淀黄庄。这里的街头永远不会空旷，即使到了九点多也仍然人流如织。有刚刚放学的晚自习的学生，有手牵着手的情侣从新中关走向地铁，或只是在此处经过。尽管夜色早已覆盖了天穹，仍然有行色匆匆的人正在走向各自的目的地。 他今天晚上将会怎么度过？他晚上住在哪里呢？他过的是什么样子的生活呢？我不知道。也许他是一个有钱人或者家境殷实，只是想要充实自己在这里唱歌；也许他是一个落魄的歌者，每日沉迷于音乐之中，晚上到这里来挣得生存的口粮。 可这些又与我何干呢？ 吉他的和弦和低沉的人声经过音响的放大盖住了所有的一切。这是比用耳机听歌更加震颤人心的：明明整个世界都在你身旁，但是因为有音乐，那所有的一切都是那么的空虚，可以看见却无法触摸。他似乎也跟我一样沉浸在音乐当中，闭着眼睛，身体随着右手的上下舞动而动。 很快就绿灯了。我走向马路对面，身后吉他乐声渐渐变小，最后变成轻轻的呢喃。公交车的引擎的轰鸣，小车的轮胎划过空气的声音，他们纷至沓来的出现，涌入我的身边。身边的一切事物，草木、车辆、人群都如从来没有过的真实一般。抬头望去，点点微微的星光无力的在闪烁都市灿烂的灯光之上。 我真不知道，我是从虚幻走进真实，还是从真实走进了虚幻。 「我仍然在 无人问津的 阴雨霉湿之地 」 「和着雨音 唱着没有听众的歌曲」 「人潮仍是 漫无目的地 向目的地散去」 「忙碌着 无为着 继续」","link":"/20190329-no-title/"},{"title":"「网络流 24 题」魔术球-二分图最大匹配","text":"假设有 $n$ 根柱子，现要按下述规则在这 $n$ 根柱子中依次放入编号为 $1, 2, 3, 4, \\cdots$ 的球。 每次只能在某根柱子的最上面放球。 在同一根柱子中，任何 $2$ 个相邻球的编号之和为完全平方数。 试设计一个算法，计算出在 $n$ 根柱子上最多能放多少个球。 链接LOJ6003 题解其实这个本质上类似一个链覆盖的问题。 我们每次考虑加入一个球，然后在二分图上连上可行的边（ $i+j$ 是平方数而且 $i &lt; j$），每次直接接着跑 dinic ，直到不满足即可。 输出方案就是枚举边，找链起点。同上一道题。 其实应该二分，复杂度更好保证，不过这个比较好写（ 这题也可以贪心，懒得写了，题解粘贴过来： 贪心就是从小到大枚举编号，之后在已经有球的柱子里随便找一个能放的放。如果找不到，就新开一个柱子。但它是正确的吗？为什么？ 可以证明。用数学归纳法证明贪心法每次的选择是唯一的(即，只能把球放到0或1个已经放了球的柱子上)，且答案为(一个简单式子，暂不剧透)。用dilworth定理可以证明这个是最优的(hint:柱子的顶端构成一个反链)。 这个算法work是因为“加起来是平方数”的性质很好。改成其他条件就做不了了。 链接 ： UOJ BLOG 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;bits/stdc++.h&gt;#include &lt;unistd.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 3200,MAXM = MAXN*100,N = MAXN/2;struct Edge{ int from,to; int cap,flow; int nex;}edge[MAXM];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c){ edge[ecnt] = (Edge){a,b,c,0,fir[a]};fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,fir[b]};fir[b] = ecnt++;}int dis[MAXN];bool bfs(int s,int t){ static queue&lt;int&gt; q; memset(dis,0,sizeof(dis));while(!q.empty()) q.pop(); dis[s] = 1;q.push(s); while(!q.empty()){ int x = q.front();q.pop(); for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!dis[v] &amp;&amp; edge[e].cap &gt; edge[e].flow){ dis[v] = dis[x] + 1;q.push(v); } } } return dis[t];}int dfs(int x,int t,int limit = inf){ if(limit == 0 || x == t) return limit; int sumf = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(dis[v] == dis[x] + 1){ int f = dfs(v,t,min(limit,edge[e].cap - edge[e].flow)); if(f){ sumf += f,limit -= f; edge[e].flow += f,edge[e^1].flow -= f; } if(limit == 0) break; } } return sumf;}int dinic(int s,int t){ static int ans = 0; while(bfs(s,t)) ans += dfs(s,t); return ans;}int n,is_squ[MAXN];void init(){ scanf(\"%d\",&amp;n);for(int i = 1;i*i &lt; MAXN;i++) is_squ[i*i] = 1;}int solve(){ int S = MAXN-1,T = MAXN-2; for(int i = 1;i&lt;=MAXN;i++){ addedge(S,i,1),addedge(i+N,T,1); for(int j = 1;j&lt;i;j++){ if(is_squ[i+j]) addedge(j,i+N,1); } int ans = i - dinic(S,T); if(ans &gt; n) return i-1; }}void output(int x){ int S = MAXN-1,T = MAXN-2; memset(fir,0,sizeof(fir)),ecnt = 2; for(int i = 1;i&lt;=x;i++){ addedge(S,i,1),addedge(i+N,T,1); for(int j = i+1;j&lt;=x;j++){ if(is_squ[i+j]) addedge(i,j+N,1); } } dinic(S,T); static int pre[MAXN],nxt[MAXN]; for(int e = 2;e&lt;=ecnt;e+=2){ int a = edge[e].from,b = edge[e].to,f = edge[e].flow; if(f == 1 &amp;&amp; 1 &lt;= a &amp;&amp; a &lt;= x &amp;&amp; N+1 &lt;= b &amp;&amp; b &lt;= MAXN+x){ pre[b-N] = a,nxt[a] = b-N; } } printf(\"%d\\n\",x); for(int i = 1;i&lt;=x;i++){ if(pre[i] == 0){ for(int t = i;t;t = nxt[t]) printf(\"%d \",t); printf(\"\\n\"); } }}int main(){ init(),output(solve()); return 0;}","link":"/20190320-loj6003/"},{"title":"「错过」","text":"你以为你见证了整个故事，其实你只知道他们的名字，甚至你连他们的名字都不一定知道。 错过老人坐在床上，翻着大箱子里那些珍藏的往事。 老人曾经是一名军人，而这也让他屋子里面的东西整洁的就像无人居住似的。而他的这个箱子，自然也就整整齐齐的放置着对他最为重要的那些东西。 他轻轻拿布擦掉箱子上面覆盖的灰尘，用手抚了下红绿色的军徽。箱子慢慢吱吱呀呀的打开了。 最上面的是一张很老的照片。他看着照片上的父子，细细回想了半天。那是他14岁的时候。学校组织他们到附近的军用机场参观，而这张照片，就是以那一架他永远铭记的飞机为背景拍成的。他是那么兴奋，看着飞机的起降，飞行员的帅气，让他小小的内心充满了憧憬，他甚至还偷偷的摸了一下那架金属的飞机，而至今他仍然记得金属铆钉突出的质感和他心里的激动。那个时候，他经常喜欢到机场边的地方去看着，只是看着，如果能有飞机的起降，这能让他激动整整一天。他在心里就想着：我有一天，也要去开飞机！甚至，飞到比飞机更高的地方！ 厨房里老伴做饭的声音把他一下子拉回现实。他笑笑。他已经不是少年了，那个时候的年少轻狂恐怕也早就丢掉了吧。 他把那张照片小心翼翼地放到床上，再看向箱子里面的下一样东西。这是一张证书，他虽然已经认不全上面的俄文，但是记忆仍然十分鲜活。那是他30岁的时候。他高中毕业之后，去了航校，成为了飞行员。他喜欢开着飞机，看着下面的大地和无比渺小的农田、城镇。他有的时候也会向远方望，看着那天地相接处深邃的蓝色，想要看到天空上面，然而他就算极尽目力，也很难再看出些什么。当他听说要招航天员的时候，他毫不犹豫的答应了。这是他一直以来的梦想啊。 一年以后，他来到了俄罗斯的加加林太空中心。贫弱的中国没有办法自己培养航天员，只能将航天员送到已经有三十多年航天经验的俄罗斯去接受培训。培训是艰苦的，他们不仅要与时间作战，更要不断挑战自己的身体和精神的极限。他到现在都忘不了在零下五十度的冰天雪地里的野外求生训练，也永远忘不了在接近一百度高温下对生理的折磨。最令人绝望的是什么来着？他皱了皱眉，那个时代的记忆不断涌入心里。那个小屋子，至今他还能清楚的记得里面的每一个陈设，其实也不难，因为里面就像一个坟墓似的简洁。而他就在那个坟墓里，不眠不休的呆了三天三夜，二十四小时不间断地完成指令的操作。他至今也不能忘却那个屋子的哪怕一个纹理。 最终，他拿到了联盟号飞船的指令长证书。他又一次激动的像个孩子，就像他14岁的时候，第一次见到飞机似的那种激动。他还清楚的记得，他拿到这个证书之后说的第一句话就是对加加林基地的训练长官说的：“我现在拿的是‘联盟’号飞船指令长的证书，回去以后再拿中国自己的证书，然后驾驶着我们中国的宇宙飞船飞向太空，与你们的和平号空间站对接，行吗？” 都过去了啊。那份证书上的金光灿灿的字母如今已经不再那么光鲜亮丽，知道这份证书的人也越来越少了。他把证书轻轻的塞回那镶嵌着金丝的精致的布袋里。 又是一张照片。这张照片大约是很近的时候了。对，神舟五号。他就在这幅照片的左侧，而照片中央就是中国第一个进入太空的人——杨利伟。那是他35岁的时候。他回国了，带着一张金光灿灿的证书，和满满的重负。中国的载人航天条件正在快速具备，而航天员的培养则是重中之重。为了国家，他必须投入所有的精力，去训练新的航天员。 “团结，自律，勤奋，奉献。” 灰白的墙上砖红色的八个大字，一直提醒着他他的职责所在。他现在是一名航天员训练师，兼预备航天员。而他现在的任务，就是为国家训练出尽量多的合格的航天员，让他们每一个都能够上天。一天天的日子过去了。神舟飞船一艘一艘的上天，而那最后进入太空的日子也越来越近了。航天员从选拔到最后上天淘汰的数量大约是50%。然而在中国，这一数字是0%。 这意味着这十二名航天员，加上两位教员，每个人都能够进入太空。但，并不是每个人都有机会进入太空的。 神舟五号，他落选了。他安慰自己：还有很多飞船，自己还不算老，还有机会的。神舟五号返回的时候，他作为教员，在现场目睹着飞船的着陆。他是为数不多第一个看到那名之后被誉为“民族英雄”的航天员出舱的人。他作为教员，当然是首先与航天员合影的一员。他拍着肩膀对杨利伟说：“好样的。”他和杨利伟，即是师生，又是朋友，还是邻居，甚至还是竞争对手。那是一个足以标榜史册的时候。中国这个国家，第一次拥有了载人进入太空的能力，甚至连总理都亲自到场迎接航天员的归来。 全部十四名第一批航天员 转眼几年又过去了又是神舟七号发射，他仍然在只能在北京的航天城，看着飞船成功发射，看着出舱行走，看着中国国旗的挥动，看着发射大厅里面人们的欢呼。他已经五十岁了。在这几年，他落选了神舟六号，只成为了备份航天员，他培养的学生载着火箭升空，而他只能在酒泉，第一次如此近的观看火箭的发射。当长征二号F火箭缓缓升空时，他感觉自己的心似乎也有一部分，变空了一点点。 「遥看神六巡天走，梦想神七伴我行」 神舟六号任务出征仪式，后排左二 发射完成之后，时间已近午夜。他拖起疲惫的身躯，一步一步的走回他的家。这意味一个航天员很难再有希望进入太空了。他听着风吹过他的耳畔，缓缓前行。年轻时候所有的记忆，壮志、惊喜、兴奋、痛苦、失落，所有这些都一股脑的在他的脑海间盘桓。他抬头望向星空。星空仍然是那么的无垠，那么的微茫。那里是他的梦啊，是他唯一的梦啊。他再也忍不住眼眶中的泪水，只能蹲在路边，凝视星空璀璨，久久无言。 神八，神九，神十，神十一。飞船一艘艘的上天，而他，再也找不到上天的机会了。 2016年，他从航天员大队退休。截至2018年，第一批航天员中14人共有8人已进入太空；第二批航天员中7人共3人已进入太空。他们大部分都受到过他的指导。 饭香从隔壁传了过来。饭菜已经端上了桌。他从回忆里面抽出思绪，慢慢地将手里的照片、书信、证书再次按照时间顺序整齐的放回那个军绿色的箱子。他走出房间，和儿子一起吃饭，和老伴侃侃最近的大事。 虽然别人都说老人错过了不少机会，但在老人心里，他从来就没有错过过什么。 From:Wikimedia 根据真实故事改编。该题目为鄙校期末语文作文题目之一。","link":"/20180708-cuoguo/"},{"title":"「随笔」月圆","text":"2018年10月25日，农历戊戌年九月十七。 前几日的月，似乎格外的圆。 最近几乎每天晚上都在操场上跑步，由西向东的直道上，抬头就是一轮明月。亮晃晃的月晕照亮了天际的薄云，也不知道是明月的缘故，还是灯光的污染，城市的夜空竟显得如此的亮。 要说起为什么要跑步，其实也可以说是年轻人的一时冲动。同学在班里忽悠着大家一起去跑步，何乐而不为呢？但其实更多的大约还是看中了跑步的一些优点，但仔细想来，也不能完全算是优点。 跑步其实是一项非常无趣的运动。你所要做的全部就是不断的推动你的双腿，在操场上一圈一圈又一圈的跑着，脑子里不需要想什么，甚至可以空空如也，沉浸在空荡的操场，胶红的跑道之中。平时的那些琐事、不快、理想和现实，仿佛都在这种看似励志的跑步中离我而去了。 其实吧，时间难再来。曾记得初三的时候，接连的考试让我频频想到我的小学或者初中低年级时候的生活。那个时候恐怕也不会想到，到了高二以后，却反而却会频频想起初三的生活吧。 也就是前两天，语文考试。突然就感觉这界面似曾相识。连忙观察四周，记录下最多可能的细节。教室里很安静，笔划过纸面的刷刷声仍然在背景声音中游荡，同桌已经做完了卷子，放下了笔；而老师正在讲台上数着卷子，奇妙的卷子摩擦的声音也间歇的发出。 当你的生活中所做的事情可能带来的代价不再以一节课、一个工作日、一周、一个学期能够衡量时，当你的生活中的压力不再能用跑几圈步、和人谈谈心能够解决的时候，人恐怕才真正长大。 到现在，和同学在操场上放着奇怪的歌曲，不管别人的眼神和“卧槽”，一圈圈的在操场上跑步的情景还是能记得明明白白，那种双腿酸痛但是睡的沉沉的满足也难以忘却。 只是如此的圆月，恐怕是再难见到了。","link":"/20181026-moon/"},{"title":"【置顶】关于这个博客的一切","text":"记录时光与梦想 这个博客是我在2017年12月的时候建立的啦。那个时候我还没学OI多久，看到Menci的博客，觉得很酷，于是自己也搞了一个。 时光飞逝，可不管你在脑海里是否能将那一切牢记。青春的美好，OI的征程，恐怕都需要一本札记来慢慢的仔细谱写，让它们在心底成为永恒的最美丽的回忆。 一切都在逝去，一切也都在发生；如果没有这记录，所有的美好在几年之后，恐怕就只会在恍惚的梦中留存。 我已经忘记了许多事情，我记不得过去在哪里玩耍，读过了什么样的书。但现在，我想要抓住这纷繁流年，好好品味，好好怀念。 这恐怕就是我创建这博客的究极之缘由吧。 To the time to life, rather than to life in time.——给时光以生命，而不是给生命以时光。 更多关于我的事情可以去About里面看啦。 我仍然在 无人问津的阴雨霉湿之地 和着雨音 唱着没有听众的歌曲 人潮仍是 漫无目的地向目的地散去 忙碌着 无为着 继续","link":"/23330101-about-blog/"},{"title":"冬令营旅游记","text":"今年冬天，去了趟北京冬令营旅游。其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。 Day1冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。 下午是胡伟栋老师的课，讲的是深搜。“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。 Day2第一次考试。看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。 下午开始讲题。首先看了看程序，40／400。被std十倍杀。不过也很正常。这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。 Day3第二天考试。 还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。 考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。 下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫…… 回家居然水过了Treap，值得庆贺。 Day4第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。 下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。 回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。 Day5最后一天考试。 一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。 下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。 啧啧 总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。 和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。 省一看起来不像是难事，可省队，实在是遥不可及。 如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。 我永远都不会认输的。 明年，再来。","link":"/20180125-bjwc2018-trip/"},{"title":"可持久化线段树学习笔记","text":"可持久化线段树，是一种可以进行可持久化操作的线段树，具有优越的时间复杂度。 线段树相信看这篇文章的人很熟悉什么是线段树了，就不在这里胡扯了。 如上就是线段树的基本结构。 可持久化？简单来说，可持久化就是能够在修改的时候，保留下原来的数据结构的样子的一种数据结构。比如说，对于上图，如果线段树维护的是区间和，这个时候我们要修改某个数的大小，就会使一条链上的信息全部改变，并且我们失去了这次修改之前的线段树的信息。 那么对于线段树来说，怎么样才能做到可持久化呢？ 可持久化的思路假设这个线段树维护的是区间和。 一种非常简单的思路：为了维护修改之前的信息，每次修改我重新建一棵线段树不就好了？？？但是如果仔细想一想，建一棵线段树的时间复杂度是O(n)，空间复杂度O(n)，如果有n次修改，最后的时间复杂度O(n^2)，空间复杂度也是O(n^2)，GG。 观察上图，显然可以发现单点修改会改变的只会有这一条链上的节点的值，所以我们就会自然想到，能不能只维护这一条链呢？ 但是单独维护一条链很傻，而且很多线段树上的操作进行起来也很复杂。所以可以把这条链嵌到线段树上，比如我们修改位置4，那么修改出来的链就是红色节点，而我们也需要把它其他的地方连到原来的线段树上。 这个时候，我们就发现只要我们掌握着根结点，我们就可以当所有其他线段树都是不存在的一样，做普通线段树的查询操作。 主要的可持久化操作的思想大概如上。总结来说的话，就是只更改需要更改的部分，其他的不管它，保持树形结构完整性就可以了。其他的可持久化数据结构如可持久化Trie树和平衡树，思想都是类似的。 分析一下的话，上例子里总共有m次修改的话，每次修改创建出的新节点都是一条完整的长度为O(\\log n)的链，每次修改或者查询，时间复杂度都是O(\\log{n})。最后空间复杂度是O(n \\log{n})，时间复杂度也是O(n \\log{n})。 具体实现具体来说，可持久化数据结构一般推荐用数组模拟指针来实现。首先是因为数组的代码写起来很短很快，其次还有就是指针的大小目前一般是8字节，比一个整数大了一倍，在一些题目中可能被卡内存。 对于可持久化线段树来说，实现跟普通线段树有微小的一点不同。（废话 首先，在节点的数目上，我们需要开n\\log n数目的节点，这个很容易忘记。我们还需要显性的记录每个节点的左儿子和右儿子，和一些其他你要维护的信息。 在修改操作上，有一些不同。 具体来说如下： 复制原来节点，成为一个新的当前节点 往需要更改的位置（左／右儿子）更新 这里的修改中的原来节点就是原来同一个位置的节点，而需要新建一个节点，所以这个地方当前节点需要传一个引用，具体到后面可以看一看代码，理解的会更好。 查询操作就一模一样啦。 应用非常强大。 可持久化数组、并查集可持久化数组可以说是最简单的应用了。就是一个模板，套上就好。 主席树静态第k大问题动态第k大问题树上第k大、维护值域其他奇怪应用例题TBD。","link":"/20180524-prsegtree-note/"},{"title":"「天命 人事」","text":"很多事，虽说「人定胜天」，但天命毕竟不可违。 很短的一篇随笔，记念逝去之斯人。 说起来，我不是一个特别容易感伤的人。一直以来，我一直不能厘清生离与死别，天涯海角的离人感情之间的丝毫片缕关系。 其实也不奇怪。如果这些都那么轻易都能得到一个结论的话，哪里会有古今中外的诗人歌者世世代代在歌咏，寻求这些看起来很明显的问题呢？ 我想，我对于生与死的观念，大约是在我的小学时光里形成的。一个人只有有了闲情逸致，恐怕才会去寻思这些虚无缥缈的东西。一个小孩子躺在黑漆漆空荡荡的屋子里，心里都会想些什么呢？大多我都不记得了。 也许是小时的时光太过悠闲，以至于上初中后到现在前前后后也 4 年多了，忙来忙去之间，也没有什么时间再去思考生死这样的问题。以至于现在，竟然需要再深夜思考这样的问题而毫无回忆。 而且仔细想来，小时在身边亲近的人似乎也没有什么大的变故，一切都那么美好，就像童话里说的那样「他们从此过上了幸福的生活」，仿佛没有人会变老，一切都可以维持在小学三四年级，写完作业之后牵着一双大大的手，一起走在斑驳的白石板砖上，时时刻刻想要挣脱那一双大手的管辖，到自己的天地里去驰骋。 有许多熟识的人、和那些不怎么熟悉的人；有一些人让你记忆犹新，更多人则是已经几近忘却；而无论这些人是谁、在哪、在做什么，他们都在渐渐离我而去了。 人不能一直活在童话里，童话里的小男孩或许也应该长大了。","link":"/20181021-r.i.p./"},{"title":"左偏树学习笔记","text":"左偏树是一种以二叉树为基础的数据结构，可以用来实现可以在$O(\\log n)$时间内合并的堆。 定义左偏树是一颗二叉树, 每个节点具有四个属性: 左儿子 ($lc$), 右儿子($rc$), 键值 ($key$), 距离 ($dis$)。 左偏树要求满足左右儿子的键值不小于该节点的键值 (小根堆时)。 节点 $i$ 的距离指的是从节点 $i$ 往下走, 最短的能走到外节点的路径长度。 这里的外节点指的是两个儿子不是均存在的节点。 性质性质1可以发现一个节点 $i$ 的距离等于以节点 $i$ 为根的子树的最右路径的长度。 证明：递归证明即可。 性质2如果一颗左偏树有 $n$ 个节点, 则该左偏树的距离不会超过$⌊log(n + 1)⌋ − 1$。 证明：因为上面的$dis$层都需要填满，所以距离必须要小于$\\log n$。 实现合并这个操作是左偏树的核心。 我们用$u$和$v$代表我们需要合并的两颗左偏树的根节点。 令$u.key &lt; v.key$，那么我们先合并$u.rc$和$v$，将其作为$u$的右节点，然后检查$u.lc.dis$和$u.rc.dis$的大小关系并检查是否满足左偏树性质，然后再更新根结点的$u.dis = u.rc.dis + 1$。 复杂度的话，每次合并的时候至少有一棵子树的$dis$消减$1$，总共的$dis$是在$\\log n$级别的，所以复杂度也就是$O(\\log n)$。 插入合并一个节点和一颗左偏树即可。 最值直接取根节点的值即可。 删除最值合并根节点的左右子树即可。 复杂度一些复杂度： 建堆：$O(n)$ 插入一个节点：$O(\\log n)$ 查询最值：$O(1)$ 删除最值：$O(\\log n)$ 删除任意节点：最坏$O(n)$，一般$O(\\log n)$(存疑) 合并两个堆：$O(\\log n)$ 一些事情： 左偏树的深度是可以到$O(n)$的，所以我们查询一个点所属的堆应该要再用一个并查集维护每个节点对应的最值点（根节点），复杂度才是正确的。（下面的还没有改） 代码以Luogu P3377【模板】左偏树（可并堆）为例。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// luogu-judger-enable-o2#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io { // ...}using namespace fast_io;const int MAXN = 500000;namespace Merge_Heap{int v[MAXN],l[MAXN],r[MAXN],d[MAXN],f[MAXN];bool vis[MAXN];int __merge(int x,int y){ if(x == y) return x; if(!x || !y) return x+y; if(v[x] &gt; v[y] || (v[x] == v[y] &amp;&amp; x &gt; y)) swap(x,y); r[x] = __merge(r[x],y); f[r[x]] = x;// 维护父亲 if(d[l[x]] &lt; d[r[x]]) swap(l[x],r[x]); d[x] = d[r[x]] + 1; return x;}int __pop(int x){ f[l[x]] = f[r[x]] = 0; int t = __merge(l[x],r[x]); l[x] = r[x] = 0; return t;}int __find(int x){ while(f[x]) x = f[x]; return x;}void init(int n,int *num){ for(int i = 1;i&lt;=n;i++) v[i] = num[i];}void merge(int x,int y){ if(vis[x]||vis[y]) return; __merge(__find(x),__find(y));}int pop(int x){ if(vis[x]) return -1; int w = __find(x); vis[w] = 1; __pop(w); return v[w];}}int n,m,num[MAXN];void init(){ read(n),read(m); for(int i = 1;i&lt;=n;i++) read(num[i]); Merge_Heap::init(n,num);}void solve(){ int op,x,y; for(int i = 1;i&lt;=m;i++){ read(op),read(x); if(op == 1) read(y),Merge_Heap::merge(x,y); else if(op == 2) print(Merge_Heap::pop(x)),print('\\n'); }}int main(){ init(); solve(); flush(); return 0;} 应用主要就是可并堆嘛。 「JLOI2015」城池攻占 「APIO2012」派遣","link":"/20180721-leftist-tree-notes/"},{"title":"新高考？不过是换一种套路的折磨","text":"北京市从2020年高考起，将全面铺开新高考 “3+3” 改革。 2018年5月30日，选科即将来临。 不管从哪个角度来说，新高考的改革都不是减负，而是换一种套路的折磨。 upd：2018.6.2 曾经在这里写了很多。但现在想想，还是有点过分天真了。 学校有它的打算，而人心则是各异。 如今尘埃落定，一切留待两年后去评说。 而我既然选择了远方，就应在后五个月，更加奋勇而前行。 upd: 2019.3.13 时间过的真快。 一年转瞬而过，高一的事情都大多像过眼云烟一般了。要说是最近对新高考有了什么新的见解，就是发现这完全是一个**的主意。 语文大小作文， 60 分。 物理、化学、生物、历史、地理、政治，每个只有 60 分。 这简直像是在搞笑啊。 学了六年的一套完整的理论，人类智慧的精华，竟然和一篇 800 字的大作文和 200 字的小作文加起来等同，甚至区分度还不如其大。 你猜猜世界历史上所有伟大的物理学家、化学家、生物学家、历史学家、地理学家会如何看待这么问题？ 我猜他们如果能从棺材里面爬出来，一定会狠狠的殴打这个政策的制定者一顿。 难道说历史学家几千年来的努力，物理学家四百年的奋斗，化学百年内的发展，都还不比不上两篇鼓舌弄文的作文？ 一个国家，不重视基础科学，怎么可能有大发展？还是说，他们只想要只培养出一些三段论头头是道的傻子？ 我不知道。 恐怕他们也不知道。","link":"/20180524-new-gaokao/"},{"title":"测试一下","text":"第一篇文章或许这就是我的第一篇文章了？？？ 瞎搞一番果然颇有乐趣哈哈哈哈.以后不定期更新题解和算法什么乱七八糟的没准也有我的吐槽哈哈哈。","link":"/20171204-test/"},{"title":"考试前要看的东西","text":"OI考试前最好来看一看… 会不断的补充。 考前 带好需要的东西 笔 纸 水 吃的 适量的衣服 复习以下膜版 线段树 平衡树 dp … 数学 网络流&amp;费用流 缩点 字符串相关 ……（来日补充 早点睡 吃点好的 考中 思路放开 不要鄙视暴力 不要给自己太大压力 多喝水 多上厕所（学习d姓大神 遇到不会做的题目时的checklist： 看下数据范围和题目要求 尝试对算法入座 先敲个30分左右的暴力 仔细回顾一遍学过的所有数据结构如上面所列 没准可以打个表？？ 评估一下思考的代价和不做的代价 后面的题如果有思路可以先做 不要慌 再做不出来去玩局初级扫雷平静一下 写暴力对拍 update: 对拍…要写程序拍… 最后检查两遍文件输入输出 update: 还是三遍吧 除非一点都不会 不能不写 考后 吃顿好的。 拉个人出去玩。 再吃顿好的。 忘掉比赛。","link":"/20180128-notes-for-test/"},{"title":"点分治学习笔记","text":"点分治是一种主要在树上的分治，可以在解决一些树上特定条件的路径的问题。其复杂度与大部分分治类似，大概是$O(K \\; \\log{n})$（$K$为除分治步骤之外的时间复杂度的多项式）。 简介点分治感性的来说，其实就需要考虑一件事情：如何把树上路径问题转换成过根结点的路径问题。 定理:树上所有的路径可以分为过根结点的路径和不过根结点的路径。 对于根结点来说，我们处理完过根结点的路径，剩下所有的路径都不会过根结点了。所以我们可以把根节点和与根结点相连的边均删掉，然后对于新产生的子树，剩下的路径应该都在其中，就可以对子树进行分治处理。 实现主要是三个函数：solve，work，getroot。 solvesolve函数，也就是主要函数，是一个递归解决问题的过程。 每一次都先把这个点标记成已经访问过，然后对于这个点去寻找 代码如下： 1234567891011void solve(int nown){ work(nown); vis[nown] = 1; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v]) continue; f[rt = 0] = sz = siz[v];//初始化rt getroot(v,rt);//找到该子树的重心 solve(rt);//递归解决问题 }} workwork函数就是完成对于当前的子树中所有过根的节点的处理。这个函数没有具体的样子，因题而异。 照我目前的理解，主要的思路就是：dfs，想办法拼起来两条同时过根节点而且端点不在一个子树里面的节点。 getroot首先，为了保证我们分出去的子树的规模尽量的一致，我们每次都需要把当前的树的重心作为根节点，然后完成上段所述的事情。 在这里，寻找重心其实就是找哪个点作根的时候剩下的最大子树的大小最小…代码如下： 1234567891011121314//vis==1 代表已经处理过（不在当前子树中）//f[nown] 储存这个点作根时剩下的最大子树的大小void getroot(int nown,int fa){ siz[nown] = 1,f[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v] || v == fa) continue; getroot(v,nown); siz[nown] += siz[v]; f[nown] = max(f[nown],siz[v]); } f[nown] = max(f[nown],sz - siz[nown]); if(f[nown] &lt; f[rt]) rt = nown;} 不是很难。 代码以Luogu P3806 为例。（其实这个题…比模版还是要多一些的…复杂度是 $O(n \\log{n} \\log{n})$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 110000;namespace fast_io { //...}using namespace fast_io;struct Edge{ int from,to; int len,nex;}edge[MAXN];int ecnt = 1;int fir[MAXN];void addedge(int a,int b,int l){ edge[ecnt] = (Edge){a,b,l,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,l,fir[b]}; fir[b] = ecnt++;}//-----int n,m,q[MAXN],ans[MAXN];//-----int f[MAXN],vis[MAXN],siz[MAXN];int rt,sz;struct node{ int d,f; bool operator &lt; (node a)const{ return d &lt; a.d; }}dep[MAXN];int num;int search(int d){ int b = 1,e = num; while(e!=b){ int mid = (b+e)&gt;&gt;1; if(dep[mid].d &gt;= d) e = mid; else b = mid + 1; } return b;}//-----void getroot(int nown,int fa){ siz[nown] = 1,f[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v] || v == fa) continue; getroot(v,nown); siz[nown] += siz[v]; f[nown] = max(f[nown],siz[v]); } f[nown] = max(f[nown],sz - siz[nown]); if(f[nown] &lt; f[rt]) rt = nown;}void dfs(int nown,int fa,int wh,int d){ dep[++num] = (node){d,wh}; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(vis[v] || v == fa) continue; dfs(v,nown,wh,d+l); }}void work(int nown){ num = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to,l = edge[nowe].len; if(vis[v]) continue; dfs(v,nown,v,l); } dep[++num] = (node){0,0}; sort(dep+1,dep+num+1); //二分查找 并判断对于每个ans是否有符合的答案 for(int i = 1;i&lt;=m;i++){ if(ans[i]) continue; int l = 1; while(l &lt; num &amp;&amp; dep[l].d + dep[num].d &lt; q[i]) l++; while(l &lt; num &amp;&amp; 2*dep[l].d &lt; q[i]){ if(ans[i]) break; int t = q[i]-dep[l].d,r = search(t); while(r &lt;= num &amp;&amp; dep[r].d == t &amp;&amp; dep[l].f == dep[r].f) r++; ans[i] |= (dep[r].d == t); l++; } }}void solve(int nown){ vis[nown] = 1; work(nown); for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ int v = edge[nowe].to; if(vis[v]) continue; f[rt = 0] = sz = siz[v]; getroot(v,rt); solve(rt); }}void init(){ read(n),read(m); int a,b,c; for(int i = 1;i&lt;=n-1;i++){ read(a),read(b),read(c); addedge(a,b,c); } for(int i = 1;i&lt;=m;i++) read(q[i]);}void solve(){ f[rt = 0] = sz = n; getroot(1,rt); solve(rt); for(int i = 1;i&lt;=m;i++){ if(ans[i]) print('A'),print('Y'),print('E'); else print('N'),print('A'),print('Y'); print('\\n'); }}int main(){ init(); solve(); flush(); return 0;} 例题[国家集训队]聪聪可可 [Luogu P2664]树上游戏","link":"/20180422-point-DC-notes/"},{"title":"日常颓废","text":"颓…颓废？？？ 啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。 但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。 愿明天生物统练不爆炸。","link":"/20171205-tuifei/"},{"title":"输入输出优化模板","text":"输入输出模板替代普通读写方式，可以在一定程度上加快程序运行速度。 依赖库stdio.h 和 ctype.h。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;cstdio&gt;#include &lt;cctype&gt;namespace fast_io { inline char read(){ //return getchar(); static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))== s)?-1:*s++) : *s++; } inline void read(int &amp;x){ static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) { if (c == '-') iosig = true; if (c == -1) return; } for (x = 0; isdigit(c); c = read()) x = ((x+(x&lt;&lt;2))&lt;&lt;1) + (c ^ '0'); if (iosig) x = -x; } inline void read(char *a){ static char c = read(); while(c!= -1&amp;&amp;(c == ' '||c!='\\r'||c =='\\n')) c = read(); while(c!= -1&amp;&amp;c!=' '&amp;&amp;c!='\\r'&amp;&amp;c!='\\n') *a++ = c,c = read(); *a = 0; } const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c){ if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf; *ooh++ = c; } inline void print(int x){ static int buf[30], cnt; if (x == 0) print('0'); else { if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); } } inline void print(char *a){ while(*a) print(*a++); } inline void flush(){ fwrite(obuf, 1, ooh - obuf, stdout); }}using namespace fast_io;namespace normal_io{ inline char read(){ return getchar(); } inline void read(int &amp;x){ scanf(\"%d\",&amp;x); } inline void print(int x){ printf(\"%d\",x); } inline void print(char x){ putchar(x); } inline void flush(){ return; }}//using namespace normal_io;int main(){ int x; read(x); print(x); flush(); return 0;} short版update at 20180405 1234567891011121314151617181920212223242526272829#include &lt;cstdio&gt;#include &lt;cctype&gt;namespace fast_io { inline char read(){static const int IN_LEN=1000000;static char buf[IN_LEN],*s,*t;return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))==s)?-1:*s++) : *s++;} inline void read(int &amp;x){static bool iosig;static char c;for (iosig=false,c=read();!isdigit(c);c=read()){if(c=='-')iosig=true;if(c==-1)return;}for(x=0;isdigit(c);c=read())x=((x+(x&lt;&lt;2))&lt;&lt;1)+(c^'0');if(iosig)x=-x;} inline void read(char *a){static char c = read();while(c!=-1&amp;&amp;(c==' '||c=='\\n'||c=='\\r'))c=read();while(c!=-1&amp;&amp;c!='\\r'&amp;&amp;c!=' '&amp;&amp;c!='\\n') *a++=c,c=read();*a=0;} const int OUT_LEN=1000000;char obuf[OUT_LEN],*ooh=obuf; inline void print(char c){if(ooh==obuf+OUT_LEN) fwrite(obuf,1,OUT_LEN,stdout),ooh=obuf;*ooh++ = c;} inline void print(int x){static int buf[30],cnt;if(x==0)print('0');else{if(x&lt;0)print('-'),x=-x;for(cnt=0;x;x/=10)buf[++cnt]=x%10+48;while (cnt) print((char)buf[cnt--]);}} inline void print(char *a){while(*a) print(*a++);} inline void flush(){fwrite(obuf,1,ooh-obuf,stdout);}}using namespace fast_io;namespace normal_io{ inline char read(){return getchar();} inline void read(int &amp;x){scanf(\"%d\",&amp;x);} inline void print(int x){printf(\"%d\",x);} inline void print(char x){putchar(x);} inline void flush(){return;}}//using namespace normal_io;int main(){ int x; read(x); print(x); flush(); return 0;}","link":"/20180223-IO-optimize/"},{"title":"莫队算法学习笔记（一）","text":"这篇\b主要介绍在序列上的无修改以及带修改的离线莫队算法。 简介莫队算法是一个充满着暴力美学的算法。 莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。 莫队算法核心思想首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。 有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链) 一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。 但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。 所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。 这个时候就要用莫队的思想来简化这个时间复杂度。 我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些相邻的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的相邻的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。 我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\\frac{n}{Q}$个块。分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序。这句话很重要，其实就是莫队的核心实现吧。 然后，暴力转移。 然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\\frac{n}{Q}$个块，所以右端点的移动总共就是$\\frac{n^2}{Q}$次。 总共合起来，时间复杂度就是$O(T\\times(\\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些基础复杂的数学知识，可以发现当$Q = \\sqrt{n}$的时候，这个式子的值最小，是$O(T\\times(m+n)\\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\\sqrt{n}$\b未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。 具体实现\b莫队的实现超级简单。\b不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。 代码如下。 1234567891011//ql,qr 为查询区间，l,r为当前区间//add 和 del 是自定义的转移函数//注意自增自减的时间while(ql&lt;l) add(--l);while(r&lt;qr) add(++r);while(l&lt;ql) del(l++);while(qr&lt;r) del(r--); 超级简单吧！ 值的一提的是，在我去北京冬令营的时候，台上的神犇说： 莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！ 听起来很有道理，但我没有试过。 例题「SDOI2009」HH的项链 [国家集训队]小Z的袜子 （题解待补 带修改莫队算法待修改的莫队就是可以支持一些简单的修改的莫队算法。 核心思想基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。 这里我们取分块的大小为$n^{\\frac{2}{3}}$，那么有$n^{\\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \\times n^{\\frac{5}{3}})$。（然而并不太懂怎么推出来这个的…哪位巨佬知道请教一下 非常感谢 具体实现类似，不写了。 1//一段时间复杂度为O(n^5/3)的代码。 需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。 例题「国家集训队」数颜色","link":"/20180205-mo-algorithm-1/"},{"title":"重建笔记","text":"本站在刚刚过去的超长假期期间经历了一次重建，对于以前遗留的bug若干和一些问题进行了修复，并且产生了一些新的bug。 新增（改正）的事项 改正了页面底部的建站时间的位置 改正页面底部的搭载于…的位置 添加了对于网站字数以及阅读时间的统计 更改Gitalk为Gitment，并使文章上方可以显示出评论数 更改字体为Lato &amp; Verdana 还需要改正的问题 首页不能正常显示评论数 多层分类的设置 压缩文件 mathjax奇怪的转义设置","link":"/20180627-rebuild-notes/"},{"title":"[转载]达拉崩吧-OI版","text":"原文地址：点此查看很久很久以前 算法突然出现 带来导论 带走了智商又消失不见 编程十分危险 世间谁最勇敢 一位懵逼儿赶来 大声喊 我要写出最高的树 打出最大的表 搜进最深的递归 把AC带回到面前 老师非常高兴 忙问他的技能 年轻人想了想 他说 老师我会 非确定性有穷状态决策自动机 再来一次 非确定性有穷状态决策自动机 是不是 非确定性有穷状态决策自动机 对对是 非确定性有穷状态决策自动机 懵逼无名少年 捧着算法导论 带着大家的希望 从学校里出发 战胜BUG来袭 获得调试神技 无数代码见证 他慢慢升级 偏远论坛角落 参与所有话题 一路排序 伴随指引前路的单链表 进入决赛考场 比赛和可怕难题 少年打开IDE 难题道 我是 Floyd区间DP均衡红黑树 再来一次 Floyd区间DP均衡红黑树 是不是 Kruskal一维DP二叉排序树 不对是 Floyd区间DP均衡红黑树 于是 非确定性有限状态决策自动机 打出 深度搜索模拟枚举单源最短路 应用 拓扑排序Trie结构Polya定律 套入 Dijkasta联通分量BellmanFord 最后 非确定性有限状态决策自动机 他使用了 IO优化树链剖分输出random 调用了 矩阵速幂虚二叉树行列式消元 完成了 凸包扫描后缀数组网络最大流 老师听说 非确定性有限状态决策自动机 他忘了写 #include&lt;stdio&gt; freopen 就让 非确定性有限状态决策自动机 全手写 map/set稳定婚姻KMP实现 啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍 他发明了一个算法 也在天天渐渐复杂 为了避免以后麻烦 算法叫做暴力法 它的全名十分难念 我不想说一遍","link":"/20171216-dalabengba-oi/"},{"title":"高斯消元法学习笔记","text":"高斯消元法是线性代数中的一个算法，可用来为线性方程组求解，求出矩阵的秩，以及求出可逆方阵的逆矩阵。当用于一个矩阵时，高斯消元法会产生出一个行梯阵式。 怎么消？一个小小的例子回想一下你的小学生活吧。 老师给了你一个方程组。 $$\\left\\\\{\\begin{array}{rc} 2x+3y = 7 \\\\\\\\ 4x-5y = 3\\end{array}\\right.$$ 聪慧如你当然能一眼看出来这个东西的答案是：$x = 2,y = 1$，可是你是怎么看出来的呢？老师告诉过你解二元一次方程组的标准做法：加减消元法。 具体来说，就是用1式乘以某比例之后去减二式，把方程组变成如下的样子： $$\\left\\\\{\\begin{array}{rc}2x+3y = 7 \\\\\\\\0x-11y = -11\\end{array}\\right.$$ 然后再把y带回1式就可以得到x： $$\\left\\\\{\\begin{array}{rc}2x+0y = 4 \\\\\\\\0x-11y = -11\\end{array}\\right.$$ 从而你知道，$x = 2,y = 1$。 恭喜你，你已经完成了高斯消元。 再看上面的例子如果我们把上面方程组的系数抽出来变成一个行列式，就会如下所示:$$\\begin{array}{}\\left|\\begin{array}{cccc} 2 &amp; 3 \\\\\\\\ 5 &amp; -4\\end{array}\\right|\\quad\\left|\\begin{array}{cccc} 7 \\\\\\\\ 3\\end{array}\\right|\\end{array}$$ 那么我们消元的过程就会如下所示： $$\\begin{array}{}\\left|\\begin{array}{cccc} 2 &amp; 3 \\\\\\\\ 0 &amp; -11\\end{array}\\right|\\quad\\left|\\begin{array}{cccc} 7 \\\\\\\\ -11\\end{array}\\right|\\end{array}$$ 然后是 $$\\begin{array}{}\\left|\\begin{array}{cccc} 2 &amp; 0 \\\\\\\\ 0 &amp; -11\\end{array}\\right|\\quad\\left|\\begin{array}{cccc} 4 \\\\\\\\ -11\\end{array}\\right|\\end{array}$$ 注意到，最后我们达成了一个目标：使整个行列式只有对角线上的部分不为$0$，其他部分均为$0$。这个条件的达成，让我们可以方便的计算出来这个方程组的解。 这也是我们在接下来设计的算法中需要达到的。 高斯-约旦消元法运用上面提到的思想去解多元一次方程组的算法，叫做高斯-约旦消元法（Gauss-Jordan Elimination）。 它有着以下的优点： 方便理解 不用回代 精度较高 它有着以下的缺点： 运行较慢 实现简单来说，它的运行过程是这个样子的：每次对于第$i$行，让第$i$列除了第$i$行之外均成为$0$，且不破坏前$i-1$列的该性质。 具体来说，每次在处理第$i$行时，将第$i$行整行，乘以恰当比例后与除了第$i$行之外的共$n-1$行相减，使得除了第$i$行之外的$n-1$行的第$i$列均为$0$。（如果你对于第$i$行第$i$列的数万一是$0$的情况感到困惑，请你先往下看，并假设这个位置上永远不会是$0$） 正确性的说明： 我们需要证明的，就是我们在循环中处理完第$i$行时，不会破坏前$i-1$行的该性质。注意到我们前$i-1$次操作已经使得第$i$行以后的前$i-1$列均成为了$0$，即为如下所示：(将要处理第4行) $$\\begin{array}{}\\left|\\begin{array}{cccc} a &amp; 0 &amp; 0 &amp; 3 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; b &amp; 0 &amp; 5 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; c &amp; 3 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; 0 &amp; d &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; 0 &amp; 7 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; 0 &amp; 5 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; 0 &amp; 3 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\\\ 0 &amp; 0 &amp; 0 &amp; 8 &amp; 2 &amp; 3 &amp; 2 &amp; 3\\\\\\ \\end{array}\\right|\\end{array}$$ 这个时候我们拿第$i$行无论如何与其他$n-1$行相减，都不会使前$i-1$列的数发生任何改变。这是因为第$i$行的前$i-1$列都是$0$。 微小的优化这个算法主要有两个微小的优化：一个是精度上的优化，一个是时间上的优化。 精度优化注意到我们在处理第$i$行的时候，在第$i+1 \\rightarrow n$行之间的这些行与第$i$行完全是可以互换的。而这个时候我们用第$i$行与其他行相减的时候，我们为了能获得更优秀的精度，往往会选择在第$i$行到第$n$行中，第$i$列的数的绝对值最大的那一行，与第$i$行交换，然后再进行后面的操作。 大家都知道，浮点数储存时有不可避免的误差，比如$0.0000001$之类。这个时候如果我们需要对这行乘很多倍，就会导致误差的放大，而除法则不会。 时间优化注意到事实上我们再处理第$i$行的时候只需要处理第$i+1$列之后的列，所以我们在行之间相减的时候，运用这个技巧大约可以减少一半的复杂度。 无解的判定如果我们发现在处理第$i$行的数的时候，所有能选的第$i$列的数都是$0$，那么这个时候，这个方程就是无解或者没有唯一解的。 代码以Luogu P3389 【模板】高斯消元法为例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;const int MAXN = 110;const double eps = 1e-7;bool gauss(double a[MAXN][MAXN],int n){ for(int i = 1;i&lt;=n;i++){ int r = i; for(int j = i+1;j&lt;=n;j++) if(fabs(a[r][i]) &lt; fabs(a[j][i])) r = j; // 寻找a[r][i]使其绝对值最大 if(r!=i) for(int j = 1;j&lt;=n+1;j++) swap(a[r][j],a[i][j]); // 交换两列 if(fabs(a[i][i]) &lt; eps) return false; // 如果全部都是0，则无解 for(int j = 1;j&lt;=n;j++)if(j!=i){ double t = a[j][i]/a[i][i]; for(int k = i+1;k&lt;=n+1;k++) a[j][k] -= a[i][k] * t; } //使第i个位置的所有其他数都为0 } for(int i = 1;i&lt;=n;i++) a[i][n+1]/=a[i][i]; return true;}int n;double num[MAXN][MAXN];void init(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ for(int j = 1;j&lt;=n+1;j++){ scanf(\"%lf\",&amp;num[i][j]); } }}void solve(){ if(gauss(num,n)) for(int i = 1;i&lt;=n;i++) printf(\"%.2lf\\n\",num[i][n+1]); else printf(\"No Solution\\n\");}int main(){ init(); solve(); return 0;}","link":"/20180623-gaussian-elimination-notes/"},{"title":"NOIp2018 游记&题解","text":"垃圾 CCF毁我青春 Day 0讲评试卷，旷掉了。在机房刷模板题，晚上刷不动了就开始疯狂预测后两天的题目： 胡乱预测了一些非常神奇的东西：T1数论/模拟，T2/T3背包、树形dp、基环树、图论+缩点+倍增。 我是不是要被禁赛一年了啊。 Day 1sb Day1，不做评论。 T1：铺设道路题面春春是一名道路工程师，负责铺设一条长度为 $n$ 的道路。 铺设道路的主要工作是填平下陷的地表。整段道路可以看作是 $n$ 块首尾相连的区域，一开始，第 $i$ 块区域下陷的深度为 $d_i$ 。 春春每天可以选择一段连续区间 $[L,R]$ ，填充这段区间中的每块区域，让其下陷深度减少 $1$ 。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为 $0$ 。 春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为 $0$ 。 题解开始看题居然早了一些，被喝止关上题面的时候已经记下来这道题了，于是在开考前就脑补出了这道题的解法…开考5分钟敲完过大样例… 我们维护一个差分数组 $c[i] = d[i] - d[i-1]$ ，如果 $c[i] &gt; 0$ 我们就将其累加到贡献中。 正确性似乎十分显然，你不可能找到一个更小的方案来覆盖了。 赛后得知该题是NOIp2013原题，似乎模拟赛里我还做过这道题（不过当时还WA了 耗时5分钟。 期望得分：100，实际得分：100 T2：货币系统题面在网友的国度中共有 $n$ 种不同面额的货币，第 $i$ 种货币的面额为 $a[i]$ ，你可以假设每一种货币都有无穷多张。为了方便，我们把货币种数为 $n$ 、面额数组为 $a[1..n]$ 的货币系统记作 $(n,a)$。 在一个完善的货币系统中，每一个非负整数的金额 $x$ 都应该可以被表示出，即对每一个非负整数 $x$ ，都存在 $n$ 个非负整数 $t[i]$ 满足 $a[i] \\times t[i]$ 的和为 xx。然而， 在网友的国度中，货币系统可能是不完善的，即可能存在金额 $x$ 不能被该货币系统表示出。例如在货币系统 $n=3$, $a=[2,5,9]$ 中，金额 $1,3$ 就无法被表示出来。 两个货币系统 $(n,a)$ 和 $(m,b)$ 是等价的，当且仅当对于任意非负整数 $x$，它要么均可以被两个货币系统表出，要么不能被其中任何一个表出。 现在网友们打算简化一下货币系统。他们希望找到一个货币系统 $(m,b)$，满足 $(m,b)$ 与原来的货币系统 $(n,a)$ 等价，且 $m$ 尽可能的小。他们希望你来协助完成这个艰巨的任务：找到最小的 $m$。 题解开始还往数论的方面考虑了一波，甚至想到刚学的线性基，事实上并没有什么卵用……本质上就是一个贪心+类似背包dp的东西吧。 首先考虑一些性质。 首先发现不可能出现在这 $n$ 个货币面额之外面额的货币，其次发现最小的货币必然要取到，然后我们考虑到，取一个更小的货币一定对于你凑出一个大的面值更有帮助，所以我们从小往大的贪心。 维护一个数组 $vis[i]$，表示 $i$ 面值能不能被之前的货币凑出来。首先判断新加入的数能不能用已经有的面额凑出，如果能就可以跳过这个面值，否则就必须加入新的最小货币系统。 我们如何更新 $vis$ 数组呢？稍有背包dp经验（或者满脑子背包的人）就会通过物品无限联想到完全背包。 扫描数组用低位更新高位即可。 时间复杂度$O(T \\times n \\cdot \\text{MAXV})$。 此时刚刚 9:05 。 期望得分：100，实际得分：100 T3：赛道修建也还算一道好题吧，只不过位置非常尴尬…(来自一个几乎想对算法然后挂掉的选手的怨念) 题意C 城将要举办一系列的赛车比赛。在比赛前，需要在城内修建 $m$ 条赛道。 C 城一共有 $n$ 个路口，这些路口编号为 $1,2,…,n$，有 $n−1$ 条适合于修建赛道的双向通行的道路，每条道路连接着两个路口。其中，第 $i$ 条道路连接的两个路口编号为 $a_i$ 和 $b_i$​，该道路的长度为 $l_i$。借助这 $n-1$ 条道路，从任何一个路口出发都能到达其他所有的路口。 一条赛道是一组互不相同的道路 $e_1,e_2,…,e_k$​，满足可以从某个路口出发，依次经过 道路 $e_1,e_2,…,e_k$​（每条道路经过一次，不允许调头）到达另一个路口。一条赛道的长度等于经过的各道路的长度之和。为保证安全，要求每条道路至多被一条赛道经过。 目前赛道修建的方案尚未确定。你的任务是设计一种赛道修建的方案，使得修建的 $m$ 条赛道中长度最小的赛道长度最大（即 $m$ 条赛道中最短赛道的长度尽可能大） 题解考场上的做法有锅以至于大样例都过不了…然后信仰rand交上去了…发现数据随机的话很难卡掉…所以我事实上应该少rand几次…没准还能混到95… 正解的做法如下： 二分非常显然，然后就变成判断不小于 $x$ 的不相交路径有多少条。 对于每一个子树分别考虑的话，发现每个子树最多只有一条从根出发的路径能被祖先节点使用，再加上菊花图的暗示，大概能够得到以下的思路，贪心的使仅在子树里能够拼出来的路径最多的情况下，能往上传递的链的长度最大。 这个可以用一个 pair&lt;int,int&gt; 维护。我们注意到我们在考虑每个子树返回的路径时，如果 f[v] + len &gt;= TAR ，那么说明这个路径可以自己成一条赛道，直接累加贡献即可；剩下的扔到一个multiset/vector里面，现在我们就有了若干条长度小于 TAR 的路径，我们要组合出最多的不小于 TAR 的路径，而且还要求出这个情况下能返回的最长的过当前子树根节点的链的长度。 我们有两种处理方法： 一种是 multiset 处理，我们从短往长贪心的考虑每条边，lower_bound 查出最小能不小于 TAR 的另一条链，然后把他们俩都删掉，计算贡献。直到找不到能匹配的边，就将 multiset 里面的最大值作为返回最长链的答案。（正确性不显然，但是我们机房讨论没有叉掉，所以大约是对的）。 还有一种是再二分的处理。 先考虑如何线性计算出最多的贡献，就是用双指针贪心即可，固定的是大的链。然后我们二分往回的边是哪条，显然有单调性，然后每次线性计算下是否贡献能达到最大值就可以了。 时间复杂度：$O(n \\log^2 n)$。 期望得分： $55-80$，实际得分：50 Day1总结做完前两题恍然觉得自己变强了好多啊，轻松一天200+…结果第三题死活没调出来。回家写了写，发现考场上错误的算法（又写了一遍仍然没过大样例…）Luogu/nowcoder自测也能拿95…我为什么要rand…我是不是傻子… Day 2之后刷知乎发现出题人 immortalCO 又说数据很弱… 暴怒… 期望得分：100+100+55~80 = 255~280，实际得分：100+100+50 = 250 Day 2考试前某神仙在pyq里面调侃：Day1 一时爽，Day2 火葬场。 感觉又要被禁赛一年了。 T1：旅行题面小 Y 是一个爱好旅行的 OIer。她来到 X 国，打算将各个城市都玩一遍。 小Y了解到， X 国的 $n$ 个城市之间有 $m(m \\leq n)$ 条双向道路。每条双向道路连接两个城市。 不存在两条连接同一对城市的道路，也不存在一条连接一个城市和它本身的道路。并且， 从任意一个城市出发，通过这些道路都可以到达任意一个其他城市。小 Y 只能通过这些 道路从一个城市前往另一个城市。 小 Y 的旅行方案是这样的：任意选定一个城市作为起点，然后从起点开始，每次可 以选择一条与当前城市相连的道路，走向一个没有去过的城市，或者沿着第一次访问该 城市时经过的道路后退到上一个城市。当小 Y 回到起点时，她可以选择结束这次旅行或 继续旅行。需要注意的是，小 Y 要求在旅行方案中，每个城市都被访问到。 为了让自己的旅行更有意义，小 Y 决定在每到达一个新的城市（包括起点）时，将 它的编号记录下来。她知道这样会形成一个长度为 $n$ 的序列。她希望这个序列的字典序 最小，你能帮帮她吗？ 对于两个长度均为 $n$ 的序列 $A$ 和 $B$，当且仅当存在一个正整数 $x$，满足以下条件时， 我们说序列 $A$ 的字典序小于 $B$。 对于任意正整数 $1 \\leq i &lt; x$，序列 $A$ 的第 $i$ 个元素 $A_i$ 和序列 $B$ 的第 $i$ 个元素 $B_i$​ 相同。 序列 $A$ 的第 $x$ 个元素的值小于序列 $B$ 的第 $x$ 个元素的值。 题解开始没看见 $m \\leq n$，恍然以为不可做… 然后又没看见 $n \\leq 5000$，再次觉得不可做… 据说有线性做法…我只想到一个 $n^2$ 做法 发现小 Y 事实上就是在dfs…我们熟悉树上的那套理论，我们发现树上的这个东西是很好求的，贪心dfs即可… 带环的树也可以用类似的贪心做到 $O(n)$ 的复杂度，只不过我还不太会… $O(n^2)$ 的话，枚举断边，dfs即可…最后判下全部到达即可。 我们还发现一点，这里需要对边排序来保证复杂度，如果我们每次都遍历在sort很有可能TLE…所以我们在外面逆序sort好后再加边即可… 然后赛后自测的是否发现自己很有可能有个地方忘开两倍数组…感觉自己要凉… -= 32 分…不过luogu自测上面都能过最后三个点，也不知道为什么… 期望分数：68-100（万一我开了2倍呢…），实际得分：100 T2：填数游戏题面麻烦死了，不复制了，链接：Luogu P5023 填数游戏 题解考场上一看数据范围：高啊，一看就是状压dp+矩阵快速幂…于是推了推转移矩阵 码码码 * n…然后发现 n=3,m=3 都过不了…纠结一个小时也没能调完…咕咕咕…最后写了一个暴力搜索和 n = 2 的特殊情况…考后听各路神仙做法都不太一样… 目前听到的一种做法是这样的… 首先你发现一个规律…当 $m \\geq n+2$ 时， $F(n,m) = 3F(n,m-1)$。 然后你暴搜出来 $F(n,n+1)$ 的答案即可。直接暴力搜索会TLE，考虑一些微小的优化，比如对角线的单调性，比如子矩阵的必然合法啥的。 具体没写呢…最好的方法貌似是打表？等过几天再来填。 考场上大概只有50分可以拿到。其实机灵点可以发现 n = 3,m=4和n=3,m=5 的规律的，然后大概可以多拿 $15$ 分..? wxh的做法 期望得分：50，实际得分：20（模数多打一个0的悲伤QAQ） T3：保卫王国又tm一道树形dp… 题面：Z 国有 $n$ 座城市，$n - 1$ 条双向道路，每条双向道路连接两座城市，且任意两座城市 都能通过若干条道路相互到达。 Z 国的国防部长小 Z 要在城市中驻扎军队。驻扎军队需要满足如下几个条件： 一座城市可以驻扎一支军队，也可以不驻扎军队。 由道路直接连接的两座城市中至少要有一座城市驻扎军队。 在城市里驻扎军队会产生花费，在编号为i的城市中驻扎军队的花费是 $p_i$。 小 Z 很快就规划出了一种驻扎军队的方案，使总花费最小。但是国王又给小 Z 提出 了 $m$ 个要求，每个要求规定了其中两座城市是否驻扎军队。小 Z 需要针对每个要求逐一 给出回答。具体而言，如果国王提出的第 $j$个要求能够满足上述驻扎条件（不需要考虑 第 $j$ 个要求之外的其它要求），则需要给出在此要求前提下驻扎军队的最小开销。如果 国王提出的第 $j$个要求无法满足，则需要输出 $-1$ ($1 \\leq j \\leq m$)。现在请你来帮助小 Z。 题解怎么说呢，感觉是道好题，就是放在NOIp的位置并不是特别合适…而且确切的说是放在这么恐怖的 Day 2 并不是很合适。 该题貌似目前还没有人能给我完全讲明白…机房学长讲了一遍动态dp但是我也没太搞懂只听明白链上的情况，也就是线段树维护转移矩阵（一般比较小）做到快速的修改。 好像还可以倍增做，也可以用虚树的思想。我都不会，以后慢慢补（咕咕.jpeg）。 写了个最坏 $O(n^2)$ 暴力也不知道对不对。 期望得分：44，实际得分：44 Day2总结完全没有区分度的一天…偏偏我还挂题了…太年轻了啊…考试结束一个小时前开始佛系检查…还没发现自己的数组开小… 实名举报T2和T3样例太小…感觉很虚啊qaq 期望得分：68~100 + 50 + 44 = 162~194，实际得分：100 + 20 + 44 = 164 总结难度大约是 $T1-T2-T4-T3-T5-T6$ 递增吧… 这个 noip 咋回事啊…感觉区分度简直跟 NOI Day2 似的，会的大家都能打，不会的（基本上）没人能做… 某神仙：“这不就是比谁FST少吗？” 可我偏偏就挂题了啊… 写了这么多，似乎也是想体现一下自己对于 OI 的热爱吧…可是当比赛完成后，热情一点点消退，冰冷的分数让你不得不作出两难的选择。恐怕一切都不那么简单吧。 赛前反复担心自己会卡在简单题上，最后发现还是难题攻坚能力不行。赛时心态恐怕也有些过于紧张，也没能多检查几遍数组有没有开小的问题…也可以说是自己埋葬了自己吧。 如果一切都按照最好的实力发挥，我是有希望上500的，可现在也只能在 400 下挣扎。恐怕也是自己太年轻老作死吧，这种事情也怨不得别人，但是组题人还是可以骂的… 考试结束前紧张了一会，发现自己挂题后紧张了一会…不过现在也都释然了…这算什么大事啊，省选AK照样A队稳稳的2333况且文化课也不是上不了清华啊233 最后大概期望得分：255+162 = 417…这个分数好尴尬啊…估计省选什么的是要凉了23333等出分了再来upd吧 另，CCF换少爷机了…这就是报名费+=200的理由吗233333 出分后update自己菜也不能怪别人啊qaq 不过打错模数50-&gt;20分…大样例不过80分硬让我调成50的事情嘛…也不知道该说什么…如果IOI赛制恐怕不会有这些奇怪的事情…不过也没那么多如果啊qaq 省选大约还要继续划水…现在还是十分迷茫…","link":"/20181111-noip2018/"},{"title":"「NOI2005」维护数列-非旋Treap","text":"维护一个数列，给定初始的$n$个数字。现有六种命令，在第$pos$个数后插入$tot$个数，翻转从第$pos$个数开始的$tot$个数，删除从第$pos$个数开始的$tot$个数，查询从第$pos$个数开始的$tot$个数的和，设定从第$pos$个数开始的$tot$个数设定为$c$，查询整个数列中和最大的连续子区间的大小。 链接Luogu P2042 题解这是一道经典的平衡树的题，被我用来练手非旋$Treap$。 因为我太弱了，所以写的很痛苦。 关于合并和分裂的主要思想参见学习笔记。 对于节点，要维护： 树的大小，树的权值和，树从左端点开始的最大连续和，树从右端点开始的最大连续和，和树的最大连续子区间和。 主要操作： $pushdown$ 往下$push$，修改两个子节点并打上标记。 $pushup$ 更新所有信息，维护三个$max$信息的方式有些特殊，但仔细想想应当能想到。 这里我被坑了。这个与线段树的区间最大查询有点不太一样，根节点也有代表的数，这个需要记住。 建树 构建笛卡尔树。详见学习笔记。 最大查询连续和 直接输出根节点维护的最大连续子区间的值即可。 插入 把即将插入的$tot$个数按照上文的介绍方法建树。 把原来的数按照$size$裂成两棵树，分别按顺序合起来就可以了。 接下来的操作都需要裂成三棵树，左边的有$pos-1$个树，中间有$tot$个数。 删除 直接删除中间子树，左右合并。因为内存不够（$64MB$），需要垃圾回收。 求和 输出中间子树的和，再把三个子树顺次合并起来。 翻转 翻转中间子树并打标记，再把三个子树顺次合并起来。 设定 对中间子树完成设定并打标记，再将三个子树顺次合并起来。 还有一点就是垃圾回收。简略来说就是把删除的节点暴力的扔到一个栈里面，然后能用就用，不能有就再新开内存池。 其他也没有什么重要的。多$pushdown pushup$几次，然后这些操作都是要注意边界，也就是null时候的条件的。$pushup$的合并公式也需要好好斟酌。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 510000;const int MAX = 2147483647;int k,n;struct node_t{ int val,p; int lmax,rmax,maxn,sumn,tag; int size; bool rev,is_tag; node_t *son[2],**null; void pushdown(){ if(this == *null) return; if(is_tag){ son[0]-&gt;cover(tag),son[1]-&gt;cover(tag); is_tag = tag = 0; } if(rev) { son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; } } void pushup(){ if(this == *null) return; if(son[0] == *null &amp;&amp; son[1] == *null){ size = 1;sumn = lmax = rmax = maxn = val; return; } size = son[0]-&gt;size + son[1]-&gt;size + 1; sumn = son[0]-&gt;sumn + son[1]-&gt;sumn + val; lmax = max(son[0]-&gt;lmax,son[0]-&gt;sumn + val + max(0,son[1]-&gt;lmax)); rmax = max(son[1]-&gt;rmax,son[1]-&gt;sumn + val + max(0,son[0]-&gt;rmax)); maxn = max(0,son[0]-&gt;rmax) + val + max(0,son[1]-&gt;lmax); maxn = max(maxn,max(son[0]-&gt;maxn,son[1]-&gt;maxn)); } void cover(int v){ if(this == *null) return; val = v;sumn = size * v; lmax = rmax = maxn = max(v,sumn); is_tag = 1;tag = v; } void reverse(){ if(this == *null) return; swap(son[0],son[1]); swap(lmax,rmax); rev^=1; }};struct fhqtreap{ node_t pool[MAXN],*tmp[MAXN],*stack[MAXN],*garbage[MAXN]; node_t *root,*null; int cnt,tot; void newnode(node_t *&amp;r,int val = 0){ if(tot == 0) r = &amp;pool[cnt++]; else r = garbage[--tot];//垃圾回收 r-&gt;val = val;r-&gt;size = 1; r-&gt;lmax = r-&gt;rmax = r-&gt;maxn = r-&gt;sumn = val; r-&gt;son[0] = r-&gt;son[1] = null; r-&gt;is_tag = r-&gt;rev = 0; r-&gt;null = &amp;null; r-&gt;p = rand(); } fhqtreap(){ tot = 0;cnt = 0; srand(time(NULL)); newnode(null,-MAX); null-&gt;p = MAX; root = null; null -&gt; sumn = null-&gt;size = 0; } void cycle(node_t *r){ if(r == null) return; garbage[tot++] = r; cycle(r-&gt;son[0]); cycle(r-&gt;son[1]); } void read_tree(int n){ for(int i = 1;i&lt;=n;i++){ int t;scanf(\"%d\",&amp;t); newnode(tmp[i],t); } } node_t *build(int n){ read_tree(n); int top = 1; newnode(stack[0],-MAX); stack[0]-&gt;p = -MAX; for(int i = 1;i&lt;=n;i++){ int nowp = top - 1; node_t *r = tmp[i],*pre = null; while(stack[nowp]-&gt;p &gt; r -&gt; p){ stack[nowp]-&gt;pushup(); pre = stack[nowp]; stack[nowp] = null; nowp--; } stack[nowp+1] = stack[nowp]-&gt;son[1] = r; stack[nowp+1]-&gt;son[0] = pre; top = nowp+2; } while(top) stack[--top]-&gt;pushup(); return stack[0]-&gt;son[1]; } void split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs){ if(r == null){ ls = null;rs = null;return; } r-&gt;pushdown(); if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize){ ls = r; split(r-&gt;son[1],lsize-r-&gt;son[0]-&gt;size-1,ls-&gt;son[1],rs); } else{ rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); } ls-&gt;pushup();rs-&gt;pushup(); } node_t *merge(node_t *ls,node_t *rs){ if(ls == null) return rs; if(rs == null) return ls; if(ls-&gt;p &lt; rs-&gt;p){ ls-&gt;pushdown(); ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup(); return ls; } else{ rs-&gt;pushdown(); rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup(); return rs; } } void insert(int rank,int n){ if(n == 0) return; node_t *ls,*rs,*newn,*ret; split(root,rank,ls,rs); newn = build(n); root = merge(merge(ls,newn),rs); } void split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r){ node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r); } void erase(int lb,int ms){ if(ms == 0) return; node_t *l,*m,*r,*ret; split(lb-1,ms,l,m,r); cycle(m); root = merge(l,r); } int get_sum(int lb,int ms){ if(ms == 0) return 0; node_t *l,*m,*r; split(lb-1,ms,l,m,r); int ans = m-&gt;sumn; root = merge(l,merge(m,r)); return ans; } int max_sum(){ return root-&gt;maxn; } void reverse(int lb,int ms){ if(ms == 0) return; node_t *l,*m,*r; split(lb-1,ms,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r)); } void make_same(int lb,int ms,int c){ if(ms == 0) return; node_t *l,*m,*r; split(lb-1,ms,l,m,r); m-&gt;cover(c); root = merge(l,merge(m,r)); }};fhqtreap w;void init(){ scanf(\"%d %d\",&amp;n,&amp;k); w.root = w.build(n);}void solve(){ for(int i = 1;i&lt;=k;i++){ char op[50];int a,b,c; scanf(\"%s\",op); if(op[0] == 'M'&amp;&amp;op[2] == 'X') printf(\"%d\\n\",w.max_sum()); else{ scanf(\"%d %d\",&amp;a,&amp;b); if(op[0] == 'I') w.insert(a,b); else if(op[0] == 'D') w.erase(a,b); else if(op[0] == 'G'){ printf(\"%d\\n\",w.get_sum(a,b)); } else if(op[0] == 'M'){ scanf(\"%d\",&amp;c); w.make_same(a,b,c); } else if(op[0] == 'R'){ w.reverse(a,b); } } }}int main(){ init(); solve(); return 0;}","link":"/20180217-NOI2005-sequence/"},{"title":"「NOI2007」货币兑换-Splay+斜率优化","text":"小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券：$A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券 和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面： （a）卖出金券：顾客提供一个 $[0,100]$ 内的实数 $OP$ 作为卖出比例，其意义为：将 $OP\\%$ 的 $A$ 券和 $OP\\%$ 的 $B$ 券以当时的价值兑换为人民币； （b）买入金券：顾客支付 $IP$ 元人民币，交易所将会兑换给用户总价值为 $IP$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $Rate_K$ ； 注意到，同一天内可以进行多次操作。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $Rate$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。 例如，假定接下来 $3$ 天内的 $A_k$、$B_k$、$Rate_K$ 的变化分别为： .png) 假定在第一天时，用户手中有 $100$ 元 人民币但是没有任何金券。用户可以执行以下的操作： .png) 提示： 输入文件可能很大，请采用快速的读入方式。 必然存在一种最优的买卖方案满足：每次买进操作使用完所有的人民币；每次卖出操作卖出所有的金券。 链接LOJ 2353 BZOJ 1492 Luogu P4027 题解最优策略肯定是只有两种状态：全仓/空仓，然后每天我们只有若干种选择：全买，全卖，全买+全卖，啥都不做。 注意到我们可以 $dp$ … 先写暴力转移…注意到我们事实上只需要记录我们有多少钱，在哪天买入的话就会有多少的比例。 所以我们令 $dp[i]$ 为在第 $i$ 天拥有的最多钱，假设我们上次全部卖出+全部买入在第 $j$ 天，状态转移：$$dp[i] = \\max\\left(\\max_{j=1}^{i-1}(dp[j]\\times \\frac{r[j]a[i] + b[i]}{r[j]a[j]+b[j]}),dp[i-1]\\right)$$很好理解嘛…就是一个决策在哪天全买/全卖的问题。 暴力转移可以拿到 $60$ 分…上古时代的暴力分还是很好拿的。 正解的话，需要我们深入挖掘这个式子。 我们先忽略最后一个不买不卖的情况，来继续看：$$dp[i] = \\max_{j=1}^{i-1}(dp[j]\\times \\frac{r[j]\\cdot a[i] + b[i]}{r[j] \\cdot a[j]+b[j]})$$对于给定的决策点 $j$ ，则有：$$dp[i] = dp[j] \\times \\frac{r[j]\\cdot a[i] + b[i]}{r[j]\\cdot a[j]+b[j]}\\\\dp[i] = (r[j]\\cdot a[i] + b[i])\\times \\frac{dp[j]}{r[j]\\cdot a[j]+b[j]}\\\\dp[i] = b[i]\\times \\frac{dp[j]}{r[j]\\cdot a[j]+b[j]} + a[i] \\times \\frac{r[j]\\cdot dp[j]}{r[j]\\cdot a[j]+b[j]}$$如果我们令：$$x[j] = \\frac{r[j]\\cdot dp[j]}{r[j]*a[j]+b[j]}, y[j] = \\frac{dp[j]}{r[j]\\cdot a[j]+b[j]}$$那么式子就会变成：$$dp[i] = a[i] \\times x[j] + b[i] \\times y[j]$$略微变换：$$y[j] = - \\frac{a[i]}{b[i]} \\cdot x[j] + \\frac{dp[i]}{b[i]}$$ 我们注意到，这里面的斜率仅与 $i$ 相关，$x,y$ 均只与 $j$ 相关，最后的截距下面除的是一个常数，那么只要截距最大， $dp[i]$ 就会最大。 而且，只要 $x[j]$ 和 $y[j]$ 一经确定，便不改变。 所以现在问题变成：支持插入点，查询某个给定斜率的直线且经过某个点，使得这条直线的截距最大。 在以往的斜率优化问题里面，我们一般有两个单调性：插入的点的 $x$ 坐标单调，直线的斜率单调。那么我们用单调队列就可以维护凸包，然而这里我们这两个性质全都没有，所以我们只能用更高级的东西，比如 $\\text{CDQ}$ 分治，比如 $\\text{Splay}$ 。 我用了 $\\text{Splay}$ 来维护这个上凸包。 具体实现的话，就是需要处理两个问题：找到第一个斜率较给定值大的点，和插入一个点。 在 $\\text{Splay}$ 上二分即可。最好是每个点代表这个点到前一个点的斜率。 先判断在不在凸包里，再根据x坐标插入，然后在向两边pop，维护凸包性质。注意pop的条件比较容易写错。 不知道为啥，BZOJ 上过不了。本地下下来数据、传到 luogu 上都可以过。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;ctime&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#define eps 1e-10#define inf 1e10using namespace std;const int MAXN = 1100000;int n,s;double a[MAXN],b[MAXN],r[MAXN];double dp[MAXN];int last[MAXN];double calx(int j){if(j == 0) return inf;return dp[j]*r[j] / (r[j]*a[j] + b[j]);}double caly(int j){return dp[j] / (r[j]*a[j]+b[j]);}double calc(int i,int j){return calx(j) * a[i] + caly(j) * b[i]; }double cals(int i,int j){ if(j == 0) return -inf; if(i == 0) return inf; double _x = calx(i)-calx(j); double _y = caly(i)-caly(j); //if(fabs(_x) &lt; eps) return _y&gt;0?inf:-inf; return _y/_x;}namespace Splay{ int p[MAXN&lt;&lt;2];double v[MAXN&lt;&lt;2]; int f[MAXN&lt;&lt;2],c[MAXN&lt;&lt;2][2],cnt; int root;//v 向左连 int newnode(int point,double val = 0){ int x = ++cnt; v[x] = val,p[x] = point; c[x][0] = c[x][1] = 0; return x; } void rotate(int x){ if(!x) return; int y = f[x],z = f[y],t = c[y][1] == x,w = c[x][1-t]; if(z) c[z][c[z][1]==y] = x; c[y][t] = w,c[x][1-t] = y; if(w) f[w] = y; f[x] = z;f[y] = x; if(!f[x]) root = x; } void splay(int x,int tar = 0){ while(f[x]!=tar){ int y = f[x],z = f[y]; if(f[y] != tar){ (c[y][1]==x)^(c[z][1]==y)?rotate(x):rotate(y); }rotate(x); } } int find(int x,double _v){ if(!x) return 0; if(_v &gt; v[x]) return find(c[x][0],_v); else{ int j = find(c[x][1],_v); return j!=0?j:x; } } int nxt(int x,int tmp){ if(!x) return 0; splay(x); int r = c[x][tmp]; if(!r) return 0; while(1){ if(c[r][1-tmp]) r = c[r][1-tmp]; else return r; } } int insert(int x,int fa,int point){ if(!x){ int w = newnode(point); if(fa == 0) root = w; c[fa][calx(point) &gt; calx(p[fa])] = w,f[w] = fa; int _x = nxt(w,0),_y = nxt(w,1); v[w] = cals(p[_x],p[w]); if(_y) v[_y] = cals(p[w],p[_y]); return w; } int tmp = calx(point) &gt; calx(p[x]); return insert(c[x][tmp],x,point); } void erase(int x){ int _x = nxt(x,0),_y = nxt(x,1); if(!_x &amp;&amp; !_y) root = 0; else if(!_x || !_y){ int t = _x == 0?_y:_x,tmp = _x==0?0:1; splay(t),c[t][tmp] = 0; } else{ splay(_x),splay(_y,_x); c[_y][0] = 0; } if(_y) v[_y] = cals(p[_x],p[_y]); } void update(int i){ int w = insert(root,0,i); int x,y; x = nxt(w,0),y = nxt(w,1); if(y &amp;&amp; cals(p[x],p[y]) &lt; v[y]){ erase(w);return; } x = nxt(w,1),y = nxt(x,1); while(y!=0){ if(cals(i,p[x]) &gt; cals(i,p[y])) break; erase(x); x = y; y = nxt(x,1); } x = nxt(w,0),y = nxt(x,0); while(y!=0){ if(cals(p[y],i) &gt; cals(p[x],i)) break; erase(x); x = y; y = nxt(x,0); } } int query(int i){ return find(root,-a[i]/b[i]); }};int main(){ scanf(\"%d %d\",&amp;n,&amp;s); for(int i = 1;i&lt;=n;i++) scanf(\"%lf %lf %lf\",&amp;a[i],&amp;b[i],&amp;r[i]); dp[1] = s; Splay::update(1); for(int i = 2;i&lt;=n;i++){ dp[i] = dp[i-1],last[i] = i; int j = Splay::query(i); if(calc(i,j) &gt; dp[i]) last[i] = j,dp[i] = calc(i,j); Splay::update(i); } printf(\"%.6lf\\n\",dp[n]); return 0;}","link":"/20180828-NOI2007-cash/"},{"title":"「梦想」","text":"什么是梦想呢… 序有的时候，总会有人问我：“你有梦想吗？”我向来是最烦这种问题的，所以往往搪塞一句回去：“没有。我就是条没有梦想的咸鱼。” 最近写完作文，再去细细回想，或许我也曾有过梦，只不过大约是忘记了吧。 梦·想一我不怎么做梦。我自认为我是一个非常现实的人，现实到不会幻想，现实到总会否定自己，现实到不会做梦。 某人就不一样。如果说我是个现实主义的人，那么我觉得这位的生活里，更多的是些许浪漫主义的情怀和洒脱。某人的梦，就比我的有趣的多了。 但我也有平衡现实主义的特点。对于我来说，只要不是特别大的事情，所有的上一天的不快在睡一觉之后，大多都是会忘掉的，长此以往，显得我的性格也就比较随和，不易生气了吧。 但我忘掉的恐怕也包括梦吧。 二感觉不论什么时候，如果你问我：“你以后想干什么啊？”我恐怕都会稍稍思考一会，然后遗憾的说道：“我不知道啊。” 的确，我从来都不知道我想要去做什么，我人生的意义是什么。或许我在小时候小小的高床上也曾经思考过，但一切都好像已经远去了。 最近我似乎又思考出了一个冠冕堂皇的借口，来抵御这些询问：“生而为生。”这个借口一出，终于摆脱了无尽的询问：懂得的人知道这是一个无关紧要的借口，不懂得人觉得这是一个无关紧要的玩笑。 于是，所有人似乎都觉得这件事情无关紧要了。 三渐渐的，也没有时间让我去思考了。 生活越来越烦躁了。越来越多的事情，让我简直腾不出手来。明天要考试了，今天得赶快复习；明天要上课了，今天要稍微预习一下；明天要讲新算法了，现在还不会。 总有那么多的事，在每一个方面堵住你的丝丝缕缕的梦，让你不得不回到沉重的桌前。无时无刻，身边萦绕着的都是嘈杂与烦乱的声音，督促着你上进，督促着你在一条无尽的独木桥上越走，越走，越远。 有什么可以去想的呢…只不过勉强能让自己不在这木桥上摔下去，摔得遍体鳞伤，摔得无处可归。 你问我什么是「梦」，什么是「想」？ 我不知道。 四小时候的梦想总是易碎的。我梦想着考年级第一，享受无边的夸耀；我梦想着什么东西一学就会，却无数次倍遭打击；我梦想着有一天能够买下家门口的一大片空地，可十多年过去，覆盖其上的仍然是一片荒芜。 我也不断的问自己：什么才是我真正想要的梦想？我究竟能做到什么？ 或许，我们大部分人，都是这苍茫世界中的一粒草芥吧。世界不会以你的意志为转移，你也很难去改变或者世界，甚至是你家门口的一片空地。我们所能做的，恐怕也只是活好自己，让自己活好，让你所有希望能够好好活着的人活好。除此之外，我们，不过是漫天大雪中被风无力裹挟着的一片雪花，只能打着转，被风吹着，到一个不知道什么的地方吧。 然而活着，这恐怕也不容易呢。 所以啊，我就在想我应该为什么而活着。但或许我心里早已有了答案吧。我不知道我从哪里得来的这个结论，也不知道任何有关的过程。 趁现在能开心的活着，做人多天真一点，去追寻自己内心想要的吧。 已经逝去的梦，就让它成为美好的回忆；还在手心的梦，就将它捧好，祈愿它永不离去。 一点更多的话最近我终于明白，哪有那么多梦想。 你的阶级，你的身份，你的人生在此刻之前的每一秒，都让你的某些梦想，或大或小，无声的坠地。 有的人，他们或出身显赫，或一世豪门。他们生来，就已经跨过了温饱、小康，这种在中国社会里还没有完全普及的生活。他们可以有梦想。他们如果今天想要干些什么，自会有人在明天，把所有他想要的，搬上桌去。 但其实，人们中的大部分，和他们，追求的所谓「梦想」，恐怕都不是一样的东西，甚至不在一个层次上。他们中有的人可以想着去改变世界，因为就算改变不了这个世界，他也能一辈子活在父辈的荫护之下。而对于大多数人，如果世界没有被你改变，那么，你就会被这个世界毁灭。 你应该去市井逛逛。看看那些在建筑工地上的工人，看看他们黝黑的肌肤，看看那些住在不到十平米的地下室里面的人。他们的奋斗，很多恐怕也都是为了晚上的一顿饭，为了能够在这个世界上拥有一些最基本的权利吧。 時間永是流駛，街市依舊太平。 百年前的工人就在社会的底层，而如今，仍然如此。那是什么人代替了土豪、地主、资本家和官僚阶级呢？ 不管是谁，我相信，他们肯定是有梦想的。 最后我还很天真，这是毫无疑问的。就像我现在看三年前的作文一样，三年后再来看这里，恐怕也会认为这不过是无病的牢骚，令人恶心。 但不论如何吧，这也是一点点微小的思想。虽然肯定十分的幼稚，但我想，以后再看到的时候，多少也会有那么一点点的启示吧。 Stay simple. Stay naïve. 应某人要求，写成这样一篇小文，以聊寄微情。 你的「梦想」？ 某人的一篇「梦想」 我从未想过在这里遇到她。她身上的文字，是应该让人经历了风沙的洗礼，怀着朝圣的心匍匐着翻过沙丘才能细细拜读，绝不是在这冰冷的玻璃柜里，与耶稣的画像和法老的木乃伊为邻，赤裸着暴露在游人迷茫的眼睛下，企盼着故人匆匆走过时的一瞥。我心里涌起一阵不平，一个强烈的愿望如热风一样席卷而来，把我带回一百年前的中国。 沙丘上浮出三个人影，一个骑在马上，另两个一前一后地跟着。走在前的牵着马，身材瘦高。后面的垂着手小步跟着，扮成道士模样。正是他们了。 马背上的外国人首先看到了我，他的面露戒备，稍稍拉紧了缰绳。“斯坦因！”三人应声而停，牵马的买办向我微微欠腰，眼神里却满是厌恶。“你我在这不毛之地相见定是有缘了。您既知道我们老板斯坦因先生的大名，相必对我们老板此行的高尚目的也有所耳闻。这马上所载皆是贵重之物，我等归京心切不便耽搁，见谅。”“等等。”我上前一步。“蒋孝琬，斯坦因不懂中文你大可不必对我说这冠冕堂皇之话。”他的脸突然拉下来：“不知您有何贵干。”“你我二人，还有王道士。”我看向他时他怕得只不断作揖念着“无量观”“我们三个都是中国人，这马上载的都是中国的宝物。你只告诉斯坦因我是在此等他来保他过沙漠的向导，机会一到我们就把斯坦因身上的枪拿过来，逼他和我们回去，把这些经书全放回藏经洞。他孤身在外不得不信任你，这事一定能成。”“您这是要置我于不义之地啊。”“不义？我是让您免做历史的罪人，被子孙万世唾弃！”“我只区区一个平民，流传千古倒是我的运气呢。只是拿了人的钱就得帮人做事，买卖定了就再无反悔的余地。” “他给了你多少钱。”我转向王道士。“大人念佛心虔，给了小道30英镑。”30英镑…千百年来大师们的智慧结晶只值30英镑！“你为什么不把这发现告诉朝廷，大清的国库里绝不止有30英磅啊！”“哼”蒋孝琬冷笑一声“朝廷的钱都去给老佛爷办寿了。上交了朝廷，沿途押韵的官员谁不从中抽利？先就把好东西挑光了。况且这朝廷也不稳固了，一路上到处都是军阀。这书要是落到他们手里，哼，肯定是撕了擦屁股…要我说，只有洋人靠的住…” 他的声音渐渐远了，烟霭下只剩落寞的我。神游归来，梦想破灭，面对着这一屋子的展品，我突然感到很自卑。历史的厚重压的我喘不过气。我不知道一个人的错误，需要多少后人来弥补。或者是否因为史书上只留下这一两个犯错的人的名字，我们就让他们来顶替一个民族的罪过。不愿再想了，只希望以后的人们不再在异国的博物馆里经受这梦想破灭的悲哀。 太强啦！","link":"/20180615-dream/"},{"title":"常见最小费用最大流算法学习笔记","text":"众所周知，最小费用最大流向来是一个算法很多的问题，下面总结了几个常用的最小费用最大流算法。 增广路算法（EK算法）每次都在原图的残余网络上进行一次最短路（ bellmanford 算法或者 spfa 算法）找出一条从原点到汇点的最短路，然后求出这条最短路上的最大可流流量并流满，直到找不出最短路为止。 最广泛使用的费用流算法。 完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;bits/stdc++.h&gt;using namespace std;const int inf = 0x3f3f3f3f;const int MAXN = 510,MAXM = 100000;struct Edge{ int from,to; int cap,flow; int cost,nex;}edge[MAXM*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c,int d){ // printf(\"add:%d %d %d %d\\n\",a,b,c,d); edge[ecnt] = (Edge){a,b,c,0,d,fir[a]}; fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,-d,fir[b]}; fir[b] = ecnt++;}int dis[MAXN],vis[MAXN],minf[MAXN],pree[MAXN];queue&lt;int&gt; q;bool spfa(int s,int t){ while(!q.empty()) q.pop(); memset(dis,0x3f,sizeof(dis)); memset(vis,0,sizeof(vis)); q.push(s);dis[s] = 0,minf[s] = inf; while(!q.empty()){ int nown = q.front();q.pop(); vis[nown] = 0; for(int nowe = fir[nown];nowe;nowe = edge[nowe].nex){ Edge &amp; e = edge[nowe]; if(dis[e.to] &gt; dis[nown] + e.cost &amp;&amp; e.cap &gt; e.flow){ dis[e.to] = dis[nown] + e.cost; minf[e.to] = min(minf[nown],e.cap - e.flow); pree[e.to] = nowe; if(vis[e.to] == 0){ q.push(e.to); vis[e.to] = 1; } } } } return dis[t] &lt; inf;}int min_cost_flow(int s,int t,int k = inf){ int ans = 0; while(spfa(s,t) &amp;&amp; k &gt; 0){ if(dis[t] &gt; 0) break; for(int nown = t,nowe = 0;nown != s;nown = edge[nowe].from){ nowe = pree[nown]; edge[nowe].flow += minf[t],edge[nowe^1].flow -= minf[t]; } ans += dis[t] * minf[t]; } return ans;}int n,m,k;char s[MAXN];char t[MAXN];bool check(int pos,int len){ if(pos + len - 1 &gt; n) return 0; for(int i = 1;i&lt;=len;i++) if(s[pos + i - 1] != t[i]){ return 0; } return 1;}int main(){ scanf(\"%d\",&amp;n),scanf(\"%s\",s+1); int S = 0,T = n+2; scanf(\"%d\",&amp;m); for(int i = 1;i&lt;=m;i++){ int p; scanf(\"%s %d\",t+1,&amp;p); int len = strlen(t+1); for(int i = 1;i&lt;=n;i++){ if(check(i,len)) addedge(i,i+len,1,-p); } } scanf(\"%d\",&amp;k); for(int i = 1;i&lt;=n;i++){ addedge(i,i+1,inf,0); } addedge(S,1,k,0); addedge(n+1,T,k,0); printf(\"%d\\n\",-min_cost_flow(S,T)); return 0;} （CF717G） 消圈算法TBD。 连续最短路算法（zkw费用流）TBD。 原始对偶算法实现1每次进行 spfa ，然后在最短路上做dinic多路增广。 完整代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 5100,MAXM = 51000;namespace MCMF{ int S,T; struct Edge{ int from,to; int cap,flow; int cost,nex; }edge[MAXM*2]; int fir[MAXN],ecnt = 2; void addedge(int a,int b,int c,int d){ edge[ecnt] = (Edge){a,b,c,0, d,fir[a]},fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,-d,fir[b]},fir[b] = ecnt++; } int dis[MAXN],inq[MAXN]; bool spfa(){ memset(dis,0x3f,sizeof(dis)); static queue&lt;int&gt; q; dis[S] = 0;q.push(S); while(!q.empty()){ int x = q.front();q.pop();inq[x] = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(edge[e].cap &gt; edge[e].flow &amp;&amp; dis[v] &gt; dis[x] + edge[e].cost){ dis[v] = dis[x] + edge[e].cost; if(!inq[v]) q.push(v),inq[v] = 1; } } } return dis[T] &lt; dis[0]; } int dfs(int x,int limit = inf){ if(x == T || limit == 0) return limit; int sumf = 0;inq[x] = 1; for(int e = fir[x];e;e = edge[e].nex){ int v = edge[e].to; if(!inq[v] &amp;&amp; dis[v] == dis[x] + edge[e].cost){ int f = dfs(v,min(limit,edge[e].cap - edge[e].flow)); sumf += f,limit -= f; edge[e].flow += f, edge[e^1].flow -= f; if(limit == 0) break; } } return sumf; } pair&lt;int,int&gt; solve(int s,int t){ S = s,T = t; int ansf = 0,ansc = 0; while(spfa()){ int f = dfs(s); memset(inq,0,sizeof(inq)); ansf += f,ansc += f * dis[t]; } return make_pair(ansf,ansc); }}int n,m,s,t;int main(){ // scanf(\"%d %d %d %d\",&amp;n,&amp;m,&amp;s,&amp;t); scanf(\"%d %d\",&amp;n,&amp;m);s = 1,t = n; for(int i = 1;i&lt;=m;i++){ int a,b,c,d; scanf(\"%d %d %d %d\",&amp;a,&amp;b,&amp;c,&amp;d); MCMF::addedge(a,b,c,d); } pair&lt;int,int&gt; ans = MCMF::solve(s,t); printf(\"%d %d\\n\",ans.first,ans.second); return 0;} 实现2简单来说，就是我们可以在残量网络上进行一次最短路操作（bellman ford），然后每次去维护一个label，每次扩展完（使用 dinic 仅在符合条件的道路上更改）更新最短路label（使用 dijkstra 算法），然后使用一个松弛操作，代码如下： 1234void reduce(int s,int t){ for(int e = 2;e &lt;= ecnt;e++) E0.cost += dis[E0.to] - dis[E0.from]; delta += dis[s];} 然后就可以跑 dijkstra 了。 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include &lt;bits/stdc++.h&gt;#include &lt;bits/extc++.h&gt;#include &lt;unistd.h&gt;#define E0 edge[e]#define E1 edge[e^1]#define inf 0x3f3f3f3fusing namespace std;const int MAXN = 410,MAXM = 15010;struct Edge{ int from,to,cap,flow,cost,nex;}edge[MAXM*2];int fir[MAXN],ecnt = 2;void addedge(int a,int b,int c,int d){ edge[ecnt] = (Edge){a,b,c,0, d,fir[a]},fir[a] = ecnt++; edge[ecnt] = (Edge){b,a,0,0,-d,fir[b]},fir[b] = ecnt++;}struct Node{ int x,d; bool operator &lt; (const Node &amp;_n)const{return d &gt; _n.d;} Node(int _x,int _d):x(_x),d(_d){}};// #define Node pair&lt;int,int&gt;// typedef __gnu_pbds::priority_queue&lt;Node, less&lt;Node&gt;, __gnu_pbds::pairing_heap_tag&gt; heap;// typedef priority_queue&lt; Node ,vector&lt; Node &gt;,greater&lt;Node&gt;&gt; heap;typedef priority_queue&lt;Node&gt; heap;int n,m;int dis[MAXN],inq[MAXN],vis[MAXN],ansf,ansc,delta;void reduce(int s,int t){ for(int e = 2;e &lt;= ecnt;e++) E0.cost += dis[E0.to] - dis[E0.from]; delta += dis[s];}bool bellman(int s,int t){// t 为起点 static queue&lt;int&gt; q; memset(dis,0x3f,sizeof(int)*(n+1));while(!q.empty()) q.pop(); dis[t] = 0,q.push(t);inq[t] = 1; while(!q.empty()){ int x = q.front();q.pop();inq[x] = 0; for(int e = fir[x];e;e = edge[e].nex){ int v = E0.to,c = E1.cap,f = E1.flow,l = E1.cost; if(c &gt; f &amp;&amp; dis[v] &gt; dis[x] + l){ dis[v] = dis[x] + l; if(!inq[v]) inq[v] = 1,q.push(v); } } } return dis[s] &lt; inf;}bool dijkstra(int s,int t){ memset(dis,0x3f,sizeof(int)*(n+1)); static heap q; dis[t] = 0;q.push(Node(t,0)); while(!q.empty()){ Node p = q.top();q.pop();int x = p.x; if(p.d != dis[x]) continue; for(int e = fir[x];e;e = edge[e].nex){ int v = E0.to,c = E1.cap,f = E1.flow,l = E1.cost; if(c &gt; f &amp;&amp; dis[v] &gt; dis[x] + l){ dis[v] = dis[x] + l,q.push(Node(v,dis[v])); } } } return dis[s] &lt; inf;}int dfs(int x,int t,int limit = inf){ if(x == t || limit == 0) return limit; vis[x] = 1; // differ from dinic int sumf = 0; for(int &amp;e = cur[x];e;e = edge[e].nex){ int v = E0.to,c = E0.cap,f = E0.flow,l = E0.cost; if(!vis[v] &amp;&amp; c &gt; f &amp;&amp; l == 0){ int newf = dfs(v,t,min(limit,c-f)); sumf += newf,limit -= newf; E0.flow += newf,E1.flow -= newf; if(limit == 0) break; } } return sumf;}void augment(int s,int t){ int curf = 0; while(memset(vis,0,sizeof(int)*(n+1)),(curf = dfs(s,t))){ ansf += curf,ansc += curf * delta; }}void primaldual(int s,int t){ if(!dijkstra(s,t)) return; ansf = ansc = delta = 0; do{ reduce(s,t),augment(s,t); }while(dijkstra(s,t));}int main(){ scanf(\"%d %d\",&amp;n,&amp;m); int S = 1,T = n; for(int i = 1;i&lt;=m;i++){ int a,b,c,d; scanf(\"%d %d %d %d\",&amp;a,&amp;b,&amp;c,&amp;d); addedge(a,b,c,d); } primaldual(S,T); printf(\"%d %d\\n\",ansf,ansc); return 0;}","link":"/20190322-mfmc-notes/"},{"title":"莫比乌斯反演入门题目-题解","text":"以下有几道莫比乌斯反演入门题的详尽版的题解（公式推演）。 [POI2007]ZAP-Queries题意求：$$\\sum_{i=1}^n \\sum_{j=1}^m [\\gcd(i,j)=d]$$ 解法1倒一倒式子：$$\\text{ans} = \\sum_{i=1}^n \\sum_{j=1}^m [\\gcd(i,j)=d]\\\\=\\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [\\gcd(i,j)=1]\\\\$$ 设$$f(d) = \\sum_{i=1}^{x}\\sum_{j=1}^{y} [\\gcd(i,j)=d]\\\\$$ 若：$$g(d) = \\sum_{d|k} f(k)$$ 则可以发现 $g(d) = \\lfloor \\frac{x}{d} \\rfloor \\cdot \\lfloor \\frac{y}{d} \\rfloor$ 反演得：$$f(d) = \\sum_{d|k} \\mu(\\frac{k}{d}) g(k)$$ 那么：$$f(1) = \\sum_{k=1}^{\\min(x,y)} \\mu(k) g(k)$$ 所以：$$\\text{ans} = f(1) = \\sum_{k=1}^{\\min(\\lfloor \\frac{n}{d} \\rfloor,\\lfloor \\frac{m}{d} \\rfloor)} \\mu(k) g(k)\\\\= \\sum_{k=1}^{\\min(\\lfloor \\frac{n}{d} \\rfloor,\\lfloor \\frac{m}{d} \\rfloor)} \\mu(k) \\cdot \\lfloor \\frac{x}{d} \\rfloor \\lfloor \\frac{y}{d} \\rfloor\\\\$$ 可以利用整除分块，单次查询时间时间复杂度 $O(\\sqrt n)$。所以时间复杂度是 $O(n + T\\sqrt n)$ 。 [HAOI2011]Problem b题意求：$$\\sum_{x=a}^b \\sum_{y=c}^d [gcd(x,y)=d]$$ 解法设：$$\\text{ans} = F(a,b,c,d) = \\sum_{x=a}^b \\sum_{y=c}^d [gcd(x,y)=d],\\\\G(n,m) = \\sum_{x=1}^n \\sum_{y=1}^m [gcd(x,y)=d]$$利用容斥原理，可以发现这个式子可以转化成$$F(a,b,c,d) \\\\= G(b,d) - G(a-1,d) - G(b,c-1) + G(a-1,c-1)$$然后每一个 $G(n,m)$ 都可以按照上题的单次 $O(\\sqrt n)$ 的做法求出。所以时间复杂度是 $O(n + T\\sqrt n)$ 。 YY的GCD题意求：$$\\sum_{i=1}^{k} \\sum_{x=1}^n \\sum_{y=1}^m [gcd(i,j)=p_i]\\\\$$ 解法1$$\\sum_{i=1}^{k} \\sum_{x=1}^n \\sum_{y=1}^m [gcd(i,j)=p_i]\\\\= \\sum_{i=1}^k \\sum_{x=1}^{\\lfloor \\frac{n}{p_i} \\rfloor} \\sum_{y=1} ^{\\lfloor \\frac{m}{p_i}\\rfloor}[gcd(i,j)=1]$$ 设$$f(k) = \\sum_{i=1}^n \\sum_{j=1}^m [gcd(i,j)=k]$$ 若$$g(k) = \\sum_{k|d} f(d)= \\lfloor \\frac{n}{k} \\rfloor \\cdot \\lfloor \\frac{m}{k} \\rfloor$$ 莫比乌斯反演得 $$f(k) = \\sum_{k|d} \\mu(\\frac{d}{k}) g(d)= \\sum_{i = 1}^{\\lfloor \\frac{\\min(n,m)}{k} \\rfloor}\\mu(i)g(ik)\\\\= \\sum_{i = 1}^{\\lfloor \\frac{\\min(n,m)}{k} \\rfloor}\\mu(i) \\lfloor \\frac{n}{ik} \\rfloor \\cdot \\lfloor \\frac{m}{ik} \\rfloor$$ 所以 $$f(1) = \\sum_{i = 1}^{ \\min(n,m) }\\mu(i) \\cdot \\lfloor \\frac{n}{i} \\rfloor \\cdot \\lfloor \\frac{m}{i} \\rfloor$$ 则原式： $$\\sum_{i=1}^k \\sum_{x=1}^{\\lfloor \\frac{n}{p_i} \\rfloor} \\sum_{y=1} ^{\\lfloor \\frac{m}{p_i}\\rfloor}[gcd(i,j)=1]\\\\= \\sum_{i=1}^k \\sum_{d=1}^{\\min(\\lfloor \\frac{n}{p_i} \\rfloor,\\lfloor \\frac{m}{p_i} \\rfloor )}\\mu(d) \\cdot \\lfloor \\frac{n}{d p_i} \\rfloor \\cdot \\lfloor \\frac{m}{dp_i} \\rfloor\\\\$$ 设$T_i = d p_i$，则有：原式$$\\sum_{i=1}^k \\sum_{d=1}^{\\min(\\lfloor \\frac{n}{p_i} \\rfloor,\\lfloor \\frac{m}{p_i} \\rfloor )}\\mu(d) \\cdot \\lfloor \\frac{n}{d p_i} \\rfloor \\cdot \\lfloor \\frac{m}{dp_i} \\rfloor\\\\= \\sum_{i=1}^k \\sum_{d=1}^{\\min(\\lfloor \\frac{n}{p_i} \\rfloor,\\lfloor \\frac{m}{p_i} \\rfloor )}\\mu(\\frac{T_i}{p_i}) \\cdot \\lfloor \\frac{n}{T_i} \\rfloor \\cdot \\lfloor \\frac{m}{T_i} \\rfloor\\\\= \\sum_{i=1}^k \\sum_{p_i | T}\\mu(\\frac{T}{p_i}) \\cdot \\lfloor \\frac{n}{T} \\rfloor \\cdot \\lfloor \\frac{m}{T} \\rfloor\\\\= \\sum_{T=1}^{\\min(n,m)} \\sum_{p_i|T} \\mu(\\frac{T}{p_i}) \\cdot \\lfloor \\frac{n}{T} \\rfloor \\cdot \\lfloor \\frac{m}{T} \\rfloor\\\\= \\sum_{T=1}^{\\min(n,m)} \\lfloor \\frac{n}{T} \\rfloor \\lfloor \\frac{m}{T} \\rfloor \\sum_{p_i|T} \\mu(\\frac{T}{p_i}) \\\\$$ 令$$h(x) = \\sum_{p_i|x} \\mu(\\frac{x}{p_i})$$ 所以原式化为： $$\\sum_{T=1}^{\\min(n,m)} \\lfloor \\frac{n}{T} \\rfloor \\lfloor \\frac{m}{T} \\rfloor \\sum_{p_i|T} \\mu(\\frac{T}{p_i}) \\\\= \\sum_{i=1}^{\\min(n,m)} \\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{i} \\rfloor h(i)$$ 只需要求出 $h(i)$ 的前缀和，我们就可以 $O(\\sqrt{n})$ 整除分块算出。 观察$$h(x) = \\sum_{p_i|x} \\mu(\\frac{x}{p_i})$$ 可以发现，如果我们枚举每个质数，再将所有的该质数的倍数的g[i * prime[j]] += mu[i]都加上去。 由于枚举倍数的调和级数 $\\frac{n}{1} + \\frac{n}{2} + \\cdots + \\frac{n}{n} = O(\\ln n + r)$ ,所以这个枚举过程的复杂度是 $O(n \\ln n)$ 的。 注意到这个 $h(x)$ 应当也是一个积性函数，所以事实上可以在线性素数筛的时候直接计算出 $h(x)$ 的值，这个过程就是 $O(n)$ 的。 [NOI2010]能量采集题意给定两个整数$n,m$，对于平面上的整点 $\\{(x,y)|x \\in [1,n],y \\in [1,m],x,y \\in \\mathbb Z\\}$ 。若 $(x,y)$ 与 $(0,0)$ 的连线上有 $k$ 个整点（不包括 $(0,0)$ , $(n,m)$），则产生的贡献为 $2k+1$ 。求所有满足条件的点的贡献总和。 解法一个结论：从 $(0,0)$ 到 $(n,m)$ 的线路上，有 $\\gcd(n,m)-1$ 个整点(不包括 $(0,0)$ , $(n,m)$ )。 想一想很好明白：令 $t$ 是 $n,m$ 的公因数 $(\\frac {n}{t} , \\frac {m}{t})$ 就相当于步长， $m,n$ 一定时 $t$ 越大，步长越小，整点就越多。 $\\gcd(n,m)$ 是 $n$ ,$ m$ 的最大公因数，所以就是最多整点的个数了。 所以问题转化为：求$$\\sum_{i = 1}^{n} \\sum_{j = 1}^{m}2\\times \\gcd(n,m)-1$$的值。 我们进行一些微小的变换： $$\\sum_{i = 1}^{n} \\sum_{j = 1}^{m}2\\times \\gcd(n,m)-1\\\\= (2 \\sum_{i = 1}^{n} \\sum_{j = 1}^{m}\\gcd(n,m)) - n \\times m$$ 问题转化为求：$$\\sum_{i = 1}^{n} \\sum_{j = 1}^{m}\\gcd(n,m)$$ $$\\text{ans} = \\sum_{i = 1}^{n} \\sum_{j = 1}^{m}\\gcd(n,m)\\\\= \\sum_{d=1}^{\\min(n,m)} d \\times (\\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} [\\gcd(i,j)=1])\\\\$$ 设： $$f(d) = \\sum_{i=1}^{x} \\sum_{j=1}^{y} [\\gcd(i,j)=d]$$ 由第一题，可以发现： $$f(1) = \\sum_{i = 1}^{ \\min(x,y) }\\mu(i) \\cdot \\lfloor \\frac{x}{i} \\rfloor \\cdot \\lfloor \\frac{y}{i} \\rfloor$$ 回代得： $$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\times (\\sum_{i = 1}^{ \\min(\\lfloor \\frac{n}{d} \\rfloor,\\lfloor \\frac{m}{d} \\rfloor) }\\mu(i) \\cdot \\lfloor \\frac{n}{id} \\rfloor \\cdot \\lfloor \\frac{m}{id} \\rfloor)\\\\$$ 设 $T = id$，可以得到：$$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\times (\\sum_{i = 1}^{ \\min(\\lfloor \\frac{n}{d} \\rfloor,\\lfloor \\frac{m}{d} \\rfloor) }\\mu(i) \\cdot \\lfloor \\frac{n}{T} \\rfloor \\cdot \\lfloor \\frac{m}{T} \\rfloor)\\\\$$ 改为枚举 $T$，得到：$$\\text{ans} = \\sum_{T=1}^{\\min(n,m)} \\lfloor \\frac{n}{T} \\rfloor \\cdot \\lfloor \\frac{m}{T} \\rfloor (\\sum_{d|T} \\mu(\\frac{T}{d}) \\cdot d)$$ 如果令：$$h(T) = \\sum_{d|T} \\mu(\\frac{T}{d}) \\cdot d$$ 发现 $h(T)$ 是一个积性函数，所以可以 $O(n)$ 线性筛出来， 然后就可以得到： $$\\text{ans} = \\sum_{T=1}^{\\min(n,m)} h(T) \\cdot \\lfloor \\frac{n}{T} \\rfloor \\cdot \\lfloor \\frac{m}{T} \\rfloor$$ 利用整除分块可以做到 $O(\\sqrt n)$ 单次询问。 时间复杂度： $O(n + \\sqrt n)$ 这题亦可 $O(n \\log n)$ 手动模拟容斥原理。 [国家集训队]Crash的数字表格题意求：$$\\sum_{x=1}^{n} \\sum_{y=1}^{m} \\text{lcm}(x,y)$$数据范围： $n,m \\leq 10^7$ 解法1 $O(n)$$$\\sum_{x=1}^{n} \\sum_{y=1}^{m} \\text{lcm}(x,y)\\\\= \\sum_{x=1}^{n} \\sum_{y=1}^{m} \\frac{xy}{\\gcd(x,y)}$$ 我们可以枚举 $\\gcd(x,y)$ 的值 $d$ ，然后就把式子化成：$$\\sum_{x=1}^{n} \\sum_{y=1}^{m} \\frac{xy}{\\gcd(x,y)}\\\\= \\sum_{d=1}^{\\min(n,m)}\\sum_{x=1}^{n} \\sum_{y=1}^m \\frac{xy}{d} [\\gcd(x,y) = d]\\\\= \\sum_{d=1}^{\\min(n,m)} d \\; \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{m}{d} \\rfloor} ij[\\gcd(i,j)=1]\\\\$$ 设：$$F(x,y) = \\sum_{i=1}^{x} \\sum_{j=1}^{y} ij[\\gcd(i,j)=1]\\\\$$ 则：$$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\cdot F(\\lfloor \\frac{n}{d}\\rfloor,\\lfloor \\frac{m}{d}\\rfloor)$$ 设：$$h(x,y) = \\sum_{i=1}^x \\sum_{j=1}^y ij= \\frac{x(x+1)}{2} \\cdot \\frac{y(y+1)}{2}$$ $h(x,y)$ 可以 $O(1)$ 计算得到。 我们进行莫比乌斯反演，尝试求出 $F(x,y)$ 的值： （以下默认上界分别为 $x,y$）设$$f(d) = \\sum_{i=1}^{x} \\sum_{j=1}^{y} ij[\\gcd(i,j)=d],g(d) = \\sum_{d|k} f(k)\\\\$$ 我们发现， $g(d)$ 事实上可以表示为： $$g(d) = d^2 \\times \\sum_{i=1}^{\\lfloor \\frac{x}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{y}{d} \\rfloor} ij = d^2 \\times h(\\lfloor \\frac{x}{d} \\rfloor, \\lfloor \\frac{y}{d} \\rfloor)$$ 经过反演： $$f(d) = \\sum_{d|k} \\mu(\\frac{k}{d}) g(k)\\\\= \\sum_{d|k} \\mu(\\frac{k}{d}) \\cdot k^2 \\cdot h(\\lfloor \\frac{x}{k} \\rfloor, \\lfloor \\frac{y}{k} \\rfloor)$$ 所以： $$f(1) = \\sum_{k=1}^{\\min(x,y)} \\mu(k) \\cdot k^2 \\cdot h(\\lfloor \\frac{x}{k} \\rfloor, \\lfloor \\frac{y}{k} \\rfloor)$$ 那么，$$F(x,y) = f(1) = \\sum_{k=1}^{\\min(x,y)} \\mu(k) \\cdot k^2 \\cdot h(\\lfloor \\frac{x}{k} \\rfloor, \\lfloor \\frac{y}{k} \\rfloor)$$ 这个东西可以整除分块，所以我们每计算一个 $F(x,y)$ 的复杂度是 $O(\\sqrt{n})$，根据： $$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\cdot F(\\lfloor \\frac{n}{d}\\rfloor,\\lfloor \\frac{m}{d}\\rfloor)$$ 我们发现，这里对于所有的 $d$ 来说， $\\lfloor \\frac{n}{d}\\rfloor$ 与 $\\lfloor \\frac{m}{d}\\rfloor$ 也最多分别有 $\\sqrt{n}$ 个取值，所以我们最多只需要计算 $O(\\sqrt{n})$ 次 $F(x,y)$ ，所以最后的时间复杂度是 $O(n)$。 解法2 $O(n + T\\sqrt {n})$我们有$$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\cdot F(\\lfloor \\frac{n}{d}\\rfloor,\\lfloor \\frac{m}{d}\\rfloor)$$ 又：$$F(x,y) = \\sum_{k=1}^{\\min(x,y)} \\mu(k) \\cdot k^2 \\cdot h(\\lfloor \\frac{x}{k} \\rfloor, \\lfloor \\frac{y}{k} \\rfloor)\\\\$$ 代入得：$$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\cdot \\sum_{k=1}^{\\min(\\lfloor \\frac{n}{d}\\rfloor,\\lfloor \\frac{m}{d}\\rfloor)} \\mu(k) \\cdot k^2 \\cdot h(\\lfloor \\frac{n}{dk} \\rfloor, \\lfloor \\frac{m}{dk} \\rfloor)$$ 设 $dk = T$，则有： $$\\text{ans} = \\sum_{d=1}^{\\min(n,m)} d \\cdot \\sum_{k=1}^{\\min(\\lfloor \\frac{n}{d}\\rfloor,\\lfloor \\frac{m}{d}\\rfloor)} \\mu(k) \\cdot k^2 \\cdot h(\\lfloor \\frac{n}{T} \\rfloor, \\lfloor \\frac{m}{T} \\rfloor)$$ 枚举 $T$ ，则有：$$\\text{ans} = \\sum_{T=1}^{\\min(n,m)} \\sum_{d|T} d \\cdot {\\lfloor \\frac{T}{d} \\rfloor}^2 \\mu(\\lfloor \\frac{T}{d} \\rfloor) \\cdot h(\\lfloor \\frac{n}{T} \\rfloor, \\lfloor \\frac{m}{T} \\rfloor)$$ 简单整理下： $$\\text{ans} = \\sum_{T=1}^{\\min(n,m)} h(\\lfloor \\frac{n}{T} \\rfloor, \\lfloor \\frac{m}{T} \\rfloor) \\sum_{d|T} \\lfloor \\frac{T}{d} \\rfloor \\cdot {d}^2 \\mu(d)$$ 拎出来后面的一坨：$$f’(T) = \\sum_{d|T} \\lfloor \\frac{T}{d} \\rfloor \\cdot {d}^2 \\mu(d)$$ 发现这是一个积性函数，所以可以 $O(n)$ 线性筛出来，然后就可以配合整除分块 $O(\\sqrt n)$ 完成单词询问。 [SDOI2015]约数个数和题意设 $d(x)$ 为 $x$ 的约数个数，给定 $N$ 、$M$ ，求 $$\\sum^N_{i=1}\\sum^M_{j=1}d(ij)$$ 解法我们有如下结论： $$d(ij) = \\sum_{x|i} \\sum_{y|j} [\\gcd(x,y) = 1]$$ 证明： 我们对 $i$ 和 $j$ 两个数做唯一分解 ，得到：$$i = {p_1}^{a_1} \\times {p_2}^{a_2} \\times \\cdots \\times {p_n}^{a_n}\\\\j = {p_1}^{b_1} \\times {p_2}^{b_2} \\times \\cdots \\times {p_n}^{b_n}\\\\$$ 所以我们知道$$d(ij) = \\prod_{x=1}^n {(a_x + b_x + 1)}$$ 我们需要证明，分别从 $i$ 和 $j$ 中选择两个互质的约数的方案数也等于上式。 我们发现，在约数的构造中，不同质因子的选取是独立的。所以我们只需要考虑一个质因子的选取方案数，然后把所有质因子做一个连乘即可。 因为不能有公共的因子，所以对 $p_1$ 这个质因子来说，我们可以正好找出 $a_1+b_1+1$ 种选取方法，分别为： $$(1,0),(2,0),\\cdots,(a_1,0)\\\\(0,1),(0,2),\\cdots,(0,b_1)\\\\(0,0)$$ 可以证明，这些不同的的选取可以保证我们选择的因数不会完全相同。 所以可以证明：$$d(ij) = \\sum_{x|i} \\sum_{y|j} [\\gcd(x,y) = 1]$$ 原式： $$\\sum^N_{i=1}\\sum^M_{j=1}d(ij)\\\\= \\sum^N_{i=1}\\sum^M_{j=1}\\sum_{x|i} \\sum_{y|j} [\\gcd(x,y) = 1]\\\\= \\sum_{x=1}^N\\sum_{y=1}^M\\sum_{x|i} \\sum_{y|j} [\\gcd(x,y) = 1]\\\\= \\sum_{x=1}^N\\sum_{y=1}^M [\\gcd(x,y) = 1] \\sum_{x|i} \\sum_{y|j} 1\\\\= \\sum_{x=1}^N\\sum_{y=1}^M [\\gcd(x,y) = 1] \\lfloor \\frac{N}{x} \\rfloor \\lfloor \\frac{M}{y} \\rfloor\\\\$$ 设$$f(d) = \\sum_{x=1}^N\\sum_{y=1}^M [\\gcd(x,y) = d] \\lfloor \\frac{N}{x} \\rfloor \\lfloor \\frac{M}{y} \\rfloor\\\\$$ 若$$g(d) = \\sum_{d|i} f(i)$$ 可以发现，此时 $x,y$ 为所有 $d$ 的倍数，所以：$$g(d) = \\sum_{i=1}^{\\lfloor \\frac{N}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{M}{d} \\rfloor} \\lfloor \\frac{N}{id} \\rfloor \\lfloor \\frac{M}{jd} \\rfloor$$ 进行一步反演：$$f(d) = \\sum_{d|k} \\mu(\\frac{k}{d}) g(k)$$ 则： $$f(1) = \\sum_{k=1}^{\\min(n,m)} \\mu(k) g(k)\\\\= \\sum_{k=1}^{\\min(n,m)} \\mu(k) \\sum_{i=1}^{\\lfloor \\frac{N}{k} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{M}{k} \\rfloor} \\lfloor \\frac{N}{ik} \\rfloor \\lfloor \\frac{M}{jk} \\rfloor\\\\= \\sum_{k=1}^{\\min(n,m)} \\mu(k) (\\sum_{i=1}^{\\lfloor \\frac{N}{k} \\rfloor}\\lfloor \\frac{N}{ik} \\rfloor) (\\sum_{j=1}^{\\lfloor \\frac{M}{k} \\rfloor} \\lfloor \\frac{M}{jk} \\rfloor)\\\\$$ 我们发现： $$\\sum_{x=1}^nd(x) = \\sum_{i=1}^{n}\\lfloor \\frac{n}{i} \\rfloor$$ 所以： $$\\text{ans} = \\sum_{k=1}^{\\min(n,m)} \\mu(k) (\\sum_{i=1}^{\\lfloor \\frac{N}{k} \\rfloor}\\lfloor \\frac{N}{ik} \\rfloor) (\\sum_{j=1}^{\\lfloor \\frac{M}{k} \\rfloor} \\lfloor \\frac{M}{jk} \\rfloor)\\\\= \\sum_{k=1}^{\\min(n,m)} \\mu(k) \\sum_{i=1}^{\\lfloor \\frac{N}{k} \\rfloor}d(i) \\sum_{j=1}^{\\lfloor \\frac{M}{k} \\rfloor} d(j)\\\\$$ 令： $$h(x) = \\sum_{i=1}^x d(i)$$ 则： $$\\text{ans} = \\sum_{k=1}^{\\min(n,m)} \\mu(k) \\cdot h(\\lfloor \\frac{N}{k} \\rfloor) \\cdot h(\\lfloor \\frac{M}{k} \\rfloor)\\\\$$ 我们发现 $d(i)$ 是一个积性函数，可以 $O(n)$ 线性筛，然后 $h(x)$ 可以 $O(n)$ 前缀和，然后就可以 $O(\\sqrt n)$ 整除分块单次出解。","link":"/20180825-mobius-inversion/"},{"title":"衡水中学游记","text":"衡水市，2017年常住人口446.0万人，GDP1550.1亿元，人均GDP3.47万元，衡水市教育局预算支出68644.4万元。 北京市海淀区，2017年常住人口348.0万人，GDP5915.3亿元，人均GDP17.00万元，海淀区教育委员会预算支出1038648.0万元。 X大附中，高中在校生约3000人，一本率近100%，清北录取人数119人。 河北衡水中学，在校生约10000人，一本率超过85%，清北录取人数175人。 写在前面\b\b\b2018年4月29日，我去衡水参观了衡水中学的开放日。参观的时间和内容都不是很充分，\b我作为一个知名“素质教育”学校的学生，\b某些事情上的观点有可能并不准确和正确。如有这些情况，可以留言告知，我会酌情删改。 引子2018年4月29日，河北省衡水市。晴，18-31摄氏度。 驱车五个小时，终于从北京到达了衡水。 总是说要出北京去见见世面，去观察那些不是那么熟悉的地方，所以一看到衡中开放日，就暗暗下定决心，要去这所只在新闻里听闻过的学校。以至于后面几天听说清华的校庆可以去观礼，也仍然去了衡水。甚至就在去之前的一天，还跟同学开玩笑说：“您去清华签约，我只能去衡水复读了。” 早上的路程说不上顺利。六点钟就从北京出发，一路目睹了许多追尾车祸，最后竟11点才到了衡中门口。 下了车，就拿好东西，向衡中的大门缓缓走去。那时正是中午，天气很热，天空上也没有一点的浮云，穿上短袖也感到少许闷热。突然间，衡中的大门就出现了在眼前。 衡水中学正校门：酷似首都师范大学 从停车处走到校门的路上，一路的景象也让我不禁唏嘘。一条笔直的大道，路旁的店铺则大多与教育有关，甚至还有在地上摆了一地高中教材和五三的小贩。脚下的道路虽然已经硬化，但是仍然不甚平整。在大门口，停满了各种各样的电动车和三轮车，车上撑着遮阳伞的小摊贩也举目可见。如果你不说这里是衡水中学，那么我一定会把这个一个省最强，乃至全国最强的中学之一的学校当作一个普通十八线小县城的一所普通的高中。 然而这是衡水中学。 \b图：证明确实去过 校园\b衡中的校园，其实并不和X大附中的\b校园\b\b的格局有什么多大的区别。但相比于\bX大附中，衡中的校园显得更大一些。 0x01进门的左手边就是一门大炮和一个小湖。 \b图：神奇的加农炮 不止左手边是一门大炮，右手边就是一台62坦克。果然是又红又专啊！到处都是关于十九大和\b今年的人大换届的展板\b，政治觉悟实在是高！ 图：62式坦克 初教6\b教练机 一直羡慕校园里有水的学校，比如101。如果一个学校\b里面有活水，那么这所学校的气氛，就一定不会死气沉沉，在其中\b学习一定会是充满愉快的。遇到什么困难，去看看\b\b澄澈的水面，总是会让人觉得人生是充满希望的。但我想人大的一勺之池大约是不算在其中的。 图：衡中湖 0x02\b\b走到最里面，就是\b衡中的操场了。 图：操场及标语 全世界的操场都是差不多的\b样子。不过我还是要说…你X大附中每年几个亿的经费能不能修个草皮？？？\b全世界的草皮都不知道比破校好到哪里去了。 有点特色的就是标语。开始还没什么。站在操场的中央，越读越觉得有趣。没有看到跑操的示范，也不好再说些\b什么，这个章节就简短一些了。 \b图：衡水中学的学生正在打篮球 这张图也让我印象很深刻。衡中的\b学生，再怎么样，也还可以是学生的嘛。 0x03往外走的路上，在树梢的枝头瞟见\b高三\b(or高二？)的教学楼上有着一面几乎分毫不差的大钟。 图：教学楼上的钟 或许这也是衡中的几乎变态的时间规划的体现吧。刚看到觉得有些意外，但渐渐地也觉得\b这些东西，也不是什么坏的东西啊。 趁着\b家长会偷偷溜进了高一的教室。接下来这一段大概是全文我感觉最有意思的\b地方了。 \b我现在也正是高一，所以大约对下高一的学习\b进度大约是件非常有趣的事情。 图：公开贴在楼道的\b周测\b（或者期中考试）排名 毋庸置疑，衡中，尤其其实验班的确是一个学习\b氛围非常浓厚的地方。也许并不是所有人都想去学习，\b不停的学习，但这样学习的环境的确是很难在县城高中里获得的。 就算在我的同学里面，\b\b\b\b我恐怕也是少数几个还对初三\b的月考抱有好感的人。这种学习的氛围，对自己学习方面实力的提升，我还是很喜欢的。 还有就是教室。它的教室较我们现在使用的楼来看，还是稍大一些。但是，就是这些稍大一些的\b教室，竟然\b盛下了几乎两倍于\b我们一个\b\b教室的人。 图：高一的教室，可以\b看到\b三个，乃至四个人同桌\b情况 不敢想象啊。我们的教室，\b坐下40\b个人就已经很拥挤。70个人真的是难以令人想象。\b每个人的座位下，都有一个箱子，盛着或许是书，或许是卷子。 这就是\b中国最厉害的高中的教室。 图：每个班门口都配有的\b电子触摸屏幕 即使教室比较破旧，可是\b电教什么的却不差什么。像这样的\b\b屏幕，每个班都有一块。在楼道里还有自动售货机，真是不知道比我们高到哪里去了。\b \b在教学楼里，人来人往，学生拿着自己的东西，家长和学生一起。我去的仅仅是高一的教室。这里的高一\b，感觉\b比我校的高三还要累上许多。 看看我拥有的条件，很惭愧，但我也\b无能为力。\b我妄想着以笔为刃，然而\b我确实也只是一个普通的高中生。我比他们所拥有的一切好的多\b，不是靠我，而是靠我的\b父母。这不应是他们可悲之处，是国家之可悲啊。\b 0x04从教室里面走出来，家长会已近结束，上午还在学校的学生们也要回家度过两天半（或者一天半？）的五一假期了。 开放日结束，我也只好走出校门。突然就看到\b右手边，有一个学生，\b坐在那种拉货的三轮车上，\b整个三轮车的其他位置全都被行李占满。这一切突然撞入\b眼帘，不经意间也撞入心坎。 \b商量好去哪里吃中午饭，一家人就开着车前往目的地。\b天气很热，车的\b座椅经过半个\b上午的炙烤都有点发烫。进车关门，\b空调的声音一时\b喧闹起来。我坐在后排，百无聊赖的看着\b\b窗外\b有些枯黄的天空。 \b街上\b满都是刚放学的衡中的学生，以及骑着各种\b电动车\b接他们回去的家长们。车内的温度渐渐降下来了。看着窗外，想着上午\b所见的一切，刚要有些感慨，\b突然就看到\b那个坐在电动车上的女生再次出现在了我的视野里。我坐在凉爽的\b私家车的车座座上，而她却只能坐在三轮车那或许滚烫的金属板子上。\b\b\b\b\b我可以去餐馆\b吹着空调舒舒服服\b的吃上一顿然后写一篇游记，\b她或许只能吃完简朴的饭食接着去写作业。 当这些差距真真的摆在面前——用语文的话说“形成鲜明对比”，或许才是真正能体会到百味辛酸的时候。 感慨万千。我看着那位同学背后的四个字 “追求卓越” ，\b一时凝神，不知道该说些什么好。 诚然，以\b\b衡水中学为代表的一系列超级中学的跑操、近乎\b军训的日常时间表，还有严苛的\b各种纪律，的确是\b一种对于人的特性的磨灭。 但请你放下身位，真的放下你所拥有的一切去思考： 你是一个四线城市的\b\b普通人家的孩子。你的爸妈并不具有很高的文化素养，家庭的物质条件也不算富裕。你渴望更大的世界，渴望走出小小的\b县城。你能怎么做呢？ 衡水中学不可能像X大附中一样。 \b整个衡水市，给\b总共十几所的小学，\b中学，\b\b专科学校的教育资金只有6个亿。而光X大附中一所学校，每年从X大能拿到的资金就有3个多亿。怎么比？X大附中的学生，\b绝大多数的父母都是\b高级知识分子，\b家境怎么着也能算得上殷实。怎么比？ 衡中所能\b做的，是给那些想走出去的学生，一个公平的舞台，\b一个\b完整的机会。一个普通的学生，如果他本身有强烈的愿望想要学习，\b想要提升自己，想要\b到达更高的\b\b平台；那么除了衡中，\b在一个小小的地级市，还有什么学校能提供给他想要的平台和机遇？既然如此，那\b外人所诋毁的衡中的一切，\b对于\b他，又算得了什么呢？ 其实衡水中学更像是一个\b中国\b教育的矛盾的集中体。人人都知道素质教育好，人人都在媒体上抨击应试教育。可是就算以素质教育闻名的X大附中，一位老师也这么说：“这节课我教你的不是\b素质教育。我们该应试的\b时候\b就得应试。”只要你还处在平民的层次，应试仍然是阶级可能的上升途径中不能避开的一件事。\b国情在此，如果连衡水中学这样，能给贫苦孩子提供上升机会的平台都要去推翻，那\b这些人的\b嘴脸简直是卑鄙。 虽然衡水中学这样的模式的确是一种当前国情下的最优解，但是\b不能否认，衡水中学还是需要去批判的。诸如衡水中学、毛坦厂中学的出现，根本还是因为教育资源的极为不均，这终究不是我们想看到的，我们这一代人\b也需要去拼搏奋斗的\b去改变。 还有最后一点。那位同学，我衷心的祝你好运。\b愿你能够考上\b心仪的大学，过上满意的生活。愿阶级不再能成为你的枷锁，你的\b人生能摆脱\b这层\b近乎无解的\b桎梏。 愿你\b安好。 来源：Dear Earth 写在最后如果我有机会，其实我愿意在这所学校里生活上一个月，体验一下北京以外的生活。老是呆在\b北京，恐怕总会把人生看的\b过于简单。\b在那里，恐怕才是中国意义上比较普遍的人生的样子。 但恐怕并我不会去\b衡中，有机会能去的\b时候也并不想去\b如此去为自己拼搏了。 写于2018年4月30日。","link":"/20180429-hs-trip/"},{"title":"非旋Treap学习笔记","text":"非旋$Treap$，是一种不基于旋转的平衡树。它基于$Treap$的树堆思想，并且能够高效的完成某些对区间的操作，而且灵活性比较高。它也可以进行可持久化的操作。 这篇文章，介绍了基于旋转的$Treap$的基本概念等等，在这里不再赘述。## 代码简述这里以这道题题作为模板。### 节点的定义12345678910111213141516171819202122232425struct node_t{ int val,p,size; // val 是数值，p 是优先级，size 是当前节点代表的区间的大小 bool rev; node_t *son[2],**null; //下放标记 void pushdown(){ if(this == *null) return; if(rev) { son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; } } //更新节点 void pushup(){ if(this == *null) return; size = son[0]-&gt;size + son[1]-&gt;size + 1; } //反转以当前节点为父节点所代表的区间 void reverse(){ if(this == *null) return; swap(son[0],son[1]); rev^=1; }}; 这里的代码很简单，不作赘述。 不过有一点要说的。这里的双重指针**null的目的主要是让这里的节点能够快速的判断是否这个节点是下面平衡树的null节点。 Treap结构体定义 &amp; 初始化函数123456789101112131415161718192021struct fhqtreap{ node_t pool[MAXN],*tmp[MAXN],*stack[MAXN]; //tmp 和 stack 数组都是为了后面的$O(n)$建树做准备 node_t *root,*null; int cnt; fhqtreap(){ cnt = 0; srand(time(NULL)); newnode(null); null-&gt;p = MAX; root = null; null-&gt;size = 0; } void newnode(node_t *&amp;r,int val = 0){ r = &amp;pool[cnt++];//分配内存 r-&gt;val = val;r-&gt;size = 1; r-&gt;son[0] = r-&gt;son[1] = null; r-&gt;rev = 0;//置0 r-&gt;null = &amp;null; r-&gt;p = rand(); } 初始化也没有什么难点。主要需要注意：null的size应当为0，优先级应当是最大的。 建树1234567891011121314151617181920212223242526void read_tree(int n){ //把节点全部扔到tmp里面去 for(int i = 1;i&lt;=n;i++) newnode(tmp[i],i);}node_t *build(int n){ read_tree(n); int top = 1; newnode(stack[0],-MAX);stack[0]-&gt;p = -MAX; //需要保证超级根能呆在最上面 for(int i = 1;i&lt;=n;i++){ int nowp = top - 1; node_t *r = tmp[i],*pre = null;// r 是待添加节点 while(stack[nowp]-&gt;p &gt; r -&gt; p){ stack[nowp]-&gt;pushup();//这里需要pushup！因为应当保证下面是一个合法的treap; pre = stack[nowp]; stack[nowp] = null; nowp--;// 出栈 } stack[nowp+1] = stack[nowp]-&gt;son[1] = r;//把r链接到链上 stack[nowp+1]-&gt;son[0] = pre;//把下面的链连到r的左儿子 top = nowp+2;//更新栈内元素 } while(top) stack[--top]-&gt;pushup();//更新 return stack[0]-&gt;son[1];//返回根节点} 这里比较复杂。简单来说就是一个笛卡尔树的构造。 这样做的主要好处是可以在$O(n)$之内完成建树。在这里给出一个链接：Sengxian’s Blog,我觉得这位神犇讲的比较通俗易懂。 其实我们也可以通过一个简单的方式在$O(n \\log {n})$的时间内完成建树，就是一个一个的插入进去。但这样真的，很慢。 主要步骤如下： 这里对于 $\\text{p}$ 而言，我们构造小根堆。我们将一个节点表示为：$(\\text{key}, \\text{p})$。首先将所有节点按照 $\\text{key}$ 从小到大排序。在这里，\b就是我们的序列顺序。 引入一个栈，栈底存放一个元素 $(-\\infty, -\\infty)$，表示超级根，这样保证它总在最上面，他的右儿子即为我们真正的树根。这个栈，维护了笛卡尔树最右边的一条链上面的元素。（始终往右的一条链） 从前往后遍历 $(\\text{key}, \\text{p})$： 对于每一个 $(\\text{key}_i, \\text{p}_i)$，从栈中找出（从栈顶往栈底遍历）第一个$p$小于等于 $\\text{p}_i$ 的元素 $j$。 将 $j$ 之上即 $\\text{p} &gt; \\text{p}_o$ 的点全部弹出。 我们在这里记$j$的右子节点为$pre$。在树中，将 $pre$ 挂在 $j$ 的左子树上，将 $r$ 挂在原来 $j$ 的右子树的位置。 可以证明这个构造的时间复杂度是$O(n)$。 以上关于笛卡尔树的介绍转载自Sengxian的Blog，略有改写。 分裂1234567891011121314151617//分裂为两颗子树，左子树的大小为lsizevoid split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs){ if(r == null){//边界 ls = null;rs = null; return; } r-&gt;pushdown();//很重要！ if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize){ ls = r; split(r-&gt;son[1],lsize - r-&gt;son[0]-&gt;size - 1,ls-&gt;son[1],rs); } else{ rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); } ls-&gt;pushup();rs-&gt;pushup();} 看起来很难，但其实很简单。 我们面临的只有一个问题：当前节点属于左子树还是右子树？ 判定标准一般是数值大小或者排名来决定的。 如果我们判定当前根节点属于分裂后左子树，那么根节点的左子树就一定属于分裂后的左子树，那么我们只需要关心根节点的右子树属于分裂后那颗子树了，然后这个就可以递归下去了；判定属于分裂后的右子树是同理的。 代码也没有什么注意事项。可以证明，分裂的时间复杂度是$O(\\log {n})$。 合并1234567891011121314151617node_t *merge(node_t *ls,node_t *rs){ if(ls == null) return rs; if(rs == null) return ls; // 边界 if(ls-&gt;p &lt; rs-&gt;p){ ls-&gt;pushdown(); //需要pushdown！ ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup();//需要pushup！ return ls; } else{ rs-&gt;pushdown();//需要pushdown！ rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup();//需要pushup！ return rs; }} 这个和分裂也是类似的。 我们的主要任务变成了判断：左子树右子树的根节点哪个应该放在总树的根节点？ 判断的依据十分显然。就是两个根节点的优先值。结合上面的分裂，我们也可以发现这里的递归规律： 如果合并后根节点是左子树的根节点，那么我们就可以把整个左子树的左子树保留下来，从而把左子树的右子树和右子树一起合并到左子树的右子树，然后左子树就可以作为返回的节点了。右子树同理。 可以证明，合并的时间复杂度也是$O(\\log {n})$。 split to three123456//ls是左子树的size，rs是中间子树的sizevoid split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r){ node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r);} 太简单了，不说这个。 区间翻转1234567//这里使用的是左边和右边的边界void reverse(int lb,int rb){ node_t *l,*m,*r; split(lb-1,rb-lb+1,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r));} 也不太想说。主要就是要注意一点。我们在这里，要保证打过标记以后，这个节点的信息已然正确。这个在其他的例题里会比较令人舒服，可以减少一些$pushdown$。 虽然这道题只有区间翻转，但是其他的区间操作也可以同理完成。$Splay$能做的，非旋$Treap$都能做，而且他还可以进行持久化，这是$Splay$比不了的。（然而我并不会写 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 510000;const int MAX = 2147483647;/*以下为输入输出优化*/namespace fast_IO { inline char read() { static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?t=(s=buf)+fread(buf,1,IN_LEN,stdin),*s++:*s++; } inline void read(int &amp;x) { static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) { if (c == '-') iosig = true; if (c == -1) return; } for (x = 0; isdigit(c); c = read()) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ '0'); if (iosig) x = -x; } const int OUT_LEN = 10000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) { if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf; *ooh++ = c; } inline void print(int x) { static int buf[30], cnt; if (x == 0) { print('0'); } else { if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); } } inline void flush() { fwrite(obuf, 1, ooh - obuf, stdout); }}using namespace fast_IO;/*以上为输入输出优化*/int k,n;struct node_t{ int val,p,size; bool rev; node_t *son[2],**null; void pushdown(){ if(this == *null) return; if(rev) { son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; } } void pushup(){ if(this == *null) return; size = son[0]-&gt;size + son[1]-&gt;size + 1; } void reverse(){ if(this == *null) return; swap(son[0],son[1]); rev^=1; }};struct fhqtreap{ node_t pool[MAXN],*tmp[MAXN],*stack[MAXN]; node_t *root,*null; int cnt,tot; void newnode(node_t *&amp;r,int val = 0){ r = &amp;pool[cnt++]; r-&gt;val = val;r-&gt;size = 1; r-&gt;son[0] = r-&gt;son[1] = null;r-&gt;rev = 0; r-&gt;null = &amp;null; r-&gt;p = rand(); } fhqtreap(){ cnt = 0; srand(time(NULL)); newnode(null); null-&gt;p = MAX; root = null; null-&gt;size = 0; } void read_tree(int n){ for(int i = 1;i&lt;=n;i++) newnode(tmp[i],i); } node_t *build(int n){ read_tree(n); int top = 1; newnode(stack[0],-MAX); stack[0]-&gt;p = -MAX; for(int i = 1;i&lt;=n;i++){ int nowp = top - 1; node_t *r = tmp[i],*pre = null; while(stack[nowp]-&gt;p &gt; r -&gt; p){ stack[nowp]-&gt;pushup(); pre = stack[nowp]; stack[nowp] = null; nowp--; } stack[nowp+1] = stack[nowp]-&gt;son[1] = r; stack[nowp+1]-&gt;son[0] = pre; top = nowp+2; } while(top) stack[--top]-&gt;pushup(); return stack[0]-&gt;son[1]; } void split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs){ if(r == null){ ls = null;rs = null; return; } r-&gt;pushdown(); if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize){ ls = r; split(r-&gt;son[1],lsize - r-&gt;son[0]-&gt;size - 1,ls-&gt;son[1],rs); } else{ rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); } ls-&gt;pushup();rs-&gt;pushup(); } node_t *merge(node_t *ls,node_t *rs){ if(ls == null) return rs; if(rs == null) return ls; if(ls-&gt;p &lt; rs-&gt;p){ ls-&gt;pushdown(); ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup(); return ls; } else{ rs-&gt;pushdown(); rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup(); return rs; } } void split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r){ node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r); } void reverse(int lb,int rb){ node_t *l,*m,*r; split(lb-1,rb-lb+1,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r)); } void output(node_t *r,int *a){ if(r == null) return; r-&gt;pushdown(); output(r-&gt;son[0],a); a[r-&gt;son[0]-&gt;size] = r-&gt;val; output(r-&gt;son[1],a + r-&gt;son[0]-&gt;size+1); } void print(node_t *r = NULL,int depth = 0){ if(r == NULL) r = root; if(r == null) return; print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' '); printf(\"val:%d p:%d size:%d son:%d %d rev?:%d\\n\",r-&gt;val,r-&gt;p,r-&gt;size,r-&gt;son[0] != null,r-&gt;son[1] != null,r-&gt;rev); print(r-&gt;son[1],depth+1); return; }};fhqtreap w;int ans[MAXN];void init(){ read(n),read(k); w.root = w.build(n);}void solve(){ int a,b; for(int i = 1;i&lt;=k;i++){ read(a),read(b); w.reverse(a,b); } w.output(w.root,ans); for(int i = 0;i&lt;n;i++){ print(ans[i]);print(' '); } print('\\n');}int main(){ init(); solve(); flush(); return 0;} 这种$Treap$还有一个别名，叫做$FHQ Treap$，好像是因为这个的发明者是我校神犇范浩强吧（并不清楚。 例题「NOI2005」维护数列 一些参考这里有一些讲非旋转$Treap$的博客： Sengxian’s Blog xehoth’s Blog Memphis’s Blog","link":"/20180217-none-rotating-treap-notes/"},{"title":"Treap学习笔记","text":"闲下来了，开始写一点学习笔记，也希望能给后人造福吧。 第一篇来说一说Treap。 Treap是什么Tree + Heap树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。 基本思想及操作一般在Treap里面维护一个最小堆。 旋转旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。 按关键字寻找可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。 插入在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。 删除如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。 查询排名在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。 按排名查找需要对每一个节点维护一个size值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的size值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。 前驱&amp;后继在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。以前驱为例。 如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。 第一种很容易想明白，第二种稍难一些。 以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。 可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。 后继同理。 插入、删除等以上操作的期望时间复杂度都是$O(\\log {n})$，因为树的期望高度h是$\\log {n}$。 代码以洛谷P3369 普通平衡树为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。 （其实我还是觉得数组好写 结构体的定义1234567891011template&lt;typename T,size_t siz&gt;struct treap{ struct node_t{ T val; int p,size,cnt; node_t *son[2]; }; int treapcnt; node_t pool[siz&lt;&lt;1],*root,*null; //...} 在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。 对于每一个节点，我们维护以下几个信息：关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。 在结构体的变量中，我们维护了一个静态内存池，内存池已经使用的数量，根节点的指针，以及一个虚的空节点。 在这里自己定义一个空节点的好处主要是可以避免NULL导致的segmentation fault，以及让函数编写变得更加简单。 需要注意的是，视题目不同，cnt变量可能可以省去。 一些简单函数123456789101112void newnode(node_t *&amp;r){ r = &amp;pool[Treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null;}void update(node_t *r){ r-&gt;size = r-&gt;son[0]-&gt;size + r-&gt;son[1]-&gt;size + r-&gt;cnt;}node_t* find_minormax(node_t *r,int tmp){//0最小 1最大 while(r-&gt;son[tmp]!=null) r = r-&gt;son[tmp]; return r;} newnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生NULL这种可怕的东西。其实在这里也可以把赋关键字、随机值、size值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。 update函数在这里完成对节点size值的更新，很好理解。 find_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。 后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。 结构体的初始化12345678treap(){ treapcnt = 0; newnode(null); null-&gt;size = null-&gt;val = 0; null-&gt;p = MAXINT; root = null; srand(time(NULL));} 结构体的初始化不难，有几点需要注意： 空指针的size需要为0 空指针的随机值需要足够大（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了 最好srand一下 旋转1234567void rotate(node_t *&amp;r,int tmp){//0左旋，1右旋 node_t *t = r-&gt;son[1-tmp]; r-&gt;son[1-tmp] = t-&gt;son[tmp]; t-&gt;son[tmp] = r; update(r),update(t); r = t;} 旋转操作的文字叙述：（括号里文字以左旋为例） 选定当前节点r （图中的x） 找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）（图中的y） 把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 （把b接在x的右子位置上） 把r接到t空出来的位置上 （把x接到y的x的左子树上） 更新size值 （更新x，y的size） 由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。 其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误 但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是引用传递，才能修改对应父节点的儿子指针。 有一点很重要的就是要维护size的值，而且是从下到上。 插入1234567891011121314151617void __insert(node_t *&amp;r,T v){ if(r == null){ newnode(r); r-&gt;val = v,r-&gt;cnt = 1,r-&gt;p = rand(); } else{ if(r-&gt;val == v) r-&gt;cnt++; else{ int tmp = r-&gt;val &lt; v; __insert(r-&gt;son[tmp],v); if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p) rotate(r,1-tmp); } } update(r);} 用文字说明Treap的插入策略： 递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点 递归添加节点，比当前节点小向左，比当前节点大向右 维护最小堆的性质 更新size值 在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。 需要注意，这里的节点是引用方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接再次重复，不要忘记更新size值。 删除1234567891011121314151617181920void __erase(node_t *&amp;r,T v){ if(r-&gt;val == v){ if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else{ if(r-&gt;son[0]==null &amp;&amp; r-&gt;son[1]==null){ r = null;return; } else{//还有子节点， int tmp = r-&gt;son[1]-&gt;p &lt; r-&gt;son[0]-&gt;p; rotate(r,1-tmp); __erase(r,v); } } } else{ int tmp = r-&gt;val &lt; v; __erase(r-&gt;son[tmp],v); } update(r);} 用文字说明Treap的删除策略： 递归边界：要删除的节点没有儿子节点 寻找到当前节点，减少数量或者向下旋转 维护最小堆的性质，即把两个儿子中权值较小的旋转上来 递归删除节点注意此处的节点指针仍是r，因为r在旋转中已经发生了变化 更新size值 删除的时候最需要注意的已经在上面指出。 还有在旋转比较的时候一定比较的是优先级！！！ Treap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。 查询排名&amp;排名查询1234567891011121314151617int __getrank(node_t *r,T v){//查找数v的排名 if(r-&gt;val == v||r == null)//记得判空！ return r-&gt;son[0]-&gt;size + 1; else if(v &lt; r-&gt;val) return __getrank(r-&gt;son[0],v); else return __getrank(r-&gt;son[1],v) + r-&gt;son[0]-&gt;size + r-&gt;cnt;}node_t* __qrank(node_t *r,int rank){//查找以rank排名的数 rank -= r-&gt;son[0]-&gt;size; if(rank&lt;=0) return __qrank(r-&gt;son[0],rank + r-&gt;son[0]-&gt;size); else if(rank &lt;= r-&gt;cnt) return r; else return __qrank(r-&gt;son[1],rank - r-&gt;cnt);} 这两个比较简单，而且在上面也讲的很详细了，所以就一块说。 查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。 前驱和后继1234567891011node_t *loworup(T v,int t){//0代表前驱，1代表后继 node_t *last = null,*nown = root; while(nown-&gt;val!=v &amp;&amp; nown!=null){ int tmp = nown-&gt;val &lt; v; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; } if(nown-&gt;son[t]!=null) last = find_minormax(nown-&gt;son[t],1-t); return last;} 这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。 思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。 多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通 输出树123456789void __print(node_t *r,int depth = 0){ if(r == null) return; else{ __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' ');//打印深度 printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); }} 按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。 封装1234567void insert(T v){__insert(root,v);}void erase(T v){__erase(root,v);}int getrank(T v){return __getrank(root,v);}int qrank(int rank){return __qrank(root,rank)-&gt;val;}int lower(T v){return loworup(v,0)-&gt;val;}int upper(T v){return loworup(v,1)-&gt;val;}void print(){__print(root);} 封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。 完整代码及注释题目：洛谷P3369 普通平衡树 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;ctime&gt;#define maxint 2147483647using namespace std;template&lt;typename T,size_t siz&gt;//模版T,需要有等于不等于和小于运算符struct treap{ private: struct node_t{ T val; int p,size,cnt; node_t *son[2]; }; int treapcnt; node_t pool[siz&lt;&lt;1],*root,*null; void newnode(node_t *&amp;r){ r = &amp;pool[treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null; } void update(node_t *r){ r-&gt;size = r-&gt;son[0]-&gt;size+r-&gt;son[1]-&gt;size+r-&gt;cnt; } void rotate(node_t *&amp;r,int tmp){//0左旋，1右旋 node_t *t = r-&gt;son[1-tmp];//找到需要旋上来的节点 r-&gt;son[1-tmp] = t-&gt;son[tmp];//将被选节点的被遮蔽的儿子交给上面的节点 t-&gt;son[tmp] = r;//将r作为t的儿子 update(r),update(t);//注意更新顺序！先儿子后父亲 r = t;//通过引用更改上方节点的儿子 } void __insert(node_t *&amp;r,T v){//r代表当前节点，v代表关键字 if(r == null){//如果r的地方已经没有节点 newnode(r);//新建节点，并通过引用添加至上面节点的儿子 r-&gt;val = v,r-&gt;cnt = 1,r-&gt;p = rand();//对相关信息的设置 } else{ if(r-&gt;val == v) //如果已经添加过，直接给数量++ r-&gt;cnt++; else{ int tmp = r-&gt;val &lt; v; __insert(r-&gt;son[tmp],v);//递归更改 if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p)//维护treap性质 rotate(r,1-tmp); } } update(r);//不要忘了更新！ } void __erase(node_t *&amp;r,T v){ if(r-&gt;val == v){//已经找到 if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else{ if(r-&gt;son[0]==null &amp;&amp; r-&gt;son[1]==null){//已经没有子节点，直接删除 r = null;return; } else{//还有子节点， int tmp = r-&gt;son[1]-&gt;p &lt; r-&gt;son[0]-&gt;p; rotate(r,1-tmp); //找到其中随机权值较小的一个旋转替换当前节点 __erase(r,v);//递归删除 注意此处r已经发生了变化 } } } else{//还没找到 int tmp = r-&gt;val &lt; v; __erase(r-&gt;son[tmp],v);//递归寻找 } update(r);//不要忘了更新！ } void __print(node_t *r,int depth = 0){//调试用 if(r == null) return; else{ __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' ');//打印深度 printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); } } int __getrank(node_t *r,T v){//查找数v的排名 if(r-&gt;val == v||r == null)//记得判空！ return r-&gt;son[0]-&gt;size +1; else if(v &lt; r-&gt;val) return __getrank(r-&gt;son[0],v); else return __getrank(r-&gt;son[1],v) + r-&gt;son[0]-&gt;size + r-&gt;cnt; } node_t* __qrank(node_t *r,int rank){//查找以rank排名的数 rank -= r-&gt;son[0]-&gt;size; if(rank&lt;=0) return __qrank(r-&gt;son[0],rank + r-&gt;son[0]-&gt;size); else if(rank &lt;= r-&gt;cnt) return r; else return __qrank(r-&gt;son[1],rank - r-&gt;cnt); } node_t *find_minormax(node_t *r,int tmp){ //寻找以r为根节点的树上最大或最小节点 while(r-&gt;son[tmp]!=null) r = r-&gt;son[tmp]; return r; } node_t *loworup(T v,int t){//0代表前驱，1代表后继 node_t *last = null,*nown = root;//last表示上一个没有当前寻找方向的节点 while(nown-&gt;val!=v &amp;&amp; nown!=null){//记得判空! int tmp = nown-&gt;val &lt; v; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; } if(nown-&gt;son[t]!=null)//有子节点 last = find_minormax(nown-&gt;son[t],1-t);//寻找对应方向子节点的最小or最大值 return last; } public: treap(){ treapcnt = 0; newnode(null); null-&gt;size = null-&gt;val=0; null-&gt;p = maxint; root = null; srand(time(NULL)); } void insert(T v){__insert(root,v);} void erase(T v){__erase(root,v);} int getrank(T v){return __getrank(root,v);} int qrank(int rank){return __qrank(root,rank)-&gt;val;} int lower(T v){return loworup(v,0)-&gt;val;} int upper(T v){return loworup(v,1)-&gt;val;} void print(){__print(root);}};treap&lt;int,200000&gt; w;int n;int main(){ scanf(\"%d\",&amp;n); for(int i = 0;i&lt;n;i++){ int op, x; scanf(\"%d %d\",&amp;op,&amp;x); if(op == 1) w.insert(x); else if(op == 2) w.erase(x); else if(op == 3) printf(\"%d\\n\",w.getrank(x)); else if(op == 4) printf(\"%d\\n\",w.qrank(x)); else if(op == 5) printf(\"%d\\n\",w.lower(x)); else if(op == 6) printf(\"%d\\n\",w.upper(x)); else if(op == 0) w.print(); } return 0;} update:数组版代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include &lt;bits/stdc++.h&gt;#define maxint 2147483647using namespace std;const int MAXN = 200000;struct treap{ int val[MAXN],p[MAXN],son[MAXN][2]; int siz[MAXN],cnt[MAXN]; int root,treapcnt; int newnode(int v){ int x = ++treapcnt; son[x][0] = son[x][1] = 0; val[x] = v;cnt[x] = 1;p[x] = rand(); return x; } void update(int x){ siz[x] = cnt[x]+siz[son[x][1]]+siz[son[x][0]]; } void rotate(int &amp;x,int t){ int y = son[x][t]; son[x][t] = son[y][1-t]; son[y][1-t] = x; update(x),update(y); x = y; } treap(){ srand(19260817); treapcnt = root = 0; p[0] = maxint; } void __insert(int &amp;x,int v){ if(x){ if(val[x] == v) cnt[x]++; else{ int t = v &gt; val[x]; __insert(son[x][t],v); if(p[son[x][t]] &lt; p[x]) rotate(x,t); } } else x = newnode(v); update(x); } void __erase(int &amp;x,int v){ if(val[x] == v){ if(cnt[x]) cnt[x]--; else{ if(son[x][0] == 0 &amp;&amp; son[x][1] == 0){ x = 0;return; } int t = p[son[x][0]] &gt; p[son[x][1]]; rotate(x,t); __erase(x,v); } } else{ int t = val[x] &lt; v; __erase(son[x][t],v); } update(x); } int get_kth(int k){ int x = root; while(true){ if(k&lt;=siz[son[x][0]]) x = son[x][0]; else{ k -= siz[son[x][0]] + cnt[x]; if(k&lt;=0) return val[x]; else x = son[x][1]; } } } int get_rank(int v){ int x = root,ans = 0; while(x){ if(v &lt; val[x]) x = son[x][0]; else if(v &gt; val[x]) ans+=siz[son[x][0]]+cnt[x],x = son[x][1]; else ans+=siz[son[x][0]],x = 0; } return ans; } void __print(int x,int dep){ if(dep == 0) printf(\"-------------------\\n\"); if(x == 0) return; __print(son[x][0],dep+1); for(int i = 0;i&lt;dep;i++) putchar(' '); printf(\"v:%d p:%d siz:%d cnt:%d son:%d %d\\n\",val[x],p[x],siz[x],cnt[x],son[x][0],son[x][1]); __print(son[x][1],dep+1); if(dep == 0) printf(\"---------------------\\n\"); } void insert(int v){__insert(root,v);} void erase(int v){__erase(root,v);} int upper(int v){return get_kth(get_rank(v+1)+1);} int lower(int v){return get_kth(get_rank(v));} void print(){__print(root,0);}};treap a;int n,op,v;int main(){ scanf(\"%d\",&amp;n); for(int i = 1;i&lt;=n;i++){ scanf(\"%d %d\",&amp;op,&amp;v); if(op == 1) a.insert(v); else if(op == 2) a.erase(v); else if(op == 3) printf(\"%d\\n\",a.get_rank(v)+1); else if(op == 4) printf(\"%d\\n\",a.get_kth(v)); else if(op == 5) printf(\"%d\\n\",a.lower(v)); else if(op == 6) printf(\"%d\\n\",a.upper(v)); else if(op == 0) a.print(),--i; } return 0;} 例题「ZJOI2007」报表统计","link":"/20180130-treap-notes/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/笔记/"},{"name":"字符串","slug":"字符串","link":"/tags/字符串/"},{"name":"AC自动机","slug":"AC自动机","link":"/tags/AC自动机/"},{"name":"模板","slug":"模板","link":"/tags/模板/"},{"name":"省选","slug":"省选","link":"/tags/省选/"},{"name":"图论","slug":"图论","link":"/tags/图论/"},{"name":"Dinic","slug":"Dinic","link":"/tags/Dinic/"},{"name":"Splay","slug":"Splay","link":"/tags/Splay/"},{"name":"平衡树","slug":"平衡树","link":"/tags/平衡树/"},{"name":"数据结构","slug":"数据结构","link":"/tags/数据结构/"},{"name":"最近公共祖先","slug":"最近公共祖先","link":"/tags/最近公共祖先/"},{"name":"树形结构","slug":"树形结构","link":"/tags/树形结构/"},{"name":"生成树","slug":"生成树","link":"/tags/生成树/"},{"name":"并查集","slug":"并查集","link":"/tags/并查集/"},{"name":"左偏树","slug":"左偏树","link":"/tags/左偏树/"},{"name":"动态规划","slug":"动态规划","link":"/tags/动态规划/"},{"name":"斜率优化","slug":"斜率优化","link":"/tags/斜率优化/"},{"name":"莫队","slug":"莫队","link":"/tags/莫队/"},{"name":"动态树","slug":"动态树","link":"/tags/动态树/"},{"name":"CDQ分治","slug":"CDQ分治","link":"/tags/CDQ分治/"},{"name":"后缀数组","slug":"后缀数组","link":"/tags/后缀数组/"},{"name":"题解","slug":"题解","link":"/tags/题解/"},{"name":"网络流","slug":"网络流","link":"/tags/网络流/"},{"name":"线段树","slug":"线段树","link":"/tags/线段树/"},{"name":"线段树合并","slug":"线段树合并","link":"/tags/线段树合并/"},{"name":"主席树","slug":"主席树","link":"/tags/主席树/"},{"name":"wqs二分","slug":"wqs二分","link":"/tags/wqs二分/"},{"name":"决策单调性","slug":"决策单调性","link":"/tags/决策单调性/"},{"name":"乱搞","slug":"乱搞","link":"/tags/乱搞/"},{"name":"树套树","slug":"树套树","link":"/tags/树套树/"},{"name":"树的直径","slug":"树的直径","link":"/tags/树的直径/"},{"name":"状压dp","slug":"状压dp","link":"/tags/状压dp/"},{"name":"数学","slug":"数学","link":"/tags/数学/"},{"name":"期望","slug":"期望","link":"/tags/期望/"},{"name":"树形dp","slug":"树形dp","link":"/tags/树形dp/"},{"name":"数论","slug":"数论","link":"/tags/数论/"},{"name":"容斥原理","slug":"容斥原理","link":"/tags/容斥原理/"},{"name":"贪心","slug":"贪心","link":"/tags/贪心/"},{"name":"分块","slug":"分块","link":"/tags/分块/"},{"name":"点分治","slug":"点分治","link":"/tags/点分治/"},{"name":"费用流","slug":"费用流","link":"/tags/费用流/"},{"name":"数位dp","slug":"数位dp","link":"/tags/数位dp/"},{"name":"BSGS算法","slug":"BSGS算法","link":"/tags/BSGS算法/"},{"name":"后缀自动机","slug":"后缀自动机","link":"/tags/后缀自动机/"},{"name":"整体二分","slug":"整体二分","link":"/tags/整体二分/"},{"name":"set","slug":"set","link":"/tags/set/"},{"name":"单调队列","slug":"单调队列","link":"/tags/单调队列/"},{"name":"单调栈","slug":"单调栈","link":"/tags/单调栈/"},{"name":"排序","slug":"排序","link":"/tags/排序/"},{"name":"二分答案","slug":"二分答案","link":"/tags/二分答案/"},{"name":"背包","slug":"背包","link":"/tags/背包/"},{"name":"KMP","slug":"KMP","link":"/tags/KMP/"},{"name":"矩阵快速幂","slug":"矩阵快速幂","link":"/tags/矩阵快速幂/"},{"name":"启发式合并","slug":"启发式合并","link":"/tags/启发式合并/"},{"name":"高斯消元","slug":"高斯消元","link":"/tags/高斯消元/"},{"name":"虚树","slug":"虚树","link":"/tags/虚树/"},{"name":"最短路","slug":"最短路","link":"/tags/最短路/"},{"name":"分层图","slug":"分层图","link":"/tags/分层图/"},{"name":"可持久化线段树","slug":"可持久化线段树","link":"/tags/可持久化线段树/"},{"name":"差分","slug":"差分","link":"/tags/差分/"},{"name":"数论函数","slug":"数论函数","link":"/tags/数论函数/"},{"name":"杜教筛","slug":"杜教筛","link":"/tags/杜教筛/"},{"name":"0/1分数规划","slug":"0-1分数规划","link":"/tags/0-1分数规划/"},{"name":"最大权闭合子图","slug":"最大权闭合子图","link":"/tags/最大权闭合子图/"},{"name":"期望dp","slug":"期望dp","link":"/tags/期望dp/"},{"name":"二分查找","slug":"二分查找","link":"/tags/二分查找/"},{"name":"图解","slug":"图解","link":"/tags/图解/"},{"name":"拓扑排序","slug":"拓扑排序","link":"/tags/拓扑排序/"},{"name":"递推","slug":"递推","link":"/tags/递推/"},{"name":"最大公约数","slug":"最大公约数","link":"/tags/最大公约数/"},{"name":"Link Cut Tree(LCT)","slug":"Link-Cut-Tree-LCT","link":"/tags/Link-Cut-Tree-LCT/"},{"name":"树链剖分","slug":"树链剖分","link":"/tags/树链剖分/"},{"name":"瞎搞","slug":"瞎搞","link":"/tags/瞎搞/"},{"name":"区间dp","slug":"区间dp","link":"/tags/区间dp/"},{"name":"对偶图","slug":"对偶图","link":"/tags/对偶图/"},{"name":"二分图匹配","slug":"二分图匹配","link":"/tags/二分图匹配/"},{"name":"欧拉函数","slug":"欧拉函数","link":"/tags/欧拉函数/"},{"name":"可持久化主席树","slug":"可持久化主席树","link":"/tags/可持久化主席树/"},{"name":"中国剩余定理","slug":"中国剩余定理","link":"/tags/中国剩余定理/"},{"name":"Lucas定理","slug":"Lucas定理","link":"/tags/Lucas定理/"},{"name":"树状数组","slug":"树状数组","link":"/tags/树状数组/"},{"name":"快速幂","slug":"快速幂","link":"/tags/快速幂/"},{"name":"扩展欧几里得","slug":"扩展欧几里得","link":"/tags/扩展欧几里得/"},{"name":"Treap","slug":"Treap","link":"/tags/Treap/"},{"name":"游记","slug":"游记","link":"/tags/游记/"},{"name":"线性基","slug":"线性基","link":"/tags/线性基/"},{"name":"基环树","slug":"基环树","link":"/tags/基环树/"},{"name":"强连通分量","slug":"强连通分量","link":"/tags/强连通分量/"},{"name":"快速傅立叶变换","slug":"快速傅立叶变换","link":"/tags/快速傅立叶变换/"},{"name":"回文自动机","slug":"回文自动机","link":"/tags/回文自动机/"},{"name":"摘录","slug":"摘录","link":"/tags/摘录/"},{"name":"作文","slug":"作文","link":"/tags/作文/"},{"name":"二分图","slug":"二分图","link":"/tags/二分图/"},{"name":"网络流 24 题","slug":"网络流-24-题","link":"/tags/网络流-24-题/"},{"name":"冬令营","slug":"冬令营","link":"/tags/冬令营/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"歌曲","slug":"歌曲","link":"/tags/歌曲/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","link":"/tags/莫比乌斯反演/"}],"categories":[{"name":"总结","slug":"总结","link":"/categories/总结/"},{"name":"OI","slug":"OI","link":"/categories/OI/"},{"name":"随笔","slug":"随笔","link":"/categories/随笔/"},{"name":"题解","slug":"OI/题解","link":"/categories/OI/题解/"},{"name":"日常","slug":"日常","link":"/categories/日常/"},{"name":"技术","slug":"技术","link":"/categories/技术/"},{"name":"学习笔记","slug":"OI/学习笔记","link":"/categories/OI/学习笔记/"}]}