'use strict';

var _ = require('lodash');
var async = require('async');
var algoliasearch = require('algoliasearch');
var crypto = require('crypto');
var log;

var storedPost = _.pick(data, ['title', 'date', 'slug', 'path', 'content', 'excerpt', 'objectID','permalink']);

function computeSha1(text) {
    // change to 'md5' if you want an MD5 hash
    var hash = crypto.createHash('sha1');

    // change to 'binary' if you want a binary hash.
    hash.setEncoding('hex');

    // the text that you want to hash
    hash.write(text);

    // very important! You cannot read from the stream until you have called end()
    hash.end();

    // and now you get the resulting hash
    return hash.read();
}


module.exports = function (args, callback) {

    var hexo = this;
    var baseDir = hexo.base_dir;
    var config = hexo.config;
    var log = hexo.log;
    var posts = [];

    hexo.call('generate', function(err){
        if (err) return callback(err);
    });

    hexo.extend.filter.register('after_post_render', function(data){
        if(data.published){
            data.objectID = computeSha1(data.path);
            var storedPost = _.pick(data, ['title', 'date', 'slug', 'path', 'content', 'excerpt', 'objectID']);
            storedPost.categories = _.map(data.categories.toArray(), 
                function(item){                    
                    return _.pick(item, ['name', 'path']); 
                });
            storedPost.tags = _.map(data.tags.toArray(), 
                function(item){ 
                    return _.pick(item, ['name', 'path']); 
                });

            storedPost.author = data.author || config.author;

            posts.push(storedPost);
        }
        return data;
    });

    hexo.on('generateAfter', function(){
        log.info('[Algolia] Identified ' + posts.length + ' posts to index.');
        for(var index1 = 0, l = posts.length; index1 < l; index1++){
            for(var index2 = 0, l2 = posts[index1].tags.length; index2 < l2; index2++){
                log.debug(posts[index1].tags[index2].name);
            }
        }

        // Initiliaze Algolia client
        var client = algoliasearch(config.algolia.applicationID, config.algolia.adminApiKey);
        var index = client.initIndex(config.algolia.indexName);

        index.setSettings({
                'highlightPreTag': '<em class="highlight">',
                'highlightPostTag' : '</em>'
            }, function(err) {
                if (!err) {
                    log.info('[Algolia] Highlight tag definition success.');
                }
            }
        );

        if(args && !args.f){
            if(args.w){
                indexPosts(index, posts);
            } else {
                log.info('[Algolia] Clearing index...');
                index.clearIndex(function(err, content) {
                    log.info('[Algolia] Index cleared.');
                    indexPosts(index, posts);
                });
            }

        } else {
            log.info('[Algolia] No data sent to Algolia due to the --fake option.');
        }
    });

function end(err) {
    if (err) {
        throw err;
    }

    log.info('[Algolia] Import done.');
}

function indexPosts(index, posts){
    log.info('[Algolia] Starting indexation...');

        // Split our results into chunks, to get a good indexing/insert performance
        var chunkedResults = _.chunk(posts, config.algolia.chunks);

        // For each chunk of 5,000 objects, save to algolia, in parallel. Call end() when finished
        // or if any save produces an error
        // https://github.com/caolan/async#eacharr-iterator-callback
        async.each(chunkedResults, index.saveObjects.bind(index), end);
    }
};