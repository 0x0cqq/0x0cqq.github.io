<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018 MarWeek2]]></title>
    <url>%2F20180310-2018-MarWeek2%2F</url>
    <content type="text"><![CDATA[2018年三月 第二周 2018.3.5-2018.3.11 正文开学的第二周。一切渐渐进入上学的节奏。 颓废。这一周开始的时候可以说是真的颓废，课内数学物理变得越来越难，甚至课上的题有的都做不出来。回家，也不怎么想写作业，只是颓代码或者颓知乎。后几天慢慢的好了一点。作业稍多，倒也是免于不少杂念。这两天刷题的也稍稍多了点。总之，一切还是向好发展的吧。 周末的作业不少，更是有不少奇怪的东西（忽然想起来还要背不少的课文），的确不太舒爽。周六一天都在Coding，幸亏作业不多。 这周末APIO的一道题搞了个很气的95分。虽然我写的就是个暴力吧，但好歹时间复杂度优越啊，凭什么就剩下一个点空间爆炸呢…凭什么啊！！！ 下周又是新的一周。然而下周一$Deadline$的好多作业还没有做完，真是GG。好像下下下周又要讲课？？？我明明就是一个什么都不会的蒟蒻啊。还得现学，心真累。 没想到，$oscar$神犇居然是我校选手，是不是就是这几天一直就坐在我们隔壁机房的神犇啊。看朋友圈说什么冬令营Ag滚粗，也不知道我的OI生涯会不会有机会走到能至少看到一眼Ag的那一步？？？估计不太现实吧。 忽然也就想到初三的时候，十次月考，每次考完成绩分析的时候都会往放历次大考成绩单的信封里塞一张稿纸，每张上面只写了几个字：“革命尚未成功，同志仍需努力。” 最有趣的是考完中考，我还是往里面塞了一张稿纸：“革命已经成功，同志仍需努力。” 当然，我现在只是希望，一年后，我也是能这样的吧。 细细想来初三，发生的很多事情真是如梦似幻，如梦似幻啊。 感觉最近挺累的。视力也越来越有些不好了。 诶。 来源：Wikipedia TodoList此周完成 颓$dp$ ✘ 这一周课上开始颓图论了… 费用流 ✔大概算了吧…会写简单EK+SPFA了… 树链剖分 ✔ 成功写了好几道模版 加紧的赶点进度 ¿大约吧 一些奇奇怪怪的图论 下周完成 最小费用最大流模版 dp试炼场！！！ 顺便学习一下高级的dp优化 准备讲课（怎么着自己也得学会吧 保证$1$天$1$道Luogu 省选- 及以上难度题目]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI2008」树的统计-树链剖分]]></title>
    <url>%2F20180310-zjoi2008-count%2F</url>
    <content type="text"><![CDATA[给定一颗$n$个节点的树，节点编号为$1$到$n$，每个节点都有一个权值$w_i$。 有以下三种操作或询问： I. $CHANGE\ u\ t$ : 把结点$u$的权值改为$t$ II. $QMAX\ u\ v$: 询问从点$u$到点$v$的路径上的节点的最大权值 III. $QSUM\ u\ v$: 询问从点$u$到点$v$的路径上的节点的权值和 链接Luogu P2590 题解树链剖分模版题。 进行树链剖分之后，由于注意到这里只有单点修改，所以我们用一个$zkw$线段树来维护这些信息。 对于$CHANGE$操作，我们直接更改叶子节点的值，然后进行$zkw$线段树的从下到上的更新操作，直到根。 对于$QMAX$操作，我们就用树链剖分的常规操作，每一步求一个最大值，然后更新答案即可。$QSUM$同理。 事实上，这个题凸显出来$zkw$线段树在单点修改上真是不一般的快，以我的垃圾coding水平居然能在bzoj上排到第一页。 $zkw$大法好！ 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;using namespace std;const int MAXN = 31000;inline int max(int a,int b)&#123; return b&gt;a?b:a;&#125;namespace fast_io &#123; inline char read() &#123; //return getchar(); static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))== s)?-1:*s++) : *s++; &#125; inline void read(int &amp;x) &#123; static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) &#123; if (c == '-') iosig = true; if (c == -1) return; &#125; for (x = 0; isdigit(c); c = read()) x = ((x + (x &lt;&lt; 2)) &lt;&lt; 1)+(c^48); if (iosig) x = -x; &#125; inline void read(char *a)&#123; static char c = read(); while(c!= -1&amp;&amp;(c == ' '||c =='\n')) c = read(); while(c!= -1&amp;&amp;c!=' '&amp;&amp;c!='\n') *a++ = c,c = read(); *a = 0; &#125; const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) &#123; if(ooh == obuf+OUT_LEN) fwrite(obuf,1,OUT_LEN,stdout),ooh=obuf; *ooh++ = c; &#125; inline void print(int x) &#123; static int buf[30], cnt; if(x == 0) print('0'); else &#123; if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); &#125; &#125; inline void print(char *a)&#123; while(*a) print(*a++); &#125; inline void flush() &#123; fwrite(obuf, 1, ooh - obuf, stdout); &#125;&#125;using namespace fast_io;int maxn[MAXN&lt;&lt;2],sumn[MAXN&lt;&lt;2];int n,M,q,num[MAXN];//top数组是链子最上面的节点，fa是父节点，son是重儿子节点，siz是子树大小，dep是dfs深度int top[MAXN],fa[MAXN],son[MAXN],siz[MAXN],dep[MAXN];//id_to 是i号id指向的节点编号，id就是i号节点的dfs编号int id_to[MAXN],id[MAXN];int cnt = 1;vector&lt;int&gt; edge[MAXN];//zkw线段树初始化inline void init_seg()&#123; for(M = 1;M&lt;n+2;M&lt;&lt;=1); for(int i = 1;i&lt;=n;i++) maxn[M+i] = sumn[M+i] = num[id_to[i]]; for(int i = M-1;i;i--) maxn[i]=max(maxn[i&lt;&lt;1],maxn[i&lt;&lt;1|1]),sumn[i]=sumn[i&lt;&lt;1]+sumn[i&lt;&lt;1|1];&#125;//zkw线段树区间最值inline int max_seg(int l,int r)&#123; int ans = -100000; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1)&#123; if(~l&amp;1 &amp;&amp; maxn[l^1]&gt;ans) ans = maxn[l^1]; if(r&amp;1 &amp;&amp; maxn[r^1]&gt;ans) ans = maxn[r^1]; &#125; return ans;&#125;//zkw线段树区间求和inline int sum_seg(int l,int r)&#123; int ans = 0; for(l=l+M-1,r=r+M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1)&#123; if(~l&amp;1) ans += sumn[l^1]; if(r&amp;1) ans += sumn[r^1]; &#125; return ans;&#125;//zkw线段树修改inline void upd_seg(int pos,int x)&#123; int nown = pos+M; maxn[nown] = sumn[nown] = x; while(nown&gt;&gt;=1)&#123; maxn[nown] = max(maxn[nown&lt;&lt;1],maxn[nown&lt;&lt;1|1]); sumn[nown] = sumn[nown&lt;&lt;1]+sumn[nown&lt;&lt;1|1]; &#125;&#125;//树链剖分的第一个dfsinline void dfs1(int nown,int f,int depth)&#123; son[nown] = 0,dep[nown] = depth,siz[nown] = 1,fa[nown] = f; int maxsum = 0; for(int i = 0;i&lt;edge[nown].size();i++)&#123; int to = edge[nown][i]; if(to == f) continue; dfs1(to,nown,depth+1); siz[nown]+=siz[to]; if(siz[to]&gt;maxsum) maxsum = siz[to],son[nown] = to; &#125;&#125;//树链剖分的第二个dfsinline void dfs2(int nown,int topf)&#123; id[nown] = cnt; id_to[cnt++] = nown; top[nown] = topf; if(!son[nown]) return; dfs2(son[nown],topf); for(int i = 0;i&lt;edge[nown].size();i++)&#123; int to = edge[nown][i]; if(to == son[nown]||to == fa[nown]) continue; dfs2(to,to); &#125;&#125;//查询路径和inline int query_sum(int x,int y)&#123; int ans = 0; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans+=sum_seg(id[top[x]],id[x]); x = fa[top[x]]; &#125; if(dep[x]&gt;dep[y]) swap(x,y); ans+=sum_seg(id[x],id[y]); return ans;&#125;//查询路径最大值inline int query_max(int x,int y)&#123; int ans = -100000; while(top[x]!=top[y])&#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ans = max(ans,max_seg(id[top[x]],id[x])); x = fa[top[x]]; &#125; if(dep[x]&gt;dep[y]) swap(x,y); ans = max(ans,max_seg(id[x],id[y])); return ans;&#125;//修改某个节点inline void update(int pos,int x)&#123; upd_seg(id[pos],x);&#125;//初始化图和线段树还有两次dfsvoid init()&#123; read(n); int a,b; for(int i = 1;i&lt;=n-1;i++)&#123; read(a),read(b); edge[a].push_back(b); edge[b].push_back(a); &#125; for(int i = 1;i&lt;=n;i++) read(num[i]); dfs1(1,0,1); dfs2(1,1); init_seg();&#125;//进行操作以及回答询问void solve()&#123; read(q); char op[20]; int a,b; for(int i = 1;i&lt;=q;i++)&#123; read(op),read(a),read(b); if(op[1] == 'M') print(query_max(a,b)),print('\n'); else if(op[1] == 'S') print(query_sum(a,b)),print('\n'); else if(op[1] == 'H') update(a,b); &#125;&#125;int main()&#123; init(); solve(); flush(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>题解</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI2007」时态同步-树形dp]]></title>
    <url>%2F20180303-ZJOI2007-sync%2F</url>
    <content type="text"><![CDATA[给定一棵由$n$个节点构成的树。 在树上存在一个“激发器”，标号为$s$。当激发器工作后，电流会延边传向每一个相邻节点。而中间节点接收到电流后，会将该电流传向与它连接并且尚未接收到电流的节点。对于每条边$e$，电流通过它需要的时间为$t_e$，电流的转发可以认为是在瞬间完成的。最终，激电流将到达一些“终止节点”――接收电流之后不再转发的节点。 使用一次道具可以使得电流通过某条边的时间增加一个单位。请问最少使用多少次道具才可达到每一个“终止节点”同时收到电流？ 链接Luogu P1131 题解注意到子树无论怎么搞，对上面的选择有影响的只是一个最后电流到达终点同步的时间，所以我们把这个设计进状态里面。 注意到如果子树的同步的时间最少的话，那么它的消耗道具次数就应该是最少的，同时因为这棵子树的每一层之间，至少含有一条边，那么如果子树的同步时间变多$x$，那么在子树上的道具消耗次数就一定要变多大于等于$x$，而这个时候在子树与父节点的同步中，子树的根节点与父节点间的边的同步时间最多减少$x$，所以可以证明父节点的最优消耗道具次数一定是在子节点的最优同步时间下取得的，也就可以证明$dp$的正确性。 状态转移方程： $$time[u] = max(time[v]+len(u,v))$$ $$ans[u] = sum(ans[v]+time[u]-(time[v]+len(u,v))$$ 其中$u$，$v$有一条边，且$v$非$u$的父亲。 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cctype&gt;#include &lt;algorithm&gt;#define int long longusing namespace std;namespace fast_io &#123; ...//省略快读模版&#125;using namespace fast_io;namespace normal_io&#123; inline char read()&#123; return getchar(); &#125; inline void read(int &amp;x)&#123; scanf("%lld",&amp;x); &#125; inline void print(int x)&#123; printf("%lld",x); &#125; inline void print(char x)&#123; putchar(x); &#125; inline void flush()&#123; return; &#125;&#125;using namespace normal_io;const int MAXN = 510000;int n,s;struct Edge&#123; int t,l; Edge(int b = 0,int c = 0):t(b),l(c)&#123;&#125;;&#125;;vector&lt;Edge&gt; edge[MAXN];int ans[MAXN],times[MAXN];bool vis[MAXN];void addedge(int a,int b,int c)&#123; edge[a].push_back(Edge(b,c)); edge[b].push_back(Edge(a,c));&#125;void init()&#123; read(n),read(s); int a,b,c; for(int i = 1;i&lt;=n-1;i++)&#123; read(a),read(b),read(c); addedge(a,b,c); &#125;&#125;void dp(int nown)&#123; vis[nown] = 1; int tmpsum = 0,mintime = 0,k = 0; for(int i = 0;i&lt;edge[nown].size();i++)&#123; int to = edge[nown][i].t,len = edge[nown][i].l; if(vis[to] == 1) continue; dp(to); ans[nown] += ans[to]; mintime = max(mintime,times[to]+len); tmpsum += (times[to]+len); k++; &#125; ans[nown] += k * mintime - tmpsum,times[nown] = mintime;&#125;void solve()&#123; dp(s); print(ans[s]);&#125;main()&#123; init(); solve(); flush(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>动态规划</tag>
        <tag>树形dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI2007」报表统计-平衡树]]></title>
    <url>%2F20180303-zjoi2007-count%2F</url>
    <content type="text"><![CDATA[有一个长度为$n$的整数序列，并且有以下三种操作： $INSERT\ i\ k$：在原数列的第$i$个数后面添加一个新数$k$；如果原数列的第$i$个数已经添加了若干数，则添加在这些数的最后 $MIN\ GAP$：查询相邻两个数的之间差值（绝对值）的最小值 $MIN\ SORT\ GAP$：查询所有数中最接近的两个数的差值（绝对值） 链接Luogu P1110 题解一道近乎于裸的Treap，然而由于我十分蒟蒻而且好久没敲Treap，调了两个小时才调完。 这道题我们维护两棵平衡树，一颗$b$记录所有相邻数的差的绝对值，一颗$b$记录所有的数；一个列表，记录每个块的最前面和最后面的数。我们注意到询问三的结果随插入的数不增，所以只需要维护一个最小值$minn$就可以了。 $insert$ 操作：首先根据列表内容从$b$里删除对应位置块间两数的差，然后把插入后多出来的相邻元素差，这个数与这一块结尾，下一块最前面的数的差分别插入平衡树$b$，注意i == n时需要特判；并把插入的数加到$a$里面，根据其与前驱后继的差更新$minn$，注意需要判断一下是否这个数已经在平衡树里面存在。 相邻元素的差值最小值：直接在$b$里求最小值并输出。 排序后的最小差值：直接输出$minn$。 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;cctype&gt;using namespace std;namespace fast_io &#123; ...//隐去快读模版&#125;using namespace fast_io;namespace normal_io&#123; inline char read()&#123; return getchar(); &#125; inline void read(char *c)&#123; scanf("%s",c); &#125; inline void read(int &amp;x)&#123; scanf("%d",&amp;x); &#125; inline void print(int x)&#123; printf("%d",x); &#125; inline void print(char x)&#123; putchar(x); &#125; inline void flush()&#123; return; &#125;&#125;using namespace normal_io;struct treap&#123; struct node&#123; int val,p,cnt; node* son[2]; &#125;; const static int MAXN = 1000000; int treapcnt; node pool[MAXN],*null,*root; treap()&#123; treapcnt = 0; newnode(null); srand(19260817); null-&gt;val = -0x3f3f3f3f; null-&gt;p = 2147483647; null-&gt;cnt = 0; root = null; &#125; void rotate(node *&amp;r,int tmp)&#123; node *t = r-&gt;son[1-tmp]; r-&gt;son[1-tmp] = t-&gt;son[tmp]; t-&gt;son[tmp] = r; r = t; &#125; void newnode(node *&amp;r)&#123; r = &amp;pool[treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null; &#125; void __insert(node *&amp;r,int v)&#123; if(r == null)&#123; newnode(r); r-&gt;val = v;r-&gt;p = rand();r-&gt;cnt = 1; &#125; else&#123; if(r-&gt;val == v) r-&gt;cnt++; else&#123; int tmp = v &gt; r-&gt;val; __insert(r-&gt;son[tmp],v); if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p) rotate(r,1-tmp); &#125; &#125; &#125; node *find(node *r,int t)&#123; while(r-&gt;son[t]!=null) r = r-&gt;son[t]; return r; &#125; void __erase(node *&amp;r,int v)&#123; if(r-&gt;val == v)&#123; if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else&#123; if(r-&gt;son[0] == null&amp;&amp;r-&gt;son[1] == null)&#123; r = null;return; &#125; else&#123; int tt = r-&gt;son[0]-&gt;p &gt; r-&gt;son[1]-&gt;p; rotate(r,1-tt); __erase(r,v); &#125; &#125; &#125; else&#123; int tmp = v &gt; r-&gt;val; __erase(r-&gt;son[tmp],v); &#125; &#125; node *nei(int v,int t)&#123; node* nown = root,*last = null; while(nown!=null&amp;&amp;nown-&gt;val!=v)&#123; //printf("2\n"); int tmp = v &gt; nown-&gt;val; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; &#125; if(nown-&gt;son[t]!=null)&#123; last = find(nown-&gt;son[t],1-t); &#125; return last; &#125; bool find(int v)&#123; node *r = root; while(r!=null&amp;&amp;r-&gt;val!=v)&#123; int tmp = v &gt; r-&gt;val; r = r-&gt;son[tmp]; &#125; return r != null; &#125; inline void __print(node *r,int depth = 0)&#123; if(r == null) return; else&#123; __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' '); printf("val:%d cnt:%d P:%d son?:%d %d\n",r-&gt;val,r-&gt;cnt,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); &#125; &#125; void insert(int v)&#123; __insert(root,v); &#125; void erase(int v)&#123; __erase(root,v); &#125; void print()&#123; __print(root); &#125;&#125;;//以上treap常规模版treap a,b;const int MAXN = 1000000;int head[MAXN],tail[MAXN],minn,n,m;//a是所有数，b是所有相邻数差值//head记录此块最前数，tail记录最后数。void init()&#123; minn = 0x3f3f3f3f; read(n),read(m); static int tmp[MAXN]; for(int i = 1;i&lt;=n;i++)&#123; int t;read(t); a.insert(t); head[i] = tail[i] = tmp[i] = t; &#125; sort(tmp+1,tmp+n+1); for(int i = 2;i&lt;=n;i++)&#123; //更新初始的两个查询答案 b.insert(abs(head[i]-head[i-1])); minn = min(minn,tmp[i]-tmp[i-1]); &#125;&#125;void solve()&#123; char op[20];int x,y; for(int i = 1;i&lt;=m;i++)&#123; read(op); if(op[4] == 'G')&#123; print(b.find(b.root,0)-&gt;val),print('\n'); //寻找最小相邻元素差值 &#125; else if(op[4] == 'S')&#123; print(minn),print('\n'); //寻找排序元素差值 &#125; else if(op[4] == 'R')&#123; read(x),read(y); if(x != n)&#123; b.erase(abs(head[x+1]-tail[x])); b.insert(abs(head[x+1]-y)); &#125; b.insert(abs(tail[x]-y)); tail[x] = y; //更新查询2答案 if(a.find(y)) minn = 0; else&#123; int low = a.nei(y,0)-&gt;val,up = a.nei(y,1)-&gt;val; minn = min(minn,min(abs(y-low),abs(up-y))); &#125; a.insert(y); //更新查询3答案 &#125; else if(op[4] =='P')&#123; a.print(); printf("------------------------\n"); b.print(); //调试用 &#125; //printf("Finish\n"); &#125; &#125;int main()&#123; init(); solve(); flush(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 MarWeek1]]></title>
    <url>%2F20180303-2018-MarWeek1%2F</url>
    <content type="text"><![CDATA[2018年三月 第一周2018.2.26-2018.3.4 正文侥幸混过第一周。 这一周说起来还是在寒假的颓废状态中。平时的作业少，周末的作业多，大概就是开学初的特点。 今天讲了下$zkw$线段树，然后这个果真耗掉了我小半个周末的时间。啧啧。话说讲课真的是累，超级累。 三月份听说有省选？那就又可以去混一混了。考试能不爆零就好。 听说，这一个学期很短，不过15周的时间。这十五周过去，接下来很快就要NOIP了呀。NOIP这个东西，不能炸啊。先定一个小目标…$480+$？？？不过以以往的经验来看，小目标一般都是能实现的。比如小升初，比如中考，比如分班，比如省选冬令营的考试（雾）。 虽然我立的$flag$很有可能以一种玄学的方法实现。 不过，能实现就很不错了呢。 但无论如何，不能轻浮啊。 脚踏实地 仰望星空 TodoList此周完成 侥幸度过开学第一周 第一次在OI讲台上讲课 做了两道缩点的水题 做了两道$dp$的水题 下周完成 颓$dp$ 费用流 树链剖分（以上两个这周必须过了模版！！！ 加紧的赶点进度（课内&amp;&amp;课外]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018 FebWeek4]]></title>
    <url>%2F20180225-2018-FebWeek4%2F</url>
    <content type="text"><![CDATA[2018年二月 第四周2018.2.19-2018.2.25 正文开学了。 该总结一下寒假了。 寒假刷题：点击切换显示状态 为了篇幅短小，只把不是水题的题放在这里。 Luogu刷题：状压dp： P1879 [USACO06NOV]玉米田Corn Fields P1896 [SCOI2005]互不侵犯King P1433 吃奶酪 P2704 [NOI2001]炮兵阵地 dp： P2577 [ZJOI2005]午餐 线段树： P2894 [USACO08FEB]酒店Hotel P1438 无聊的数列 P1558 色板游戏 T21778 过年 平衡树： P2073 送花 P2596 [ZJOI2006]书架 P1486 [NOI2004]郁闷的出纳员 P2234 [HNOI2002]营业额统计 P2286 [HNOI2004]宠物收养场 P3165 [CQOI2014]排序机械臂 P2042 [NOI2005]维护数列 并查集： P1396 营救 P1536 村村通 P1525 关押罪犯 P2024 食物链 P1197 [JSOI2008]星球大战 P1196 [NOI2002]银河英雄传说 最短路： P1342 请柬 P1629 邮递员送信 P1608 路径统计 生成树： P1195 口袋的天空 P2820 局域网 P1194 买礼物 差分约束： P1993 小 K 的农场 强连通分量： P1726 上白泽慧音 网络流： P2055 [ZJOI2009]假期的宿舍 P1231 教辅的组成 P2756 飞行员配对方案问题 P1345 [USACO5.4]奶牛的电信Telecowmunication 其他图论： P1268 树的重量 P1113 杂务 P3183 [HAOI2016]食物链 单调队列： P2032 扫描 莫队： P2709 小B的询问 P1972 [SDOI2009]HH的项链 P1494 [国家集训队]小Z的袜子 二分： P1314 聪明的质监员 数论： P1082 同余方程 模板： P3379 【模板】最近公共祖先（LCA） P3375 【模板】KM`P字符串匹配 P3369 【模板】普通平衡树（Treap/SBT） P3865 【模板】ST表 P3382 【模板】三分法 P3370 【模板】字符串哈希 P3391 【模板】文艺平衡树（Splay） P3376 【模板】网络最大流 P3386 【模板】二分图匹配 P3385 【模板】负环 一些水题： P1083 借教室 P1168 中位数 P4231 三步必杀 P1116 车厢重组 Codeforce： #462 #463 #464 （写完感觉好少啊） 活过报到了，耶！不过开学第一周也不是好熬过去的呢。 话说第一次考试考了rank1，然而出题人没做这套题，所以权当rank2吧。革命尚未成功，要直视和巨佬在图论、dp上的差距和距离，这个学期主要就要发展图论，dp，数学等方面的知识。 寒假后期感觉有点心有余而力不足，反而显得平时上学的时候学习效率更高。真是奇怪呢。不过这也在一方面上反映了寒假作业的毒瘤。毒瘤！ 不过课内的学习也不能放下，只好再压榨一点时间了。学习好也就这点不好，两边都难割舍，害怕毁掉课内，也害怕一年竞赛一场空。 「没有成绩时 学习不停止」 新学期，自勉，共勉。 TodoList下周完成 学费用流 活过这周 好好学课内啊 这学期完成（大略） 图论 树链剖分及相关 网络流相关 费用流 差分约束 缩点相关 … 数据结构 高级数据结构（veb啥的） … 字符串相关 数学 扩欧 逆元 FFT等多项式 … 奇奇怪怪的算法 博弈 研究春令营的课 （一时想不到了 还有啥啊） 说多不多，说少不少。]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[输入输出优化模板]]></title>
    <url>%2F20180223-IO-optimize%2F</url>
    <content type="text"><![CDATA[输入输出模板替代普通读写方式，可以在一定程度上加快程序运行速度。 直接贴了。依赖库stdio.h 和 ctype.h。 #include &lt;cstdio&gt;#include &lt;cctype&gt;namespace fast_io &#123; inline char read(); inline void read(int&amp;);// inline void read(char*); inline void print(char); inline void print(int);// inline void print(char*); inline void flush(); inline char read() &#123;// return getchar(); static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?(((t=(s=buf)+fread(buf,1,IN_LEN,stdin))== s)?-1:*s++) : *s++; &#125; inline void read(int &amp;x) &#123; static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) &#123; if (c == '-') iosig = true; if (c == -1) return; &#125; for (x = 0; isdigit(c); c = read()) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ '0'); if (iosig) x = -x; &#125; /* inline void read(char *a)&#123; static char c = read(); while(c!= -1&amp;&amp;c!=' '&amp;&amp;c!='\n')&#123; *a++ = c; c = read(); &#125; *a = 0; &#125;*/ const int OUT_LEN = 1000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) &#123; if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf; *ooh++ = c; &#125; inline void print(int x) &#123; static int buf[30], cnt; if (x == 0) &#123; print('0'); &#125; else &#123; if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); &#125; &#125; /* inline void print(char *a)&#123; while(*a) print(*a++); &#125; */ inline void flush() &#123; fwrite(obuf, 1, ooh - obuf, stdout); &#125;&#125;using namespace fast_io;namespace normal_io&#123; inline void read(int &amp;x)&#123; scanf("%d",&amp;x); &#125; inline void print(int x)&#123; printf("%d",x); &#125; inline void print(char c)&#123; putchar(c); &#125;&#125;//using namespace normal_io;int main()&#123; int x; read(x); print(x); flush(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 FebWeek3]]></title>
    <url>%2F20180218-2018-FebWeek3%2F</url>
    <content type="text"><![CDATA[2018年二月 第三周2018.2.12-2018.2.18 正文又是一个颓废的一周。啧啧。 这一周更是颓废着写作业，学了不知道有没有一点东西。写了一个$Treap$从早上调到晚上，然后才苟下来这么一道题。 实在是被作业所困很深。不过这一周开发了几个新技能。CF，LOJ，P站之类（咦这什么鬼。这也算是苦中偷趣。一切还是很有趣很有趣的。 回顾寒假，学了不少东西，但是更多的还是在各种奇怪的地方（比如玩手机的什么）浪费了不少的时间。以后也应该好好的珍惜时间，多写作业，多写程序，多学算法嘛。开始寒假的时候，还立下了洛谷AC300的Flag…然后…GG…这个寒假最多也就到60题了…而且省选级别的题也没做几道。 想到一句话： 身后有余忘缩手 眼前无路想回头 愿自己能够安然过到高三吧。 最近真的很忙。很抱歉。 来源：Pixiv TodoList这周完成 学了差分约束和强连通分量 ✔ 图论真可怕 写了一道无旋转Treap ✔ 太难啦 写完语文寒假作业 ✘ 失败…失败了… 下周完成 苟完…作业… 活到开学… 学…费用流…]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「红楼一梦」]]></title>
    <url>%2F20180217-A-dream-of-Red-Mansions%2F</url>
    <content type="text"><![CDATA[最近在做红楼的总结，莫名的也就想来写上两句。 葬花吟-双笙 怎么说呢。红楼梦这本书，越读越令人悲伤。至六十三回以后，便已无心漫卷，至七十八回以后，也就不想再读下去。 要依我来见，六十二回即是红楼女儿绝唱，最后一次齐聚的宴欢，最后一次惬意的愉悦。湘云醉卧石上，竟让我恍惚觉得，一切还在半年以前，还在那个春天。 但世事不复啊。自此以后，大观园中也只剩下了潇湘之悲戚，蘅芜之孤冷。司琴、入画、四儿、芳官、晴雯也一个个离开这如梦似幻的大观园，旧时的欢宴已经不存。贾母月圆夜宴，老人的心里，也知道一切恐也再难挽回，不如「人多些」，好聚好散。 是啊。盛筵难久，万事终有离散的一天。 要说读到五十余回，就已经有万千心绪。不知何时，许多原本只能在贾府边缘的许多小人物，竟也如此多在书中出现。似乎从那时往后，红楼一梦已经不再是儿女的情长，不是单纯的情娱与风月，而是家族的凝着血泪的真史。 女孩，男孩们梦中的生活，怎么可能持久呢。红楼一题早就告诉你，这不过是「真事隐」，不过是「假语存」，不过是「温柔乡里的一场梦幻处」。殊不知，时年从十八回的元宵到六十回的春日，不过是一年轮回。但一年，一年也太长了。所有的事情，都变化了许多。 「女孩子在没出嫁前像是一枚珍珠，而出嫁之后就变成了鱼眼珠一般」。 红楼梦就在小姐们出嫁时戛然而止了。君不见王夫人的爽利，君不见贾母的风华，君不见宝钗小时的淘气。但时间呵，也许不曾带走什么，但却一定带给了他们无法抗拒的改变。 不知道是不是在这个年龄，总会有意无意的把自己往主角的位置里带入，而这样也就更能体会到那种心有悲伤而不能语。 「眼看他起朱楼， 眼看他宴宾客， 眼看他楼塌了。」 就像这样吧。 如果让我来选，我希望时间能够永远停在那一年的春夏。停在并头读西厢。停在葬花绝世吟。停在海棠诗社起。停在那虚幻而又美好，朦胧而又恬美的梦里。 动情真的是，令人沉迷，也令人癫狂。 「假作真时真亦假；无为有处有还无。」「身后有余忘缩手，眼前无路想回头」 情也许就是这样吧。 来源：Pixiv]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「NOI2005」维护数列-非旋Treap]]></title>
    <url>%2F20180217-noi2005-sequence%2F</url>
    <content type="text"><![CDATA[维护一个数列，给定初始的$n$个数字。现有六种命令，在第$pos$个数后插入$tot$个数，翻转从第$pos$个数开始的$tot$个数，删除从第$pos$个数开始的$tot$个数，查询从第$pos$个数开始的$tot$个数的和，设定从第$pos$个数开始的$tot$个数设定为$c$，查询整个数列中和最大的连续子区间的大小。 链接Luogu P2042 题解这是一道经典的平衡树的题，被我用来练手非旋$Treap$。 因为我太弱了，所以写的很痛苦。 关于合并和分裂的主要思想参见学习笔记。 对于节点，要维护： 树的大小，树的权值和，树从左端点开始的最大连续和，树从右端点开始的最大连续和，和树的最大连续子区间和。 主要操作： $pushdown$ 往下$push$，修改两个子节点并打上标记。 $pushup$ 更新所有信息，维护三个$max$信息的方式有些特殊，但仔细想想应当能想到。 这里我被坑了。这个与线段树的区间最大查询有点不太一样，根节点也有代表的数，这个需要记住。 建树 构建笛卡尔树。详见学习笔记。 最大查询连续和 插入 把即将插入的$tot$个数按照上文的介绍方法建树。 把原来的数按照$size$裂成两棵树，分别按顺序合起来就可以了。 接下来的操作都需要裂成三棵树，左边的有$pos-1$个树，中间有$tot$个数。 删除 直接删除中间子树，左右合并。因为内存不够（$64MB$），需要垃圾回收。 求和 输出中间子树的和，再把三个子树顺次合并起来。 翻转 翻转中间子树并打标记，再把三个子树顺次合并起来。 设定 对中间子树完成设定并打标记，再将三个子树顺次合并起来。 还有一点就是垃圾回收。简略来说就是把删除的节点暴力的扔到一个栈里面，然后能用就用，不能有就再新开内存池。 其他也没有什么重要的。多$pushdown pushup$几次，然后这些操作都是要注意边界，也就是null时候的条件的。$pushup$的合并公式也需要好好斟酌。 代码点击切换显示状态 #include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 510000;const int MAX = 2147483647;int k,n;struct node_t&#123; int val,p; int lmax,rmax,maxn,sumn,tag; int size; bool rev,is_tag; node_t *son[2],**null; void pushdown()&#123; if(this == *null) return; if(is_tag)&#123; son[0]-&gt;cover(tag),son[1]-&gt;cover(tag); is_tag = tag = 0; &#125; if(rev) &#123; son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; &#125; &#125; void pushup()&#123; if(this == *null) return; if(son[0] == *null &amp;&amp; son[1] == *null)&#123; size = 1;sumn = lmax = rmax = maxn = val; return; &#125; size = son[0]-&gt;size + son[1]-&gt;size + 1; sumn = son[0]-&gt;sumn + son[1]-&gt;sumn + val; lmax = max(son[0]-&gt;lmax,son[0]-&gt;sumn + val + max(0,son[1]-&gt;lmax)); rmax = max(son[1]-&gt;rmax,son[1]-&gt;sumn + val + max(0,son[0]-&gt;rmax)); maxn = max(0,son[0]-&gt;rmax) + val + max(0,son[1]-&gt;lmax); maxn = max(maxn,max(son[0]-&gt;maxn,son[1]-&gt;maxn)); &#125; void cover(int v)&#123; if(this == *null) return; val = v;sumn = size * v; lmax = rmax = maxn = max(v,sumn); is_tag = 1;tag = v; &#125; void reverse()&#123; if(this == *null) return; swap(son[0],son[1]); swap(lmax,rmax); rev^=1; &#125;&#125;;struct fhqtreap&#123; node_t pool[MAXN],*tmp[MAXN],*stack[MAXN],*garbage[MAXN]; node_t *root,*null; int cnt,tot; void newnode(node_t *&amp;r,int val = 0)&#123; if(tot == 0) r = &amp;pool[cnt++]; else r = garbage[--tot];//垃圾回收 r-&gt;val = val;r-&gt;size = 1; r-&gt;lmax = r-&gt;rmax = r-&gt;maxn = r-&gt;sumn = val; r-&gt;son[0] = r-&gt;son[1] = null; r-&gt;is_tag = r-&gt;rev = 0; r-&gt;null = &amp;null; r-&gt;p = rand(); &#125; fhqtreap()&#123; tot = 0;cnt = 0; srand(time(NULL)); newnode(null,-MAX); null-&gt;p = MAX; root = null; null -&gt; sumn = null-&gt;size = 0; &#125; void cycle(node_t *r)&#123; if(r == null) return; garbage[tot++] = r; cycle(r-&gt;son[0]); cycle(r-&gt;son[1]); &#125; void read_tree(int n)&#123; for(int i = 1;i&lt;=n;i++)&#123; int t;scanf("%d",&amp;t); newnode(tmp[i],t); &#125; &#125; node_t *build(int n)&#123; read_tree(n); int top = 1; newnode(stack[0],-MAX); stack[0]-&gt;p = -MAX; for(int i = 1;i&lt;=n;i++)&#123; int nowp = top - 1; node_t *r = tmp[i],*pre = null; while(stack[nowp]-&gt;p &gt; r -&gt; p)&#123; stack[nowp]-&gt;pushup(); pre = stack[nowp]; stack[nowp] = null; nowp--; &#125; stack[nowp+1] = stack[nowp]-&gt;son[1] = r; stack[nowp+1]-&gt;son[0] = pre; top = nowp+2; &#125; while(top) stack[--top]-&gt;pushup(); return stack[0]-&gt;son[1]; &#125; void split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs)&#123; if(r == null)&#123; ls = null;rs = null;return; &#125; r-&gt;pushdown(); if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize)&#123; ls = r; split(r-&gt;son[1],lsize-r-&gt;son[0]-&gt;size-1,ls-&gt;son[1],rs); &#125; else&#123; rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); &#125; ls-&gt;pushup();rs-&gt;pushup(); &#125; node_t *merge(node_t *ls,node_t *rs)&#123; if(ls == null) return rs; if(rs == null) return ls; if(ls-&gt;p &lt; rs-&gt;p)&#123; ls-&gt;pushdown(); ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup(); return ls; &#125; else&#123; rs-&gt;pushdown(); rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup(); return rs; &#125; &#125; void insert(int rank,int n)&#123; if(n == 0) return; node_t *ls,*rs,*newn,*ret; split(root,rank,ls,rs); newn = build(n); root = merge(merge(ls,newn),rs); &#125; void split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r)&#123; node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r); &#125; void erase(int lb,int ms)&#123; if(ms == 0) return; node_t *l,*m,*r,*ret; split(lb-1,ms,l,m,r); cycle(m); root = merge(l,r); &#125; int get_sum(int lb,int ms)&#123; if(ms == 0) return 0; node_t *l,*m,*r; split(lb-1,ms,l,m,r); int ans = m-&gt;sumn; root = merge(l,merge(m,r)); return ans; &#125; int max_sum()&#123; return root-&gt;maxn; &#125; void reverse(int lb,int ms)&#123; if(ms == 0) return; node_t *l,*m,*r; split(lb-1,ms,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r)); &#125; void make_same(int lb,int ms,int c)&#123; if(ms == 0) return; node_t *l,*m,*r; split(lb-1,ms,l,m,r); m-&gt;cover(c); root = merge(l,merge(m,r)); &#125;&#125;;fhqtreap w;void init()&#123; scanf("%d %d",&amp;n,&amp;k); w.root = w.build(n);&#125;void solve()&#123; for(int i = 1;i&lt;=k;i++)&#123; char op[50];int a,b,c; scanf("%s",op); if(op[0] == 'M'&amp;&amp;op[2] == 'X') printf("%d\n",w.max_sum()); else&#123; scanf("%d %d",&amp;a,&amp;b); if(op[0] == 'I') w.insert(a,b); else if(op[0] == 'D') w.erase(a,b); else if(op[0] == 'G')&#123; printf("%d\n",w.get_sum(a,b)); &#125; else if(op[0] == 'M')&#123; scanf("%d",&amp;c); w.make_same(a,b,c); &#125; else if(op[0] == 'R')&#123; w.reverse(a,b); &#125; &#125; &#125;&#125;int main()&#123; init(); solve(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[非旋Treap学习笔记]]></title>
    <url>%2F20180217-nonerotatingtreap-notes%2F</url>
    <content type="text"><![CDATA[非旋$Treap$，是一种不基于旋转的平衡树。它基于$Treap$的树堆思想，并且能够高效的完成某些对区间的操作，而且灵活性比较高。它也可以进行可持久化的操作。 这篇文章，介绍了基于旋转的$Treap$的基本概念等等，在这里不再赘述。## 代码简述这里以这道题题作为模板。### 节点的定义struct node_t&#123; int val,p,size; // val 是数值，p 是优先级，size 是当前节点代表的区间的大小 bool rev; node_t *son[2],**null; //下放标记 void pushdown()&#123; if(this == *null) return; if(rev) &#123; son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; &#125; &#125; //更新节点 void pushup()&#123; if(this == *null) return; size = son[0]-&gt;size + son[1]-&gt;size + 1; &#125; //反转以当前节点为父节点所代表的区间 void reverse()&#123; if(this == *null) return; swap(son[0],son[1]); rev^=1; &#125;&#125;; 这里的代码很简单，不作赘述。 不过有一点要说的。这里的双重指针**null的目的主要是让这里的节点能够快速的判断是否这个节点是下面平衡树的null节点。 Treap结构体定义 &amp; 初始化函数struct fhqtreap&#123; node_t pool[MAXN],*tmp[MAXN],*stack[MAXN]; //tmp 和 stack 数组都是为了后面的$O(n)$建树做准备 node_t *root,*null; int cnt; fhqtreap()&#123; cnt = 0; srand(time(NULL)); newnode(null); null-&gt;p = MAX; root = null; null-&gt;size = 0; &#125; void newnode(node_t *&amp;r,int val = 0)&#123; r = &amp;pool[cnt++];//分配内存 r-&gt;val = val;r-&gt;size = 1; r-&gt;son[0] = r-&gt;son[1] = null; r-&gt;rev = 0;//置0 r-&gt;null = &amp;null; r-&gt;p = rand(); &#125; 初始化也没有什么难点。主要需要注意：null的size应当为0，优先级应当是最大的。 建树void read_tree(int n)&#123; //把节点全部扔到tmp里面去 for(int i = 1;i&lt;=n;i++) newnode(tmp[i],i);&#125;node_t *build(int n)&#123; read_tree(n); int top = 1; newnode(stack[0],-MAX);stack[0]-&gt;p = -MAX; //需要保证超级根能呆在最上面 for(int i = 1;i&lt;=n;i++)&#123; int nowp = top - 1; node_t *r = tmp[i],*pre = null;// r 是待添加节点 while(stack[nowp]-&gt;p &gt; r -&gt; p)&#123; stack[nowp]-&gt;pushup();//这里需要pushup！因为应当保证下面是一个合法的treap; pre = stack[nowp]; stack[nowp] = null; nowp--;// 出栈 &#125; stack[nowp+1] = stack[nowp]-&gt;son[1] = r;//把r链接到链上 stack[nowp+1]-&gt;son[0] = pre;//把下面的链连到r的左儿子 top = nowp+2;//更新栈内元素 &#125; while(top) stack[--top]-&gt;pushup();//更新 return stack[0]-&gt;son[1];//返回根节点&#125; 这里比较复杂。简单来说就是一个笛卡尔树的构造。 这样做的主要好处是可以在$O(n)$之内完成建树。在这里给出一个链接：Sengxian’s Blog,我觉得这位神犇讲的比较通俗易懂。 其实我们也可以通过一个简单的方式在$O(n \log {n})$的时间内完成建树，就是一个一个的插入进去。但这样真的，很慢。 主要步骤如下： 这里对于 $\text{p}$ 而言，我们构造小根堆。我们将一个节点表示为：$(\text{key}, \text{p})$。首先将所有节点按照 $\text{key}$ 从小到大排序。在这里，就是我们的序列顺序。 引入一个栈，栈底存放一个元素 $(-\infty, -\infty)$，表示超级根，这样保证它总在最上面，他的右儿子即为我们真正的树根。这个栈，维护了笛卡尔树最右边的一条链上面的元素。（始终往右的一条链） 从前往后遍历 $(\text{key}, \text{p})$： 对于每一个 $(\text{key}_i, \text{p}_i)$，从栈中找出（从栈顶往栈底遍历）第一个$p$小于等于 $\text{p}_i$ 的元素 $j$。 将 $j$ 之上即 $\text{p} &gt; \text{p}_o$ 的点全部弹出。 我们在这里记$j$的右子节点为$pre$。在树中，将 $pre$ 挂在 $j$ 的左子树上，将 $r$ 挂在原来 $j$ 的右子树的位置。 可以证明这个构造的时间复杂度是$O(n)$。 以上关于笛卡尔树的介绍转载自Sengxian的Blog，略有改写。 分裂//分裂为两颗子树，左子树的大小为lsizevoid split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs)&#123; if(r == null)&#123;//边界 ls = null;rs = null; return; &#125; r-&gt;pushdown();//很重要！ if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize)&#123; ls = r; split(r-&gt;son[1],lsize - r-&gt;son[0]-&gt;size - 1,ls-&gt;son[1],rs); &#125; else&#123; rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); &#125; ls-&gt;pushup();rs-&gt;pushup();&#125; 看起来很难，但其实很简单。 我们面临的只有一个问题：当前节点属于左子树还是右子树？ 判定标准一般是数值大小或者排名来决定的。 如果我们判定当前根节点属于分裂后左子树，那么根节点的左子树就一定属于分裂后的左子树，那么我们只需要关心根节点的右子树属于分裂后那颗子树了，然后这个就可以递归下去了；判定属于分裂后的右子树是同理的。 代码也没有什么注意事项。可以证明，分裂的时间复杂度是$O(\log {n})$。 合并node_t *merge(node_t *ls,node_t *rs)&#123; if(ls == null) return rs; if(rs == null) return ls; // 边界 if(ls-&gt;p &lt; rs-&gt;p)&#123; ls-&gt;pushdown(); //需要pushdown！ ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup();//需要pushup！ return ls; &#125; else&#123; rs-&gt;pushdown();//需要pushdown！ rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup();//需要pushup！ return rs; &#125;&#125; 这个和分裂也是类似的。 我们的主要任务变成了判断：左子树右子树的根节点哪个应该放在总树的根节点？ 判断的依据十分显然。就是两个根节点的优先值。结合上面的分裂，我们也可以发现这里的递归规律： 如果合并后根节点是左子树的根节点，那么我们就可以把整个左子树的左子树保留下来，从而把左子树的右子树和右子树一起合并到左子树的右子树，然后左子树就可以作为返回的节点了。右子树同理。 可以证明，合并的时间复杂度也是$O(\log {n})$。 split to three//ls是左子树的size，rs是中间子树的sizevoid split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r)&#123; node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r);&#125; 太简单了，不说这个。 区间翻转//这里使用的是左边和右边的边界void reverse(int lb,int rb)&#123; node_t *l,*m,*r; split(lb-1,rb-lb+1,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r));&#125; 也不太想说。主要就是要注意一点。我们在这里，要保证打过标记以后，这个节点的信息已然正确。这个在其他的例题里会比较令人舒服，可以减少一些$pushdown$。 虽然这道题只有区间翻转，但是其他的区间操作也可以同理完成。$Splay$能做的，非旋$Treap$都能做，而且他还可以进行持久化，这是$Splay$比不了的。（然而我并不会写 完整代码点击切换显示状态 #include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 510000;const int MAX = 2147483647;/*以下为输入输出优化*/namespace fast_IO &#123; inline char read() &#123; static const int IN_LEN = 1000000; static char buf[IN_LEN], *s, *t; return s==t?t=(s=buf)+fread(buf,1,IN_LEN,stdin),*s++:*s++; &#125; inline void read(int &amp;x) &#123; static bool iosig; static char c; for (iosig = false, c = read(); !isdigit(c); c = read()) &#123; if (c == '-') iosig = true; if (c == -1) return; &#125; for (x = 0; isdigit(c); c = read()) x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ '0'); if (iosig) x = -x; &#125; const int OUT_LEN = 10000000; char obuf[OUT_LEN], *ooh = obuf; inline void print(char c) &#123; if (ooh == obuf + OUT_LEN) fwrite(obuf, 1, OUT_LEN, stdout), ooh = obuf; *ooh++ = c; &#125; inline void print(int x) &#123; static int buf[30], cnt; if (x == 0) &#123; print('0'); &#125; else &#123; if (x &lt; 0) print('-'), x = -x; for (cnt = 0; x; x /= 10) buf[++cnt] = x % 10 + 48; while (cnt) print((char)buf[cnt--]); &#125; &#125; inline void flush() &#123; fwrite(obuf, 1, ooh - obuf, stdout); &#125;&#125;using namespace fast_IO;/*以上为输入输出优化*/int k,n;struct node_t&#123; int val,p,size; bool rev; node_t *son[2],**null; void pushdown()&#123; if(this == *null) return; if(rev) &#123; son[0]-&gt;reverse(),son[1]-&gt;reverse(); rev = 0; &#125; &#125; void pushup()&#123; if(this == *null) return; size = son[0]-&gt;size + son[1]-&gt;size + 1; &#125; void reverse()&#123; if(this == *null) return; swap(son[0],son[1]); rev^=1; &#125;&#125;;struct fhqtreap&#123; node_t pool[MAXN],*tmp[MAXN],*stack[MAXN]; node_t *root,*null; int cnt,tot; void newnode(node_t *&amp;r,int val = 0)&#123; r = &amp;pool[cnt++]; r-&gt;val = val;r-&gt;size = 1; r-&gt;son[0] = r-&gt;son[1] = null;r-&gt;rev = 0; r-&gt;null = &amp;null; r-&gt;p = rand(); &#125; fhqtreap()&#123; cnt = 0; srand(time(NULL)); newnode(null); null-&gt;p = MAX; root = null; null-&gt;size = 0; &#125; void read_tree(int n)&#123; for(int i = 1;i&lt;=n;i++) newnode(tmp[i],i); &#125; node_t *build(int n)&#123; read_tree(n); int top = 1; newnode(stack[0],-MAX); stack[0]-&gt;p = -MAX; for(int i = 1;i&lt;=n;i++)&#123; int nowp = top - 1; node_t *r = tmp[i],*pre = null; while(stack[nowp]-&gt;p &gt; r -&gt; p)&#123; stack[nowp]-&gt;pushup(); pre = stack[nowp]; stack[nowp] = null; nowp--; &#125; stack[nowp+1] = stack[nowp]-&gt;son[1] = r; stack[nowp+1]-&gt;son[0] = pre; top = nowp+2; &#125; while(top) stack[--top]-&gt;pushup(); return stack[0]-&gt;son[1]; &#125; void split(node_t *r,int lsize,node_t *&amp;ls,node_t *&amp;rs)&#123; if(r == null)&#123; ls = null;rs = null; return; &#125; r-&gt;pushdown(); if(r-&gt;son[0]-&gt;size + 1 &lt;= lsize)&#123; ls = r; split(r-&gt;son[1],lsize - r-&gt;son[0]-&gt;size - 1,ls-&gt;son[1],rs); &#125; else&#123; rs = r; split(r-&gt;son[0],lsize,ls,rs-&gt;son[0]); &#125; ls-&gt;pushup();rs-&gt;pushup(); &#125; node_t *merge(node_t *ls,node_t *rs)&#123; if(ls == null) return rs; if(rs == null) return ls; if(ls-&gt;p &lt; rs-&gt;p)&#123; ls-&gt;pushdown(); ls-&gt;son[1] = merge(ls-&gt;son[1],rs); ls-&gt;pushup(); return ls; &#125; else&#123; rs-&gt;pushdown(); rs-&gt;son[0] = merge(ls,rs-&gt;son[0]); rs-&gt;pushup(); return rs; &#125; &#125; void split(int ls,int ms,node_t *&amp;l,node_t *&amp;m,node_t *&amp;r)&#123; node_t *m1; split(root,ls,l,m1); split(m1,ms,m,r); &#125; void reverse(int lb,int rb)&#123; node_t *l,*m,*r; split(lb-1,rb-lb+1,l,m,r); m-&gt;reverse(); root = merge(l,merge(m,r)); &#125; void output(node_t *r,int *a)&#123; if(r == null) return; r-&gt;pushdown(); output(r-&gt;son[0],a); a[r-&gt;son[0]-&gt;size] = r-&gt;val; output(r-&gt;son[1],a + r-&gt;son[0]-&gt;size+1); &#125; void print(node_t *r = NULL,int depth = 0)&#123; if(r == NULL) r = root; if(r == null) return; print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' '); printf("val:%d p:%d size:%d son:%d %d rev?:%d\n",r-&gt;val,r-&gt;p,r-&gt;size,r-&gt;son[0] != null,r-&gt;son[1] != null,r-&gt;rev); print(r-&gt;son[1],depth+1); return; &#125;&#125;;fhqtreap w;int ans[MAXN];void init()&#123; read(n),read(k); w.root = w.build(n);&#125;void solve()&#123; int a,b; for(int i = 1;i&lt;=k;i++)&#123; read(a),read(b); w.reverse(a,b); &#125; w.output(w.root,ans); for(int i = 0;i&lt;n;i++)&#123; print(ans[i]);print(' '); &#125; print('\n');&#125;int main()&#123; init(); solve(); flush(); return 0;&#125; 这种$Treap$还有一个别名，叫做$FHQ Treap$，好像是因为这个的发明者是我校神犇范浩强吧（并不清楚。 例题「NOI2005」维护数列 一些参考这里有一些讲非旋转$Treap$的博客： Sengxian’s Blog xehoth’s Blog Memphis’s Blog]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 FebWeek2]]></title>
    <url>%2F20180211-2018-FebWeek2%2F</url>
    <content type="text"><![CDATA[2018&#x5E74;&#x4E8C;&#x6708; &#x7B2C;&#x4E8C;&#x5468;2018.2.5-2018.2.11 &#x6B63;&#x6587;&#x8FD9;&#x4E00;&#x5468;&#x6CA1;&#x5E72;&#x4EC0;&#x4E48;&#x4E8B;&#x2026;&#x8FD9;&#x4E48;&#x4E00;&#x60F3;&#x5FFD;&#x7136;&#x5C31;&#x9893;&#x5E9F;&#x4E86;&#x2026; &#x5199;&#x4E86;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x4E8C;&#x5206;&#x56FE;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x56FE;&#x548C;&#x6811;&#x7684;&#x9898;&#x3002;&#x4EFF;&#x4F5B;&#x5C31;&#x662F;&#x6BEB;&#x65E0;&#x76EE;&#x7684;&#x7684;&#x4E00;&#x822C;&#x3002;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x628A;&#x770B;&#x4E86;&#x5F88;&#x4E45;&#x7684;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x9898;&#x7ED9;A&#x4E86;&#x3002;&#x8FD8;&#x662F;&#x86EE;&#x6FC0;&#x52A8;&#x7684;&#x3002; &#x62B1;&#x4E86;&#x6D1B;&#x8C37;&#x7684;&#x7F51;&#x8BFE;&#xFF0C;&#x4E8E;&#x662F;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x4E00;&#x4E0A;&#x5348;&#x5B66;&#x5E73;&#x8861;&#x6811;&#x3001;&#x4E3B;&#x5E2D;&#x6811;&#x3001;&#x6811;&#x5957;&#x6811;&#x7684;&#x9178;&#x723D;&#x3002;&#x597D;&#x591A;&#x7684;&#x4E1C;&#x897F;&#x8FD8;&#x6CA1;&#x6765;&#x5F97;&#x53CA;&#x5B9E;&#x73B0;&#xFF0C;&#x53EA;&#x597D;&#x7B49;&#x4E00;&#x7B49;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x5012;&#x662F;&#x6DF1;&#x523B;&#x610F;&#x8BC6;&#x5230;&#x4E86;&#x81EA;&#x5DF1;&#x7684;&#x849F;&#x84BB;&#x3002;&#x5567;&#x5567;&#x3002; &#x6625;&#x8282;&#x5C31;&#x5FEB;&#x8981;&#x5230;&#x4E86;&#x3002;&#x826F;&#x5BB5;&#x4F73;&#x8282;&#xFF0C;&#x4E0D;&#x5982;&#x597D;&#x597D;&#x8865;&#x8865;&#x4F5C;&#x4E1A;&#x3002; TodoList&#x8FD9;&#x5468;&#x5B8C;&#x6210; &#x5B8C;&#x6210;&#x83AB;&#x961F;&#x7B97;&#x6CD5;&#x5B66;&#x4E60;&#x7B14;&#x8BB0; &#x2714; &#x5199;&#x4E86;&#x4E00;&#x7BC7; &#x5199;&#x2026;&#x8BED;&#x6587;&#x4F5C;&#x4E1A;&#x2026; &#x2714;&#x5199;&#x4E86;&#x4E00;&#x70B9; &#x63A5;&#x7740;&#x5B66;&#x7F51;&#x7EDC;&#x6D41; &#x8D39;&#x7528;&#x6D41; &#x2718;&#x5E76;&#x6CA1;&#x6709;&#x5199;&#x8D39;&#x7528;&#x6D41; &#x63A5;&#x7740;&#x505A;&#x9898;&#x5566; &#x2714;&#x505A;&#x4E86;&#x51E0;&#x9053;&#x6C34;&#x9898;&#x2026; &#x4E0B;&#x5468;&#x5B8C;&#x6210; &#x5199;&#x5B8C;&#x8BED;&#x6587;&#x5BD2;&#x5047;&#x4F5C;&#x4E1A;&#xFF01;&#xFF01;&#xFF01;&#x6211;&#x89C9;&#x5F97;&#x4E0A;&#x9762;&#x7684;&#x4E8B;&#x60C5;&#x591F;&#x5145;&#x6EE1;&#x6574;&#x6574;&#x4E00;&#x5468;&#x4E86;&#x55EF;&#x3002;]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「NOI2002」银河英雄传说-并查集]]></title>
    <url>%2F20180211-noi2002-hero%2F</url>
    <content type="text"><![CDATA[初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。 有两种指令： 合并指令为$M\ i\ j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。 询问指令为$C\ i\ j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。 链接Luogu P1196 题解一道并查集的题目。 因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。 说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。 在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。 合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。 查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;algorithm&gt;#define MAXN 30010using namespace std;int f[MAXN],d[MAXN],s[MAXN],t;// f 维护父亲节点，d 维护于父亲节点的距离，s 在根节点处维护集合的元素数int find(int x)&#123; if(f[x] == x)&#123; return x; &#125; else&#123; int w = find(f[x]); d[x] += d[f[x]]; f[x] = w; return w; &#125;&#125;void un(int x,int y)&#123; int b = find(y),e = find(x); if(b == e)&#123; return; &#125; else&#123; d[e] = s[b],d[b] = 0; s[b] = s[b] + s[e],s[e] = 0; f[e] = b; return; &#125;&#125;int main()&#123; scanf("%d",&amp;t); for(int i = 1;i&lt;MAXN;i++)&#123; f[i] = i,d[i] = 0,s[i] = 1; &#125; for(int i = 1;i&lt;=t;i++)&#123; char op[20];int a,b; scanf("%s",op); scanf("%d %d",&amp;a,&amp;b); if(op[0] == 'M')&#123; un(a,b); &#125; else&#123; int a1 = find(a),b1 = find(b); if(a1!=b1)&#123; printf("-1\n"); &#125; else&#123; printf("%d\n",abs(d[a]-d[b])-1); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>题解</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dinic学习笔记]]></title>
    <url>%2F20180208-dinic-notes%2F</url>
    <content type="text"><![CDATA[Dinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \times m)$，但大多数情况下会远远优于此时间复杂度。 基本概念从Menci神犇的博客复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。 容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。 流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。 剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。 反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。 残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。 增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。 增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。 层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。 层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。 思路用文字叙述大概如下： 1. 建立以出发点为源点的层次图（即源点到各店的距离）2. 在层次图&amp;残量网络中寻找增广路，并增广流量3. 重复2直到找不到增广路4. 重复123直到不存在层次图 实现建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。具体实现的时候也有一定的技巧，在代码里面有注释。 反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。 有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。 代码以Luogu P3376为例 点击切换显示状态 #include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;struct Edge&#123; int from,to,flow,cap; int next;&#125;edge[201000];int fir[10100],dis[10100],cur[10100];int n,m,s,t,tot = 2;//tot从2开始是最舒服的，既可以直接异或，后面的终止条件也不用想来想去。bool bfs()&#123; queue&lt;int&gt; q; memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(fir));//清空当前边 q.push(s);dis[s] = 1; while(!q.empty())&#123; int nown = q.front();q.pop(); for(int nowe = fir[nown];nowe!=0;nowe = edge[nowe].next)&#123; int v = edge[nowe].to; if(dis[v] == 0 &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow)&#123; //两个条件：未遍历而且边可以增广 dis[v] = dis[nown]+1; q.push(v); //由于我们只沿最短路增广，所以这里就可以直接break掉了。 if(v == t) return dis[t]; &#125; &#125; &#125; return dis[t];&#125;int dfs(int nown,int limit = 0x3f3f3f3f)&#123; //找到终点或没得可找 这个优化很重要 if(nown == t || limit == 0) return limit; for(int &amp;nowe = cur[nown];nowe!=0;nowe = edge[nowe].next)&#123; //这里有当前弧优化 int v = edge[nowe].to; if(dis[v] == dis[nown]+1 &amp;&amp; edge[nowe].flow &lt; edge[nowe].cap)&#123; //满足层次图条件(沿着最短路) int f = dfs(v,min(edge[nowe].cap-edge[nowe].flow,limit)); if(f&gt;0)&#123; //更改当前边 edge[nowe].flow+=f; edge[nowe^1].flow-=f; return f; &#125; &#125; &#125; return 0;&#125;int dinic()&#123; int ans = 0,f; while(bfs())&#123;//bfs是步骤1 while( (f = dfs(s)) &gt; 0)//dfs是步骤2 ans+=f; &#125; return ans;&#125;void addedge(int a,int b,int c)&#123; edge[tot].from = a;edge[tot].to = b; edge[tot].cap = c;edge[tot].flow = 0; edge[tot].next = fir[a];fir[a] = tot; tot++;&#125;int main()&#123; scanf("%d %d %d %d",&amp;n,&amp;m,&amp;s,&amp;t); for(int i = 0;i&lt;m;i++)&#123; int a,b,c; scanf("%d %d %d",&amp;a,&amp;b,&amp;c); addedge(a,b,c); addedge(b,a,0);//需要加反向边 &#125; printf("%d\n",dinic()); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>模板</tag>
        <tag>图论</tag>
        <tag>Dinic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI2009」假期的宿舍-二分图匹配]]></title>
    <url>%2F20180208-zjoi2009-vacation%2F</url>
    <content type="text"><![CDATA[有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。 链接Luogu P2055 题解这道题其实可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有本校学生床放在二分图另一侧，再将认识的人&amp;床连边（包括自己和自己的床），注意上面的人不包括回家的人。 然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&amp;当前弧优化。 然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。缘妙不可言啊。 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#include &lt;algorithm&gt;using namespace std;struct Edge&#123; int from,to,flow,cap; int next;&#125;edge[20000];int fir[300],dis[300],cur[300];int n,T,home[300],local[300],s,t,tot;bool bfs()&#123; queue&lt;int&gt; q; memset(dis,0,sizeof(dis)); memcpy(cur,fir,sizeof(fir)); q.push(s);dis[s] = 1; while(!q.empty())&#123; int nown = q.front();q.pop(); for(int e = fir[nown];e!=0;e = edge[e].next)&#123; int v = edge[e].to; if(dis[v] == 0 &amp;&amp; edge[e].cap &gt; edge[e].flow)&#123; dis[v] = dis[nown]+1; q.push(v); &#125; &#125; &#125; return dis[t];&#125;int dfs(int nown,int limit = 0x3f3f3f3f)&#123; if(nown == t || limit == 0) return limit; for(int &amp;e = cur[nown];e!=0;e = edge[e].next)&#123; int f,v = edge[e].to; if(dis[v] == dis[nown]+1&amp;&amp;edge[e].flow &lt;edge[e].cap)&#123; int f = dfs(v,min(edge[e].cap-edge[e].flow,limit)); if(f&gt;0)&#123; edge[e].flow+=f; edge[e^1].flow-=f; return f; &#125; &#125; &#125; return 0;&#125;int dinic()&#123; int ans = 0,f; while(bfs())&#123; while((f = dfs(s)&gt;0)) ans+=f; &#125; return ans;&#125;void addedge(int from,int to,int c)&#123; edge[tot].from = from;edge[tot].to = to; edge[tot].cap = c;edge[tot].flow = 0; edge[tot].next = fir[from];fir[from] = tot; tot++;&#125;int main()&#123; scanf("%d",&amp;T); for(int i = 1;i&lt;=T;i++)&#123; scanf("%d",&amp;n); //清零 memset(edge,0,sizeof(edge)); memset(home,0,sizeof(home)); memset(local,0,sizeof(local)); memset(fir,0,sizeof(fir)); tot = 2;int cnt = 0; s = 2*n+1,t = 2*n+2; //是否本校 for(int i = 1;i&lt;=n;i++)&#123; scanf("%d",&amp;local[i]); &#125; //是否回家 for(int i = 1;i&lt;=n;i++)&#123; scanf("%d",&amp;home[i]); if(local[i] == 0) home[i] = 0; &#125; //是否认识且符合条件 for(int i = 1;i&lt;=n;i++)&#123; for(int j = 1;j&lt;=n;j++)&#123; int tmp;scanf("%d",&amp;tmp); if(i == j) tmp = 1; if(home[i] == 1||local[j] == 0||tmp == 0) continue; else addedge(i,j+n,1),addedge(j+n,i,0); &#125; &#125; //超级源点&amp;&amp;汇点 for(int i = 1;i&lt;=n;i++)&#123; if(home[i] == 0) addedge(s,i,1),addedge(i,s,0),cnt++; if(local[i] == 1) addedge(i+n,t,1),addedge(t,i+n,0); &#125; if(dinic()==cnt) printf("^_^\n"); else printf("T_T\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>图论</tag>
        <tag>二分图匹配</tag>
        <tag>Dinic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[莫队算法学习笔记（一）]]></title>
    <url>%2F20180205-mo-algorithm-1%2F</url>
    <content type="text"><![CDATA[这篇主要介绍在序列上的无修改以及带修改的离线莫队算法。 简介莫队算法是一个充满着暴力美学的算法。 莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。 莫队算法核心思想首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。 有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链) 一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。 但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。 所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。 这个时候就要用莫队的思想来简化这个时间复杂度。 我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些相邻的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的相邻的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。 我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\frac{n}{Q}$个块。分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序。这句话很重要，其实就是莫队的核心实现吧。 然后，暴力转移。 然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\frac{n}{Q}$个块，所以右端点的移动总共就是$\frac{n^2}{Q}$次。 总共合起来，时间复杂度就是$O(T\times(\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些基础复杂的数学知识，可以发现当$Q = \sqrt{n}$的时候，这个式子的值最小，是$O(T\times(m+n)\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\sqrt{n}$未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。 具体实现莫队的实现超级简单。不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。 代码如下。 //ql,qr 为查询区间，l,r为当前区间//add 和 del 是自定义的转移函数//注意自增自减的时间while(ql&lt;l) add(--l);while(r&lt;qr) add(++r);while(l&lt;ql) del(l++);while(qr&lt;r) del(r--); 超级简单吧！ 值的一提的是，在我去北京冬令营的时候，台上的神犇说： 莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！ 听起来很有道理，但我没有试过。 例题「SDOI2009」HH的项链 [国家集训队]小Z的袜子 （题解待补 带修改莫队算法待修改的莫队就是可以支持一些简单的修改的莫队算法。 核心思想基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。 这里我们取分块的大小为$n^{\frac{2}{3}}$，那么有$n^{\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \times n^{\frac{5}{3}})$。（然而并不太懂怎么推出来这个的…哪位巨佬知道请教一下 非常感谢 具体实现类似，不写了。 //一段时间复杂度为O(n^5/3)的代码。 需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。 例题[国家集训队]数颜色 （题解待补]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>模板</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 FebWeek1]]></title>
    <url>%2F20180205-2018-FebWeek1%2F</url>
    <content type="text"><![CDATA[2018年二月 第一周2018.1.29-2018.2.4 正文这一周好像没干什么事情。 学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板…过几天做几道关于最大流什么的题吧。 还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题…争取下周做几道稍微难些的莫队吧。 寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。 不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。 TodoList这周完成 实现AC自动机 ✘ 优先级目前不够高 学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写… 写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了…地理作业是什么… 至少写一篇题解发到这里 ✔目前有三篇啦 出去玩\(≧▽≦)/ ✔成功啦 实现了一个最大流膜版… ✔（图论太难了 下周完成 完成莫队算法学习笔记（普通 待修改 强制在线 树上 写…语文作业… 接着学网络流 费用流 接着做题啦]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「SDOI2009」HH的项链-莫队or树状数组]]></title>
    <url>%2F20180205-sdoi2009-necklace%2F</url>
    <content type="text"><![CDATA[&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;$n$&#x7684;&#x6B63;&#x6574;&#x6570;&#x5E8F;&#x5217;$A$,&#x6709;$m$&#x6B21;&#x8BE2;&#x95EE;&#x5728;$[l,r]$&#x533A;&#x95F4;&#x5185;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x3002; &#x94FE;&#x63A5;Luogu P1972 &#x9898;&#x89E3;&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x524D;&#x6211;&#x53EA;&#x4F1A;&#x4E24;&#x79CD;&#x79BB;&#x7EBF;&#x7684;&#x505A;&#x6CD5;&#x3002;&#xFF08;&#x5728;&#x7EBF;&#x7684;&#x4E3B;&#x5E2D;&#x6811;&#x6211;&#x8FD8;&#x4E0D;&#x4F1A; &#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;&#x5176;&#x5B9E;&#x505A;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x65F6;&#x5019;&#x6211;&#x662F;&#x4E0D;&#x4F1A;&#x83AB;&#x961F;&#x4E86;&#x3002;&#x4F46;&#x73B0;&#x5728;&#x4F1A;&#x4E86;&#xFF0C;&#x53C8;&#x60F3;&#x5199;&#x7BC7;&#x83AB;&#x961F;&#x7684;&#x7B14;&#x8BB0;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x628A;&#x8FD9;&#x7BC7;&#x9898;&#x89E3;&#x5199;&#x51FA;&#x6765;&#x4E86;&#x3002; &#x83AB;&#x961F;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x5728;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x91CC;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x53C8;&#x662F;&#x975E;&#x5E38;&#x50CF;&#x6A21;&#x7248;&#x7684;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x4E5F;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x8BF4;&#x4E86;&#x3002; &#x9996;&#x5148;&#x5BF9;&#x5E8F;&#x5217;&#x5206;&#x5757;&#xFF0C;&#x4EE5;&#x67E5;&#x8BE2;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x6240;&#x5728;&#x5757;&#x7684;&#x5E8F;&#x53F7;&#x4E3A;&#x7B2C;&#x4E00;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;&#x7B2C;&#x4E8C;&#x5173;&#x952E;&#x5B57;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x66B4;&#x529B;&#x8F6C;&#x79FB;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A; $O((m+n) \sqrt{n})$ &#x6216;&#x8005;&#x7B80;&#x5355;&#x70B9;&#xFF1A; $O(n^\frac{3}{2})$ &#x4EE3;&#x7801;&#x89C1;&#x6700;&#x540E;&#x3002; &#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x91CD;&#x8981;&#x7684;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x5C31;&#x662F;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x9700;&#x8981;&#x5904;&#x7406;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x7528;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6216;&#x8005;&#x524D;&#x7F00;&#x548C;&#x51FA;&#x89E3;&#x4E86;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x5230;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x4E8B;&#x60C5;&#xFF0C;&#x80FD;&#x5426;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;&#x7384;&#x5B66;&#x9AD8;&#x7AEF;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x5462;&#xFF1F; &#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x51FA;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x6570;&#x5728;&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x51FA;&#x73B0;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x6709;&#x5982;&#x4E0B;&#x7684;&#x601D;&#x8DEF;&#xFF1A; &#x628A;&#x67E5;&#x8BE2;&#x6309;&#x7167;&#x67E5;&#x8BE2;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#x4F4D;&#x7F6E;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002;&#x4E3A;&#x4E86;&#x53D1;&#x73B0;&#x67D0;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x4F1A;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x67E5;&#x8BE2;&#x7684;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x5728;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#x4EE5;&#x5DE6;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x5185;&#x4E00;&#x5B9A;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#xFF1B;&#x800C;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x4EE5;&#x53F3;&#x7684;&#x8BDD;&#xFF0C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x91CC;&#x4E00;&#x5B9A;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x51FA;&#x73B0;&#x591A;&#x5C11;&#x6B21;&#x6211;&#x4EEC;&#x90FD;&#x53EA;&#x80FD;&#x7B97;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x6570;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5224;&#x65AD;&#x662F;&#x5426;&#x542B;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F9D;&#x636E;&#x3002; &#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5728;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4E2D;&#x53EA;&#x7ED9;&#x6BCF;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x8FD9;&#x4E00;&#x4F4D;&#x8D4B;&#x503C;$1$,&#x5176;&#x4F59;&#x7684;&#x7531;&#x4E8E;&#x4E0A;&#x8FF0;&#xFF0C;&#x4E0D;&#x80FD;&#x8BA1;&#x5165;&#x4E2A;&#x6570;&#xFF0C;&#x503C;&#x4E5F;&#x5C31;&#x662F;$0$&#x3002;&#x8FD9;&#x6837;&#x64CD;&#x4F5C;&#x5C31;&#x6EE1;&#x8DB3;&#x4E86;&#x533A;&#x95F4;&#x53EF;&#x51CF;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x524D;&#x7F00;&#x548C;&#x76F8;&#x51CF;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6BCF;&#x6B21;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x7531;&#x4E8E;&#x6570;&#x5B57;&#x7684;&#x8303;&#x56F4;&#x8F83;&#x5927;&#xFF0C;&#x5E94;&#x8BE5;&#x9700;&#x8981;&#x79BB;&#x6563;&#x5316;&#x3002;&#x4F46;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x8DDF;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5173;&#x7CFB;&#x4E0D;&#x5927;&#xFF0C;&#x53EA;&#x4E0E;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6709;&#x5173;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5199;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O((m+n) \log{n})$ &#x6216;&#x8005;&#x5927;&#x4F53;&#x6765;&#x8BF4; $O(n \log{n})$ &#x4EE3;&#x7801;&#x89C1;&#x4E0B;&#x3002; &#x4EE3;&#x7801;&#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x4EE3;&#x7801;&#x3002; &#x83AB;&#x961F;&#x4EE3;&#x7801;&#xFF1A; &#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; #include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;struct Query&#123; int id,l,r;&#125;query[201000];int times[1001000],res[201000],num[51000];int n,m,q;bool cmp(Query a,Query b)&#123; if(a.l/q!=b.l/q) return a.l/q&lt;b.l/q; else return a.r&lt;b.r;&#125;int main()&#123; scanf("%d",&amp;n); q = sqrt(n);//q是分块大小 for(int i = 1;i&lt;=n;i++) scanf("%d",&amp;num[i]); scanf("%d",&amp;m); for(int i = 0;i&lt;m;i++)&#123; scanf("%d %d",&amp;query[i].l,&amp;query[i].r); query[i].id = i; &#125; sort(query,query+m,cmp);//排序 int l = 1,r = 1; int ans = 1;times[num[1]]++; for(int i = 0;i&lt;m;i++)&#123; int ql = query[i].l,qr = query[i].r; //转移时先扩大再缩小 while(ql&lt;l)&#123; l--; if(times[num[l]]++ == 0) ans++; &#125; while(r&lt;qr)&#123; r++; if(times[num[r]]++ == 0) ans++; &#125; while(l&lt;ql)&#123; if(--times[num[l]] == 0) ans--; l++; &#125; while(qr&lt;r)&#123; if(--times[num[r]] == 0) ans--; r--; &#125; res[query[i].id] = ans; &#125; for(int i = 0;i&lt;m;i++) printf("%d\n",res[i]); return 0;&#125; &#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4EE3;&#x7801;&#xFF1A; &#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; #include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;inline int lowbit(int x)&#123; return x&amp;(-x);&#125;int n,m,num[51000],ans[201000],last[1001000];int tree[201000];struct que&#123; int id,l,r,res;&#125;qq[1000000];bool cmp(que a,que b)&#123; if(a.r!=b.r) return a.r&lt;b.r; return a.l&lt;b.l;&#125;inline void insert(int nown,int val)&#123; for(int i = nown;i&lt;=n;i+=lowbit(i)) tree[i]+=val;&#125;inline int query(int nown)&#123; int res = 0; for(int i = nown;i&gt;0;i-=lowbit(i)) res += tree[i]; return res;&#125;int main()&#123; scanf("%d",&amp;n); for(int i = 1;i&lt;=n;i++) scanf("%d",&amp;num[i]); scanf("%d",&amp;m); for(int i = 0;i&lt;m;i++)&#123; scanf("%d %d",&amp;qq[i].l,&amp;qq[i].r); qq[i].id = i; &#125; sort(qq,qq+m,cmp); int end = 0; for(int i = 0;i&lt;m;i++)&#123; while(end&lt;qq[i].r)&#123;//更新last&amp;树状数组 end++; if(last[num[end]]!=0)//原来出现过就抹去last位置的数 insert(last[num[end]],-1); insert(end,1);//树状数组加入新标记 last[num[end]] = end;//更新last值 &#125; ans[qq[i].id] = query(qq[i].r) - query(qq[i].l-1); &#125; for(int i = 0;i&lt;m;i++) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>莫队</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI2014」排序机械臂-Splay]]></title>
    <url>%2F20180202-cqoi2014-sort%2F</url>
    <content type="text"><![CDATA[&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x7B2C;$i$&#x6B21;&#x64CD;&#x4F5C;&#x65F6;&#x5BFB;&#x627E;&#x7B2C;i&#x5C0F;&#x7684;&#x6570;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;$Pi$,&#x5E76;&#x5C06;$(P_{i-1},P_{i}]$&#x7684;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x3002; &#x5982;&#x679C;&#x6709;&#x76F8;&#x540C;&#x7684;&#x6570;&#xFF0C;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x6392;&#x5E8F;&#x540E;&#x5B83;&#x4EEC;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#x5173;&#x7CFB;&#x4E0E;&#x521D;&#x59CB;&#x65F6;&#x76F8;&#x540C;&#x3002; &#x94FE;&#x63A5;Luogu P3165 &#x9898;&#x89E3;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x5927;&#x610F;&#x662F;&#x533A;&#x95F4;&#x5BFB;&#x627E;&#xFF0C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;Splay&#x6765;&#x505A;&#xFF0C;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;$size$&#x503C;&#x548C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x7684;$rev$&#x6807;&#x8BB0;&#x3002;&#x867D;&#x7136;&#x6211;&#x524D;&#x51E0;&#x5929;&#x8FD8;&#x8BF4;&#x518D;&#x4E5F;&#x4E0D;&#x7528;Splay&#x4E86;&#xFF08;&#x9003;&#x3002; &#x6CE8;&#x610F;&#x5230;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x90FD;&#x4F1A;&#x4F7F;&#x7B2C;$i$&#x4E2A;&#x6570;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6BCF;&#x6B21;&#x7684;$P_{i}$&#x4E8B;&#x5B9E;&#x4E0A;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x7684;$i-1$&#x3002; &#x5BF9;&#x4E8E;&#x533A;&#x95F4;&#x7684;&#x5BFB;&#x627E;&#xFF0C;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;&#x53EF;&#x4EE5;&#x5728;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x628A;&#x4ED6;&#x4EEC;&#x7684;&#x6307;&#x9488;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x91CC;&#x9762;&#x3002; &#x7136;&#x540E;&#x5728;&#x67E5;&#x8BE2;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5148;&#x628A;&#x7B2C;$i-1$&#x5927;&#x7684;&#x8282;&#x70B9;splay&#x5230;&#x6839;&#xFF1B;&#x627E;&#x5230;&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x8282;&#x70B9;&#x6307;&#x9488;&#xFF0C;&#x5BFB;&#x627E;&#x5176;&#x5728;&#x6392;&#x5E8F;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF08;&#x56FE;&#x4E2D;&#x7EA2;&#x8272;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x540E;&#x7EE7;splay&#x5230;&#x6839;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x3002; &#x4F46;&#x6CE8;&#x610F;&#x5728;&#x5B9E;&#x9645;&#x67E5;&#x627E;&#x4E2D;&#xFF0C;&#x56E0;&#x4E3A;&#x5BFB;&#x627E;&#x540E;&#x7EE7;&#x4F1A;&#x7834;&#x574F;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x5148;&#x627E;&#x5230;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002; &#x7136;&#x540E;&#x5173;&#x4E8E;&#x4F4D;&#x7F6E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;&#x6839;&#x7ED3;&#x70B9;&#xFF09;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x7EFF;&#x8272;&#x90E8;&#x5206;&#x5E94;&#x5F53;&#x6709;$i-1$&#x4E2A;&#x6570;&#xFF0C;&#x800C;&#x5176;&#x4ED6;&#x5728;$i$&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;$i$&#xFF09;&#x7684;&#x6570;&#x5E94;&#x8BE5;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x84DD;&#x8272;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x8981;&#x5C06;&#x84DD;&#x8272;&#x90E8;&#x5206;&#x7684;$size$&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;$i-1$&#x5C31;&#x662F;&#x6BCF;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x7ED3;&#x679C; &#x7FFB;&#x8F6C;&#x5C31;&#x662F;&#x5E38;&#x89C4;&#x7684;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6253;&#x6807;&#x8BB0;pushdown&#x4EC0;&#x4E48;&#x7684;&#x3002; &#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;&#x5B83;&#x7684;&#x8981;&#x6C42;&#xFF0C;&#x6211;&#x8FD8;&#x4E8B;&#x5148;&#x505A;&#x4E86;&#x79BB;&#x6563;&#x5316;&#x7684;&#x5904;&#x7406;&#x3002;&#xFF08;&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x7528; &#x53E6;&#x5916;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x6211;&#x5199;&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x56E0;&#x4E3A;&#x5C11;push_down&#x4E86;&#x51E0;&#x6B21;&#x88AB;&#x5751;&#x4E86;&#x4E00;&#x4E0B;&#x3002;&#x4E0D;&#x8FC7;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x8FC7;&#x8BC4;&#x6D4B;&#x8FD8;&#x662F;&#x86EE;&#x5F00;&#x5FC3;&#x7684;&#x3002; &#x4EE3;&#x7801;&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; #include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;struct wupin&#123; int id,h;&#125;w[100100];struct splay_t&#123; struct node_t&#123; int val,size; bool rev; node_t *p,*son[2],**root,**null; inline bool get_p()&#123;return p-&gt;son[1] == this;&#125; inline void init(node_t **root,node_t **null)&#123;this-&gt;null = null,this-&gt;root = root;&#125; inline int lsize()&#123;return son[0]-&gt;size;&#125; inline int rsize()&#123;return son[1]-&gt;size;&#125; inline void update()&#123;size = lsize()+rsize()+1;&#125; inline void link(node_t *dst,int tmp)&#123; dst-&gt;son[tmp] = this; this-&gt;p = dst; &#125; inline void push_down()&#123; if(this == *null) return; if(rev)&#123; swap(son[0],son[1]); son[0]-&gt;rev^=1,son[1]-&gt;rev^=1; rev = 0; &#125; &#125; inline void rotate()&#123; p-&gt;push_down(),push_down(); node_t *rp = p;bool re = get_p(); link(rp-&gt;p,rp-&gt;get_p()); son[1-re]-&gt;link(rp,re); rp-&gt;link(this,1-re); rp-&gt;update(),update(); if(p == *null) *root = this; &#125; inline node_t* splay(node_t *tar = NULL)&#123; if(tar == NULL) tar = *null; p-&gt;push_down(),push_down(); while(p!=tar)&#123; if(p-&gt;p == tar) rotate(); else if(p-&gt;get_p() == get_p()) p-&gt;rotate(),rotate(); else rotate(),rotate(); &#125; return this; &#125; inline node_t *upper()&#123; splay(); node_t *r = son[1]; while(true)&#123; r-&gt;push_down(); if(r-&gt;son[0] == *null) break; r = r-&gt;son[0]; &#125; return r; &#125; &#125;; int cnt; node_t pool[110000],*to[110000],*null,*root; splay_t()&#123; cnt = 0; null = newnode(); null-&gt;size = 0; &#125; node_t *newnode(int val = 0)&#123; node_t *r = &amp;pool[cnt++]; r-&gt;init(&amp;root,&amp;null); r-&gt;val = val,r-&gt;size = 1,r-&gt;rev = 0; r-&gt;p = r-&gt;son[0] = r-&gt;son[1] = null; return r; &#125; node_t* build(wupin *a,int l,int r)&#123; if(l&gt;r) return null; int mid = (l+r)&gt;&gt;1; node_t *ret = newnode(a[mid].h); to[a[mid].h] = ret; build(a,l,mid-1)-&gt;link(ret,0); build(a,mid+1,r)-&gt;link(ret,1); ret-&gt;update(); return ret; &#125;&#125;;splay_t s;int n;bool cmp1(wupin a,wupin b)&#123;return a.id&lt;b.id;&#125;bool cmp2(wupin a,wupin b)&#123; if(a.h!=b.h) return a.h&lt;b.h; else return a.id&lt;b.id;&#125;void find()&#123; for(int i = 1;i&lt;=n;i++)&#123; //找到应操作节点的后继 splay_t::node_t *rbound = s.to[i]-&gt;upper(); //把前面归位好的最后一个节点旋到根节点 s.to[i-1]-&gt;splay(); //把后继旋转到根节点的右儿子 rbound-&gt;splay(s.to[i-1]); //打印位置 printf("%d ",i + rbound-&gt;lsize()-1); //添加lazy标记 rbound-&gt;son[0]-&gt;rev^=1; &#125;&#125;int main()&#123; scanf("%d",&amp;n); for(int i = 1;i&lt;=n;i++)&#123; scanf("%d",&amp;w[i].h); w[i].id = i; &#125; //预处理 sort(w+1,w+n+1,cmp2); for(int i = 1;i&lt;=n;i++) w[i].h = i; sort(w+1,w+n+1,cmp1); w[0].h = 0; w[n+1].h = n+1; //正式操作 s.root = s.build(w,0,n+1); find(); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Splay</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI2004」郁闷的出纳员-Splay]]></title>
    <url>%2F20180131-noi2004-cashier%2F</url>
    <content type="text"><![CDATA[&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x6570;&#x5217;&#x3002;&#x73B0;&#x6709;&#x56DB;&#x79CD;&#x547D;&#x4EE4;&#xFF0C;&#x65B0;&#x52A0;&#x5165;&#x4E00;&#x4E2A;&#x6570;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x52A0;&#x4E0A;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x51CF;&#x53BB;$k$&#xFF0C;&#x67E5;&#x8BE2;&#x7B2C;$k$&#x5927;&#x7684;&#x6570;&#x3002;&#x5982;&#x679C;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x6570;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5C06;&#x5B83;&#x7ACB;&#x5373;&#x5220;&#x9664;&#x3002;&#x5E76;&#x5728;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x603B;&#x5171;&#x5220;&#x53BB;&#x7684;&#x6570;&#x7684;&#x4E2A;&#x6570;$res$&#x3002; &#x5982;&#x679C;&#x65B0;&#x52A0;&#x5165;&#x7684;&#x6570;k&#x7684;&#x521D;&#x503C;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5B83;&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x52A0;&#x5165;&#x6570;&#x5217;&#x3002; &#x94FE;&#x63A5;Luogu P1486 &#x9898;&#x89E3;&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x7ECF;&#x5178;&#x7684;&#x5E73;&#x8861;&#x6811;&#x7684;&#x9898;&#xFF0C;&#x88AB;&#x6211;&#x7528;&#x6765;&#x7EC3;&#x624B;Splay&#x3002; &#x5199;&#x5B8C;&#x8FD9;&#x9053;&#x9898;&#x4E4B;&#x540E;&#x6211;&#x5C31;&#x89C9;&#x5F97;&#xFF0C;&#x6211;&#x518D;&#x4E5F;&#x4E0D;&#x4F1A;&#x60F3;&#x7528;Splay&#x4E86;&#x3002;debug&#x4E86;&#x4E00;&#x5929;&#xFF0C;&#x7B80;&#x76F4;&#x6D51;&#x8EAB;&#x96BE;&#x53D7;&#x3002;&#x4EE5;&#x540E;&#x5C3D;&#x91CF;&#x5199;&#x65CB;&#x8F6C;&amp;&#x975E;&#x65CB;Treap&#x5427;&#x3002; &#x6784;&#x5EFA;&#x4E00;&#x9897;Splay&#x6811;&#x3002;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x5168;&#x4F53;&#x52A0;&#x8FC7;&#x6216;&#x8005;&#x51CF;&#x8FC7;&#x7684;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x503C;&#x3002;&#x6362;&#x7B97;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x6811;&#x5916;-&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5185;&#xFF0C;&#x6811;&#x5185;+&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5916;&#x3002;&#x540E;&#x9762;&#x4E5F;&#x5C31;&#x4E0D;&#x518D;&#x592A;&#x591A;&#x7279;&#x6B8A;&#x8BF4;&#x660E;&#x3002;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x865A;&#x7684;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#xFF0C;&#x4E5F;&#x4F1A;&#x5BFC;&#x81F4;&#x6392;&#x540D;&#x8BA1;&#x7B97;&#x7684;&#x4E00;&#x4E9B;&#x53D8;&#x5316;&#x3002; &#x63D2;&#x5165;&#x64CD;&#x4F5C; &#x5148;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x63D2;&#x5165;&#x6761;&#x4EF6;&#xFF0C;&#x5373;&#x6B64;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;$min$&#xFF0C;&#x7136;&#x540E;&#x51CF;&#x53BB;&#x76F8;&#x5BF9;&#x540E;&#x6B63;&#x5E38;&#x63D2;&#x5165;&#xFF0C;splay&#x81F3;&#x6839;&#x8282;&#x70B9;&#x3002; &#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x6570; &#x76F4;&#x63A5;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5220;&#x6570;&#xFF0C;&#x4E0D;&#x4F1A;&#x6709;&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x3002; &#x51CF;&#x53BB;&#x4E00;&#x4E2A;&#x6570; &#x9996;&#x5148;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x518D;&#x628A;&#x5C0F;&#x4E8E;$min$&#x7684;&#x6570;&#x5220;&#x9664;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x5427;&#x7B2C;&#x4E00;&#x4E2A;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;$min$&#x7684;&#x6570;splay&#x5230;&#x6839;&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x5220;&#x9664;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x8865;&#x4E0A;&#x5DE6;&#x8FB9;&#x7684;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#x3002; &#x5982;&#x679C;&#x6B63;&#x597D;&#x5B58;&#x5728;&#x503C;&#x4E3A;$min$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x5C06;&#x5B83;&#x76F4;&#x63A5;splay&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#xFF1B;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x503C;&#x4E3A;$min-1$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5BFB;&#x627E;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#xFF0C;&#x5E76;splay&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x65F6;&#x7EDF;&#x8BA1;$res$&#x9700;&#x8981;&#x51CF;&#x53BB;&#x6211;&#x4EEC;&#x521A;&#x521A;&#x52A0;&#x4E0A;&#x7684;&#x8282;&#x70B9;&#x3002; &#x67E5;&#x8BE2;&#x7B2C;k&#x5927; &#x76F4;&#x63A5;&#x67E5;&#xFF0C;&#x7136;&#x540E;splay&#x5230;&#x6839;&#x3002;&#x53EA;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x5217;&#x662F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5217;&#x7684;&#x3002; &#x4EE3;&#x7801;&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; #include &lt;cstdio&gt;#define MAX 0x3f3f3f3fusing namespace std;inline int qr()&#123; int f = 1,s = 0;char ch = getchar(); while(ch&lt;'0'||ch&gt;'9')&#123; if(ch == '-') f = -1; ch = getchar(); &#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9')&#123; s = (s&lt;&lt;3)+(s&lt;&lt;1)+ch-48; ch = getchar(); &#125; return f*s;&#125;struct splay_t&#123; struct node_t&#123; int val,size,cnt; node_t *son[2],*p;node_t **null,**root; //与父亲关系 inline bool get_p()&#123;return p-&gt;son[1] == this;&#125; //双向连接 inline void link(node_t *dst,bool re)&#123;p = dst;dst-&gt;son[re] = this;&#125; //更新size值 inline void update()&#123;size = son[0]-&gt;size + son[1]-&gt;size + cnt;&#125; //初始化**root和**null inline void init(node_t **null,node_t **root)&#123;this-&gt;null = null,this-&gt;root = root;&#125; //获取左右节点的大小 inline int lsize()&#123;return son[0]-&gt;size;&#125;int rsize()&#123;return son[1]-&gt;size;&#125; //寻找节点前驱或者后继 node_t *uporlow(int tmp)&#123;//0前驱，1后继 splay(); node_t *t = son[tmp]; while(t-&gt;son[1-tmp] != *null) t = t-&gt;son[1-tmp]; return t; &#125; //旋转 void rotate()&#123; bool re = get_p();node_t *rp = p; link(rp-&gt;p,rp-&gt;get_p()); son[1-re]-&gt;link(rp,re); rp-&gt;link(this,1-re); rp-&gt;update();update(); if(p == *null) *root = this; &#125; //splay操作 node_t* splay(node_t *tar = NULL)&#123; if(this == *null) return this; if(tar == NULL) tar = *null; while(p!=tar)&#123; if(p-&gt;p == tar) rotate(); else&#123; if(p-&gt;get_p()==get_p()) p-&gt;rotate(),rotate(); else rotate(),rotate(); &#125; &#125; return this; &#125; &#125;; int treecnt; node_t pool[300000]; node_t *null,*root,*lb,*rb;//lb是左边的虚拟节点，rb同理 //初始化 splay_t()&#123; treecnt = 0; newnode(null);root = null; null-&gt;size = 0,null-&gt;val = 0; lb = insert(-MAX);rb = insert(MAX); &#125; //新建节点 void newnode(node_t *&amp;r,int val = 0)&#123; r = &amp;pool[treecnt++]; r-&gt;val = val; r-&gt;son[0] = r-&gt;son[1] = r-&gt;p = null; r-&gt;cnt = r-&gt;size = 1; r-&gt;init(&amp;null,&amp;root); &#125; //寻找给定rank的数字 node_t* find_Kth(int rank)&#123; node_t *t = root; while(t!=null)&#123; if(rank&lt;t-&gt;lsize()) t = t-&gt;son[0]; else if((rank-=t-&gt;lsize())&lt;t-&gt;cnt) return t-&gt;splay(); else rank-=t-&gt;cnt,t = t-&gt;son[1]; &#125; return null; &#125; //按值寻找 node_t *find_by_val(int val)&#123; node_t *t = root; while(t!=null)&#123; if(val&lt;t-&gt;val) t = t-&gt;son[0]; else if(val==t-&gt;val) return t-&gt;splay(); else t = t-&gt;son[1]; &#125; return null; &#125; //插入给定值的节点 node_t* insert(int val)&#123; node_t **tar = &amp;root,*parent = null; while(*tar!=null)&#123; (*tar)-&gt;size++; if((*tar)-&gt;val == val)&#123; (*tar)-&gt;cnt++;return *tar; &#125; else&#123; parent = *tar;tar = &amp;(*tar)-&gt;son[(*tar)-&gt;val&lt;val]; &#125; &#125; newnode(*tar,val); (*tar)-&gt;link(parent,parent-&gt;val &lt; val); return (*tar)-&gt;splay(); &#125; //调试用 打印树 void print(node_t *r = NULL,int depth = 0)&#123; if(r == NULL) r = root; if(r == null) return; else&#123; print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' '); printf("v:%d,size:%d,cnt:%d,son:%d %d,depth:%03d\n",r-&gt;val,r-&gt;size,r-&gt;cnt,r-&gt;son[0]!=null,r-&gt;son[1]!=null,depth); print(r-&gt;son[1],depth+1); &#125; &#125;&#125;;splay_t x;int n,minn,res = 0,nowadd = 0;//插入一个数inline void insert(int val)&#123;if(val&gt;=minn) x.insert(val-nowadd);&#125;//注意要减去nowadd //统一加工资inline void add(int val)&#123;nowadd+=val;&#125;//统一减公司顺便裁人inline void decrease(int val)&#123; nowadd-=val; splay_t::node_t *r = x.find_by_val(minn-nowadd);//注意要减去nowadd if(r!=x.null) r-&gt;splay(),res+=(x.root-&gt;lsize()-1); else x.insert(minn-nowadd-1)-&gt;uporlow(1)-&gt;splay(),res+=(x.root-&gt;lsize()-2); x.lb-&gt;link(x.root,0);x.lb-&gt;son[1] = x.null; x.root-&gt;update();&#125;//查找工资排名K位的员工的工资inline int ask(int rank)&#123; if(rank &gt; x.root-&gt;size - 2) return -1; return x.find_Kth(x.root-&gt;size-rank-1)-&gt;val + nowadd;//注意要加上nowadd&#125;int main()&#123; n = qr();minn = qr(); for(int i = 0;i&lt;n;i++)&#123; char op[20];int k; scanf("%s",op);k = qr(); if(op[0] == 'A') add(k); else if(op[0] == 'S') decrease(k); else if(op[0] == 'I') insert(k); else if(op[0] == 'F') printf("%d\n",ask(k)); else if(op[0] == 'P') x.print(); &#125; printf("%d\n",res); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Splay</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Treap学习笔记]]></title>
    <url>%2F20180130-treap-notes%2F</url>
    <content type="text"><![CDATA[闲下来了，开始写一点学习笔记，也希望能给后人造福吧。 第一篇来说一说Treap。 Treap是什么Tree + Heap树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。 基本思想及操作一般在Treap里面维护一个最小堆。 旋转旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。 按关键字寻找可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。 插入在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。 删除如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。 查询排名在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。 按排名查找需要对每一个节点维护一个size值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的size值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。 前驱&amp;后继在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。以前驱为例。 如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。 第一种很容易想明白，第二种稍难一些。 以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。 可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。 后继同理。 插入、删除等以上操作的期望时间复杂度都是$O(\log {n})$，因为树的期望高度h是$\log {n}$。 代码以洛谷P3369 普通平衡树为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。 （其实我还是觉得数组好写 结构体的定义template&lt;typename T,size_t siz&gt;struct treap&#123; struct node_t&#123; T val; int p,size,cnt; node_t *son[2]; &#125;; int treapcnt; node_t pool[siz&lt;&lt;1],*root,*null; 在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。 对于每一个节点，我们维护以下几个信息：关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。 在结构体的变量中，我们维护了一个静态内存池，内存池已经使用的数量，根节点的指针，以及一个虚的空节点。 在这里自己定义一个空节点的好处主要是可以避免NULL导致的segmentation fault，以及让函数编写变得更加简单。 需要注意的是，视题目不同，cnt变量可能可以省去。 一些简单函数void newnode(node_t *&amp;r)&#123; r = &amp;pool[Treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null;&#125;void update(node_t *r)&#123; r-&gt;size = r-&gt;son[0]-&gt;size + r-&gt;son[1]-&gt;size + r-&gt;cnt;&#125;node_t* find_minormax(node_t *r,int tmp)&#123;//0最小 1最大 while(r-&gt;son[tmp]!=null) r = r-&gt;son[tmp]; return r;&#125; newnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生NULL这种可怕的东西。其实在这里也可以把赋关键字、随机值、size值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。 update函数在这里完成对节点size值的更新，很好理解。 find_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。 后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。 结构体的初始化treap()&#123; treapcnt = 0; newnode(null); null-&gt;size = null-&gt;val = 0; null-&gt;p = MAXINT; root = null; srand(time(NULL));&#125; 结构体的初始化不难，有几点需要注意： 空指针的size需要为0 空指针的随机值需要足够大（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了 最好srand一下 旋转void rotate(node_t *&amp;r,int tmp)&#123;//0左旋，1右旋 node_t *t = r-&gt;son[1-tmp]; r-&gt;son[1-tmp] = t-&gt;son[tmp]; t-&gt;son[tmp] = r; update(r),update(t); r = t;&#125; 旋转操作的文字叙述：（括号里文字以左旋为例） 选定当前节点r （图中的x） 找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）（图中的y） 把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 （把b接在x的右子位置上） 把r接到t空出来的位置上 （把x接到y的x的左子树上） 更新size值 （更新x，y的size） 由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。 其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误 但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是引用传递，才能修改对应父节点的儿子指针。 有一点很重要的就是要维护size的值，而且是从下到上。 插入void __insert(node_t *&amp;r,T v)&#123; if(r == null)&#123; newnode(r); r-&gt;val = v,r-&gt;cnt = 1,r-&gt;p = rand(); &#125; else&#123; if(r-&gt;val == v) r-&gt;cnt++; else&#123; int tmp = r-&gt;val &lt; v; __insert(r-&gt;son[tmp],v); if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p) rotate(r,1-tmp); &#125; &#125; update(r);&#125; 用文字说明Treap的插入策略： 递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点 递归添加节点，比当前节点小向左，比当前节点大向右 维护最小堆的性质 更新size值 在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。 需要注意，这里的节点是引用方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接再次重复，不要忘记更新size值。 删除void __erase(node_t *&amp;r,T v)&#123; if(r-&gt;val == v)&#123; if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else&#123; if(r-&gt;son[0]==null &amp;&amp; r-&gt;son[1]==null)&#123; r = null;return; &#125; else&#123;//还有子节点， int tmp = r-&gt;son[1]-&gt;p &lt; r-&gt;son[0]-&gt;p; rotate(r,1-tmp); __erase(r,v); &#125; &#125; &#125; else&#123; int tmp = r-&gt;val &lt; v; __erase(r-&gt;son[tmp],v); &#125; update(r);&#125; 用文字说明Treap的删除策略： 递归边界：要删除的节点没有儿子节点 寻找到当前节点，减少数量或者向下旋转 维护最小堆的性质，即把两个儿子中权值较小的旋转上来 递归删除节点注意此处的节点指针仍是r，因为r在旋转中已经发生了变化 更新size值 删除的时候最需要注意的已经在上面指出。 还有在旋转比较的时候一定比较的是优先级！！！ Treap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。 查询排名&amp;排名查询int __getrank(node_t *r,T v)&#123;//查找数v的排名 if(r-&gt;val == v||r == null)//记得判空！ return r-&gt;son[0]-&gt;size + 1; else if(v &lt; r-&gt;val) return __getrank(r-&gt;son[0],v); else return __getrank(r-&gt;son[1],v) + r-&gt;son[0]-&gt;size + r-&gt;cnt;&#125;node_t* __qrank(node_t *r,int rank)&#123;//查找以rank排名的数 rank -= r-&gt;son[0]-&gt;size; if(rank&lt;=0) return __qrank(r-&gt;son[0],rank + r-&gt;son[0]-&gt;size); else if(rank &lt;= r-&gt;cnt) return r; else return __qrank(r-&gt;son[1],rank - r-&gt;cnt);&#125; 这两个比较简单，而且在上面也讲的很详细了，所以就一块说。 查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。 前驱和后继node_t *loworup(T v,int t)&#123;//0代表前驱，1代表后继 node_t *last = null,*nown = root; while(nown-&gt;val!=v &amp;&amp; nown!=null)&#123; int tmp = nown-&gt;val &lt; v; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; &#125; if(nown-&gt;son[t]!=null) last = find_minormax(nown-&gt;son[t],1-t); return last;&#125; 这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。 思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。 多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通 输出树void __print(node_t *r,int depth = 0)&#123; if(r == null) return; else&#123; __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' ');//打印深度 printf("val:%d cnt:%d size:%d P:%d son?:%d %d\n",r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); &#125;&#125; 按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。 封装void insert(T v)&#123;__insert(root,v);&#125;void erase(T v)&#123;__erase(root,v);&#125;int getrank(T v)&#123;return __getrank(root,v);&#125;int qrank(int rank)&#123;return __qrank(root,rank)-&gt;val;&#125;int lower(T v)&#123;return loworup(v,0)-&gt;val;&#125;int upper(T v)&#123;return loworup(v,1)-&gt;val;&#125;void print()&#123;__print(root);&#125; 封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。 完整代码及注释题目：洛谷P3369 普通平衡树 点击切换显示状态 #include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;ctime&gt;#define maxint 2147483647using namespace std;template&lt;typename T,size_t siz&gt;//模版T,需要有等于不等于和小于运算符struct treap&#123; private: struct node_t&#123; T val; int p,size,cnt; node_t *son[2]; &#125;; int treapcnt; node_t pool[siz&lt;&lt;1],*root,*null; void newnode(node_t *&amp;r)&#123; r = &amp;pool[treapcnt++]; r-&gt;son[0] = r-&gt;son[1] = null; &#125; void update(node_t *r)&#123; r-&gt;size = r-&gt;son[0]-&gt;size+r-&gt;son[1]-&gt;size+r-&gt;cnt; &#125; void rotate(node_t *&amp;r,int tmp)&#123;//0左旋，1右旋 node_t *t = r-&gt;son[1-tmp];//找到需要旋上来的节点 r-&gt;son[1-tmp] = t-&gt;son[tmp];//将被选节点的被遮蔽的儿子交给上面的节点 t-&gt;son[tmp] = r;//将r作为t的儿子 update(r),update(t);//注意更新顺序！先儿子后父亲 r = t;//通过引用更改上方节点的儿子 &#125; void __insert(node_t *&amp;r,T v)&#123;//r代表当前节点，v代表关键字 if(r == null)&#123;//如果r的地方已经没有节点 newnode(r);//新建节点，并通过引用添加至上面节点的儿子 r-&gt;val = v,r-&gt;cnt = 1,r-&gt;p = rand();//对相关信息的设置 &#125; else&#123; if(r-&gt;val == v) //如果已经添加过，直接给数量++ r-&gt;cnt++; else&#123; int tmp = r-&gt;val &lt; v; __insert(r-&gt;son[tmp],v);//递归更改 if(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p)//维护treap性质 rotate(r,1-tmp); &#125; &#125; update(r);//不要忘了更新！ &#125; void __erase(node_t *&amp;r,T v)&#123; if(r-&gt;val == v)&#123;//已经找到 if(r-&gt;cnt &gt; 1) r-&gt;cnt--; else&#123; if(r-&gt;son[0]==null &amp;&amp; r-&gt;son[1]==null)&#123;//已经没有子节点，直接删除 r = null;return; &#125; else&#123;//还有子节点， int tmp = r-&gt;son[1]-&gt;p &lt; r-&gt;son[0]-&gt;p; rotate(r,1-tmp); //找到其中随机权值较小的一个旋转替换当前节点 __erase(r,v);//递归删除 注意此处r已经发生了变化 &#125; &#125; &#125; else&#123;//还没找到 int tmp = r-&gt;val &lt; v; __erase(r-&gt;son[tmp],v);//递归寻找 &#125; update(r);//不要忘了更新！ &#125; void __print(node_t *r,int depth = 0)&#123;//调试用 if(r == null) return; else&#123; __print(r-&gt;son[0],depth+1); for(int i = 0;i&lt;depth;i++) putchar(' ');//打印深度 printf("val:%d cnt:%d size:%d P:%d son?:%d %d\n",r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[0]!=null,r-&gt;son[1]!=null); __print(r-&gt;son[1],depth+1); &#125; &#125; int __getrank(node_t *r,T v)&#123;//查找数v的排名 if(r-&gt;val == v||r == null)//记得判空！ return r-&gt;son[0]-&gt;size +1; else if(v &lt; r-&gt;val) return __getrank(r-&gt;son[0],v); else return __getrank(r-&gt;son[1],v) + r-&gt;son[0]-&gt;size + r-&gt;cnt; &#125; node_t* __qrank(node_t *r,int rank)&#123;//查找以rank排名的数 rank -= r-&gt;son[0]-&gt;size; if(rank&lt;=0) return __qrank(r-&gt;son[0],rank + r-&gt;son[0]-&gt;size); else if(rank &lt;= r-&gt;cnt) return r; else return __qrank(r-&gt;son[1],rank - r-&gt;cnt); &#125; node_t *find_minormax(node_t *r,int tmp)&#123; //寻找以r为根节点的树上最大或最小节点 while(r-&gt;son[tmp]!=null) r = r-&gt;son[tmp]; return r; &#125; node_t *loworup(T v,int t)&#123;//0代表前驱，1代表后继 node_t *last = null,*nown = root;//last表示上一个没有当前寻找方向的节点 while(nown-&gt;val!=v &amp;&amp; nown!=null)&#123;//记得判空! int tmp = nown-&gt;val &lt; v; if(tmp!=t) last = nown; nown = nown-&gt;son[tmp]; &#125; if(nown-&gt;son[t]!=null)//有子节点 last = find_minormax(nown-&gt;son[t],1-t);//寻找对应方向子节点的最小or最大值 return last; &#125; public: treap()&#123; treapcnt = 0; newnode(null); null-&gt;size = null-&gt;val=0; null-&gt;p = maxint; root = null; srand(time(NULL)); &#125; void insert(T v)&#123;__insert(root,v);&#125; void erase(T v)&#123;__erase(root,v);&#125; int getrank(T v)&#123;return __getrank(root,v);&#125; int qrank(int rank)&#123;return __qrank(root,rank)-&gt;val;&#125; int lower(T v)&#123;return loworup(v,0)-&gt;val;&#125; int upper(T v)&#123;return loworup(v,1)-&gt;val;&#125; void print()&#123;__print(root);&#125;&#125;;treap&lt;int,200000&gt; w;int n;int main()&#123; scanf("%d",&amp;n); for(int i = 0;i&lt;n;i++)&#123; int op, x; scanf("%d %d",&amp;op,&amp;x); if(op == 1) w.insert(x); else if(op == 2) w.erase(x); else if(op == 3) printf("%d\n",w.getrank(x)); else if(op == 4) printf("%d\n",w.qrank(x)); else if(op == 5) printf("%d\n",w.lower(x)); else if(op == 6) printf("%d\n",w.upper(x)); else if(op == 0) w.print(); &#125; return 0;&#125; 例题「ZJOI2007」报表统计]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
        <tag>Treap</tag>
        <tag>笔记</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[考试前要看的东西]]></title>
    <url>%2F20180128-notes-for-test%2F</url>
    <content type="text"><![CDATA[OI考试前最好来看一看 会不断的补充。 考前 带好需要的东西 笔 纸 水 吃的 适量的衣服 复习以下膜版 线段树&amp;树状数组 平衡树 dp 图论 数学 ……（来日补充 早点睡 吃点好的 考中 思路放开 不要鄙视暴力 不要给自己太大压力 多喝水 多上厕所（学习d姓大神 遇到不会做的题目时的checklist： 看下数据范围和题目要求 尝试对算法入座 先敲个30分左右的暴力 仔细回顾一遍学过的所有数据结构如上面所列 没准可以打个表？？ 评估一下思考的代价和不做的代价 后面的题如果有思路可以先做 不要慌 再做不出来去玩局初级扫雷平静一下 写暴力对拍 最后检查两遍文件输入输出 除非一点都不会 不能不写 考后 吃顿好的。 拉个人出去玩。 再吃顿好的。 忘掉比赛。]]></content>
      <categories>
        <category>OI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018 JanWeek4]]></title>
    <url>%2F20180128-2018-JanWeek4%2F</url>
    <content type="text"><![CDATA[2018年一月 第四周2018.1.22-2018.1.28 正文其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。 转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。 不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。 这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。 学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。 然后高中生活就过去了。 TodoList这周完成 考完试学： Trie ✔成功学习 Treap ✔成功实现 出没出完的题 ✔颓了一道膜版交上去了 愉快的度过冬令营 ✔旅游很顺利 愉快 结课考试不爆0 ✔5分哈哈哈 每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右 顺便写点寒假作业 ✔强行水完了化学和一半的物理作业 下周 实现AC自动机 学会fhq Treap或者Splay 写完至少物理、地理、一小半数学的寒假作业 至少写一篇题解发到这里（待选主题：线段树，状压dp 出去玩\(≧▽≦)/]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[冬令营旅游记]]></title>
    <url>%2F20180125-bjwc2018-trip%2F</url>
    <content type="text"><![CDATA[今年冬天，去了趟北京冬令营旅游。其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。 Day1冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。 下午是胡伟栋老师的课，讲的是深搜。“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。 Day2第一次考试。看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。 下午开始讲题。首先看了看程序，40／400。被std十倍杀。不过也很正常。这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。 Day3第二天考试。还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。 下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫…… 回家居然水过了Treap，值得庆贺。 Day4第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。 下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。 回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。 Day5最后一天考试。一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。 下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。 啧啧 总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。 和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。 省一看起来不像是难事，可省队，实在是遥不可及。 如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。 我永远都不会认输的。 明年，再来。]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>冬令营</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 JanWeek3]]></title>
    <url>%2F20180120-2018-JanWeek3%2F</url>
    <content type="text"><![CDATA[2018年一月 第三周2018.1.15-2018.1.21 正文这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。 TodoList这周完成 考好期末 ✔考的还不错 考完试学： Trie ✘根本没学 Treap ✘还没有实现 出没出完的题 ✘还是懒得出题 准备好冬令营旅游 ✔旅游目前顺利 下周 愉快的度过冬令营 结课考试不爆0 每天保证3-5道的刷题效率 顺便写点寒假作业]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018 JanWeek2]]></title>
    <url>%2F20180113-2018-JanWeek2%2F</url>
    <content type="text"><![CDATA[2018年一月 第二周2018.1.7-2018.1.14 写在前面莫名的就突然有一种做一做总结的欲望。想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。 正文转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。 TodoList这周完成无 下周 复习&amp;考好期末 考完试学： Trie Treap 出没出完的题 准备好冬令营旅游]]></content>
      <categories>
        <category>总结</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[“长大”]]></title>
    <url>%2F20180103-grow%2F</url>
    <content type="text"><![CDATA[或许，我一直认为我早就长大了吧。 那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。 一度，我竟真的以为我长大了。 那些记忆已经很模糊了，而近几天发生的事情却还历历在目。 看到某位同学的随笔，某位同学的批语，又想到了好多。 最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。 最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。 “这不是能随心所欲的年纪。”说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。 这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。 曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？ 或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。 不如先滚去把作业写完。 另祝各位2018吉祥快乐，万事如意。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[「洛谷P1043」数字游戏-dp]]></title>
    <url>%2F20171223-luogu-p1043%2F</url>
    <content type="text"><![CDATA[在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。 例如，对于下面这圈数字（$n$=4，$m$=2）： 要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。 丁丁请你编写程序帮他赢得这个游戏。 链接Luogu P1043 题解很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。 代码点击切换显示状态 #include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;using namespace std;long long num[150],dp_1[150],dp_2[150];//_1放最大值,_2放最小值int n,m;inline int mod(long long nnn)&#123;//mod函数 int w = int(floor(double(nnn)/10)); return nnn - w*10;&#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); for(int i = 1;i&lt;=n;i++)&#123;//断环为链的准备 scanf("%lld",&amp;(num[i])); num[i+n] = num[i]; &#125; for(int i = 1;i&lt;=2*n;i++)//前缀和的处理 num[i] = num[i-1]+num[i]; //正经dp long long maxn = -1,minn = 0x3f3f3f3f; for(int s = 1;s&lt;=n;s++)&#123;//枚举起点 memset(dp_1,0,sizeof(dp_1));//清零dp数组 memset(dp_2,0,sizeof(dp_2)); for(int j = 0;j&lt;m;j++)&#123;//板子由少到多 for(int i = s;i&lt;=s+n;i++)&#123;//上一个插板子的地方 if(j == 0)&#123;//j==0的时候的处理，其实也可以叫初始化 dp_1[i] = dp_2[i] = mod(num[s+n]-num[i]); continue; &#125; long long maxtmp = -1,mintmp = 0x3f3f3f3f;//对所有可能下一状态的遍历，并取最大或最小值 for(int x = i+1;x&lt;=s+n-j-1;x++)&#123; maxtmp = max(maxtmp,dp_1[x]*mod(num[x]-num[i])); mintmp = min(mintmp,dp_2[x]*mod(num[x]-num[i])); &#125; dp_1[i] = maxtmp;//取最大最小值 dp_2[i] = mintmp; &#125; &#125; maxn = max(dp_1[s],maxn);//对于起点不同的最大最小值进行更新 minn = min(dp_2[s],minn); &#125; printf("%lld\n%lld\n",minn,maxn); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>动态规划</tag>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可能是最简单的线段树介绍]]></title>
    <url>%2F20171218-segment-tree%2F</url>
    <content type="text"><![CDATA[看了网上的各种线段树介绍，实在是觉得有点复杂。所以先开一个坑，慢慢填。 0x00 概述本文将从是什么、为什么、怎么做、有什么用这几个方面来介绍一下线段树这一重要的数据结构。 0x01 什么是线段树为了学习线段树这样一个数据结构，我们需要先搞明白这是一个什么东西。 线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些区间，每个单元区间对应线段树中的一个叶结点。 而每一个节点所包含的区间恰好被其子节点均分为两半。 0x02 线段树有什么用呢一句话：在O(log n)的对数时间维护和查询某段区间的诸如和，最小值，最大值等信息。 权且猜测读者已经了解了树状数组。在树状数组的学习中，我们会知道，树状数组的出现其实是为了平衡前缀和、普通数组这两种数据结构，它能做到的就是在O(log n)的对数时间内求一段区间的和，以及改变某个数的值。 但是倘若需要对区间进行操作该怎么办呢？如果我将区间中的每一个数都进行操作的话，那么时间复杂度已经达到了O(n)，显然是我们不能承受之慢。如果不使用差分版的树状数组这个时候，我们就需要下面即将介绍的——线段树。 0x03 操作开始是打算直接讲lazy标记的，但感觉没有代码讲数据结构简直是耍流氓，所以我们先来看一个简单的线段树的代码。 首先明确我们的需求：能够实现一个支持区间加法，区间求和的线段树。 头文件部分#define ll long long#define lson (nown&lt;&lt;1)#define rson (nown&lt;&lt;1|1)#define mid ((l+r)&gt;&gt;1)#define MAXN 100005ll sumn[MAXN&lt;&lt;2],addn[MAXN&lt;&lt;2]; 我一般喜欢把这几个东西先define出来，这样以后的代码能简洁很多。 在这里，我使用的数组来模拟树形结构。nown代表当前节点，规定nown2为左子节点，nown2+1为为右子节点。 函数1：push_upvoid push_up(int nown)&#123; sumn[nown] = sumn[lson] + sumn[rson];&#125; …0x04 怎么做到的呢这一部分主要分为以下几个部分 说到线段树，就不得不说—— 线段树的核心思想——懒惰（lazy）标记为什么叫lazy标记呢？顾名思义，也就是为了使我们的修改操作更加的快速，我们会犯一些懒。主要来说，就是不做完所有的区间修改。我们如果发现我们目前要修改的这个区间完全被线段树某个节点对应的区间包含，那么我们就可以意识到，这个区间里的每一个点，我们都需要做这样一个修改。那么我们就会给这个区间打上一个lazy标记，标志着，我知道这个区间要改，我还没有改完这个区间以下的子区间。 帮助理解lazy标记的重要性质性质：我们可以认为，在线段树这样的树状结构上，lazy标记以上的部分的信息都是完全准确的。 (to be finished)]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>介绍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[转载]达拉崩吧-OI版]]></title>
    <url>%2F20171216-dalabengba-oi%2F</url>
    <content type="text"><![CDATA[原文地址：点此查看很久很久以前 算法突然出现 带来导论 带走了智商又消失不见 编程十分危险 世间谁最勇敢 一位懵逼儿赶来 大声喊 我要写出最高的树 打出最大的表 搜进最深的递归 把AC带回到面前 老师非常高兴 忙问他的技能 年轻人想了想 他说 老师我会 非确定性有穷状态决策自动机 再来一次 非确定性有穷状态决策自动机 是不是 非确定性有穷状态决策自动机 对对是 非确定性有穷状态决策自动机 懵逼无名少年 捧着算法导论 带着大家的希望 从学校里出发 战胜BUG来袭 获得调试神技 无数代码见证 他慢慢升级 偏远论坛角落 参与所有话题 一路排序 伴随指引前路的单链表 进入决赛考场 比赛和可怕难题 少年打开IDE 难题道 我是 Floyd区间DP均衡红黑树 再来一次 Floyd区间DP均衡红黑树 是不是 Kruskal一维DP二叉排序树 不对是 Floyd区间DP均衡红黑树 于是 非确定性有限状态决策自动机 打出 深度搜索模拟枚举单源最短路 应用 拓扑排序Trie结构Polya定律 套入 Dijkasta联通分量BellmanFord 最后 非确定性有限状态决策自动机 他使用了 IO优化树链剖分输出random 调用了 矩阵速幂虚二叉树行列式消元 完成了 凸包扫描后缀数组网络最大流 老师听说 非确定性有限状态决策自动机 他忘了写 #include freopen 就让 非确定性有限状态决策自动机 全手写 map/set稳定婚姻KMP实现 啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍 他发明了一个算法 也在天天渐渐复杂 为了避免以后麻烦 算法叫做暴力法 它的全名十分难念 我不想说一遍]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>歌曲</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OI大事记]]></title>
    <url>%2F20171213-milestone%2F</url>
    <content type="text"><![CDATA[里程碑 2017-10-17 21:00 Luogu AC*1 2017-10-23 08:50 Luogu 第一次蓝名 2017-10-29 10:05 Luogu 第一次绿名 2017-11-01 20:07 Luogu AC*50 2017-11-11 ~ 12 NOIp2017 tg观光游省二 2017-11-25 11:51 Luogu AC*100 2017-11-29 17:55 Luogu 第一次橙名 2017-12-17 22:28 Luogu AC*150 2017-12-22 21:03 Luogu 提交*500 2018-01-03 19:16 Luogu 第一次红名 2018-01-20 20:34 Luogu AC*200 2018-01-20 ~ 27 第一次BJWC 2018-02-14 15:44 Luogu AC*250 2018-02-23 13:47 Luogu 提交*1000]]></content>
      <categories>
        <category>OI</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[日常颓废]]></title>
    <url>%2F20171205-20171205%2F</url>
    <content type="text"><![CDATA[颓…颓废？？？ 啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。 但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。 愿明天生物统练不爆炸。]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[测试一下]]></title>
    <url>%2F20171204-test%2F</url>
    <content type="text"><![CDATA[&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x6216;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F; &#x778E;&#x641E;&#x4E00;&#x756A;&#x679C;&#x7136;&#x9887;&#x6709;&#x4E50;&#x8DA3;&#x54C8;&#x54C8;&#x54C8;&#x54C8;.&#x4EE5;&#x540E;&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;&#x9898;&#x89E3;&#x548C;&#x7B97;&#x6CD5;&#x4EC0;&#x4E48;&#x4E71;&#x4E03;&#x516B;&#x7CDF;&#x7684;&#x6CA1;&#x51C6;&#x4E5F;&#x6709;&#x6211;&#x7684;&#x5410;&#x69FD;&#x54C8;&#x54C8;&#x54C8;&#x3002;]]></content>
  </entry>
</search>
