<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Splay on cqqqwq的小站</title><link>https://blog.chenqiqian.com/tags/splay/</link><description>Recent content in Splay on cqqqwq的小站</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor><webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster><copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright><lastBuildDate>Tue, 28 Aug 2018 22:59:54 +0000</lastBuildDate><sy:updatePeriod>daily</sy:updatePeriod><atom:link href="https://blog.chenqiqian.com/tags/splay/index.xml" rel="self" type="application/rss+xml"/><item><title>「NOI2007」货币兑换-Splay+斜率优化</title><link>https://blog.chenqiqian.com/posts/noi2007-cash/</link><pubDate>Tue, 28 Aug 2018 22:59:54 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 28 Aug 2018 22:59:54 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2007-cash/</guid><description>&lt;p>小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券：$A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券 和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：&lt;/p>
&lt;p>（a）卖出金券：顾客提供一个 $[0,100]$ 内的实数 $OP$ 作为卖出比例，其意义为：将 $OP%$ 的 $A$ 券和 $OP%$ 的 $B$ 券以当时的价值兑换为人民币；&lt;/p>
&lt;p>（b）买入金券：顾客支付 $IP$ 元人民币，交易所将会兑换给用户总价值为 $IP$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $Rate_K$ ；&lt;/p>
&lt;p>注意到，&lt;strong>同一天内可以进行多次操作&lt;/strong>。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $Rate$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>Splay</category><category>平衡树</category><category>斜率优化</category><category>动态规划</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「SCOI2013」多项式的运算-Splay</title><link>https://blog.chenqiqian.com/posts/scoi2013-function/</link><pubDate>Fri, 01 Jun 2018 21:12:47 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 01 Jun 2018 21:12:47 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/scoi2013-function/</guid><description>&lt;p>维护一个动态的关于 $x$的无穷多项式 ，这个多项式初始时对于所有 $i$ 有 $a_i = 0$&lt;/p>
&lt;p>$$&lt;br />
f(x)=a_0x^0+a_1x^1+a_2x^2&amp;hellip;&lt;br />
$$&lt;/p>
&lt;p>操作者可以进行四种操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mul L R V&lt;/code> 表示将 $x^L$ 到 $x^R$ 这些项的系数乘上某个定值 $v$ ；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>add L R V&lt;/code> 表示将 $x^L$ 到 $x^R$ 这些项的系数加上某个定值 $v$ ；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mulx L R&lt;/code> 表示将 $x^L$ 到 $x^R$ 这些项乘上x变量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>query V&lt;/code> 求 $f(v)$ 的值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>操作集中在前三种，第四种操作不会出现超过 $10$ 次。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>Splay</category><category>数据结构</category><category>平衡树</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「CQOI2014」排序机械臂-Splay</title><link>https://blog.chenqiqian.com/posts/cqoi2014-sort/</link><pubDate>Fri, 02 Feb 2018 15:12:44 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 02 Feb 2018 15:12:44 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/cqoi2014-sort/</guid><description>&lt;p>维护一个序列，第 $i$ 次操作时寻找第i小的数的所在位置 $P_i$,并将 $(P_{i-1},P_{i}]$ 的区间翻转。&lt;/p>
&lt;p>如果有相同的数，必须保证排序后它们的相对位置关系与初始时相同。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>平衡树</category><category>Splay</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「NOI2004」郁闷的出纳员-Splay</title><link>https://blog.chenqiqian.com/posts/noi2004-cashier/</link><pubDate>Wed, 31 Jan 2018 21:05:48 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 31 Jan 2018 21:05:48 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2004-cashier/</guid><description>&lt;p>维护一个数列。&lt;/p>
&lt;p>现有四种命令，新加入一个数 $k$ ，把每个数加上 $k$ ，把每个数减去 $k$ ，查询第 $k$ 大的数。如果数列中的任意数小于 $min$ ，将它立即删除。并在最后输出总共删去的数的个数 $res$ 。&lt;/p>
&lt;p>如果新加入的数 $k$ 的初值小于 $min$ ，它将不会被加入数列。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>平衡树</category><category>Splay</category><category>OI</category><category>题解</category><category>NOI</category></item></channel></rss>