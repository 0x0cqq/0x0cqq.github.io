<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>图论 on cqqqwq的小站</title>
    <link>https://blog.chenqiqian.com/tags/%E5%9B%BE%E8%AE%BA/</link>
    <description>Recent content in 图论 on cqqqwq的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor>
    <webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster>
    <copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 09 Apr 2019 22:51:59 +0000</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://blog.chenqiqian.com/tags/%E5%9B%BE%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>「JSOI2010」满汉全席-2-SAT</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2010-feast/</link>
        <pubDate>Tue, 09 Apr 2019 22:51:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 09 Apr 2019 22:51:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2010-feast/</guid>
        <description>&lt;p&gt;题意过长，概括如下：&lt;/p&gt;
&lt;p&gt;你有 $n$ 种食材，评委 $m$ 个要求，你需要加工这 $n$ 种食材，每种从&amp;quot;汉式（&lt;code&gt;h&lt;/code&gt;）&amp;ldquo;或者&amp;quot;满式（&lt;code&gt;m&lt;/code&gt;）&amp;ldquo;中选择&lt;strong&gt;一种&lt;/strong&gt;。每个要求用两个形如 $\text{h} x$ 或者 $\text{m}x$ （ $x$ 为一个 $1 \sim n$ 的正整数），意为第 $x$ 道菜需要用用&amp;quot;汉式（&lt;code&gt;h&lt;/code&gt;）&amp;ldquo;或者&amp;quot;满式（&lt;code&gt;m&lt;/code&gt;）&amp;ldquo;来进行加工，每个要求中的两个条件必须至少满足一个，每种食材最多只能用一种方式来加工。&lt;/p&gt;
&lt;p&gt;请你判断存不存在一个合法的方式。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>2-SAT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2010」平面图判定-2-SAT</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2010-planarity/</link>
        <pubDate>Tue, 09 Apr 2019 22:51:53 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 09 Apr 2019 22:51:53 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2010-planarity/</guid>
        <description>&lt;p&gt;若能将无向图 $G=(V, E)$ 画在平面上使得任意两条无重合顶点的边不相交，则称 $G$ 是平面图。判定一个图是否为平面图的问题是图论中的一个重要问题。现在假设你要判定的是一类特殊的图，图中存在一个包含所有顶点的环，即存在哈密顿回路。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>2-SAT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」数字梯形-费用流</title>
        <link>https://blog.chenqiqian.com/posts/loj6010/</link>
        <pubDate>Sat, 30 Mar 2019 08:47:48 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 30 Mar 2019 08:47:48 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6010/</guid>
        <description>&lt;p&gt;给定一个由 $n$ 行数字组成的数字梯形如下图所示。梯形的第一行有 $m$ 个数字。从梯形的顶部的 $m$ 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶至底的路径。&lt;/p&gt;
&lt;p&gt;分别遵守以下规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从梯形的顶至底的 $m$ 条路径互不相交；&lt;/li&gt;
&lt;li&gt;从梯形的顶至底的 $m$ 条路径仅在数字结点处相交；&lt;/li&gt;
&lt;li&gt;从梯形的顶至底的 $m$ 条路径允许在数字结点相交或边相交。&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」软件补丁-最短路</title>
        <link>https://blog.chenqiqian.com/posts/loj6009/</link>
        <pubDate>Sat, 30 Mar 2019 08:40:20 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 30 Mar 2019 08:40:20 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6009/</guid>
        <description>&lt;p&gt;某公司发现其研制的一个软件中有 $n$ 个错误，随即为该软件发放了一批共 $m$ 个补丁程序。每一个补丁程序都有其特定的适用环境，某个补丁只有在软件中包含某些错误而同时又不包含另一些错误时才可以使用。一个补丁在排除某些错误的同时，往往会加入另一些错误。&lt;/p&gt;
&lt;p&gt;换句话说，对于每一个补丁 $i$ ，都有 $2$ 个与之相应的错误集合 $B_1(i)$ 和 $B_2(i)$ ，使得仅当软件包含 $B_1(i)$ 中的所有错误，而不包含 $B_2(i)$ 中的任何错误时，才可以使用补丁 $i$ 。补丁 $i$ 将修复软件中的某些错误 $F_1(i)$ ，而同时加入另一些错误 $F_2(i)$ 。另外，每个补丁都耗费一定的时间。&lt;/p&gt;
&lt;p&gt;试设计一个算法，利用公司提供的 $m$ 个补丁程序将原软件修复成一个没有错误的软件，并使修复后的软件耗时最少。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>最短路</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」餐巾计划-费用流</title>
        <link>https://blog.chenqiqian.com/posts/loj6008/</link>
        <pubDate>Sat, 30 Mar 2019 07:42:29 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 30 Mar 2019 07:42:29 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6008/</guid>
        <description>&lt;p&gt;一个餐厅在相继的 $n$ 天里，每天需用的餐巾数不尽相同。假设第 $i$ 天需要 $r_i$ 块餐巾。餐厅可以购买新的餐巾，每块餐巾的费用为 $P$ 分；或者把旧餐巾送到快洗部，洗一块需 $M$ 天，其费用为 $F$ 分；或者送到慢洗部，洗一块需 $n$ 天，其费用为 $S$ 分（$S &amp;lt; F$）。&lt;/p&gt;
&lt;p&gt;每天结束时，餐厅必须决定将多少块脏的餐巾送到快洗部，多少块餐巾送到慢洗部，以及多少块保存起来延期送洗。但是每天洗好的餐巾和购买的新餐巾数之和，要满足当天的需求量。&lt;/p&gt;
&lt;p&gt;试设计一个算法为餐厅合理地安排好 $n$ 天中餐巾使用计划,使总的花费最小。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」方格取数-二分图最大独立集</title>
        <link>https://blog.chenqiqian.com/posts/loj6007/</link>
        <pubDate>Sun, 24 Mar 2019 22:48:57 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 24 Mar 2019 22:48:57 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6007/</guid>
        <description>&lt;p&gt;在一个有 $m \times n$ 个方格的棋盘中，每个方格中有一个正整数。&lt;/p&gt;
&lt;p&gt;现要从方格中取数，使任意 $2$ 个数所在方格没有公共边，且取出的数的总和最大。试设计一个满足要求的取数算法。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>二分图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」试题库-网络最大流</title>
        <link>https://blog.chenqiqian.com/posts/loj6006/</link>
        <pubDate>Sun, 24 Mar 2019 22:39:47 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 24 Mar 2019 22:39:47 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6006/</guid>
        <description>&lt;p&gt;假设一个试题库中有 $n$ 道试题。每道试题都标明了所属类别。同一道题可能有多个类别属性。现要从题库中抽取 $m$ 道题组成试卷。并要求试卷包含指定类型的试题。试设计一个满足要求的组卷算法。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>常见最小费用最大流算法学习笔记</title>
        <link>https://blog.chenqiqian.com/posts/notes-mfmc/</link>
        <pubDate>Fri, 22 Mar 2019 21:20:12 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 22 Mar 2019 21:20:12 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/notes-mfmc/</guid>
        <description>&lt;p&gt;众所周知，最小费用最大流向来是一个算法很多的问题，下面总结了几个常用的最小费用最大流算法。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>费用流</category>
            
          
            
              <category>模板</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
      </item>
      
      <item>
        <title>「网络流 24 题」最长递增子序列-dp&#43;网络最大流</title>
        <link>https://blog.chenqiqian.com/posts/loj6005/</link>
        <pubDate>Thu, 21 Mar 2019 22:57:57 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 21 Mar 2019 22:57:57 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6005/</guid>
        <description>&lt;p&gt;给定正整数序列 $x_1 \sim x_n$ ，以下递增子序列均为非严格递增。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算其最长递增子序列的长度 $s$ 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算从给定的序列中最多可取出多少个长度为 $s$ 的递增子序列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果允许在取出的序列中多次使用 $x_1$ 和 $x_n$ ，则从给定序列中最多可取出多少个长度为 $s$ 的递增子序列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」圆桌聚餐-网络最大流</title>
        <link>https://blog.chenqiqian.com/posts/loj6004/</link>
        <pubDate>Wed, 20 Mar 2019 21:12:17 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 20 Mar 2019 21:12:17 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6004/</guid>
        <description>&lt;p&gt;假设有来自 $m$ 个不同单位的代表参加一次国际会议。每个单位的代表数分别为 $r_i$ 。会议餐厅共有 $n$ 张餐桌，每张餐桌可容纳 $c_i$ 个代表就餐。&lt;/p&gt;
&lt;p&gt;为了使代表们充分交流，希望从同一个单位来的代表不在同一个餐桌就餐。&lt;/p&gt;
&lt;p&gt;试设计一个算法，给出满足要求的代表就餐方案。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」魔术球-二分图最大匹配</title>
        <link>https://blog.chenqiqian.com/posts/loj6003/</link>
        <pubDate>Wed, 20 Mar 2019 20:45:09 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 20 Mar 2019 20:45:09 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6003/</guid>
        <description>&lt;p&gt;假设有 $n$ 根柱子，现要按下述规则在这 $n$ 根柱子中依次放入编号为 $1, 2, 3, 4, \cdots$ 的球。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次只能在某根柱子的最上面放球。&lt;/li&gt;
&lt;li&gt;在同一根柱子中，任何 $2$ 个相邻球的编号之和为完全平方数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;试设计一个算法，计算出在 $n$ 根柱子上最多能放多少个球。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>二分图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」最小路径覆盖-二分图最大匹配</title>
        <link>https://blog.chenqiqian.com/posts/loj6002/</link>
        <pubDate>Tue, 19 Mar 2019 22:38:15 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 19 Mar 2019 22:38:15 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6002/</guid>
        <description>&lt;p&gt;给定有向图 $G = (V, E)$。设 $P$ 是 $G$ 的一个简单路（顶点不相交）的集合。如果 $V$ 中每个顶点恰好在 $P$ 的一条路上，则称 $P$ 是 $G$ 的一个路径覆盖。 $P$ 中路径可以从 $V$ 的任何一个顶点开始，长度也是任意的，特别地，可以为 $0$ 。 $G$ 的最小路径覆盖是 $G$ 的所含路径条数最少的路径覆盖。&lt;/p&gt;
&lt;p&gt;设计一个有效算法求一个有向无环图 $G$ 的最小路径覆盖。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>二分图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」太空飞行计划-最大权闭合子图</title>
        <link>https://blog.chenqiqian.com/posts/loj6001/</link>
        <pubDate>Tue, 19 Mar 2019 19:43:52 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 19 Mar 2019 19:43:52 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6001/</guid>
        <description>&lt;p&gt;W 教授正在为国家航天中心计划一系列的太空飞行。每次太空飞行可进行一系列商业性实验而获取利润。现已确定了一个可供选择的实验集合 $E = { E_1, E_2, \cdots, E_m }$ ，和进行这些实验需要使用的全部仪器的集合 $I = { I_1, I_2, \cdots, I_n }$ 。实验 $E_j$ 需要用到的仪器是 $I$ 的子集 $R_j \subseteq I$ 。配置仪器 $I_k$ 的费用为 $c_k$ 美元。实验 $E_j$ 的赞助商已同意为该实验结果支付 $p_j$ 美元。W 教授的任务是找出一个有效算法，确定在一次太空飞行中要进行哪些实验并因此而配置哪些仪器才能使太空飞行的净收益最大。这里净收益是指进行实验所获得的全部收入与配置仪器的全部费用的差额。&lt;/p&gt;
&lt;p&gt;对于给定的实验和仪器配置情况，编程找出净收益最大的试验计划。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>最大权闭合子图</category>
            
          
            
              <category>网络流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「网络流 24 题」搭配飞行员-二分图最大匹配</title>
        <link>https://blog.chenqiqian.com/posts/loj6000/</link>
        <pubDate>Tue, 19 Mar 2019 19:43:03 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 19 Mar 2019 19:43:03 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/loj6000/</guid>
        <description>&lt;p&gt;飞行大队有若干个来自各地的驾驶员，专门驾驶一种型号的飞机，这种飞机每架有两个驾驶员，需一个正驾驶员和一个副驾驶员。由于种种原因，例如相互配合的问题，有些驾驶员不能在同一架飞机上飞行，问如何搭配驾驶员才能使出航的飞机最多。&lt;/p&gt;
&lt;p&gt;因为驾驶工作分工严格，两个正驾驶员或两个副驾驶员都不能同机飞行。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>网络流</category>
            
          
            
              <category>二分图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>网络流 24 题</category>
            
          
        
      </item>
      
      <item>
        <title>「CF103E」Buying Sets-霍尔定理-网络流-最小权闭合子图</title>
        <link>https://blog.chenqiqian.com/posts/cf103e/</link>
        <pubDate>Sat, 02 Feb 2019 21:59:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 02 Feb 2019 21:59:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cf103e/</guid>
        <description>&lt;p&gt;我们有 $n$ 个集合，第 $i$ 个集合有 $m_i$ 个数（$1$ 到 $n$ 中的整数），权值为 $w_i$ 。&lt;/p&gt;
&lt;p&gt;现在请你从中选出 $k$ （$k$ 为任意 $0$ 到 $n$ 中的整数）个集合，满足这 $k$ 个集合的并集的大小为 $k$ ，询问这 $k$ 个集合的权值和最小值。&lt;/p&gt;
&lt;p&gt;保证从这 $n$ 选出任意 $x$ 个集合，他们的并集大小不小于 $k$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>网络流</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>Codeforces</category>
            
          
        
      </item>
      
      <item>
        <title>「NOI2006」最大获利-网络流-最大权闭合子图</title>
        <link>https://blog.chenqiqian.com/posts/noi2006-benefit/</link>
        <pubDate>Sat, 26 Jan 2019 15:24:46 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 26 Jan 2019 15:24:46 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/noi2006-benefit/</guid>
        <description>&lt;p&gt;新的技术正冲击着手机通讯市场，对于各大运营商来说，这既是机遇，更是挑战。THU 集团旗下的 CS&amp;amp;T 通讯公司在新一代通讯技术血战的前夜，需要做太多的准备工作，仅就站址选择一项，就需要完成前期市场研究、站址勘测、最优化等项目。&lt;/p&gt;
&lt;p&gt;在前期市场调查和站址勘测之后，公司得到了一共 $N$ 个可以作为通讯信号中转站的地址，而由于这些地址的地理位置差异，在不同的地方建造通讯中转站需要投入的成本也是不一样的，所幸在前期调查之后这些都是已知数据：建立第 $i$ 个通讯中转站需要的成本为 $P_i$ 。&lt;/p&gt;
&lt;p&gt;另外公司调查得出了所有期望中的用户群，一共 $M$ 个。关于第 i 个用户群的信息概括为 $A_i$ , $B_i$ 和 $C_i$ ：这些用户会使用中转站 $A_i$ 和中转站 $B_i$ 进行通讯，公司可以获益 $C_i$​ 。&lt;/p&gt;
&lt;p&gt;THU 集团的 CS&amp;amp;T 公司可以有选择的建立一些中转站（投入成本），为一些用户提供服务并获得收益（获益之和）。那么如何选择最终建立的中转站才能让公司的净获利最大呢？（净获利 = 获益之和 – 投入成本之和）&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>网络流</category>
            
          
            
              <category>最大权闭合子图</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>NOI</category>
            
          
        
      </item>
      
      <item>
        <title>「JLOI2011」飞行路线-分层图最短路</title>
        <link>https://blog.chenqiqian.com/posts/jloi2011-flight/</link>
        <pubDate>Fri, 26 Oct 2018 23:29:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 26 Oct 2018 23:29:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jloi2011-flight/</guid>
        <description>&lt;p&gt;Alice 和 Bob 现在要乘飞机旅行，他们选择了一家相对便宜的航空公司。该航空公司一共在 $n$ 个城市设有业务，设这些城市分别标记为 $0$ 到 $n-1$，一共有 $m$ 种航线，每种航线连接两个城市，并且航线有一定的价格。&lt;/p&gt;
&lt;p&gt;Alice和Bob现在要从一个城市沿着航线到达另一个城市，途中可以进行转机。航空公司对他们这次旅行也推出优惠，他们可以免费在最多 $k$ 种航线上搭乘飞机。那么Alice和Bob这次出行最少花费多少？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>最短路</category>
            
          
            
              <category>分层图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「APIO2008」免费道路-生成树&#43;并查集</title>
        <link>https://blog.chenqiqian.com/posts/apio2008-road/</link>
        <pubDate>Sat, 18 Aug 2018 20:44:05 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 18 Aug 2018 20:44:05 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/apio2008-road/</guid>
        <description>&lt;p&gt;给定一个 $n$ 个点，$m$ 条边的无向图，每条边有两种权值： $0$ 或者 $1$ 。&lt;/p&gt;
&lt;p&gt;先询问能不能找出一个生成树，使得其中恰有 $k$ 条 $0$ 边，若存在，输出任意一个方案，否则输出 &lt;code&gt;no solution&lt;/code&gt; 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>生成树</category>
            
          
            
              <category>数据结构</category>
            
          
            
              <category>并查集</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>WC/CTSC/APIO</category>
            
          
        
      </item>
      
      <item>
        <title>「NOI2010」航空管制-拓扑排序</title>
        <link>https://blog.chenqiqian.com/posts/noi2010-airplane/</link>
        <pubDate>Sat, 18 Aug 2018 19:45:43 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 18 Aug 2018 19:45:43 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/noi2010-airplane/</guid>
        <description>&lt;p&gt;假设目前被延误航班共有 $n$ 个，编号为 $1$ 至 $n$ 。机场只有一条起飞跑道，所有的航班需按某个顺序依次起飞（称这个顺序为起飞序列）。定义一个航班的起飞序号为该航班在起飞序列中的位置，即是第几个起飞的航班。&lt;/p&gt;
&lt;p&gt;起飞序列还存在两类限制条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一类（最晚起飞时间限制）：编号为 $i$ 的航班起飞序号不得超过 $k_i$ ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二类（相对起飞顺序限制）：存在一些相对起飞顺序限制 $(a, b)$ ，表示航班 $a$ 的起飞时间必须早于航班 $b$ ，即航班 $a$ 的起飞序号必须小于航班 $b$ 的起飞序号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小 $\text{X}$ 思考的第一个问题是，若给定以上两类限制条件，是否可以计算出一个可行的起飞序列。第二个问题则是，在考虑两类限制条件的情况下，如何求出每个航班在所有可行的起飞序列中的最小起飞序号。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>拓扑排序</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>NOI</category>
            
          
        
      </item>
      
      <item>
        <title>「POI2013」Price List-图论</title>
        <link>https://blog.chenqiqian.com/posts/poi2013-price-list/</link>
        <pubDate>Tue, 14 Aug 2018 19:53:50 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 14 Aug 2018 19:53:50 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/poi2013-price-list/</guid>
        <description>&lt;p&gt;给定一个 $n$ 个点，$m$ 条边的无向联通图，每条边的权值均为 $a$。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;原图&lt;/strong&gt;所有满足 $u$ 节点和 $v$ 节点间最短路为 $2 \times a$ 的点对 $(u,v)$ 间建立一条无向边，边的权值均为 $b$。&lt;/p&gt;
&lt;p&gt;给定一个起始节点$k$，求在上述操作后，$k$到所有节点的最短路径。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>最短路</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各国OI</category>
            
          
        
      </item>
      
      <item>
        <title>「POI2000」病毒-AC自动机</title>
        <link>https://blog.chenqiqian.com/posts/poi2000-virus/</link>
        <pubDate>Thu, 09 Aug 2018 11:03:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 09 Aug 2018 11:03:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/poi2000-virus/</guid>
        <description>&lt;p&gt;二进制病毒审查委员会最近发现了如下的规律：某些确定的二进制串是病毒的代码。如果某段代码中不存在任何一段病毒代码，那么我们就称这段代码是安全的。现在委员会已经找出了所有的病毒代码段，试问，是否存在一个无限长的安全的二进制代码。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>AC自动机</category>
            
          
            
              <category>字符串</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各国OI</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2009」HH去散步-矩阵快速幂&#43;dp</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2009-walk/</link>
        <pubDate>Thu, 09 Aug 2018 10:41:45 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 09 Aug 2018 10:41:45 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2009-walk/</guid>
        <description>&lt;p&gt;&lt;code&gt;HH&lt;/code&gt; 是个喜欢变化的人，所以他不会立刻沿着刚刚走来的路走回。 又因为 &lt;code&gt;HH&lt;/code&gt; 是个喜欢变化的人，所以他每天走过的路径都不完全一样，他想知道他究竟有多少种散步的方法。&lt;/p&gt;
&lt;p&gt;现在给你学校的地图（假设每条路的长度都是一样的都是 $1$ ），问长度为 $t$ ，从给定地点 $A$ 走到给定地点 $B$ 共有多少条符合上述条件的路径。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>矩阵快速幂</category>
            
          
            
              <category>动态规划</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2013」直径-树的直径</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2013-diameter/</link>
        <pubDate>Sat, 12 May 2018 18:04:01 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 12 May 2018 18:04:01 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2013-diameter/</guid>
        <description>&lt;p&gt;定义一棵树上最长的路径为树的直径。树的直径可能不唯一。&lt;/p&gt;
&lt;p&gt;给定的一棵 $n$ 个结点的树，求其直径的长度，以及有多少条边满足所有的直径都经过该边。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>树形结构</category>
            
          
            
              <category>树的直径</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「NOI2012」美食节-费用流</title>
        <link>https://blog.chenqiqian.com/posts/noi2012-festival/</link>
        <pubDate>Thu, 03 May 2018 22:16:33 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 03 May 2018 22:16:33 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/noi2012-festival/</guid>
        <description>&lt;p&gt;美食节共有 $n$ 种不同的菜品，每个同学都点了一份在这 $n$ 个菜品中的菜。总共有 $m$ 个厨师来制作这些菜品。厨师们会按照要求的顺序进行制作，并且每次只能制作一人份。第 $j$ 个厨师制作第 $i$ 种菜品的时间记为 $t_{i,j}$ 。每个同学的等待时间为所有厨师开始做菜起，到自己那份菜品完成为止的时间总长度。总等待时间为所有同学的等待时间之和。&lt;/p&gt;
&lt;p&gt;已知共有 $n$ 种菜品，第 $i$ 种菜品需要做 $p_i$ 份，共有 $m$ 个厨师。请计算出最小的总等待时间是多少。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>费用流</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>NOI</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2010」连续攻击游戏-二分图匹配</title>
        <link>https://blog.chenqiqian.com/posts/scoi2010-game/</link>
        <pubDate>Fri, 27 Apr 2018 18:48:55 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 27 Apr 2018 18:48:55 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2010-game/</guid>
        <description>&lt;p&gt;&lt;code&gt;lxhgww&lt;/code&gt; 最近迷上了一款游戏，在游戏里，他拥有 $n$ 个装备（ $n \le 1000000$ ），每种装备都有 $2$ 个属性，这些属性的值用 $[1,10000]$ 之间的数表示。当他使用某种装备时，他只能使用该装备的某一个属性。并且每种装备最多只能使用一次。&lt;/p&gt;
&lt;p&gt;游戏进行到最后， &lt;code&gt;lxhgww&lt;/code&gt; 遇到了终极 &lt;code&gt;boss&lt;/code&gt; ，这个终极 &lt;code&gt;boss&lt;/code&gt; 很奇怪，攻击他的装备所使用的属性值必须从 $1$ 开始连续递增地攻击，才能对 &lt;code&gt;boss&lt;/code&gt; 产生伤害。现在&lt;code&gt;lxhgww&lt;/code&gt;想知道他最多能连续攻击 &lt;code&gt;boss&lt;/code&gt; 多少次？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>二分图匹配</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2012」交换棋子-费用流</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2012-chess/</link>
        <pubDate>Wed, 25 Apr 2018 23:29:56 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 25 Apr 2018 23:29:56 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2012-chess/</guid>
        <description>&lt;p&gt;有一个 $n$ 行 $m$ 列的黑白棋盘，你每次可以交换两个相邻格子（相邻是指有公共边或公共顶点）中的棋子，最终达到目标状态。要求第 $i$ 行第 $j$ 列的格子只能参与 $m_{i,j}$ 次交换。&lt;/p&gt;
&lt;p&gt;输出仅一行，为最小交换总次数。如果无解，输出 $-1$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」工作安排-费用流</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-arrange/</link>
        <pubDate>Fri, 06 Apr 2018 20:00:38 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 06 Apr 2018 20:00:38 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-arrange/</guid>
        <description>&lt;p&gt;你的公司需要提供 $n$ 类产品，其中第 $i$ 类产品共需要 $C_{i}$ 件。公司共有 $m$ 名员工。员工能够制造的产品种类有所区别，我们用一个由 $0$ 和 $1$ 组成的 $m\times n$ 的矩阵 $\mathbb {A}$ 来描述每名员工能够制造哪些产品。&lt;/p&gt;
&lt;p&gt;对于员工 $i$ ，给出 $S_i$ 。定义他的愤怒值与他制作的产品数量之间的函数是一个 $S_i+1$ 段的分段函数。设 $T_{i,0}=0$,$T_{i,S_{i+1}}=+\infty$ ，那么当他制造第 $[T_{i,j-1}+1,T_{i,j}]$ 件产品时，每件产品会使他的愤怒值增加 $W_{i,j}$ ， $1\leq j\leq S_{i+1}$ 。保证 $0&amp;lt;W_{i,j} &amp;lt; W_{i,j+1}, ; 0 &amp;lt; T_{i,j} &amp;lt; T_{i,j+1}$ 。&lt;/p&gt;
&lt;p&gt;你的任务是制定出一个产品的分配方案，使得订单条件被满足，并且所有员工的愤怒值之和最小。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2010」网络扩容-网络流-费用流</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2010-network/</link>
        <pubDate>Thu, 05 Apr 2018 16:55:11 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 05 Apr 2018 16:55:11 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2010-network/</guid>
        <description>&lt;p&gt;给定一张有向图，每条边都有一个容量 $C$ 和一个扩容费用 $W$ 。这里扩容费用是指将容量扩大 $1$ 所需的费用。&lt;/p&gt;
&lt;p&gt;现在请你编写一个程序求出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在不扩容的情况下， $1$ 到 $N$ 的最大流；&lt;/li&gt;
&lt;li&gt;将 $1$ 到 $N$ 的最大流增加 $K$ 所需的最小扩容费用。&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
            
              <category>网络流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2007」最大半连通子图-强连通分量-dp</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2007-semi-connected/</link>
        <pubDate>Thu, 05 Apr 2018 16:54:05 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 05 Apr 2018 16:54:05 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2007-semi-connected/</guid>
        <description>&lt;p&gt;给定一个有向图 $G$ ，请求出 $G$ 的最大半连通子图拥有的节点数 $K$ ，以及不同的最大半连通子图的数目 $C$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>强连通分量</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「AHOI2008」紧急集合-LCA</title>
        <link>https://blog.chenqiqian.com/posts/ahoi2008-emergency/</link>
        <pubDate>Fri, 23 Mar 2018 22:19:33 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 23 Mar 2018 22:19:33 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/ahoi2008-emergency/</guid>
        <description>&lt;p&gt;给出一颗 $n$ 个节点的无权树， $m$ 次询问，每次给出三个点编号为 $a$ ，$b$ ， $c$  ，询问到这三个点距离最小的点的编号以及其距离和。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>最近公共祖先</category>
            
          
            
              <category>图论</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>Dinic学习笔记</title>
        <link>https://blog.chenqiqian.com/posts/notes-dinic/</link>
        <pubDate>Thu, 08 Feb 2018 14:31:15 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 08 Feb 2018 14:31:15 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/notes-dinic/</guid>
        <description>&lt;p&gt;Dinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \times m)$，但大多数情况下会远远优于此时间复杂度。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>Dinic</category>
            
          
            
              <category>模板</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
      </item>
      
      <item>
        <title>「ZJOI2009」假期的宿舍-二分图匹配</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2009-vacation/</link>
        <pubDate>Thu, 08 Feb 2018 07:48:00 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 08 Feb 2018 07:48:00 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2009-vacation/</guid>
        <description>&lt;p&gt;有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有 $n$ 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>二分图匹配</category>
            
          
            
              <category>Dinic</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      

    
  </channel>
</rss>