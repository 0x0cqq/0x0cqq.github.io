<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Treap on cqqqwq的小站</title><link>http://blog.chenqiqian.com/tags/treap/</link><description>Recent content in Treap on cqqqwq的小站</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor><webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster><copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright><lastBuildDate>Mon, 03 Aug 2020 11:10:34 +0800</lastBuildDate><sy:updatePeriod>daily</sy:updatePeriod><atom:link href="http://blog.chenqiqian.com/tags/treap/index.xml" rel="self" type="application/rss+xml"/><item><title>Treap学习笔记</title><link>http://blog.chenqiqian.com/posts/notes-treap/</link><pubDate>Mon, 03 Aug 2020 11:10:34 +0800</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 03 Aug 2020 11:10:34 +0800</atom:modified><guid>http://blog.chenqiqian.com/posts/notes-treap/</guid><description>&lt;p>闲下来了，开始写一点学习笔记，也希望能给后人造福吧。&lt;/p>
&lt;p>第一篇来说一说 Treap 。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>平衡树</category><category>Treap</category><category>笔记</category><category>模板</category><category>test</category></item><item><title>「SHOI2013」发牌-fhq Treap</title><link>http://blog.chenqiqian.com/posts/shoi2013-card/</link><pubDate>Mon, 15 Oct 2018 21:59:15 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 15 Oct 2018 21:59:15 +0000</atom:modified><guid>http://blog.chenqiqian.com/posts/shoi2013-card/</guid><description>&lt;p>在一些扑克游戏里，如德州扑克，发牌是有讲究的。一般称呼专业的发牌手为荷官。荷官在发牌前，先要销牌。所谓销牌，就是把当前在牌库顶的那一张牌移动到牌库底，它用来防止玩家猜牌而影响游戏。&lt;/p>
&lt;p>假设一开始，荷官拿出了一副新牌，这副牌有 $N$ 张不同的牌，编号依次为 $1$ 到 $N$ 。由于是新牌，所以牌是按照顺序排好的，从牌库顶开始，依次为 $1, 2, \dots$ 直到$N$ ，$N$ 号牌在牌库底。为了发完所有的牌，荷官会进行$N$ 次发牌操作，在第 $i$ 次发牌之前，他会连续进行 $R_i$ 次销牌操作， $R_i$ 由输入给定。请问最后玩家拿到这副牌的顺序是什么样的？&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>平衡树</category><category>Treap</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「ZJOI2012」小蓝的好友-Treap</title><link>http://blog.chenqiqian.com/posts/zjoi2012-friend/</link><pubDate>Thu, 16 Aug 2018 21:24:02 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 16 Aug 2018 21:24:02 +0000</atom:modified><guid>http://blog.chenqiqian.com/posts/zjoi2012-friend/</guid><description>&lt;p>简单版题意：&lt;/p>
&lt;p>给定一个 $R \times C$ 的矩形，在其中 $N$ 个位置有&lt;strong>随机生成&lt;/strong>的资源点。现在请你求出在所有的子矩形中，至少包含一个资源点的矩形数量。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>Treap</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「ZJOI2007」报表统计-平衡树</title><link>http://blog.chenqiqian.com/posts/zjoi2007-count/</link><pubDate>Sat, 03 Mar 2018 18:29:17 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 03 Mar 2018 18:29:17 +0000</atom:modified><guid>http://blog.chenqiqian.com/posts/zjoi2007-count/</guid><description>&lt;p>有一个长度为 $n$ 的整数序列，并且有以下三种操作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>INSERT i k&lt;/code> ：在原数列的第 $i$ 个数后面添加一个新数 $k$ ；如果原数列的第 $i$ 个数已经添加了若干数，则添加在这些数的最后&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MIN GAP&lt;/code>：查询相邻两个数的之间差值（绝对值）的最小值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MIN SORT GAP&lt;/code>：查询所有数中最接近的两个数的差值（绝对值）&lt;/p>
&lt;/li>
&lt;/ul></description><dc:creator>cqqqwq</dc:creator><category>Treap</category><category>平衡树</category><category>数据结构</category><category>OI</category><category>题解</category><category>各省省选</category></item><item><title>「NOI2005」维护数列-非旋Treap</title><link>http://blog.chenqiqian.com/posts/noi2005-sequence/</link><pubDate>Sat, 17 Feb 2018 21:48:01 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 17 Feb 2018 21:48:01 +0000</atom:modified><guid>http://blog.chenqiqian.com/posts/noi2005-sequence/</guid><description>&lt;p>维护一个数列，给定初始的 $n$ 个数字。&lt;/p>
&lt;p>现有六种命令：&lt;/p>
&lt;ul>
&lt;li>在第 $pos$ 个数后插入 $tot$ 个数&lt;/li>
&lt;li>翻转从第 $pos$ 个数开始的 $tot$ 个数&lt;/li>
&lt;li>删除从第 $pos$ 个数开始的 $tot$ 个数&lt;/li>
&lt;li>查询从第 $pos$ 个数开始的 $tot$ 个数的和&lt;/li>
&lt;li>设定从第 $pos$ 个数开始的 $tot$ 个数设定为 $c$&lt;/li>
&lt;li>查询整个数列中和最大的连续子区间的和&lt;/li>
&lt;/ul></description><dc:creator>cqqqwq</dc:creator><category>Treap</category><category>平衡树</category><category>数据结构</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>非旋Treap学习笔记</title><link>http://blog.chenqiqian.com/posts/notes-none-rotating-treap/</link><pubDate>Sat, 17 Feb 2018 19:45:17 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 17 Feb 2018 19:45:17 +0000</atom:modified><guid>http://blog.chenqiqian.com/posts/notes-none-rotating-treap/</guid><description>&lt;p>非旋 Treap ，是一种不基于旋转的平衡树。它基于 Treap 的树堆思想，并且能够高效的完成某些对区间的操作，而且灵活性比较高。它也可以进行可持久化的操作。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>Treap</category><category>平衡树</category><category>数据结构</category><category>模板</category><category>OI</category><category>学习笔记</category></item></channel></rss>