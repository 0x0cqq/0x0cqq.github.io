<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>NOI on cqqqwq的小站</title><link>https://blog.chenqiqian.com/series/noi/</link><description>Recent content in NOI on cqqqwq的小站</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor><webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster><copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright><lastBuildDate>Sat, 26 Jan 2019 15:24:46 +0000</lastBuildDate><sy:updatePeriod>daily</sy:updatePeriod><atom:link href="https://blog.chenqiqian.com/series/noi/index.xml" rel="self" type="application/rss+xml"/><item><title>「NOI2006」最大获利-网络流-最大权闭合子图</title><link>https://blog.chenqiqian.com/posts/noi2006-benefit/</link><pubDate>Sat, 26 Jan 2019 15:24:46 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 26 Jan 2019 15:24:46 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2006-benefit/</guid><description>&lt;p>新的技术正冲击着手机通讯市场，对于各大运营商来说，这既是机遇，更是挑战。THU 集团旗下的 CS&amp;amp;T 通讯公司在新一代通讯技术血战的前夜，需要做太多的准备工作，仅就站址选择一项，就需要完成前期市场研究、站址勘测、最优化等项目。&lt;/p>
&lt;p>在前期市场调查和站址勘测之后，公司得到了一共 $N$ 个可以作为通讯信号中转站的地址，而由于这些地址的地理位置差异，在不同的地方建造通讯中转站需要投入的成本也是不一样的，所幸在前期调查之后这些都是已知数据：建立第 $i$ 个通讯中转站需要的成本为 $P_i$ 。&lt;/p>
&lt;p>另外公司调查得出了所有期望中的用户群，一共 $M$ 个。关于第 i 个用户群的信息概括为 $A_i$ , $B_i$ 和 $C_i$ ：这些用户会使用中转站 $A_i$ 和中转站 $B_i$ 进行通讯，公司可以获益 $C_i$​ 。&lt;/p>
&lt;p>THU 集团的 CS&amp;amp;T 公司可以有选择的建立一些中转站（投入成本），为一些用户提供服务并获得收益（获益之和）。那么如何选择最终建立的中转站才能让公司的净获利最大呢？（净获利 = 获益之和 – 投入成本之和）&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>网络流</category><category>最大权闭合子图</category><category>图论</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2005」聪聪与可可-期望dp</title><link>https://blog.chenqiqian.com/posts/noi2005-clever-and-cute/</link><pubDate>Tue, 02 Oct 2018 09:37:40 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 02 Oct 2018 09:37:40 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2005-clever-and-cute/</guid><description>&lt;p>给定一个 $n$ 个点， $m$ 条边的无向图。聪聪开始的时候在 &lt;code>S&lt;/code>，可可在节点 &lt;code>T&lt;/code> 处。以后的每个时间单位，可可都会选择去相邻的景点(可能有多个)中的一个或停留在原景点不动。而去这些地方所发生的概率是相等的。假设有 $P$ 个景点与景点 &lt;code>M&lt;/code> 相邻，它们分别是景点 &lt;code>R&lt;/code>、 景点 &lt;code>S&lt;/code>，……，景点 &lt;code>Q&lt;/code>，在时刻 $i$ 可可处在景点 &lt;code>M&lt;/code>，则在 $i+1$ 时刻，可可有 $\frac{1}{1+P}$ 的可能在景点 &lt;code>R&lt;/code>，有 $\frac{1}{1+P}$ 的可能在景点 &lt;code>S&lt;/code>，……，有 $\frac{1}{1+P}$ 的可能在景点 &lt;code>Q&lt;/code>，还有 $\frac{1}{1+P}$ 的可能停在景点 &lt;code>M&lt;/code>。&lt;/p>
&lt;p>当聪聪在景点 &lt;code>C&lt;/code> 时，她会选一个更靠近可可的景点，如果这样的景点有多个，她会选一个标号最小的景点。如果走完第一次移动以后仍然没吃到可可，她还可以在本段时间内再向可可进行一次移动。&lt;/p>
&lt;p>在每个时间单位，假设聪聪先走，可可后走。在某一时刻，若聪聪和可可位于同一个景点，则可怜的可可就被吃掉了。&lt;/p>
&lt;p>请求出平均情况下，聪聪用几个时间单位就可能吃到可可。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>动态规划</category><category>期望dp</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2007」货币兑换-Splay+斜率优化</title><link>https://blog.chenqiqian.com/posts/noi2007-cash/</link><pubDate>Tue, 28 Aug 2018 22:59:54 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 28 Aug 2018 22:59:54 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2007-cash/</guid><description>&lt;p>小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券：$A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券 和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：&lt;/p>
&lt;p>（a）卖出金券：顾客提供一个 $[0,100]$ 内的实数 $OP$ 作为卖出比例，其意义为：将 $OP%$ 的 $A$ 券和 $OP%$ 的 $B$ 券以当时的价值兑换为人民币；&lt;/p>
&lt;p>（b）买入金券：顾客支付 $IP$ 元人民币，交易所将会兑换给用户总价值为 $IP$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $Rate_K$ ；&lt;/p>
&lt;p>注意到，&lt;strong>同一天内可以进行多次操作&lt;/strong>。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $Rate$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>Splay</category><category>平衡树</category><category>斜率优化</category><category>动态规划</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2015」寿司晚宴-状压dp</title><link>https://blog.chenqiqian.com/posts/noi2015-dinner/</link><pubDate>Tue, 28 Aug 2018 22:58:15 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 28 Aug 2018 22:58:15 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2015-dinner/</guid><description>&lt;p>为了庆祝 $NOI$ 的成功开幕，主办方为大家准备了一场寿司晚宴。小 $G$ 和小 $W$ 作为参加 $NOI$ 的选手，也被邀请参加了寿司晚宴。&lt;/p>
&lt;p>在晚宴上，主办方为大家提供了 $n−1$ 种不同的寿司，编号 $1,2,3,⋯,n-1$ ，其中第种寿司的美味度为 $i+1$（即寿司的美味度为从 $2$ 到 $n$ ）。&lt;/p>
&lt;p>现在小 $G$ 和小 $W$ 希望每人选一些寿司种类来品尝，他们规定一种品尝方案为不和谐的当且仅当：小 $G$ 品尝的寿司种类中存在一种美味度为 $x$ 的寿司，小 $W$ 品尝的寿司中存在一种美味度为 $y$ 的寿司，而 $x$ 与 $y$ 不互质。&lt;/p>
&lt;p>现在小 $G$ 和小 $W$ 希望统计一共有多少种和谐的品尝寿司的方案（对给定的正整数 $p$ 取模）。注意一个人可以不吃任何寿司。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>动态规划</category><category>状压dp</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2009」诗人小G-动态规划+决策单调性</title><link>https://blog.chenqiqian.com/posts/noi2009-poet/</link><pubDate>Fri, 24 Aug 2018 14:43:31 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 24 Aug 2018 14:43:31 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2009-poet/</guid><description>&lt;p>小 $\text{G}$ 是一个出色的诗人，经常作诗自娱自乐。但是，他一直被一件事情所困扰，那就是诗的排版问题。&lt;/p>
&lt;p>一首诗包含了若干个句子，对于一些连续的短句，可以将它们用空格隔开并放在一行中，注意一行中可以放的句子数目是没有限制的。小 $\text{G}$ 给每首诗定义了一个行标准长度（行的长度为一行中符号的总个数），他希望排版后每行的长度都和行标准长度相差不远。显然排版时，&lt;strong>不应改变原有的句子顺序&lt;/strong>，并且小 $\text{G}$ 不允许把一个句子分在两行或者更多的行内。在满足上面两个条件的情况下，小 $\text{G}$ 对于排版中的每行定义了一个不协调度, 为这行的实际长度与行标准长度差值绝对值的 $P$ 次方，而一个排版的不协调度为所有行不协调度的总和。&lt;/p>
&lt;p>小 $\text{G}$ 最近又作了几首诗，现在请你对这首诗进行排版，使得排版后的诗尽量协调（即不协调度尽量小），并把排版的结果告诉他。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>动态规划</category><category>决策单调性</category><category>二分查找</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2012」魔幻棋盘-差分+树套树</title><link>https://blog.chenqiqian.com/posts/noi2012-board/</link><pubDate>Fri, 24 Aug 2018 13:15:53 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 24 Aug 2018 13:15:53 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2012-board/</guid><description>&lt;p>将要读二年级的小 Q 买了一款新型益智玩具——魔幻棋盘，它是一个 $N$ 行 $M$ 列的网格棋盘，每个格子中均有一个正整数。棋盘守护者在棋盘的第 $X$ 行第 $Y$ 列（行与列均从 $1$ 开始编号）并且始终不会移动。棋盘守护者会进行两种操作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>询问：他会以自己所在位置为基础，向四周随机扩展出一块大小不定的矩形区域，向你询问这一区域内所有数的最大公约数是多少。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改：他会随意挑选棋盘上的一块矩形区域，将这一区域内的所有数同时加上一个给定的整数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>游戏说明书上附有这样一句话“聪明的小朋友，当你连续答对 $19930324$ 次询问后会得到一个惊喜噢！”。小 Q 十分想得到这个惊喜，于是每天都在玩这个玩具。但由于他粗心大意，经常算错数，难以达到这个目标。于是他来向你寻求帮助，希望你帮他写一个程序来回答棋盘守护者的询问，并保证 $100%$ 的正确率。&lt;/p>
&lt;p>为了简化问题，你的程序只需要完成棋盘守护者的 $T$ 次操作，并且问题保证任何时刻棋盘上的数字均为不超过 $2^{62} - 1$ 的正整数。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>线段树</category><category>树套树</category><category>数据结构</category><category>差分</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2012」随机数生成器-矩阵快速幂</title><link>https://blog.chenqiqian.com/posts/noi2012-random/</link><pubDate>Tue, 21 Aug 2018 21:56:54 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 21 Aug 2018 21:56:54 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2012-random/</guid><description>&lt;p>给定正整数 $n,m,a,c,X[0],g$ ，求按照 $X[n+1] = (a X[n] + c) \bmod m$ 生成出的第 $n$ 项 $X[n] \bmod g$ 的值。&lt;/p>
&lt;p>数据范围： $n,m,a,c,X[0] \leq 10^{18}$&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数学</category><category>矩阵快速幂</category><category>递推</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2010」海拔-网络流/最短路</title><link>https://blog.chenqiqian.com/posts/noi2010-altitude/</link><pubDate>Tue, 21 Aug 2018 21:53:16 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Tue, 21 Aug 2018 21:53:16 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2010-altitude/</guid><description>&lt;blockquote>
&lt;p>题面请点击&lt;strong>查看全文&lt;/strong>&lt;/p>
&lt;/blockquote></description><dc:creator>cqqqwq</dc:creator><category>最短路</category><category>网络流</category><category>对偶图</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2010」航空管制-拓扑排序</title><link>https://blog.chenqiqian.com/posts/noi2010-airplane/</link><pubDate>Sat, 18 Aug 2018 19:45:43 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 18 Aug 2018 19:45:43 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2010-airplane/</guid><description>&lt;p>假设目前被延误航班共有 $n$ 个，编号为 $1$ 至 $n$ 。机场只有一条起飞跑道，所有的航班需按某个顺序依次起飞（称这个顺序为起飞序列）。定义一个航班的起飞序号为该航班在起飞序列中的位置，即是第几个起飞的航班。&lt;/p>
&lt;p>起飞序列还存在两类限制条件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一类（最晚起飞时间限制）：编号为 $i$ 的航班起飞序号不得超过 $k_i$ ;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二类（相对起飞顺序限制）：存在一些相对起飞顺序限制 $(a, b)$ ，表示航班 $a$ 的起飞时间必须早于航班 $b$ ，即航班 $a$ 的起飞序号必须小于航班 $b$ 的起飞序号。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>小 $\text{X}$ 思考的第一个问题是，若给定以上两类限制条件，是否可以计算出一个可行的起飞序列。第二个问题则是，在考虑两类限制条件的情况下，如何求出每个航班在所有可行的起飞序列中的最小起飞序号。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>图论</category><category>拓扑排序</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2015」品酒大会-后缀数组</title><link>https://blog.chenqiqian.com/posts/noi2015-savour/</link><pubDate>Fri, 03 Aug 2018 19:40:39 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Fri, 03 Aug 2018 19:40:39 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2015-savour/</guid><description>&lt;p>简单版题意：&lt;/p>
&lt;p>给定一个长度为 $n$ 的字符串，和一个长度为 $n$ 的数列 ${a_n}$ ，求对于 $r$ 从 $0$ 到 $n-1$ ，所有满足 $1 \leq p &amp;lt; q \leq n$ 且 $lcp(p,q) \geq r$ 的数对个数以及满足上述条件的数对中 $a_p \times a_q$ 的最大值。（ $a_i$ 可以为负数）&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>并查集</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2016」优秀的拆分-后缀数组</title><link>https://blog.chenqiqian.com/posts/noi2016-split/</link><pubDate>Wed, 04 Jul 2018 20:38:39 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 04 Jul 2018 20:38:39 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2016-split/</guid><description>&lt;p>如果一个字符串可以被拆分为 $AABB$ 的形式，其中 $A$ 和 $B$ 是任意非空字符串，则我们称该字符串的这种拆分是优秀的。一个字符串可能没有优秀的拆分，也可能存在不止一种优秀的拆分。&lt;/p>
&lt;p>现在给出一个长度为 $n$ 的字符串 $S$ ，我们需要求出，在它&lt;strong>所有&lt;/strong>子串的&lt;strong>所有&lt;/strong>拆分方式中，优秀拆分的总个数。这里的子串是指字符串中连续的一段。&lt;/p>
&lt;p>以下事项需要注意：&lt;/p>
&lt;ul>
&lt;li>出现在不同位置的相同子串，我们认为是不同的子串，它们的优秀拆分均会被记入答案。&lt;/li>
&lt;li>在一个拆分中，允许出现 $A = B$。例如 $cccc$ 存在拆分 $A = B = c$。&lt;/li>
&lt;li>字符串本身也是它的一个子串。&lt;/li>
&lt;/ul></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>后缀数组</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2010」能量采集-简单数学</title><link>https://blog.chenqiqian.com/posts/noi2010-energy/</link><pubDate>Mon, 18 Jun 2018 09:31:46 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 18 Jun 2018 09:31:46 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2010-energy/</guid><description>&lt;p>给定两个整数 $n,m$ ，对于平面上的整点 ${(x,y)|x \in [1,n],y \in [1,m],x,y \in \mathbb Z}$ 。若 $(x,y)$ 与 $(0,0)$ 的连线上有 $k$ 个整点（不包括 $(0,0),(n,m)$ ），则产生的贡献为 $2k+1$ 。求所有满足条件的点的贡献总和。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数学</category><category>最大公约数</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2014」魔法森林-LCT</title><link>https://blog.chenqiqian.com/posts/noi2014-forest/</link><pubDate>Sat, 16 Jun 2018 11:36:51 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 16 Jun 2018 11:36:51 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2014-forest/</guid><description>&lt;p>给定一个 $n$ 个点 $m$ 条边的无向图，每条边有两个权值 $a_i,b_i$ 。请你找到一条从 $1 \rightarrow n$ 的道路，令道路上所有边的集合为 $S$ ，使 $ans = \max(a_i)+\max(b_j),i,j \in S$ 最小，求出这个最小值 $ans$ 。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>LCT</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2012」美食节-费用流</title><link>https://blog.chenqiqian.com/posts/noi2012-festival/</link><pubDate>Thu, 03 May 2018 22:16:33 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 03 May 2018 22:16:33 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2012-festival/</guid><description>&lt;p>美食节共有 $n$ 种不同的菜品，每个同学都点了一份在这 $n$ 个菜品中的菜。总共有 $m$ 个厨师来制作这些菜品。厨师们会按照要求的顺序进行制作，并且每次只能制作一人份。第 $j$ 个厨师制作第 $i$ 种菜品的时间记为 $t _ {i,j}$ 。每个同学的等待时间为所有厨师开始做菜起，到自己那份菜品完成为止的时间总长度。总等待时间为所有同学的等待时间之和。&lt;/p>
&lt;p>已知共有 $n$ 种菜品，第 $i$ 种菜品需要做 $p_i$ 份，共有 $m$ 个厨师。请计算出最小的总等待时间是多少。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>费用流</category><category>图论</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2009」二叉查找树-区间dp</title><link>https://blog.chenqiqian.com/posts/noi2009-binary/</link><pubDate>Sat, 28 Apr 2018 20:21:18 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 28 Apr 2018 20:21:18 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2009-binary/</guid><description>&lt;p>给定 $n$ 个结点的数据值 $V_i$ ，权值 $P_i$ ，访问频度 $T_i(T_i \geq 0)$ 。对于 $\forall i,j \in V$ 且 $i \neq j$ ，有 $V_i \neq V_j, P_i \neq P_j$ 。&lt;/p>
&lt;p>现令这 $n$ 个点组成一颗二叉树，且满足 $\forall , i \in V$ ，若 $p$ 为 $i$ 的左子节点， $q$ 为 $i$ 的右子节点，则 $V_p &amp;lt; V_i &amp;lt; V_q$ 且 $P_i &amp;lt; P_p,; P_i &amp;lt; P_q$ 。可以证明，这样的二叉树是唯一的。点$i$ 在树中的深度 $D_i$ 定义为它到根的距离加 $1$ 。定义结点 $i$ 的访问代价 $E_i = T_i \times D_i$ 。可以修改每个点的权值为任意实数，其代价均为给定的正整数 $K$ ，但需保证任两点权值仍互不相同。&lt;/p>
&lt;p>现求上文所述二叉树中，其 $\sum^n _ {i = 1}{E_i} + \sum K$ 的最小值。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>动态规划</category><category>平衡树</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2015」软件包管理器-树链剖分</title><link>https://blog.chenqiqian.com/posts/noi2015-manager/</link><pubDate>Mon, 09 Apr 2018 21:07:03 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Mon, 09 Apr 2018 21:07:03 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2015-manager/</guid><description>&lt;p>你决定设计你自己的软件包管理器。如果软件包 A 依赖软件包 B ，那么安装软件包 A 以前，必须先安装软件包 B 。同时，如果想要卸载软件包 B ，则必须卸载软件包 A 。现在你已经获得了所有的软件包之间的依赖关系。除 $0$ 号软件包以外，所有软件包都会依赖一个且仅一个软件包，而 $0$ 号软件包不依赖任何一个软件包。依赖关系不存在环。&lt;/p>
&lt;p>现在有一些安装或卸载软件包的操作，需要求出这个操作实际上会改变多少个软件包的安装状态（即安装操作会安装多少个未安装的软件包，或卸载操作会卸载多少个已安装的软件包）。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>树链剖分</category><category>线段树</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2014」动物园-KMP</title><link>https://blog.chenqiqian.com/posts/noi2014-zoo/</link><pubDate>Thu, 05 Apr 2018 16:55:40 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Thu, 05 Apr 2018 16:55:40 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2014-zoo/</guid><description>&lt;p>给定一个字符串 $S$ ，求出 $num$ 数组——对于字符串 $S$ 的前 $i$ 个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作 $num[i]$ 。&lt;/p>
&lt;p>特别地，为了避免大量的输出，你不需要输出 $num[i]$ 分别是多少，你只需要输出所有 $(num[i]+1)$ 的乘积，对 $10^9+7$ 取模的结果即可。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>字符串</category><category>KMP</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2005」维护数列-非旋Treap</title><link>https://blog.chenqiqian.com/posts/noi2005-sequence/</link><pubDate>Sat, 17 Feb 2018 21:48:01 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sat, 17 Feb 2018 21:48:01 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2005-sequence/</guid><description>&lt;p>维护一个数列，给定初始的 $n$ 个数字。&lt;/p>
&lt;p>现有六种命令：&lt;/p>
&lt;ul>
&lt;li>在第 $pos$ 个数后插入 $tot$ 个数&lt;/li>
&lt;li>翻转从第 $pos$ 个数开始的 $tot$ 个数&lt;/li>
&lt;li>删除从第 $pos$ 个数开始的 $tot$ 个数&lt;/li>
&lt;li>查询从第 $pos$ 个数开始的 $tot$ 个数的和&lt;/li>
&lt;li>设定从第 $pos$ 个数开始的 $tot$ 个数设定为 $c$&lt;/li>
&lt;li>查询整个数列中和最大的连续子区间的和&lt;/li>
&lt;/ul></description><dc:creator>cqqqwq</dc:creator><category>Treap</category><category>平衡树</category><category>数据结构</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2002」银河英雄传说-并查集</title><link>https://blog.chenqiqian.com/posts/noi2002-hero/</link><pubDate>Sun, 11 Feb 2018 16:27:45 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Sun, 11 Feb 2018 16:27:45 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2002-hero/</guid><description>&lt;p>初始时，第 $i$ 号战舰处于第 $i$ 列 $(i = 1, 2, …, 30000)$ 。&lt;/p>
&lt;p>有两种指令：&lt;/p>
&lt;p>合并指令为 &lt;code>M i j&lt;/code> ，含义为将第 $i$ 号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第 $j$ 号战舰所在的战舰队列的尾部。&lt;/p>
&lt;p>询问指令为 &lt;code>C i j&lt;/code> 。该指令意思询问第 $i$ 号战舰与第 $j$ 号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>并查集</category><category>OI</category><category>题解</category><category>NOI</category></item><item><title>「NOI2004」郁闷的出纳员-Splay</title><link>https://blog.chenqiqian.com/posts/noi2004-cashier/</link><pubDate>Wed, 31 Jan 2018 21:05:48 +0000</pubDate><author>cqqqwq@outlook.com (cqqqwq)</author><atom:modified>Wed, 31 Jan 2018 21:05:48 +0000</atom:modified><guid>https://blog.chenqiqian.com/posts/noi2004-cashier/</guid><description>&lt;p>维护一个数列。&lt;/p>
&lt;p>现有四种命令，新加入一个数 $k$ ，把每个数加上 $k$ ，把每个数减去 $k$ ，查询第 $k$ 大的数。如果数列中的任意数小于 $min$ ，将它立即删除。并在最后输出总共删去的数的个数 $res$ 。&lt;/p>
&lt;p>如果新加入的数 $k$ 的初值小于 $min$ ，它将不会被加入数列。&lt;/p></description><dc:creator>cqqqwq</dc:creator><category>数据结构</category><category>平衡树</category><category>Splay</category><category>OI</category><category>题解</category><category>NOI</category></item></channel></rss>