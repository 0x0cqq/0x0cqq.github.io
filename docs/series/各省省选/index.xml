<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>各省省选 on cqqqwq的小站</title>
    <link>https://blog.chenqiqian.com/series/%E5%90%84%E7%9C%81%E7%9C%81%E9%80%89/</link>
    <description>Recent content in 各省省选 on cqqqwq的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>cqqqwq@outlook.com (cqqqwq)</managingEditor>
    <webMaster>cqqqwq@outlook.com (cqqqwq)</webMaster>
    <copyright>&amp;copy;cqqqwq 2017-{year}, All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 10 Apr 2019 20:57:59 +0000</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://blog.chenqiqian.com/series/%E5%90%84%E7%9C%81%E7%9C%81%E9%80%89/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>「SCOI2005」骑士精神-搜索</title>
        <link>https://blog.chenqiqian.com/posts/scoi2005-knight/</link>
        <pubDate>Wed, 10 Apr 2019 20:57:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 10 Apr 2019 20:57:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2005-knight/</guid>
        <description>&lt;p&gt;在一个 $5 \times 5$ 的棋盘上有 $12$ 个白色的骑士和 $12$ 个黑色的骑士， 且有一个空位。在任何时候一个骑士都能按照骑士的走法（它可以走到和它横坐标相差为 $1$ ，纵坐标相差为 $2$ 或者横坐标相差为 $2$ ，纵坐标相差为 $1$ 的格子）移动到空位上。 给定一个初始的棋盘，怎样才能经过移动变成如下目标棋盘： 为了体现出骑士精神，他们必须以最少的步数完成任务。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>搜索</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JSOI2010」满汉全席-2-SAT</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2010-feast/</link>
        <pubDate>Tue, 09 Apr 2019 22:51:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 09 Apr 2019 22:51:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2010-feast/</guid>
        <description>&lt;p&gt;题意过长，概括如下：&lt;/p&gt;
&lt;p&gt;你有 $n$ 种食材，评委 $m$ 个要求，你需要加工这 $n$ 种食材，每种从&amp;quot;汉式（&lt;code&gt;h&lt;/code&gt;）&amp;ldquo;或者&amp;quot;满式（&lt;code&gt;m&lt;/code&gt;）&amp;ldquo;中选择&lt;strong&gt;一种&lt;/strong&gt;。每个要求用两个形如 $\text{h} x$ 或者 $\text{m}x$ （ $x$ 为一个 $1 \sim n$ 的正整数），意为第 $x$ 道菜需要用用&amp;quot;汉式（&lt;code&gt;h&lt;/code&gt;）&amp;ldquo;或者&amp;quot;满式（&lt;code&gt;m&lt;/code&gt;）&amp;ldquo;来进行加工，每个要求中的两个条件必须至少满足一个，每种食材最多只能用一种方式来加工。&lt;/p&gt;
&lt;p&gt;请你判断存不存在一个合法的方式。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>2-SAT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2010」平面图判定-2-SAT</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2010-planarity/</link>
        <pubDate>Tue, 09 Apr 2019 22:51:53 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 09 Apr 2019 22:51:53 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2010-planarity/</guid>
        <description>&lt;p&gt;若能将无向图 $G=(V, E)$ 画在平面上使得任意两条无重合顶点的边不相交，则称 $G$ 是平面图。判定一个图是否为平面图的问题是图论中的一个重要问题。现在假设你要判定的是一类特殊的图，图中存在一个包含所有顶点的环，即存在哈密顿回路。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>2-SAT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2014」数表-数论</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2014-table/</link>
        <pubDate>Sat, 06 Apr 2019 20:06:54 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 06 Apr 2019 20:06:54 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2014-table/</guid>
        <description>&lt;p&gt;有一张 $n \times m$ 的数表，其第 $i$ 行第 $j$ 列（ $1 \le i \le n$， $1 \le j \le m$ ）的数值为能同时整除 $i$ 和 $j$ 的所有自然数之和。给定 $a$ ，计算数表中不大于 $a$ 的数之和。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>数论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「AHOI2013」联通图-线段树分治&#43;并查集</title>
        <link>https://blog.chenqiqian.com/posts/ahoi2013-graph/</link>
        <pubDate>Fri, 05 Apr 2019 17:15:43 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 05 Apr 2019 17:15:43 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/ahoi2013-graph/</guid>
        <description>&lt;p&gt;给定一个 $n$ 个点 $m$ 条边的无向连通图 $G$ 和若干个小集合 $S$，每个小集合包含 $c(1 \le c \le 4)$ 条边，对于每个集合，你需要确定将集合中的边删掉后改图是否保持联通。&lt;/p&gt;
&lt;p&gt;集合间的询问相互独立。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树分治</category>
            
          
            
              <category>并查集</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HAOI2017」八纵八横-线段树分治&#43;线性基</title>
        <link>https://blog.chenqiqian.com/posts/haoi2017-railway/</link>
        <pubDate>Fri, 05 Apr 2019 13:07:59 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 05 Apr 2019 13:07:59 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/haoi2017-railway/</guid>
        <description>&lt;p&gt;Anihc 国有 $n$ 个城市，这 $n$ 个城市从 $1$ ~ $n$ 编号，$1$ 号城市为首都。城市间初始时有 $m$ 条高速公路，每条高速公路都有一个非负整数的经济影响因子，每条高速公路的两端都是城市（可能两端是同一个城市)，保证任意两个城市都可以通过高速公路互达。&lt;/p&gt;
&lt;p&gt;Anihc 国正在筹划「八纵八横」的高铁建设计划，计划要修建一些高速铁路，每条高速铁路两端也都是城市（可能两端是同一个城市)，也都有一个非负整数的经济影响因子。国家还计划在「八纵八横」计划建成之后，将「一带一路」扩展为「一带一路一环」，增加「内陆城市经济环」即选择一条从首都出发沿若一系列高铁与高速公路走的路径，每条高铁或高速公路可以经过多次，每座城市也可以经过多次，最后路径又在首都结束。令「内陆城市经济环」的 GDP 为依次将这条路径上所经过的高铁或高速公路的经济影响因子异或起来（一条路经过多次则会被计算多次）。&lt;/p&gt;
&lt;p&gt;现在 Anihc 在会议上讨论「八纵八横」的建设计划方案，他们会不断地修改计划方案，希望你能实时反馈对于当前的「八纵八横」的建设计划的方案「内陆城市经济环」的最大是多少。&lt;/p&gt;
&lt;p&gt;初始时，八纵八横计划中不包含任何—条高铁，有以下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Add x y z&lt;/code&gt; ：在计划中给在城市 $x$ 和城市 $y$ 之间建设一条高铁，其经济影响因子为 $z$ ，如果这是第 $k$ 个 Add 操作，则将这条高铁命名为 $k$ 号高铁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cancel k&lt;/code&gt; ：将计划中的 $k$ 号高铁取消掉，保证此时 $k$ 号高铁一定存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Change k z&lt;/code&gt; ：表示将第 $k$ 号高铁的经济影响因子更改为 $z$ ，保证此时 $k$ 号高铁一定存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树分治</category>
            
          
            
              <category>线性基</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「FJOI2015」火星商店问题-线段树分治&#43;可持久化Trie</title>
        <link>https://blog.chenqiqian.com/posts/fjoi2015-shop/</link>
        <pubDate>Tue, 02 Apr 2019 21:50:00 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 02 Apr 2019 21:50:00 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/fjoi2015-shop/</guid>
        <description>&lt;p&gt;有 $n$ 个商店，每个商店都有一个特殊商品，每个人在任何时间都可以买。第一天可能没有进货，有若干次询问，而之后的每天，都有&lt;strong&gt;一次&lt;/strong&gt;进货和若干次询问，每次进货都是某个商店进了某个编号的货，每次询问都是询问在编号为 $l$ 到 $r$ 的商店中，在 $d$ 天内进的货的编号异或 $x$ 的最大值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树</category>
            
          
            
              <category>线段树分治</category>
            
          
            
              <category>可持久化线段树</category>
            
          
            
              <category>Trie</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2017」数字表格-数论</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2017-product/</link>
        <pubDate>Sun, 31 Mar 2019 21:49:37 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 31 Mar 2019 21:49:37 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2017-product/</guid>
        <description>&lt;p&gt;Doris 刚刚学习了 fibnacci 数列，用 $f[i]$ 表示数列的第 $i$ 项，那么： $f[0] = 0,f[1] = 1,f[n] = f[n - 1] + f[n - 2](n \geq 2)$ 。&lt;/p&gt;
&lt;p&gt;Doris 用老师的超级计算机生成了一个 $n \times m$ 的表格，第 $i$ 行第 $j$ 列的格子中的数是 $f[\gcd(i, j)]$，其中 $\gcd(i, j)$ 表示 $i$ 与 $j$ 的最大公约数。&lt;/p&gt;
&lt;p&gt;Doris 的表格中共有 $n \times m$ 个数，她想知道这些数的乘积是多少。&lt;/p&gt;
&lt;p&gt;这些数的乘积实在是太大了，所以 Doris 只想知道乘积对 $1000000007$ 取模后的结果。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数论</category>
            
          
            
              <category>数学</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2017」树点涂色-LCT&#43;树链剖分</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2017-paint/</link>
        <pubDate>Sat, 30 Mar 2019 13:00:28 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 30 Mar 2019 13:00:28 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2017-paint/</guid>
        <description>&lt;p&gt;Bob 有一棵 $n​$ 个点的有根树，其中 $1​$ 号点是根节点。Bob 在每个节点上涂了颜色，并且每个点上的颜色不同。&lt;/p&gt;
&lt;p&gt;定义一条路径的权值是，这条路径上的点（包括起点和终点）共有多少种不同的颜色。&lt;/p&gt;
&lt;p&gt;Bob 可能会进行这几种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 x&lt;/code&gt;，把点 $x$ 到根节点的路径上的所有的点染上一种没有用过的新颜色；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 x y&lt;/code&gt;，求 $x$ 到 $y$ 的路径的权值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 x&lt;/code&gt;，在以 $x$ 为根的子树中选择一个点，使得这个点到根节点的路径权值最大，求最大权值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bob 一共会进行 $m$ 次操作。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>树形结构</category>
            
          
            
              <category>dfs序</category>
            
          
            
              <category>LCT</category>
            
          
            
              <category>线段树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「Luogu4449」于神之怒加强版-数学</title>
        <link>https://blog.chenqiqian.com/posts/luogu-4499/</link>
        <pubDate>Sat, 30 Mar 2019 12:05:02 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 30 Mar 2019 12:05:02 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/luogu-4499/</guid>
        <description>&lt;p&gt;给定 $n,m,k$ ，计算&lt;br /&gt;
$$&lt;br /&gt;
\sum_{i=1}^n\sum_{j=1}^m {\gcd(i,j)}^k&lt;br /&gt;
$$&lt;br /&gt;
对 $1000000007$ 取模的结果&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>数论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「BJOI2014」大融合-LCT</title>
        <link>https://blog.chenqiqian.com/posts/bjoi2014-mixture/</link>
        <pubDate>Mon, 11 Mar 2019 21:09:49 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 11 Mar 2019 21:09:49 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/bjoi2014-mixture/</guid>
        <description>&lt;p&gt;小强要在 $N$ 个孤立的星球上建立起一套通信系统。这套通信系统就是连接 $N$ 个点的一个树。 这个树的边是一条一条添加上去的。在某个时刻，一条边的负载就是它所在的当前能够 联通的树上路过它的简单路径的数量。&lt;/p&gt;
&lt;p&gt;现在，你的任务就是随着边的添加，动态的回答小强对于某些边的负载的询问。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>LCT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2016」美味-可持久化线段树</title>
        <link>https://blog.chenqiqian.com/posts/scoi2016-delicious/</link>
        <pubDate>Tue, 11 Dec 2018 21:16:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 11 Dec 2018 21:16:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2016-delicious/</guid>
        <description>&lt;p&gt;一家餐厅有 $n$ 道菜，编号 $1,\dots,n$ ，大家对第 $i$ 道菜的评价值为 $a_i(1 \leq i \leq n)$。有 $m$ 位顾客，第 $i$ 位顾客的期望值为 $b_i$，而他的偏好值为 $x_i$ 。因此，第 $i$ 位顾客认为第 $j$ 道菜的美味度为 $b_i\ \text{XOR}\ (a_j+x_i)$ ，$\text{XOR}$ 表示异或运算。&lt;/p&gt;
&lt;p&gt;第 $i$ 位顾客希望从这些菜中挑出他认为最美味的菜，即美味值最大的菜，但由于价格等因素，他只能从第 $l_i$ 道到第 $r_i$ 道中选择。请你帮助他们找出最美味的菜。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树</category>
            
          
            
              <category>可持久化主席树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2008」骑士-基环树&#43;dp</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2008-knight/</link>
        <pubDate>Tue, 27 Nov 2018 23:11:53 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 27 Nov 2018 23:11:53 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2008-knight/</guid>
        <description>&lt;p&gt;每个骑士都有且仅有一个自己最厌恶的骑士（当然不是他自己），他是绝对不会与自己最厌恶的人一同出征的。&lt;/p&gt;
&lt;p&gt;请你从所有的骑士中选出一个骑士军团，使得军团内没有矛盾的两人（不存在一个骑士与他最痛恨的人一同被选入骑士军团的情况），并且使得这支骑士军团最具有战斗力。&lt;/p&gt;
&lt;p&gt;为了描述战斗力，我们将骑士按照 $1$ 至 $n$ 编号，给每名骑士一个战斗力的估计，一个军团的战斗力为所有骑士的战斗力总和。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>基环树</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JSOI2008」球形空间产生器-高斯消元</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2008-sphere/</link>
        <pubDate>Sun, 25 Nov 2018 14:57:55 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 25 Nov 2018 14:57:55 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2008-sphere/</guid>
        <description>&lt;p&gt;有一个球形空间产生器能够在 $n$ 维空间中产生一个坚硬的球体。现在，你被困在了这个 $n$ 维球体中，你只知道球面上 $n+1$ 个点的坐标，你需要以最快的速度确定这个 $n$ 维球体的球心坐标，以便于摧毁这个球形空间产生器。&lt;/p&gt;
&lt;p&gt;提示：给出两个定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;球心：到球面上任意一点距离都相等的点。&lt;/li&gt;
&lt;li&gt;距离：设两个n为空间上的点A, B的坐标为$(a_1, a_2, \cdots , a_n)$ , $(b_1, b_2, \cdots , b_n)$，则 AB 的距离定义为：$dist = \sqrt{ \sum_{i=1}^{n}(a_i - b_i)^2 }$&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>高斯消元</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2007」梦幻岛宝珠-背包dp</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2007-diamond/</link>
        <pubDate>Sat, 03 Nov 2018 09:57:05 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 03 Nov 2018 09:57:05 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2007-diamond/</guid>
        <description>&lt;p&gt;给你 $N$ 颗宝石，每颗宝石都有重量 $w_i$ 和价值 $v_i$。要你从这些宝石中选取一些宝石，保证其总重量不超过 $W$ ，且总价值最大。&lt;/p&gt;
&lt;p&gt;请你输出最大的总价值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>背包</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2008」递归数列-矩阵快速幂</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2008-sequence/</link>
        <pubDate>Thu, 01 Nov 2018 23:50:47 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 01 Nov 2018 23:50:47 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2008-sequence/</guid>
        <description>&lt;p&gt;一个由自然数组成的数列按下式定义：&lt;/p&gt;
&lt;p&gt;对于 $i \leq k$ ：$a_i = b_i$&lt;/p&gt;
&lt;p&gt;对于 $i &amp;gt; k$  : $a_i = c_1a_{i-1} + c_2a_{i-2} + &amp;hellip; + c_ka_{i-k}$&lt;/p&gt;
&lt;p&gt;其中 $b_j$ 和 $c_j$ （ $1 \leq j \leq k$）是给定的自然数。写一个程序，给定自然数 $m \leq n$, 计算 $a_m + a_{m+1} + a_{m+2} + &amp;hellip; + a_n$, 并输出它除以给定自然数 $p$ 的余数的值。&lt;/p&gt;
&lt;p&gt;对于 100% 的测试数据：&lt;/p&gt;
&lt;p&gt;$1 \leq k \leq 15,1 \leq m \leq n \leq 10^{18},0 \le b_1, b_2,&amp;hellip; b_k, c_1, c_2,&amp;hellip;, c_k \leq 10^9,1 \leq p \leq 10^8$&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>矩阵快速幂</category>
            
          
            
              <category>数学</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HEOI2016/TJOI2016」树-线段树</title>
        <link>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-tree/</link>
        <pubDate>Fri, 26 Oct 2018 23:30:51 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 26 Oct 2018 23:30:51 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-tree/</guid>
        <description>&lt;p&gt;在2016年，佳媛姐姐刚刚学习了树，非常开心。现在他想解决这样一个问题：给定一颗有根树（根为 $1$），有以下两种操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;标记操作：对某个结点打上标记（在最开始，只有结点1有标记，其他结点均无标记，而且对于某个结点，可以打多次标记。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;询问操作：询问某个结点最近的一个打了标记的祖先（这个结点本身也算自己的祖先）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你能帮帮她吗?&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>线段树</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JLOI2011」飞行路线-分层图最短路</title>
        <link>https://blog.chenqiqian.com/posts/jloi2011-flight/</link>
        <pubDate>Fri, 26 Oct 2018 23:29:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 26 Oct 2018 23:29:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jloi2011-flight/</guid>
        <description>&lt;p&gt;Alice 和 Bob 现在要乘飞机旅行，他们选择了一家相对便宜的航空公司。该航空公司一共在 $n$ 个城市设有业务，设这些城市分别标记为 $0$ 到 $n-1$，一共有 $m$ 种航线，每种航线连接两个城市，并且航线有一定的价格。&lt;/p&gt;
&lt;p&gt;Alice和Bob现在要从一个城市沿着航线到达另一个城市，途中可以进行转机。航空公司对他们这次旅行也推出优惠，他们可以免费在最多 $k$ 种航线上搭乘飞机。那么Alice和Bob这次出行最少花费多少？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>最短路</category>
            
          
            
              <category>分层图</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2010」古代猪文-Lucas&#43;CRT</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2010-pig/</link>
        <pubDate>Tue, 23 Oct 2018 22:58:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 23 Oct 2018 22:58:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2010-pig/</guid>
        <description>&lt;p&gt;猪王国的文明源远流长，博大精深。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>中国剩余定理</category>
            
          
            
              <category>Lucas定理</category>
            
          
            
              <category>数论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2014」世界树-虚树&#43;树形dp</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2014-worldtree/</link>
        <pubDate>Sun, 21 Oct 2018 22:29:12 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 21 Oct 2018 22:29:12 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2014-worldtree/</guid>
        <description>&lt;p&gt;世界树的形态可以用一个数学模型来描述：世界树中有 $n$ 个种族，种族的编号分别从 $1$ 到 $n$，分别生活在编号为 $1$ 到 $n$ 的聚居地上，种族的编号与其聚居地的编号相同。有的聚居地之间有双向的道路相连，道路的长度为 $1$。保证连接的方式会形成一棵树结构，即所有的聚居地之间可以互相到达，并且不会出现环。定义两个聚居地之间的距离为连接他们的道路的长度；例如，若聚居地 $a$ 和 $b$ 之间有道路，$b$ 和 $c$ 之间有道路，因为每条道路长度为 $1$ 而且又不可能出现环，所以 $a$ 与 $c$ 之间的距离为 $2$。&lt;/p&gt;
&lt;p&gt;出于对公平的考虑，第 $i$ 年，世界树的国王需要授权 $m_i$ 个种族的聚居地为临时议事处。对于某个种族 $x$（$x$ 为种族的编号），如果距离该种族最近的临时议事处为 $y$（$y$ 为议事处所在聚居地的编号），则种族 $x$ 将接受 $y$ 议事处的管辖（如果有多个临时议事处到该聚居地的距离一样，则 $y$ 为其中编号最小的临时议事处）。&lt;/p&gt;
&lt;p&gt;现在国王想知道，在 $q$ 年的时间里，每一年完成授权后，当年每个临时议事处将会管理多少个种族（议事处所在的聚居地也将接受该议事处管理）。 现在这个任务交给了以智慧著称的灵长类的你：程序猿。请帮国王完成这个任务吧。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>虚树</category>
            
          
            
              <category>树形结构</category>
            
          
            
              <category>树形dp</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SHOI2014」概率充电器-树形dp</title>
        <link>https://blog.chenqiqian.com/posts/shoi2014-charger/</link>
        <pubDate>Thu, 18 Oct 2018 19:50:03 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 18 Oct 2018 19:50:03 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/shoi2014-charger/</guid>
        <description>&lt;p&gt;著名的电子产品品牌 SHOI 刚刚发布了引领世界潮流的下一代电子产品—— 概率充电器：&lt;/p&gt;
&lt;p&gt;“采用全新纳米级加工技术，实现元件与导线能否通电完全由真随机数决定！SHOI 概率充电器，您生活不可或缺的必需品！能充上电吗？现在就试试看吧！”&lt;/p&gt;
&lt;p&gt;SHOI 概率充电器由 $n-1$ 条导线连通了 $n$ 个充电元件。进行充电时，每条导 线是否可以导电以概率决定，每一个充电元件自身是否直接进行充电也由概率 决定。随后电能可以从直接充电的元件经过通电的导线使得其他充电元件进行间接充电。&lt;/p&gt;
&lt;p&gt;作为 SHOI 公司的忠实客户，你无法抑制自己购买 SHOI 产品的冲动。在排 了一个星期的长队之后终于入手了最新型号的 SHOI 概率充电器。你迫不及待地将 SHOI 概率充电器插入电源——这时你突然想知道，进入充电状态的元件个数的期望是多少呢？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>树形dp</category>
            
          
            
              <category>期望</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2007」仓库建设-斜率优化</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2007-warehouse/</link>
        <pubDate>Thu, 18 Oct 2018 19:49:43 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 18 Oct 2018 19:49:43 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2007-warehouse/</guid>
        <description>&lt;p&gt;L 公司有 $N$ 个工厂，由高到底分布在一座山上。工厂 $1$ 在山顶，工厂 $N$ 在山脚。&lt;/p&gt;
&lt;p&gt;由于地形的不同，在不同工厂建立仓库的费用可能是不同的。第 $i$  个工厂目前已有成品 $P_i$ 件，在第 $i$ 个工厂位置建立仓库的费用是 $C_i$ 。&lt;/p&gt;
&lt;p&gt;对于没有建立仓库的工厂，其产品应被运往其他的仓库进行储藏，而由于 L 公司产品的对外销售处设置在山脚的工厂 $N$ ，故产品只能往山下运（即只能运往编号更大的工厂的仓库），当然运送产品也是需要费用的，假设一件产品运送 $1$ 个单位距离的费用是 $1$ 。&lt;/p&gt;
&lt;p&gt;假设建立的仓库容量都都是足够大的，可以容下所有的产品。你将得到以下数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂 $i$ 距离工厂 $1$ 的距离 $X_i$（其中 $X_1=0$ ）;&lt;/li&gt;
&lt;li&gt;工厂 $i$ 目前已有成品数量 $P_i$ ;&lt;/li&gt;
&lt;li&gt;在工厂 $i$ 建立仓库的费用 $C_i$ ;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请你帮助 L 公司寻找一个仓库建设的方案，使得总的费用（建造费用+运输费用）最小。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>斜率优化</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SHOI2013」发牌-fhq Treap</title>
        <link>https://blog.chenqiqian.com/posts/shoi2013-card/</link>
        <pubDate>Mon, 15 Oct 2018 21:59:15 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 15 Oct 2018 21:59:15 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/shoi2013-card/</guid>
        <description>&lt;p&gt;在一些扑克游戏里，如德州扑克，发牌是有讲究的。一般称呼专业的发牌手为荷官。荷官在发牌前，先要销牌。所谓销牌，就是把当前在牌库顶的那一张牌移动到牌库底，它用来防止玩家猜牌而影响游戏。&lt;/p&gt;
&lt;p&gt;假设一开始，荷官拿出了一副新牌，这副牌有 $N$ 张不同的牌，编号依次为 $1$ 到 $N$ 。由于是新牌，所以牌是按照顺序排好的，从牌库顶开始，依次为 $1, 2, \dots$ 直到$N$ ，$N$ 号牌在牌库底。为了发完所有的牌，荷官会进行$N$ 次发牌操作，在第 $i$ 次发牌之前，他会连续进行 $R_i$ 次销牌操作， $R_i$ 由输入给定。请问最后玩家拿到这副牌的顺序是什么样的？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>平衡树</category>
            
          
            
              <category>Treap</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」消耗战-虚树&#43;树形dp</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-war/</link>
        <pubDate>Mon, 15 Oct 2018 21:52:56 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 15 Oct 2018 21:52:56 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-war/</guid>
        <description>&lt;p&gt;给定一个 $n$ 个点，以 $1$ 为根的有根树，砍断第 $i$ 条边的代价为 $c_i$。有 $m$ 次询问，每次给出 $k_i$ 个关键点（保证关键点不含 $1$ 号节点），询问能够使 $1$ 号节点不能到达任何关键点，所要砍断边的代价和最小是多少。&lt;/p&gt;
&lt;p&gt;数据范围：$n,m \leq 250000,\sum {k_i} \leq 5 \times 10^5$&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>树形结构</category>
            
          
            
              <category>虚树</category>
            
          
            
              <category>树形dp</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「TJOI2015」棋盘-状压dp&#43;矩阵快速幂</title>
        <link>https://blog.chenqiqian.com/posts/tjoi2015-board/</link>
        <pubDate>Thu, 04 Oct 2018 21:43:30 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 04 Oct 2018 21:43:30 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/tjoi2015-board/</guid>
        <description>&lt;p&gt;有一个  $n$  行  $m$  列的棋盘，棋盘上可以放很多特殊的棋子，每个棋子的攻击范围是  $3$  行  $p$  列。输入数据用一个 $3 \times p$  的矩阵给出了棋子攻击范围的模板，棋子被默认在模板中的第 [二] 行，第 [$k+1$] 列，模板中棋子能攻击到的位置标记为  &lt;code&gt;1&lt;/code&gt;，不能攻击到的位置是  &lt;code&gt;0&lt;/code&gt;  $(1 \leq p \leq m, 0 \leq k &amp;lt; p)$。输入数据保证模板中的第 [二] 行第 [$k+1$]  列是  &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;打开门的密码是这样的：在要求棋子互相不能攻击到的前提下，摆放棋子的方案数。注意什么棋子都不摆也算作一种可行方案。请求出方案对  $2^{32}$  取余的结果即可。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>状压dp</category>
            
          
            
              <category>动态规划</category>
            
          
            
              <category>矩阵快速幂</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2014」方伯伯的OJ-动态开点线段树</title>
        <link>https://blog.chenqiqian.com/posts/scoi2014-onlinejudge/</link>
        <pubDate>Wed, 03 Oct 2018 23:35:33 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 03 Oct 2018 23:35:33 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2014-onlinejudge/</guid>
        <description>&lt;p&gt;方伯伯正在做他的 OJ 。现在他在处理 OJ 上的用户排名问题。 OJ 上注册了 $n$ 个用户，编号为 $1$ ～ $n$ ，一开始他们按照编号排名。&lt;/p&gt;
&lt;p&gt;方伯伯会按照心情对这些用户做以下四种操作，修改用户的排名和编号 ，共有 $m$ 次操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;操作格式为 &lt;code&gt;1 x y&lt;/code&gt; ，意味着将编号为 $x$ 的用户编号改为 $y$ ，而排名不变，执行完该操作后需要输出该用户在队列中的位置，数据保证 $x$ 必然出现在队列中，同时， $y$ 是一个当前不在排名中的编号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作格式为 &lt;code&gt;2 x&lt;/code&gt; ，意味着将编号为 $x$ 的用户的排名提升到第一位，执行完该操作后需要输出执行该操作前编号为 $x$ 用户的排名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作格式为 &lt;code&gt;3 x&lt;/code&gt; ，意味着将编号为 $x$ 的用户的排名降到最后一位，执行完该操作后需要输出执行该操作前编号为 $x$ 用户的排名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作格式为 &lt;code&gt;4 k&lt;/code&gt;，意味着查询当前排名为 $k$ 的用户编号，执行完该操作后需要输出当前操作用户的编号。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于 $100%$ 的数据， $1 \leq n \leq 10^8,1 \leq m \leq  10^5$。&lt;/p&gt;
&lt;p&gt;强制在线。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2011」XOR和路径-高斯消元</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2011-xor/</link>
        <pubDate>Tue, 02 Oct 2018 09:39:42 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 02 Oct 2018 09:39:42 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2011-xor/</guid>
        <description>&lt;p&gt;给定一个无向连通图，其节点编号为 $1$ 到 $N$，其边的权值为非负整数。试求出一条从 $1$ 号节点到 $N$ 号节点的路径，使得该路径上经过的边的权值的 “ $\text{XOR}$ 和” 最大。该路径可以重复经过某些节点或边，当一条边在路径中出现多次时，其权值在计算 “$\text{XOR}$ 和” 时也要被重复计算相应多的次数。&lt;/p&gt;
&lt;p&gt;直接求解上述问题比较困难，于是你决定使用非完美算法。具体来说，从 $1$ 号节点开始，以相等的概率，随机选择与当前节点相关联的某条边，并沿这条边走到下一个节点，重复这个过程，直到走到 $N$ 号节点为止，便得到一条从 $1$ 号节点到 $N$ 号节点的路径。显然得到每条这样的路径的概率是不同的，并且每条这样的路径的 “ $\text{XOR}$ 和” 也不一样。现在请你求出该算法得到的路径的 “ $\text{XOR}$ 和” 的期望值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>期望</category>
            
          
            
              <category>高斯消元</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2007」排列-状压dp</title>
        <link>https://blog.chenqiqian.com/posts/scoi2007-permutation/</link>
        <pubDate>Tue, 02 Oct 2018 09:35:55 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 02 Oct 2018 09:35:55 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2007-permutation/</guid>
        <description>&lt;p&gt;给一个数字串 $s$ 和正整数 $d$ , 统计 $s$ 有多少种不同的排列能被 $d$ 整除（可以有前导 $0$ ）。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>状压dp</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2015」情报传递-树链剖分-主席树</title>
        <link>https://blog.chenqiqian.com/posts/scoi2015-intelligence/</link>
        <pubDate>Tue, 02 Oct 2018 09:33:57 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 02 Oct 2018 09:33:57 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2015-intelligence/</guid>
        <description>&lt;p&gt;给定一个 $n$ 个节点的有根树，开始时每个节点的权值都为 $0$ 。一共有 $q$ 个时刻，每个时刻可能有如下两个操作之一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;给定一个节点 $x$ ，从下一个时刻起每个时刻都给该节点的权值 $+1$（每个节点只会有一次该操作）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定两个节点 $x,y$ 以及一个数 $C$ ，求这两个节点的简单路径上权值大于 $C$ 的节点个数，以及简单路径上的所有节点个数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>树链剖分</category>
            
          
            
              <category>主席树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HEOI2016/TJOI2016」序列-CDQ分治优化dp</title>
        <link>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-sequence/</link>
        <pubDate>Thu, 20 Sep 2018 20:09:29 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 20 Sep 2018 20:09:29 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-sequence/</guid>
        <description>&lt;p&gt;佳媛姐姐过生日的时候，她的小伙伴从某宝上买了一个有趣的玩具送给他。玩具上有一个数列，数列中某些项的值可能会变化，但同一个时刻最多只有一个值发生变化。&lt;/p&gt;
&lt;p&gt;现在佳媛姐姐已经研究出了所有变化的可能性，她想请教你，能否选出一个子序列，使得在任意一种变化中，这个子序列都是不降的？请你告诉她这个子序列的最长长度即可 。&lt;/p&gt;
&lt;p&gt;注意：每种变化最多只有一个值发生变化。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>CDQ分治</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」拦截导弹-CDQ分治优化dp</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-missile/</link>
        <pubDate>Thu, 20 Sep 2018 20:08:40 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 20 Sep 2018 20:08:40 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-missile/</guid>
        <description>&lt;p&gt;某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度、并且能够拦截任意速度的导弹，但是以后每一发炮弹都不能高于前一发的高度，其拦截的导弹的飞行速度也不能大于前一发。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。&lt;/p&gt;
&lt;p&gt;在不能拦截所有的导弹的情况下，我们当然要选择使国家损失最小、也就是拦截导弹的数量最多的方案。但是拦截导弹数量的最多的方案有可能有多个，如果有多个最优方案，那么我们会随机选取一个作为最终的拦截导弹行动蓝图。&lt;/p&gt;
&lt;p&gt;我方间谍已经获取了所有敌军导弹的高度和速度，你的任务是计算出在执行上述决策时，每枚导弹被拦截掉的概率。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>CDQ分治</category>
            
          
            
              <category>树状数组</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「AHOI2013」作业-莫队</title>
        <link>https://blog.chenqiqian.com/posts/ahoi2013-homework/</link>
        <pubDate>Sat, 15 Sep 2018 22:38:10 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 15 Sep 2018 22:38:10 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/ahoi2013-homework/</guid>
        <description>&lt;p&gt;给定了一个长度为 $n$ 的数列和 $m$ 个询问。&lt;/p&gt;
&lt;p&gt;每个询问给定数列的一个区间 $[l,r]$ ，你要回答两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该区间内大于等于 $a$ ，小于等于 $b$ 的数的个数，&lt;/li&gt;
&lt;li&gt;所有大于等于 $a$ ，小于等于 $b$ 的，且在该区间中出现过的数值的个数。&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>莫队</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2007」余数求和-数论&#43;分块</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2007-sum/</link>
        <pubDate>Sat, 15 Sep 2018 22:24:04 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 15 Sep 2018 22:24:04 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2007-sum/</guid>
        <description>&lt;p&gt;给出正整数 $n$ 和 $k$ ，计算&lt;br /&gt;
$$&lt;br /&gt;
\sum_{i=1}^{n} k \bmod i&lt;br /&gt;
$$&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>分块</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2018」破解D-H协议-BSGS算法</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2018-crack/</link>
        <pubDate>Fri, 14 Sep 2018 22:43:37 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 14 Sep 2018 22:43:37 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2018-crack/</guid>
        <description>&lt;p&gt;简单题意：&lt;/p&gt;
&lt;p&gt;给定一个质数 $P$ 和其原根 $g$，给定 $X$ 求 $g^x \equiv X \pmod p$ 的非负整数解 $x$。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>数论</category>
            
          
            
              <category>BSGS算法</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2018」异或序列-莫队</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2018-xor-sequence/</link>
        <pubDate>Fri, 14 Sep 2018 22:11:20 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 14 Sep 2018 22:11:20 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2018-xor-sequence/</guid>
        <description>&lt;p&gt;已知一个长度为 $n$ 的整数数列 $a_1,a_2,&amp;hellip;,a_n$ ，给定查询参数 $l$ 、 $r$ ，问在 $a_l,a_{l+1},&amp;hellip;,a_r$ ​区间内，有多少子序列满足异或和等于 $k$ 。也就是说，对于所有的 $x,y$ $(l \leq x \leq y \leq r)$ ，能够满足 $a_x \bigoplus a_{x+1} \bigoplus &amp;hellip; \bigoplus a_y = k$ 的 $x,y$ 有多少组。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>莫队</category>
            
          
            
              <category>分块</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JSOI2007」字符加密-后缀数组</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2007-character/</link>
        <pubDate>Tue, 11 Sep 2018 21:13:17 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 11 Sep 2018 21:13:17 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2007-character/</guid>
        <description>&lt;p&gt;喜欢钻研问题的 $JS$ 同学，最近又迷上了对加密方法的思考。一天，他突然想出了一种他认为是终极的加密办法：把需要加密的信息排成一圈，显然，它们有很多种不同的读法。&lt;/p&gt;
&lt;p&gt;例如 &lt;code&gt;JSOI07&lt;/code&gt; ，可以读作： &lt;code&gt;JSOI07&lt;/code&gt; &lt;code&gt;SOI07J&lt;/code&gt; &lt;code&gt;OI07JS&lt;/code&gt; &lt;code&gt;I07JSO&lt;/code&gt; &lt;code&gt;07JSOI&lt;/code&gt; &lt;code&gt;7JSOI0&lt;/code&gt; ，把它们按照字符串的大小排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;07JSOI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;7JSOI0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I07JSO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSOI07&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OI07JS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOI07J&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读出最后一列字符：&lt;code&gt;I0O7SJ&lt;/code&gt;，就是加密后的字符串。 但是，如果想加密的字符串实在太长，你能写一个程序完成这个任务吗？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>后缀数组</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」计算器-快速幂&#43;扩展欧几里得&#43;BSGS算法</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-calculator/</link>
        <pubDate>Tue, 11 Sep 2018 20:54:56 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 11 Sep 2018 20:54:56 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-calculator/</guid>
        <description>&lt;p&gt;你被要求设计一个计算器完成以下三项任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;给定 $y,z,p$ ，计算 $y^z \bmod p$ 的值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定 $y,z,p$ ，计算满足 $xy \equiv z \pmod p$ 的最小非负整数 $x$；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给定 $y,z,p$ ，计算满足 $y^x \equiv z \pmod p$ 的最小非负整数 $x$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;保证 $p$ 为质数。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数论</category>
            
          
            
              <category>快速幂</category>
            
          
            
              <category>扩展欧几里得</category>
            
          
            
              <category>BSGS算法</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2013」随机数生成器-BSGS算法</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2013-random/</link>
        <pubDate>Tue, 11 Sep 2018 20:54:20 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 11 Sep 2018 20:54:20 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2013-random/</guid>
        <description>&lt;p&gt;小 $W$ 喜欢读书，尤其喜欢读《约翰克里斯朵夫》。最近小W准备读一本新书，这本书一共有 $P$ 页，页码范围为 $0 &amp;hellip; P-1$。&lt;/p&gt;
&lt;p&gt;小 $W$ 很忙，所以每天只能读一页书。为了使事情有趣一些，他打算使用 $\text{NOI2012}$ 上学习的线性同余法生成一个序列，来决定每天具体读哪一页。&lt;/p&gt;
&lt;p&gt;我们用 $X_i$ 来表示通过这种方法生成出来的第 $i$ 个数，也即小 $W$ 第 $i$ 天会读哪一页。这个方法需要设置 $3$ 个参数 $a,b,X_1$ ，满足 $0 \leq a,b,X_1 \leq p-1$ ，且 $a,b,X_1$ 都是整数。按照下面的公式生成出来一系列的整数：$X_{i+1} =(aX_i+b)\bmod p$ 其中 $\bmod$ 表示取余操作。&lt;/p&gt;
&lt;p&gt;但是这种方法可能导致某两天读的页码一样。&lt;/p&gt;
&lt;p&gt;小 $W$ 要读这本书的第 $t$ 页，所以他想知道最早在哪一天能读到第 $t$ 页，或者指出他永远不会读到第 $t$ 页。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数论</category>
            
          
            
              <category>BSGS算法</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2008」仪仗队-欧拉函数</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2008-guard/</link>
        <pubDate>Sun, 09 Sep 2018 20:29:47 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 09 Sep 2018 20:29:47 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2008-guard/</guid>
        <description>&lt;p&gt;作为体育委员， $C$ 君负责这次运动会仪仗队的训练。仪仗队是由学生组成的 $N \times N$ 的方阵，为了保证队伍在行进中整齐划一， $C$ 君会跟在仪仗队的左后方，根据其视线所及的学生人数来判断队伍是否整齐(如下图)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在， $C$ 君希望你告诉他队伍整齐时能看到的学生人数。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>数论</category>
            
          
            
              <category>欧拉函数</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2004」L语言-AC自动机</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2004-language/</link>
        <pubDate>Sun, 09 Sep 2018 20:11:35 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 09 Sep 2018 20:11:35 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2004-language/</guid>
        <description>&lt;p&gt;一段文章 $T$ 是由若干小写字母构成。一个单词 $W$ 也是由若干小写字母构成。一个字典 $D$ 是若干个单词的集合。我们称一段文章 $T$ 在某个字典 $D$ 下是可以被理解的，是指如果文章 $T$ 可以被分成若干部分，且每一个部分都是字典 $D$ 中的单词。&lt;/p&gt;
&lt;p&gt;给定一个字典 $D$ ，你的程序需要判断若干段文章在字典 $D$ 下是否能够被理解。并给出其在字典 $D$ 下能够被理解的最长前缀的位置。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>AC自动机</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HEOI2016/TJOI2016」排序-线段树</title>
        <link>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-sort/</link>
        <pubDate>Wed, 29 Aug 2018 10:38:45 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 29 Aug 2018 10:38:45 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/heoi2016-tjoi2016-sort/</guid>
        <description>&lt;p&gt;在 $2016$ 年，佳媛姐姐喜欢上了数字序列。因而他经常研究关于序列的一些奇奇怪怪的问题，现在他在研究一个难题，需要你来帮助他。这个难题是这样子的：给出一个 $1$ 到 $n$ 的全排列，现在对这个全排列序列进行 $m$ 次局部排序，排序分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(0,l,r)$表示将区间 $[l,r]$ 的数字升序排序&lt;/li&gt;
&lt;li&gt;$(1,l,r)$表示将区间 $[l,r]$ 的数字降序排序&lt;br /&gt;
最后询问第 $q$ 位置上的数字。&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>线段树</category>
            
          
            
              <category>排序</category>
            
          
            
              <category>二分答案</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SHOI2016」随机序列-线段树</title>
        <link>https://blog.chenqiqian.com/posts/shoi2016-sequence/</link>
        <pubDate>Sat, 18 Aug 2018 20:14:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 18 Aug 2018 20:14:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/shoi2016-sequence/</guid>
        <description>&lt;p&gt;你的面前有 $n$ 个数排成一行，分别为 $a_1,a_2,&amp;hellip;,a_n$ 。你打算在每相邻的两个 $a_i$c和 $a_{i+1}$ 间都插入一个加号、减号或者乘号。那么一共有 $3^{n-1}$ 种可能的表达式。&lt;/p&gt;
&lt;p&gt;你对所有可能的表达式的值的和非常感兴趣。但这毕竟太简单了，所以你还打算支持一个修改操作，可以修改某个 $a_i$ 的值。&lt;/p&gt;
&lt;p&gt;你能够编写一个程序对每个修改都输出修改完之后所有可能表达式的和吗？注意，修改是永久的，也就是说每次修改都是在上一次修改的基础上进行，而不是在最初的表达式上进行。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>线段树</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2012」小蓝的好友-Treap</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2012-friend/</link>
        <pubDate>Thu, 16 Aug 2018 21:24:02 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 16 Aug 2018 21:24:02 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2012-friend/</guid>
        <description>&lt;p&gt;简单版题意：&lt;/p&gt;
&lt;p&gt;给定一个 $R \times C$ 的矩形，在其中 $N$ 个位置有&lt;strong&gt;随机生成&lt;/strong&gt;的资源点。现在请你求出在所有的子矩形中，至少包含一个资源点的矩形数量。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>Treap</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JSOI2007」文本生成器-AC自动机&#43;dp</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2007-generator/</link>
        <pubDate>Sat, 11 Aug 2018 19:27:37 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 11 Aug 2018 19:27:37 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2007-generator/</guid>
        <description>&lt;p&gt;可读版题意：&lt;/p&gt;
&lt;p&gt;给定 $n$ 个仅包含大写字母的模板串，求所有的长度为 $M$ 且仅包含大写字母的不同字符串中，有多少个包含至少一个模板串。答案对 $10007$ 取模。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>AC自动机</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「TJOI2013」单词-后缀数组&#43;二分</title>
        <link>https://blog.chenqiqian.com/posts/tjoi2013-word/</link>
        <pubDate>Sat, 11 Aug 2018 19:24:27 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 11 Aug 2018 19:24:27 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/tjoi2013-word/</guid>
        <description>&lt;p&gt;可读版题意：&lt;/p&gt;
&lt;p&gt;给定 $n$ 个字符串，第 $i$ 个字符串的长度为 $M_i$ ，求每个字符串在所有字符串中出现的次数。&lt;/p&gt;
&lt;p&gt;数据范围：$n \leq 100,\ M = \sum M_i \leq 10^6$.&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>后缀数组</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2008」GT考试-KMP&#43;dp&#43;矩阵快速幂</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2008-gtexams/</link>
        <pubDate>Thu, 09 Aug 2018 11:19:09 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 09 Aug 2018 11:19:09 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2008-gtexams/</guid>
        <description>&lt;p&gt;阿申准备报名参加 $GT$ 考试，准考证号为 $n$ 位数 $X_1X_2\cdots X_n(0\le X_i\le 9)$，他不希望准考证号上出现不吉利的数字。&lt;/p&gt;
&lt;p&gt;他的不吉利数字 $A_1A_2\cdots A_m(0\le A_i\le 9)$ 有 $m$ 位，不出现是指 $X_1X_2\cdots X_n$ 中没有恰好一段等于 $A_1A_2\cdots A_m$，$A_1$​ 和 $X_1$ 可以为 $0$。&lt;/p&gt;
&lt;p&gt;阿申想知道不出现不吉利数字的号码有多少种，输出模 $K$ 取余的结果。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>KMP</category>
            
          
            
              <category>矩阵快速幂</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2009」HH去散步-矩阵快速幂&#43;dp</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2009-walk/</link>
        <pubDate>Thu, 09 Aug 2018 10:41:45 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 09 Aug 2018 10:41:45 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2009-walk/</guid>
        <description>&lt;p&gt;&lt;code&gt;HH&lt;/code&gt; 是个喜欢变化的人，所以他不会立刻沿着刚刚走来的路走回。 又因为 &lt;code&gt;HH&lt;/code&gt; 是个喜欢变化的人，所以他每天走过的路径都不完全一样，他想知道他究竟有多少种散步的方法。&lt;/p&gt;
&lt;p&gt;现在给你学校的地图（假设每条路的长度都是一样的都是 $1$ ），问长度为 $t$ ，从给定地点 $A$ 走到给定地点 $B$ 共有多少条符合上述条件的路径。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>矩阵快速幂</category>
            
          
            
              <category>动态规划</category>
            
          
            
              <category>图论</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2012」网络-LCT</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2012-network/</link>
        <pubDate>Fri, 03 Aug 2018 19:41:40 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 03 Aug 2018 19:41:40 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2012-network/</guid>
        <description>&lt;p&gt;有一个无向图 $G$ ，每个点有个权值，每条边有一个颜色。这个无向图满足以下两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任意节点连出去的边中，相同颜色的边不超过两条。&lt;/li&gt;
&lt;li&gt;图中不存在同色的环，同色的环指相同颜色的边构成的环。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个图上，你要支持以下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改一个节点的权值。&lt;/li&gt;
&lt;li&gt;修改一条边的颜色。&lt;/li&gt;
&lt;li&gt;查询由颜色 $c$ 的边构成的图中， $u$ 到节点 $v$ 之间的简单路径上的节点的权值的最大值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 100% 的数据，保证颜色不多于 $10$ 种。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>树形结构</category>
            
          
            
              <category>LCT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2008」奖励关-期望dp</title>
        <link>https://blog.chenqiqian.com/posts/scoi2008-award/</link>
        <pubDate>Fri, 03 Aug 2018 19:39:32 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 03 Aug 2018 19:39:32 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2008-award/</guid>
        <description>&lt;p&gt;系统将依次随机抛出 $k$ 次宝物，每次你都可以选择吃或者不吃。宝物一共有 $n$ 种，系统每次抛出这 $n$ 种宝物的概率都相同且相互独立。&lt;/p&gt;
&lt;p&gt;吃一次第 $i$ 种宝物将得到 $P_i$ 分，但并不是每种宝物都是可以随意获取的。第 $i$ 种宝物有一个前提宝物集合 $S_i$ 。只有当 $S_i$ 中所有宝物都至少吃过一次，才能吃第 $i$ 种宝物。注意，$P_i$ 可以是负数。&lt;/p&gt;
&lt;p&gt;假设你采取最优策略，平均情况你一共能在奖励关得到多少分值？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>期望dp</category>
            
          
        
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JLOI2015」城池攻占-左偏树</title>
        <link>https://blog.chenqiqian.com/posts/jloi2015-fail/</link>
        <pubDate>Sat, 21 Jul 2018 20:45:52 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 21 Jul 2018 20:45:52 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jloi2015-fail/</guid>
        <description>&lt;p&gt;有 $m$ 个骑士攻占 $n$ 个城池。除 $1$ 号城池外，城池 $i$ 会受到另一座城池 $f_i$ 的管辖，其中 $f_i &amp;lt; i$。也就是说，所有城池构成了一棵有根树。第 $i$ 个骑士的初始战斗力为 $s_i$，第一个攻击的城池为 $c_i$。&lt;/p&gt;
&lt;p&gt;每个城池有一个防御值 $h_i$，如果一个骑士的战斗力大于等于城池的生命值，那么骑士就可以占领这座城池；否则占领失败，骑士将在这座城池牺牲。占领一个城池以后，骑士的战斗力将发生变化，然后继续攻击管辖这座城池的城池，直到占领 $1$ 号城池，或牺牲为止。&lt;/p&gt;
&lt;p&gt;除 $1$ 号城池外，每个城池 $i$ 会给出一个战斗力变化参数 $a_i$;$v_i$。若 $a_i = 0$，攻占城池 $i$ 以后骑士战斗力会增加 $v_i$；若 $a_i = 1$，攻占城池 $i$ 以后，战斗力会乘以 $v_i$。注意每个骑士是单独计算的。也就是说一个骑士攻击一座城池，不管结果如何，均不会影响其他骑士攻击这座城池的结果。&lt;/p&gt;
&lt;p&gt;对于每个城池，输出有多少个骑士在这里牺牲；对于每个骑士，输出他攻占的城池数量。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>左偏树</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2013」游走-期望方程</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2013-walk/</link>
        <pubDate>Thu, 19 Jul 2018 20:07:48 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 19 Jul 2018 20:07:48 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2013-walk/</guid>
        <description>&lt;p&gt;一个无向连通图，顶点从 $1$ 编号到 $N$ ，边从 $1$ 编号到 $M$ 。 小 Z 在该图上进行随机游走，初始时小 Z 在 $1$ 号顶点，每一步小 Z 以相等的概率随机选 择当前顶点的某条边，沿着这条边走到下一个顶点，获得等于这条边的编号的分数。当小 Z 到达 N 号顶点时游走结束，总分为所有获得的分数之和。 现在，请你对这 $M$ 条边进行编号，使得小 Z 获得的总分的期望值最小。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>期望</category>
            
          
            
              <category>高斯消元</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SHOI2012」随机树-期望dp</title>
        <link>https://blog.chenqiqian.com/posts/shoi2012-tree/</link>
        <pubDate>Thu, 19 Jul 2018 20:07:12 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 19 Jul 2018 20:07:12 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/shoi2012-tree/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;题面以图片显示，请点击“阅读全文”查看。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数学</category>
            
          
            
              <category>期望</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HAOI2012」高速公路-期望&#43;线段树</title>
        <link>https://blog.chenqiqian.com/posts/haoi2012-highway/</link>
        <pubDate>Thu, 19 Jul 2018 20:06:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 19 Jul 2018 20:06:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/haoi2012-highway/</guid>
        <description>&lt;p&gt;&lt;code&gt;Y901&lt;/code&gt; 高速公路是一条由 $N-1$ 段路以及 $N$ 个收费站组成的东西向的链，我们按照由西向东的顺序将收费站依次编号为 $1 \sim N$ ，从收费站 $i$ 行驶到 $i+1$ (或从 $i+1$ 行驶到 $i$ )需要收取 $V_i$ 的费用。高速路刚建成时所有的路段都是免费的。&lt;/p&gt;
&lt;p&gt;政府部门根据实际情况，会不定期地对连续路段的收费标准进行调整，根据政策涨价或降价。&lt;/p&gt;
&lt;p&gt;求对于给定的 $l,r(l &amp;lt; r)$ ，在第 $l$ 个到第 $r$ 个收费站里等概率随机取出两个不同的收费站 $a$ 和 $b$ ，那么从 $a$ 行驶到 $b$ 将期望花费多少费用呢?&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>线段树</category>
            
          
            
              <category>数学</category>
            
          
            
              <category>期望</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2014」力-快速傅立叶变换</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2014-force/</link>
        <pubDate>Thu, 19 Jul 2018 18:00:39 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 19 Jul 2018 18:00:39 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2014-force/</guid>
        <description>&lt;p&gt;给出 $n$ 个数 $q_i$ ，给出 $F_j$ 定义为：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
F_j = \sum_{i &amp;lt; j}\frac{q_i q_j}{(i-j)^2} - \sum_{i &amp;gt; j}\frac{q_i q_j}{(i-j)^2}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;令 $E_i = \frac{F_i}{q_i}$ ，求 $E_i$ 的值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>快速傅立叶变换</category>
            
          
            
              <category>数学</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2010」股票交易-dp&#43;单调队列</title>
        <link>https://blog.chenqiqian.com/posts/scoi2010-stock/</link>
        <pubDate>Sun, 08 Jul 2018 10:56:37 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sun, 08 Jul 2018 10:56:37 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2010-stock/</guid>
        <description>&lt;p&gt;&lt;code&gt;lxhgww&lt;/code&gt;预测到了未来 $T$ 天内某只股票的走势，第 $i$ 天的股票买入价为每股 $AP_i$ ，第 $i$ 天的股票卖出价为每股 $BP_i$ （数据保证对于每个 $i$ ，都有$AP_i \ge BP_i$ ），第$i$ 天的一次买入至多只能购买 $AS_i$ 股，一次卖出至多只能卖出 $BS_i$ 股。两次交易（某一天的买入或者卖出均算是一次交易）之间，至少要间隔 $W$ 天；在任何时间一个人的手里的股票数不能超过 $MaxP$ 。&lt;/p&gt;
&lt;p&gt;在第 $1$ 天之前，&lt;code&gt;lxhgww&lt;/code&gt;手里有数目无限的钱，但是没有任何股票，在 $T$ 天以后， &lt;code&gt;lxhgww&lt;/code&gt; 能赚到的钱最多是多少？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>单调队列</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HAOI2016」找相同字符-后缀数组&#43;单调栈</title>
        <link>https://blog.chenqiqian.com/posts/haoi2016-same/</link>
        <pubDate>Wed, 04 Jul 2018 20:39:30 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 04 Jul 2018 20:39:30 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/haoi2016-same/</guid>
        <description>&lt;p&gt;给定两个字符串，求出在两个字符串中各取出一个子串使得这两个子串相同的方案数。当这两个子串中只要有一个取得位置不同时，两个方案不同。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>单调栈</category>
            
          
            
              <category>后缀数组</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「TJOI2017」DNA-后缀数组</title>
        <link>https://blog.chenqiqian.com/posts/tjoi2017-dna/</link>
        <pubDate>Sat, 23 Jun 2018 20:43:31 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 23 Jun 2018 20:43:31 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/tjoi2017-dna/</guid>
        <description>&lt;p&gt;加里敦大学的生物研究所发现了决定人喜不喜欢吃藕的基因序列 $S$ ,有这个序列的碱基序列就会表现出喜欢吃藕的性状，但是研究人员发现对碱基序列 $S$ ,任意修改其中不超过 $3$ 个碱基，依然能够表现出吃藕的性状。现在研究人员想知道这个基因在 DNA 链 $S0$ 上的位置。所以你需要统计在一个表现出吃藕性状的人的 DNA 序列 $S0$ 上，有多少个连续子串可能是该基因，即有多少个 $S0$ 的连续子串修改小于等于三个字母能够变成 $S$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>字符串</category>
            
          
            
              <category>后缀数组</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2016」手机号码-数位dp</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2016-phone/</link>
        <pubDate>Tue, 19 Jun 2018 21:59:36 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Tue, 19 Jun 2018 21:59:36 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2016-phone/</guid>
        <description>&lt;p&gt;手机号码是一个有 $11$ 位且不含前导 $0$ 的数。满足条件手机号码的必须&lt;strong&gt;同时&lt;/strong&gt;满足：号码中出现至少 $3$ 个相邻的相同数字；号码中不能同时出现 $8$ 和 $4$ 。&lt;/p&gt;
&lt;p&gt;给定两个数 $L$ 和 $R$ ，统计出 $[L,R]$区间内所有满足条件的手机号码的个数。 $L$ 和 $R$ 都是符合定义的手机号码。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数位dp</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2010」数字计数-数位dp</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2010-count/</link>
        <pubDate>Mon, 18 Jun 2018 09:35:53 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 18 Jun 2018 09:35:53 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2010-count/</guid>
        <description>&lt;p&gt;给定两个正整数 $a$ 和 $b$ ，求在 $[a,b]$ 中的所有整数中，每个数码(&lt;code&gt;digit&lt;/code&gt;)各出现了多少次。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数位dp</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「JSOI2016」最佳团体-树上背包&#43;0/1分数规划</title>
        <link>https://blog.chenqiqian.com/posts/jsoi2016-team/</link>
        <pubDate>Mon, 18 Jun 2018 09:34:03 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 18 Jun 2018 09:34:03 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/jsoi2016-team/</guid>
        <description>&lt;p&gt;&lt;code&gt;JSOI&lt;/code&gt; 信息学代表队一共有 $N$ 名候选人，这些候选人从 $1$ 到 $N$ 编号。方便起见，&lt;code&gt;JYY&lt;/code&gt; 的编号是 $0$ 号。每个候选人都由一位编号比他小的候选人$R_i$推荐。如果 $R_i = 0$ ，则说明这个候选人是 &lt;code&gt;JYY&lt;/code&gt; 自己看上的。&lt;/p&gt;
&lt;p&gt;为了保证团队的和谐，&lt;code&gt;JYY&lt;/code&gt; 需要保证，如果招募了候选人 $i$，那么候选人 $R_i$ 也一定需要在团队中。当然了，&lt;code&gt;JYY&lt;/code&gt; 自己总是在团队里的。每一个候选人都有一个战斗值 $P_i$ ，也有一个招募费用 $S_i$。&lt;code&gt;JYY&lt;/code&gt; 希望招募 $K$ 个候选人（&lt;code&gt;JYY&lt;/code&gt; 自己不算），组成一个性价比最高的团队。也就是，这 $K$ 个被 &lt;code&gt;JYY&lt;/code&gt; 选择的候选人的总战斗值与总招募费用的比值最大。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>0/1分数规划</category>
            
          
            
              <category>树形结构</category>
            
          
            
              <category>树形dp</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2015」小凸玩密室-树形dp</title>
        <link>https://blog.chenqiqian.com/posts/scoi2015-room/</link>
        <pubDate>Fri, 08 Jun 2018 16:08:09 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 08 Jun 2018 16:08:09 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2015-room/</guid>
        <description>&lt;p&gt;小凸和小方相约玩密室逃脱，这个密室是一棵有 $n$ 个节点的完全二叉树，每个节点有一个灯泡。点亮所有灯泡即可逃出密室。&lt;/p&gt;
&lt;p&gt;每个灯泡有个权值 $a_i$ ，每条边也有个权值 $b_i$ 。点亮第 $1$ 个灯泡不需要花费，之后每点亮 $1$ 个新的灯泡 $v$ 的花费，等于上一个被点亮的灯泡 $u$ 到这个点 $v$ 的距离 $D_{u,v}$ ，乘以这个点的权值 $a_v$ 。在点灯的过程中，要保证任意时刻所有被点亮的灯泡**必须连通**，在点亮一个灯泡后**必须先点亮其子树所有灯泡才能点亮其他灯泡**。&lt;/p&gt;
&lt;p&gt;请告诉他们，逃出密室的最少花费是多少。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2011」动态逆序对-CDQ分治</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2011-inverse/</link>
        <pubDate>Thu, 07 Jun 2018 20:58:32 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 07 Jun 2018 20:58:32 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2011-inverse/</guid>
        <description>&lt;p&gt;对于序列 $A$ ，它的逆序对数定义为满足 $i&amp;lt;j$ ，且 $A_i&amp;gt;A_j$ 的数对 $(i,j)$ 的个数。&lt;br /&gt;
给出一个 $1$ 到 $n$ 的排列，按照某种顺序依次删除 $m$ 个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>CDQ分治</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2013」K大数查询-整体二分</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2013-kth/</link>
        <pubDate>Wed, 06 Jun 2018 19:17:02 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 06 Jun 2018 19:17:02 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2013-kth/</guid>
        <description>&lt;p&gt;有 $N$ 个位置， $M$ 个操作。&lt;/p&gt;
&lt;p&gt;操作有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是 &lt;code&gt;1 a b c&lt;/code&gt; 的形式表示在第 $a$ 个位置到第 $b$ 个位置，每个位置加入一个数 $c$ ；&lt;/li&gt;
&lt;li&gt;如果是 &lt;code&gt;2 a b c&lt;/code&gt; 形式，表示询问从第 $a$ 个位置到第 $b$ 个位置，第 $c$ 大的数是多少。&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>整体二分</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HAOI2009」毛毛虫-树形dp</title>
        <link>https://blog.chenqiqian.com/posts/haoi2009-worm/</link>
        <pubDate>Wed, 06 Jun 2018 19:08:55 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 06 Jun 2018 19:08:55 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/haoi2009-worm/</guid>
        <description>&lt;p&gt;对于一棵树，我们可以将某条链和与该链相连的边抽出来，称其为一个“毛毛虫”。求在这个树中点数最多的毛毛虫的点数。&lt;/p&gt;
&lt;p&gt;$n &amp;lt; 300000$&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>树形dp</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「LNOI2014」LCA-树链剖分-差分</title>
        <link>https://blog.chenqiqian.com/posts/lnoi2014-lca/</link>
        <pubDate>Sat, 02 Jun 2018 21:23:25 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 02 Jun 2018 21:23:25 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/lnoi2014-lca/</guid>
        <description>&lt;p&gt;给出一个 $n$ 个节点的有根树。有 $q$ 次询问，每次询问给出 $l,r,z$ ，求 $\sum_{l \leq i \leq r}dep[LCA(i,z)]$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>树链剖分</category>
            
          
            
              <category>差分</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2013」多项式的运算-Splay</title>
        <link>https://blog.chenqiqian.com/posts/scoi2013-function/</link>
        <pubDate>Fri, 01 Jun 2018 21:12:47 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 01 Jun 2018 21:12:47 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2013-function/</guid>
        <description>&lt;p&gt;维护一个动态的关于 $x$的无穷多项式 ，这个多项式初始时对于所有 $i$ 有 $a_i = 0$&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
f(x)=a_0x^0+a_1x^1+a_2x^2&amp;hellip;&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;操作者可以进行四种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mul L R V&lt;/code&gt; 表示将 $x^L$ 到 $x^R$ 这些项的系数乘上某个定值 $v$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;add L R V&lt;/code&gt; 表示将 $x^L$ 到 $x^R$ 这些项的系数加上某个定值 $v$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mulx L R&lt;/code&gt; 表示将 $x^L$ 到 $x^R$ 这些项乘上x变量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;query V&lt;/code&gt; 求 $f(v)$ 的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作集中在前三种，第四种操作不会出现超过 $10$ 次。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>Splay</category>
            
          
            
              <category>数据结构</category>
            
          
            
              <category>平衡树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2014」旅行-树链剖分&#43;动态开点线段树</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2014-journey/</link>
        <pubDate>Thu, 24 May 2018 20:38:27 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 24 May 2018 20:38:27 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2014-journey/</guid>
        <description>&lt;p&gt;给定一棵 $n$ 个节点的树，对于每个点都有两个权值 $w_i,c_i$ 。&lt;/p&gt;
&lt;p&gt;存在 $m$ 个操作，分为4类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;“&lt;code&gt;CC x c&lt;/code&gt;”：将 $c_x$ 更改为 $c$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;code&gt;CW x w&lt;/code&gt;”：将 $w_x$ 更改为 $w$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;code&gt;QS x y&lt;/code&gt;”：对所有满足在 $x$ 到 $y$ 路径上且 $c_i = c_x = c_y$ 的节点 $i$，求 $\sum w_i$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;code&gt;QM x y&lt;/code&gt;”：对所有满足在 $x$ 到 $y$ 路径上且 $c_i = c_x = c_y$ 的节点 $i$ ，求 $\max(w_i)$ ；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于后两个操作，保证 $c_x = c_y$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>线段树</category>
            
          
            
              <category>树链剖分</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」消防-树的直径&#43;单调队列</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-fireman/</link>
        <pubDate>Mon, 21 May 2018 20:11:00 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 21 May 2018 20:11:00 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-fireman/</guid>
        <description>&lt;p&gt;某个国家有 $n$ 个城市，这 $n$ 个点之间的边构成一棵树。&lt;/p&gt;
&lt;p&gt;现求一条边长度和不超过 $S$ 的路径（两端都是城市，可以只为一个城市），使得所有城市到这条路径的距离的最大值最小，并输出这个最小值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>单调队列</category>
            
          
            
              <category>树的直径</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2013」森林-主席树&#43;LCA&#43;启发式合并</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2013-forest/</link>
        <pubDate>Mon, 21 May 2018 20:10:00 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 21 May 2018 20:10:00 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2013-forest/</guid>
        <description>&lt;p&gt;小Z有一片森林，含有 $N$ 个节点，每个节点上都有一个非负整数作为权值。初始的时候，森林中有 $M$ 条边。&lt;/p&gt;
&lt;p&gt;小Z希望执行 $T$ 个操作，操作有两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Q x y k&lt;/code&gt; 查询点 $x$ 到点 $y$ 路径上所有的权值中，第 $k$ 小的权值是多少。此操作保证点 $x$ 和点 $y$ 连通，同时这两个节点的路径上至少有 $k$ 个点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;L x y&lt;/code&gt; 在点 $x$ 和点 $y$ 之间连接一条边。保证完成此操作后，仍然是一片森林。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强制在线。&lt;/p&gt;
&lt;p&gt;对于所有的数据 $n,m,T \leq 8 \times 10^4$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>可持久化线段树</category>
            
          
            
              <category>最近公共祖先</category>
            
          
            
              <category>启发式合并</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2009」梦幻布丁-set-启发式合并</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2009-pudding/</link>
        <pubDate>Mon, 21 May 2018 20:08:18 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 21 May 2018 20:08:18 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2009-pudding/</guid>
        <description>&lt;p&gt;$n$ 个布丁摆成一行，每个布丁最开始都有一个颜色 $c_i$ ，进行 $m$ 次操作。&lt;/p&gt;
&lt;p&gt;操作格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1 c d&lt;/code&gt; ：将所有的 $c$ 颜色替换为$d$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2&lt;/code&gt; ：查询当前布丁序列一共有多少段颜色。例如颜色分别为 $1,2,2,1$ 的四个布丁一共有3段颜色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>启发式合并</category>
            
          
            
              <category>set</category>
            
          
            
              <category>平衡树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HNOI2010」弹飞绵羊-动态树</title>
        <link>https://blog.chenqiqian.com/posts/hnoi2010-bounce/</link>
        <pubDate>Fri, 18 May 2018 18:52:39 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 18 May 2018 18:52:39 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/hnoi2010-bounce/</guid>
        <description>&lt;p&gt;游戏一开始，&lt;code&gt;Lostmonkey&lt;/code&gt; 在地上沿着一条直线摆上 $n$ 个装置，每个装置设定初始弹力系数 $K_i$ ，当绵羊达到第 $i$ 个装置时，它会往后弹 $K_i$ 步，达到第 $i+K_i$ 个装置，若不存在第 $i+K_i$ 个装置，则绵羊被弹飞。&lt;/p&gt;
&lt;p&gt;存在两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询在第 $i$ 个装置起步时，再经多少次会被弹飞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改第 $i$ 个装置的弹力系数为 $K&#39;$ 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保证任何时候，任何装置弹力系数均为正整数。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>LCT</category>
            
          
            
              <category>数据结构</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「HAOI2007」理想的正方形-单调队列</title>
        <link>https://blog.chenqiqian.com/posts/haoi2007-square/</link>
        <pubDate>Fri, 18 May 2018 18:52:06 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 18 May 2018 18:52:06 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/haoi2007-square/</guid>
        <description>&lt;p&gt;有一个 $a \times b$ 的整数组成的矩阵，现请你从中找出一个 $n\times n$ 的正方形区域，使得该区域所有数中的最大值和最小值的差最小，输出这个最小的差值。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>单调队列</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2015」任务查询系统-可持久化线段树</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2015-mission/</link>
        <pubDate>Wed, 16 May 2018 21:16:32 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 16 May 2018 21:16:32 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2015-mission/</guid>
        <description>&lt;p&gt;超级计算机中的任务用三元组 $(S_i,E_i,P_i)$ 描述， $(S_i,E_i,P_i)$ 表示任务运行区间为 $[S_i,E_i]$ ,其优先级为 $P_i$ 。&lt;/p&gt;
&lt;p&gt;给出 $n$ 个任务。随后给出 $m$ 个询问，第 $X_i$ 秒正在运行的任务中，优先级最小的 $K_i$ 个任务的优先级之和是多少。特别的，如果 $K_i$ 大于第 $X_i$ 秒正在运行的任务总数，则直接回答第 $X_i$ 秒正在运行的任务优先级之和。&lt;/p&gt;
&lt;p&gt;强制在线。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>可持久化线段树</category>
            
          
            
              <category>差分</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2008」洞穴勘测-LCT</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2008-cave/</link>
        <pubDate>Sat, 12 May 2018 18:06:09 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 12 May 2018 18:06:09 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2008-cave/</guid>
        <description>&lt;p&gt;辉辉热衷于洞穴勘测。&lt;/p&gt;
&lt;p&gt;辉辉有一台监测仪器可以实时将通道的每一次改变状况，并在辉辉手边的终端机上显示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Connect u v&lt;/code&gt;代表监测到洞穴u和洞穴v之间出现了一条通道，&lt;code&gt;Destroy u v&lt;/code&gt;代表监测到洞穴u和洞穴v之间的通道被毁。&lt;code&gt;Query u v&lt;/code&gt;，代表向监测仪询问此时洞穴u和洞穴v是否连通。&lt;/p&gt;
&lt;p&gt;保证无论通道怎么改变，任意时刻任意两个洞穴之间至多只有一条路径。&lt;/p&gt;
&lt;p&gt;已知在第一条指令显示之前，洞穴群中没有任何通道存在。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>LCT</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2013」直径-树的直径</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2013-diameter/</link>
        <pubDate>Sat, 12 May 2018 18:04:01 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 12 May 2018 18:04:01 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2013-diameter/</guid>
        <description>&lt;p&gt;定义一棵树上最长的路径为树的直径。树的直径可能不唯一。&lt;/p&gt;
&lt;p&gt;给定的一棵 $n$ 个结点的树，求其直径的长度，以及有多少条边满足所有的直径都经过该边。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>树形结构</category>
            
          
            
              <category>树的直径</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SCOI2010」连续攻击游戏-二分图匹配</title>
        <link>https://blog.chenqiqian.com/posts/scoi2010-game/</link>
        <pubDate>Fri, 27 Apr 2018 18:48:55 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 27 Apr 2018 18:48:55 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/scoi2010-game/</guid>
        <description>&lt;p&gt;&lt;code&gt;lxhgww&lt;/code&gt; 最近迷上了一款游戏，在游戏里，他拥有 $n$ 个装备（ $n \le 1000000$ ），每种装备都有 $2$ 个属性，这些属性的值用 $[1,10000]$ 之间的数表示。当他使用某种装备时，他只能使用该装备的某一个属性。并且每种装备最多只能使用一次。&lt;/p&gt;
&lt;p&gt;游戏进行到最后， &lt;code&gt;lxhgww&lt;/code&gt; 遇到了终极 &lt;code&gt;boss&lt;/code&gt; ，这个终极 &lt;code&gt;boss&lt;/code&gt; 很奇怪，攻击他的装备所使用的属性值必须从 $1$ 开始连续递增地攻击，才能对 &lt;code&gt;boss&lt;/code&gt; 产生伤害。现在&lt;code&gt;lxhgww&lt;/code&gt;想知道他最多能连续攻击 &lt;code&gt;boss&lt;/code&gt; 多少次？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>二分图匹配</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2012」交换棋子-费用流</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2012-chess/</link>
        <pubDate>Wed, 25 Apr 2018 23:29:56 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 25 Apr 2018 23:29:56 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2012-chess/</guid>
        <description>&lt;p&gt;有一个 $n$ 行 $m$ 列的黑白棋盘，你每次可以交换两个相邻格子（相邻是指有公共边或公共顶点）中的棋子，最终达到目标状态。要求第 $i$ 行第 $j$ 列的格子只能参与 $m_{i,j}$ 次交换。&lt;/p&gt;
&lt;p&gt;输出仅一行，为最小交换总次数。如果无解，输出 $-1$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」工作安排-费用流</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-arrange/</link>
        <pubDate>Fri, 06 Apr 2018 20:00:38 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 06 Apr 2018 20:00:38 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-arrange/</guid>
        <description>&lt;p&gt;你的公司需要提供 $n$ 类产品，其中第 $i$ 类产品共需要 $C_{i}$ 件。公司共有 $m$ 名员工。员工能够制造的产品种类有所区别，我们用一个由 $0$ 和 $1$ 组成的 $m\times n$ 的矩阵 $\mathbb {A}$ 来描述每名员工能够制造哪些产品。&lt;/p&gt;
&lt;p&gt;对于员工 $i$ ，给出 $S_i$ 。定义他的愤怒值与他制作的产品数量之间的函数是一个 $S_i+1$ 段的分段函数。设 $T_{i,0}=0$,$T_{i,S_{i+1}}=+\infty$ ，那么当他制造第 $[T_{i,j-1}+1,T_{i,j}]$ 件产品时，每件产品会使他的愤怒值增加 $W_{i,j}$ ， $1\leq j\leq S_{i+1}$ 。保证 $0&amp;lt;W_{i,j} &amp;lt; W_{i,j+1}, ; 0 &amp;lt; T_{i,j} &amp;lt; T_{i,j+1}$ 。&lt;/p&gt;
&lt;p&gt;你的任务是制定出一个产品的分配方案，使得订单条件被满足，并且所有员工的愤怒值之和最小。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2010」网络扩容-网络流-费用流</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2010-network/</link>
        <pubDate>Thu, 05 Apr 2018 16:55:11 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 05 Apr 2018 16:55:11 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2010-network/</guid>
        <description>&lt;p&gt;给定一张有向图，每条边都有一个容量 $C$ 和一个扩容费用 $W$ 。这里扩容费用是指将容量扩大 $1$ 所需的费用。&lt;/p&gt;
&lt;p&gt;现在请你编写一个程序求出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在不扩容的情况下， $1$ 到 $N$ 的最大流；&lt;/li&gt;
&lt;li&gt;将 $1$ 到 $N$ 的最大流增加 $K$ 所需的最小扩容费用。&lt;/li&gt;
&lt;/ol&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>费用流</category>
            
          
            
              <category>网络流</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2007」最大半连通子图-强连通分量-dp</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2007-semi-connected/</link>
        <pubDate>Thu, 05 Apr 2018 16:54:05 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 05 Apr 2018 16:54:05 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2007-semi-connected/</guid>
        <description>&lt;p&gt;给定一个有向图 $G$ ，请求出 $G$ 的最大半连通子图拥有的节点数 $K$ ，以及不同的最大半连通子图的数目 $C$ 。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>强连通分量</category>
            
          
            
              <category>动态规划</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「AHOI2008」紧急集合-LCA</title>
        <link>https://blog.chenqiqian.com/posts/ahoi2008-emergency/</link>
        <pubDate>Fri, 23 Mar 2018 22:19:33 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 23 Mar 2018 22:19:33 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/ahoi2008-emergency/</guid>
        <description>&lt;p&gt;给出一颗 $n$ 个节点的无权树， $m$ 次询问，每次给出三个点编号为 $a$ ，$b$ ， $c$  ，询问到这三个点距离最小的点的编号以及其距离和。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>最近公共祖先</category>
            
          
            
              <category>图论</category>
            
          
            
              <category>树形结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2011」染色-树链剖分&#43;线段树</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2011-colour/</link>
        <pubDate>Wed, 14 Mar 2018 21:20:54 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Wed, 14 Mar 2018 21:20:54 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2011-colour/</guid>
        <description>&lt;p&gt;给定一棵有 $n$ 个节点的无根树和 $m$ 个操作，操作有两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将节点 $a$ 到节点 $b$ 路径上所有点都染成颜色 $c$ ；&lt;/li&gt;
&lt;li&gt;询问节点 $a$ 到节点 $b$ 路径上的颜色段数量（连续相同颜色被认为是同一段），&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如“112221”由3段组成：“11”、“222”和“1”。&lt;/p&gt;
&lt;p&gt;请你写一个程序依次完成这 $m$ 个操作。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>树链剖分</category>
            
          
            
              <category>线段树</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2008」树的统计-树链剖分</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2008-count/</link>
        <pubDate>Sat, 10 Mar 2018 21:18:32 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 10 Mar 2018 21:18:32 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2008-count/</guid>
        <description>&lt;p&gt;给定一颗 $n$ 个节点的树，节点编号为 $1$ 到 $n$ ，每个节点都有一个权值 $w_i$ 。&lt;/p&gt;
&lt;p&gt;有以下三种操作或询问：&lt;/p&gt;
&lt;p&gt;I. &lt;code&gt;CHANGE u t&lt;/code&gt; : 把结点 $u$ 的权值改为 $t$&lt;/p&gt;
&lt;p&gt;II. &lt;code&gt;QMAX u v&lt;/code&gt;: 询问从点 $u$ 到点 $v$ 的路径上的节点的最大权值&lt;/p&gt;
&lt;p&gt;III. &lt;code&gt;QSUM u v&lt;/code&gt;: 询问从点 $u$ 到点 $v$ 的路径上的节点的权值和&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>树链剖分</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2007」时态同步-树形dp</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2007-sync/</link>
        <pubDate>Sat, 03 Mar 2018 18:30:16 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 03 Mar 2018 18:30:16 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2007-sync/</guid>
        <description>&lt;p&gt;给定一棵由 $n$ 个节点构成的树。&lt;/p&gt;
&lt;p&gt;在树上存在一个“激发器”，标号为 $s$ 。当激发器工作后，电流会延边传向每一个相邻节点。而中间节点接收到电流后，会将该电流传向与它连接并且尚未接收到电流的节点。对于每条边 $e$ ，电流通过它需要的时间为 $t_e$ ，电流的转发可以认为是在瞬间完成的。最终，激电流将到达一些“终止节点”――接收电流之后不再转发的节点。&lt;/p&gt;
&lt;p&gt;使用一次道具可以使得电流通过某条边的时间增加一个单位。请问最少使用多少次道具才可达到每一个“终止节点”同时收到电流？&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>动态规划</category>
            
          
            
              <category>树形dp</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2007」报表统计-平衡树</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2007-count/</link>
        <pubDate>Sat, 03 Mar 2018 18:29:17 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Sat, 03 Mar 2018 18:29:17 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2007-count/</guid>
        <description>&lt;p&gt;有一个长度为 $n$ 的整数序列，并且有以下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INSERT i k&lt;/code&gt; ：在原数列的第 $i$ 个数后面添加一个新数 $k$ ；如果原数列的第 $i$ 个数已经添加了若干数，则添加在这些数的最后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MIN GAP&lt;/code&gt;：查询相邻两个数的之间差值（绝对值）的最小值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MIN SORT GAP&lt;/code&gt;：查询所有数中最接近的两个数的差值（绝对值）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>Treap</category>
            
          
            
              <category>平衡树</category>
            
          
            
              <category>数据结构</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「ZJOI2009」假期的宿舍-二分图匹配</title>
        <link>https://blog.chenqiqian.com/posts/zjoi2009-vacation/</link>
        <pubDate>Thu, 08 Feb 2018 07:48:00 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Thu, 08 Feb 2018 07:48:00 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/zjoi2009-vacation/</guid>
        <description>&lt;p&gt;有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有 $n$ 个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>图论</category>
            
          
            
              <category>二分图匹配</category>
            
          
            
              <category>Dinic</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「SDOI2009」HH的项链-莫队or树状数组</title>
        <link>https://blog.chenqiqian.com/posts/sdoi2009-necklace/</link>
        <pubDate>Mon, 05 Feb 2018 18:11:47 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Mon, 05 Feb 2018 18:11:47 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/sdoi2009-necklace/</guid>
        <description>&lt;p&gt;给定一个长度为 $n$ 的正整数序列 $A$ ,有 $m$ 次询问在 $[l,r]$ 区间内有多少个不同的数。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>莫队</category>
            
          
            
              <category>树状数组</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      
      <item>
        <title>「CQOI2014」排序机械臂-Splay</title>
        <link>https://blog.chenqiqian.com/posts/cqoi2014-sort/</link>
        <pubDate>Fri, 02 Feb 2018 15:12:44 +0000</pubDate>
        <author>cqqqwq@outlook.com (cqqqwq)</author>
        <atom:modified>Fri, 02 Feb 2018 15:12:44 +0000</atom:modified>
        <guid>https://blog.chenqiqian.com/posts/cqoi2014-sort/</guid>
        <description>&lt;p&gt;维护一个序列，第 $i$ 次操作时寻找第i小的数的所在位置 $P_i$,并将 $(P_{i-1},P_{i}]$ 的区间翻转。&lt;/p&gt;
&lt;p&gt;如果有相同的数，必须保证排序后它们的相对位置关系与初始时相同。&lt;/p&gt;</description>
        
        <dc:creator>cqqqwq</dc:creator>
        
        
        
        
          
            
              <category>数据结构</category>
            
          
            
              <category>平衡树</category>
            
          
            
              <category>Splay</category>
            
          
        
        
          
            
              <category>OI</category>
            
          
            
              <category>题解</category>
            
          
        
        
          
            
              <category>各省省选</category>
            
          
        
      </item>
      

    
  </channel>
</rss>