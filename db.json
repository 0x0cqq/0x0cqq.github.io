{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next-reloaded/source/google10e62edab32bec8a.html","path":"google10e62edab32bec8a.html","modified":0,"renderable":1},{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":0,"renderable":0},{"_id":"source/images/Fibonacci-sequence重要公式证明.pdf","path":"images/Fibonacci-sequence重要公式证明.pdf","modified":0,"renderable":0},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/custom.js","path":"js/src/custom.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/zclip/clipboard.min.js","path":"lib/zclip/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5cb39fd68f390a0069ba52e55beafd650e085336","modified":1515985532000},{"_id":"source/.DS_Store","hash":"6cab0681a06378b4b5004405b06f9b2257683f83","modified":1518339111000},{"_id":"source/robots.txt","hash":"11d1d70eba12d57d572d4ef4faae7787b65becf8","modified":1516455760000},{"_id":"themes/next-reloaded/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1515986136000},{"_id":"themes/next-reloaded/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1515986136000},{"_id":"themes/next-reloaded/.DS_Store","hash":"cc626f2ebbc099d977e7ae9f1ccc77e628edfb28","modified":1517841559000},{"_id":"themes/next-reloaded/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1515986136000},{"_id":"themes/next-reloaded/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1515986136000},{"_id":"themes/next-reloaded/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1515986136000},{"_id":"themes/next-reloaded/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1515986136000},{"_id":"themes/next-reloaded/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1515986136000},{"_id":"themes/next-reloaded/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1515986136000},{"_id":"themes/next-reloaded/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1515986136000},{"_id":"themes/next-reloaded/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1515986136000},{"_id":"themes/next-reloaded/_config.yml","hash":"e9b04173c0590c36a2c358d6adb9a8862e9669af","modified":1517469006000},{"_id":"themes/next-reloaded/README.md","hash":"3d438555ca87b1d247536b3b56fc0672eb001518","modified":1515986136000},{"_id":"themes/next-reloaded/bower.json","hash":"74115626b419f40126e07bb0bbfc5e6ab163f222","modified":1515986136000},{"_id":"themes/next-reloaded/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1515986136000},{"_id":"themes/next-reloaded/package.json","hash":"edcba128994bb34491334db3a49d5c3a50976cf3","modified":1515986136000},{"_id":"source/_posts/2018-FebWeek1.md","hash":"b63d0585428146fa91ead4b968b43091f96be321","modified":1517834140000},{"_id":"source/_posts/.DS_Store","hash":"57b5241c554ae9f51bd414964f95d36ab85b750b","modified":1517841372000},{"_id":"source/_posts/2018-FebWeek2.md","hash":"8acd9ecf49c6308b639b99d712d06e59ec5d7f82","modified":1518342024000},{"_id":"source/_posts/2018-JanWeek2.md","hash":"17222765e5c66a18f3e300119dbabfb3939aea0e","modified":1517462844000},{"_id":"source/_posts/2018-JanWeek3.md","hash":"7de4102d7d898a561da965081dffde2ce1fc4338","modified":1517462866000},{"_id":"source/_posts/2018-JanWeek4-Month1.md","hash":"64f145d473cadcbec2d2c99154ae156ebd432dc4","modified":1517829201000},{"_id":"source/_posts/Dinic学习笔记.md","hash":"89a761e4b80a74b8cda668ab12a5163d3e6fee32","modified":1518075445000},{"_id":"source/_posts/Treap学习笔记.md","hash":"2c65163e01c69517d490e6dace47b2dbfa4fc251","modified":1518075434000},{"_id":"source/_posts/“长大”.md","hash":"bc12808026848dba6cca72610f45fb0bb4150316","modified":1517462678000},{"_id":"source/_posts/「CQOI2014」排序机械臂-Splay.md","hash":"8d1a3f5b20cdc61a5bfdca3e1f732b76ee4c795c","modified":1517828530000},{"_id":"source/_posts/「NOI2002」银河英雄传说-并查集.md","hash":"3e23983563d13b41ef6255cdfefb6bceb7178eaa","modified":1518339065000},{"_id":"source/_posts/「NOI2004」郁闷的出纳员-Splay.md","hash":"499b5f4c60934fdf9c17eb038fed05a580cf4fb3","modified":1517828546000},{"_id":"source/_posts/「SDOI2009」HH的项链-莫队or树状数组.md","hash":"8c18c22ed9a383ba850fee269a18a94837f48e90","modified":1517835368000},{"_id":"source/_posts/「ZJOI2009」假期的宿舍-二分图匹配.md","hash":"7dc38bbb4fcc9ce5a357bd716f34647a90931e1c","modified":1518079993000},{"_id":"source/_posts/「洛谷P1043」数字游戏-dp.md","hash":"86e35f1305c60822082ec982efd9d29a6cccf126","modified":1517828650000},{"_id":"source/_posts/冬令营旅游记.md","hash":"e74c718bd3375e2e3ef5c8e007ec217ddf92fc7b","modified":1517462925000},{"_id":"source/_posts/可能是最简单的线段树介绍.md","hash":"977f2879b6ef3b4dd81ce46a68cdff03f4a1a30b","modified":1517835520000},{"_id":"source/_posts/日常颓废.md","hash":"95f8a2702ee66ffa77386afd21d5d3f2959a4fd7","modified":1517463074000},{"_id":"source/_posts/洛谷大事记.md","hash":"18d8d2750a9371484409d432a579ae4e642a07de","modified":1517835486000},{"_id":"source/_posts/测试一下.md","hash":"aea86f11b9195d2801440602c5684ac846df60b4","modified":1517462893000},{"_id":"source/_posts/考试前要看的东西.md","hash":"155461a0754ff47863128fc1920c815ce22eba38","modified":1517462968000},{"_id":"source/_posts/莫队算法学习笔记（一）.md","hash":"f1093e171598fb5d7c6ed69e68f3aee13e1ba90b","modified":1518075466000},{"_id":"source/_posts/转载-达拉崩吧OI版.md","hash":"82414ba9d8c56308d7a85f0947b2f07c7b491780","modified":1517463180000},{"_id":"source/about/index.md","hash":"5b8748ae51ac231b91ec976679d84336c8f38b78","modified":1517463307000},{"_id":"source/categories/index.md","hash":"902237f2d23251600320cd51e7b6b5913a582e33","modified":1517298698000},{"_id":"source/lsy/index.md","hash":"7f8aab7e9b4d160dd595371a34b5e40c5745c459","modified":1518071291000},{"_id":"source/lsy/test.md","hash":"54eccf2a42d4b798b928a7c12089370239f1deef","modified":1517298723000},{"_id":"source/images/.DS_Store","hash":"1f50934a20a10a22a39a6345cbb2fa1e29a3cd89","modified":1517463479000},{"_id":"source/lsy/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1518071397000},{"_id":"source/tags/index.md","hash":"6183ace982eb53d6a7d2f46bcc7ff07955710fb4","modified":1517298705000},{"_id":"themes/next-reloaded/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1515986136000},{"_id":"themes/next-reloaded/.git/FETCH_HEAD","hash":"49347e815951baf9142b5aa0f134c4d9cac42608","modified":1517314283000},{"_id":"themes/next-reloaded/.git/.DS_Store","hash":"606df85095d4d131632a8f2d8b44edd4a51e7124","modified":1517145616000},{"_id":"themes/next-reloaded/.git/ORIG_HEAD","hash":"f0d6a9cb2bb6c7b1764bc25b9b73cf601fe7bb6d","modified":1516871749000},{"_id":"themes/next-reloaded/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1515986136000},{"_id":"themes/next-reloaded/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515986133000},{"_id":"themes/next-reloaded/.git/index","hash":"6484448868496e3525a026b30258e0ad665b3ba2","modified":1516022002000},{"_id":"themes/next-reloaded/.git/packed-refs","hash":"5f95fcbe278972325333b15e3e19279b40a295df","modified":1515986136000},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"792b4e3c3544d51164e8a414219dc1b388dc65dc","modified":1515986136000},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE.md","hash":"054be54a22f3aea601a29334c7577ffa793f1a48","modified":1515986136000},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1515986136000},{"_id":"themes/next-reloaded/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1515986136000},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1515986136000},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1515986136000},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1515986136000},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"de63aa8466ee8c4d4b418dfbe4e8f27fa117751d","modified":1515986136000},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"01a383fd1d46752d4b4f22047b535127b44adb75","modified":1515986136000},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1515986136000},{"_id":"themes/next-reloaded/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1515986136000},{"_id":"themes/next-reloaded/languages/de.yml","hash":"92964c8ed184fa959a5e2001e7c6d9a07d7a4344","modified":1515986136000},{"_id":"themes/next-reloaded/languages/default.yml","hash":"b39706b2d22696eed6b036f4c90aa5362e331090","modified":1515986136000},{"_id":"themes/next-reloaded/languages/en.yml","hash":"df63017548589b2e567647e08d736c2a7f342b12","modified":1515986136000},{"_id":"themes/next-reloaded/languages/fr-FR.yml","hash":"6ee34c8103a95839207dac1201fef7a8f727d2fc","modified":1515986136000},{"_id":"themes/next-reloaded/languages/id.yml","hash":"60473cc81a871ceb868c97cd3291d602fda1b338","modified":1515986136000},{"_id":"themes/next-reloaded/languages/it.yml","hash":"5a8a29d145dd2cd882d52b3fbb1203c1a3540cbd","modified":1515986136000},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"8a3acfb56dc783f261b640dca662c0ec431fea6f","modified":1515986136000},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"73253087d7754a0213e2ad72de16ab5138b9ba54","modified":1515986136000},{"_id":"themes/next-reloaded/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1515986136000},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"4d017b7b9542050b87a99931dff98889090fc781","modified":1515986136000},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"95585897cd108d5ff15e998cd0acdc0fba5d572c","modified":1515986136000},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"4ba9f4971115bce0213c437158424428e0e13d5a","modified":1515986136000},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1515986136000},{"_id":"themes/next-reloaded/languages/zh-Hans.yml","hash":"3e90e603f108119c812b81178a23615c4184a337","modified":1517143169000},{"_id":"themes/next-reloaded/languages/zh-hk.yml","hash":"54e4aa1d04ccad1e13cf08124fe5f70a930592dd","modified":1515986136000},{"_id":"themes/next-reloaded/languages/zh-tw.yml","hash":"280dd00495e90b8a8c4d9351bab8ae65c78bbe87","modified":1515986136000},{"_id":"themes/next-reloaded/layout/.DS_Store","hash":"086b8bf4cfcda2c07f206c26be3dfc5caebacf03","modified":1517841513000},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"f6cf338ac1dbb6dd152a8a2a48b9e569a7c91e71","modified":1516873232000},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1515986136000},{"_id":"themes/next-reloaded/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1515986136000},{"_id":"themes/next-reloaded/layout/index.swig","hash":"827029a7e76b11961eede0d150544a1fd021f675","modified":1516882810000},{"_id":"themes/next-reloaded/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1515986136000},{"_id":"themes/next-reloaded/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1515986136000},{"_id":"themes/next-reloaded/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1515986136000},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/.DS_Store","hash":"af9991f0be5e2d5b5bb37b716c2feed727b56fcc","modified":1517841483000},{"_id":"themes/next-reloaded/scripts/fold.js","hash":"13312dcfab9461ce20fdfa5038c04b782dff822d","modified":1516872410000},{"_id":"themes/next-reloaded/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags.js","hash":"c56b5e02a76d80f1b57b24ee7757c0e6268f8852","modified":1516872251000},{"_id":"themes/next-reloaded/source/.DS_Store","hash":"659d1f8cf9eed62a3b3277ca5fb7a713edb1ffeb","modified":1517466789000},{"_id":"themes/next-reloaded/source/google10e62edab32bec8a.html","hash":"3068353704dce53a8024b9ddf7937f465fa77249","modified":1515985532000},{"_id":"themes/next-reloaded/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1515986136000},{"_id":"themes/next-reloaded/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1515986136000},{"_id":"themes/next-reloaded/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1515986136000},{"_id":"source/images/2.jpg","hash":"1f58f0ae62c6eccd539169203bd77e53f0bde85e","modified":1518240369000},{"_id":"source/images/Fibonacci-sequence重要公式证明.pdf","hash":"0b40fdc6e385ea107a9856858b11fe6f083dfdb1","modified":1515985532000},{"_id":"themes/next-reloaded/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"source/_posts/Treap学习笔记/lower_upper.gif","hash":"5b772f80578f9289aaff07b5c542a489eb7cfd1f","modified":1517309673000},{"_id":"source/_posts/Treap学习笔记/rotate.gif","hash":"c4b8c9cc66ce68fbaaba6d8ec969f44f0db9680b","modified":1517309048000},{"_id":"source/_posts/「洛谷P1043」数字游戏-dp/description.png","hash":"bb045878d5f4aa1fc9f0579f93cbf94b28929690","modified":1515985532000},{"_id":"themes/next-reloaded/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515986133000},{"_id":"themes/next-reloaded/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515986133000},{"_id":"themes/next-reloaded/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515986133000},{"_id":"themes/next-reloaded/.git/logs/HEAD","hash":"92b0c7ff899aaa56004011bb57f3692995a75c91","modified":1515986136000},{"_id":"themes/next-reloaded/docs/cn/DATA-FILES.md","hash":"58c58c7d98365395dba904a87f9b5f5e0b1e99cb","modified":1515986136000},{"_id":"themes/next-reloaded/docs/cn/INSTALLATION.md","hash":"15b09b7cf4e4159858895e37ce334fcc96ac08d7","modified":1515986136000},{"_id":"themes/next-reloaded/docs/cn/README.md","hash":"68b98e7489b8d53e8367500507b9ce43d094d48b","modified":1515986136000},{"_id":"themes/next-reloaded/docs/cn/UPDATE-FROM-5.1.X.md","hash":"b6422e0e1bbb02ddd29a2f9969fc3ff709555560","modified":1515986136000},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"1f15b876c106bae74148fb526bc3b914721b8ff2","modified":1515986136000},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"43a70e456d15e9eab3753c22a5253ed2ff300ac8","modified":1515986136000},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"95a904683da99daf1473fb7c1ffe8a6322ef8fb9","modified":1515986136000},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_custom/custom.swig","hash":"911584a20bbe79f77dff6c03260ef89f9ffc6c93","modified":1516873153000},{"_id":"themes/next-reloaded/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515985532000},{"_id":"themes/next-reloaded/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515985532000},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"8faef1ad24dc2ddde2ad91cd0efc9626819e1f08","modified":1517143366000},{"_id":"themes/next-reloaded/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"43f13d75cfb37ec4ed5386bee0f737641977200b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"b39868eb41be3cafa73b906752371d6dd573a6bf","modified":1517297213000},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"73835db2ea30a9824f1d90351f975f6011f42d27","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/head.swig","hash":"f875f388d4e0c8e072c49f245cd12b5e7f9f094c","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/header.swig","hash":"203fabaf17acfafbaf1a97d0015a6613ec71d2b0","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/.DS_Store","hash":"df7b0ac8aae20fa5408c1ea73b451b2741eb03b5","modified":1517841496000},{"_id":"themes/next-reloaded/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/.DS_Store","hash":"7e04cb01c02f65644dda320beb4b4a3f8d2a8bbe","modified":1517469097000},{"_id":"themes/next-reloaded/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/github-banner.swig","hash":"4d0253223a10d2c6823deacc6622387f7f1e7dcc","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/.DS_Store","hash":"e69408d3bb63f6bc3710ab5a3fbf07aba13c4d83","modified":1516872460000},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1515986136000},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/.DS_Store","hash":"09b36eb62aa23042f25864fca4b882870bc040be","modified":1517314227000},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1515986136000},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1515985532000},{"_id":"themes/next-reloaded/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515985532000},{"_id":"themes/next-reloaded/source/js/.DS_Store","hash":"806420211cc6bae34baee970d7030ad365c5327f","modified":1517466789000},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515985532000},{"_id":"themes/next-reloaded/.git/objects/02/2a491f33fddbb2c8430405602ff766ae8b4ac9","hash":"2465365933e12dabbab457ae99a428f7db0ada22","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/05/1c6d34a4a12b0e486e6fc15a32061a49103295","hash":"f741e52823ea142858fe4c006321ceaeda75bed9","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/09/a8f25203ca5f25cdbe90427f98a25a9e9ecb1e","hash":"6a403815817085032f666bb3c4cd569fa7526b22","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/09/8107227cfed798dbf954a3200a987eb019080b","hash":"5d280b8471a7ca9728606ca0ac453ec1de6913d4","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/0a/b2264706648d8f400356b39320b832fc39f54a","hash":"d5c762277e5e53287e0cbdda89c7f292e5dd3729","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/0a/f81898337359c12ddec787e5feeebf9965f5e6","hash":"fa4c07b824f9d644e6c61c1156d66ca29581ee82","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/0b/ae81efbf7065663e00e5b2f813681afed7512e","hash":"ddff621f3ad838931e6f8a6b7bda8b4a9e53627b","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/0c/bab78641b5530ed549b0cee7ce2cd4fe732a57","hash":"9fa5afd4deca3f9f1a5c9db02e7caa2fc1517b30","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/10/7cd76c26086c8fcd31b439e8a2aba890322aa9","hash":"7adceb4b8165c5947e90b600491410a13652d1dc","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/10/8284b356b2c3e332bc8b6c4bb9b914acb5d8e4","hash":"e63e6d3723967d55b8960379978cd50b32ade7bc","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/15/b71812059530f7861cc435c1e140662dd6f370","hash":"a7b220ba1e0d749a3c26d7561edb6fd45d776d28","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/11/4ff287f10c9a3d807cf105d41e0b8a0cf485ae","hash":"c8649b26d54f67c67b6653b0057d8080f1c0c18e","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/11/a6764bb74fe694c81d1815071f82cadbb5fbda","hash":"a9a4807f8e06ba012fdf946f1149a735ae68898d","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/17/0eedfca9adacad756e5fc8a4ead8f04888a485","hash":"1991181c8c5ebb2f22a3fa1b3910db769f5bc47e","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/18/de53c1f692e0331aad4a26e4ed20e3c83ffb35","hash":"aca179577c5d646b1351f9cd0a1b5fd2570102c9","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/1e/431c47af4666df9603df419ea5594709886a04","hash":"7a25323aaf6388b8ed83c5965705b76720cbe0bd","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/1e/c5171e8908567920e5f0b862935fc14d30cc76","hash":"65acd6dc40af5212610aef869fda55c8aa89ade4","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/1f/4c082a8a84aeef2d6a2f041e7c84f8e09c1331","hash":"f46dba845d34f80630bba2ba4474ef9aaeeb1b1a","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/24/295bfb75a70b07707fbe283a1689e4cd933a03","hash":"fb80c66122ba847682c8d5210c8d1de2229cf8a1","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/25/50194fa2bf8b36182d2468f684ca4e4d6ed4cf","hash":"a34cd77042710bdccf2db41e0af18825305996a2","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/25/f48cd955cba04f3502fb09f05b84cbd17f1df4","hash":"079c8c98846913d94a6973055f59cbe3b6eb450f","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/2d/5d8c56d9cb39dc3ecd757cfbcfc239354d497a","hash":"0d0ef0ab336be70eeea6f903133e636ee1b2eac3","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/29/cf557d1029bd513e5dabfe24d2fe9f51fe0836","hash":"090eae87bca740c47ca55dadfbad0630a164506d","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/2d/f3663c7c65500853e014885fa5805f0ce2145e","hash":"fd9ea72713fe1e4b1513dacbcda16efa003b9052","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/2e/e926b54eec7b45e304bbd2157ec54e572ab874","hash":"1de98f5e81dbbe5b2f0cfdfdebedfc632ba36686","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/32/2472960ee71109dbfdacab0d1af2474c8cbccd","hash":"441bf1372cc5ff747709feac9e741a0b7d7d7f64","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/37/517f769dd6618110af0dcfa8e635affaeb909d","hash":"af2e687b71fd9d4759d5ad881764868303bd67d4","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/38/1f420127662adcbaf169f4dc9cef9f4765f74c","hash":"3b46ab4a1e6992d50cc7c9f303420858122f60d1","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/39/140c7e232bf0fe02fd2c3d3584b5e27671c79b","hash":"af286cf729d1659aebe60f1e5758f69b673dabc0","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/39/36b5b7b12306711d7bfa876db070b83e2982f7","hash":"97bd75fd3c18755b6e846a00a5f76700f4679a26","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/3b/56e9cbd59b1ebb73c68bd3fe0acdb5b1081504","hash":"07b4c815a970cb2d189d9b8eef44ff6469d05286","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/3d/6757fcea86b758609ec126a7bf26800a1f9193","hash":"c92a8420613b2aeeaeb9fedbdf89a0dd6c1b406e","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/40/96b19c54989f9ebb1f43ff5020cf584ab7e9e0","hash":"13c3dea03ca2bfb67a9e13c79d92e2e460ef819a","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/41/c4e54351156d28f4f903f6f108599c2add1e1f","hash":"2e282d94cff3d08972baec31190b845fbff935a5","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/3e/27f17b2ad02dc4d4775aeb9ecc0a846fdd0c85","hash":"a9ac003dee05ed8eb26609384dd00d4c6297234a","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/42/7f329f3f1690e9dba0e2296d2c11897b2db5b1","hash":"f3b26219a19c2845a2e49ffa58c45d686c56be0f","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/46/a545257c4dbd4fd8f276b4ad2195287841c9e3","hash":"ac2c4e5bb5f3199bbb1d6ec9813c03bd3d877131","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/44/5a37beaeb96eaa4126f6dd982fb037d413bb7f","hash":"f477428733c00056a5583cf59168419fefc93bff","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/48/3140c7af17c42df0a22f3330a8221e76c508ad","hash":"5b42ac6e6402844779d33a601d807b6ebfad4134","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/4a/c05234d42cfb26c0bb748603a5e82d2f2da358","hash":"95f48ec3464fb0a58c1fe9304536a41bb27fe53b","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/4b/e9fcf34671d03f0e430c71d2daa8f42a7e8553","hash":"9af387d32e0c32a11deb25ba2f5794211b09ffe4","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/51/52e153363f85262657a4478f33f27725444e9d","hash":"5e0168b4416ecf1aa95de4b1a209641d7eaa9782","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/52/d9ea81069acbca597fc3f875eae4a076eca330","hash":"b6c01053db332eb2615c2be5e5424461cb968c4c","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/52/e432408e4f792f01aa9e902dbd1d69c07a093d","hash":"90271e0677d2dcc0f6951f3f0a463635c309ba2e","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/53/83d8ee660db5ed7b787860c307ae4689620684","hash":"33fff72d9a732484f2f019b52d2de2f0ad06044d","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/54/58039753385b7a312762297e45ce387927988f","hash":"5468697933aaa9a0f9bf00b6ce849e88049dcc13","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/55/9276fe376b2f5a5f704d70bff9e823c93fc864","hash":"35ceaf572d549d86e01064d47feeeb9880b1d05e","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/59/c45b6a5a6e39bb2c6b3a24c575ef0b509c1059","hash":"6c9816df9fd088c779886d325c96f88d9acb993d","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/57/1ccc85cc8dad5b4020d1728bc9fa4c9e43e0a0","hash":"540492d3c9a2654b710142536f044de8fc3282ff","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/5a/23b75b3fa6ada1fa809397ab5b077e3fdaf582","hash":"bec5be3f071cb139d2a9cc6cd7d4b1733f909ddc","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/5e/08fb8d9146536f624d13fd6a7d98d7daa7faff","hash":"93a1939c73942a0308ebf51ab7c8e131731c8753","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/5c/09e2b3e34c6fd5e053797324151b40efe5d5be","hash":"f62c87eb234b26f6c7b8c5a02fa7a1945c20f1f7","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/63/a03ed64d521d5e47dfaec48caad3e317a03387","hash":"4f30eb5b0dc7b6de8fb86a40740119a2cf4cd3bd","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/63/e750c795e2355988a5bef707013f971520f30e","hash":"1b32a5bba35acdcd82f869490d475f210d09b2e1","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/6d/db38bc48f646a9f0a8b961a92b4845f7d40fc7","hash":"f94735cad1fbae2df2fff4ef9bfbbe556e151628","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/6e/8d8b756125544dc93c89ef208a930c1496bc11","hash":"976a957b11fd992a54bcd0e351e496048ce4a2cc","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/71/d19095af3176f45ef357fdeebe56d4b0f4cbdd","hash":"c90b3142ab1594930897e401ca2cea51df1c1796","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/74/7c512c08c43376fc51a53c30b4edd93a34ec90","hash":"32d99ba0a41259f0846ffeacf4f18895179ace09","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/79/343eb3cfdc4dc2f0f5f5037a7a464a71fa3099","hash":"5c071e10ae7dbada821eb170c1cb54ee7fc9113f","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/7c/c6677474995c688eb6d7acdf303be610f0bc23","hash":"895792eab110780df22234fbd8a3fe20481c5957","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/7c/fbd82c4cd708507ef9d7c19a7a5c3a3505affb","hash":"bcb1aeba946fdc45c52d82f155ff508ee77f165d","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/7e/c22de4672b096af5765d7e1c05c1355f02e9c8","hash":"fd52ab66041ba728afb253bf8a1d378485dd035c","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/7e/f6690b8c95bceadf46db9e5912ce8836593238","hash":"6e4869ee00814b0d02b36c2dbd2164c3b7f58248","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/7f/2e445d22a4050c83ac629ed09ae7144b1172f2","hash":"b5652d28830c4a3287bdfa75439f7dfcf7c0a353","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/83/9d6597b0b80c9c3b29915e43f5b7b5ddba10ea","hash":"7f139f95f186067f7d3709e655fb2edfebe47549","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/83/a6c52e9a49a25aed900701b88aab5d1b5e344f","hash":"95f25acff3c5e187a8bc631f265c9c1c227466b6","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/89/f15e84ac0428873dbb62ee366d665baf242389","hash":"172d4260058a36ff133c453ada6ded81b97a0594","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/92/4453d5547373c4a654284e3486349b65e40978","hash":"04250db901bdca480b5911053d58a802cfe10d16","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/94/9fdef9b1bcc78dc99ddcb5913042a164a8328d","hash":"b158c885cdf717a2e0518b01db35b0e79c3f9429","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/95/145ad52ad4407e4e49214b09f1c296572129e6","hash":"e1d213015a30f873097f9ca99bbf181bf2ebf4f4","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/9b/0c47320228e5e3229dbf58a6812dcdffc6cdd8","hash":"7f0e946ef911940a9d0019dd2eeb9633510b16e1","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/98/7258b78ad1958c14b860e554b5b6a0e22c85f8","hash":"ba678da09abaa24a9d8036d206d34a2c6d897920","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/96/a07a13d7f66e4fd7a9adfb849007ab43d9b698","hash":"7150ac1c5b0df2ab9791a6d18adde4e4cb69ac00","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/9c/f8a9c117d408e0a7a99eeb99cc02e0b2ab9e57","hash":"ffe1223183e75281d3b99f17c346610c30e8d600","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/a3/b698d86d0f2aadd5d3b0ab671fc3f352f39a85","hash":"18ed1c4463e6ed5367268888994cc1d99b23a4f2","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/a9/545c8e9648ad3d5266d63ebc28ac6612d778ef","hash":"4f5f5f621c406cc974fc8e4c8a13de4c2e821b23","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/a3/60500a2378575a787de23d41f870954a04b27a","hash":"46d3bf081058976e093aa62ec78eacad86dab5f4","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/a4/70bcd73342870d5c9f279189f204ebe6969f37","hash":"09977edde6cd895a9eed2eef5aab529375aa7b08","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/af/85af0ef1deda3fff885cab58be80342f5b89fe","hash":"463083de26c72faa3cd98f94861c0a485e0cb927","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/b0/9a0d729959f9aa7f060a1c5b8d5c716b95af48","hash":"d6aec053cb063130e437359bc85286a55586899d","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/af/bfbc3158e11eae6ffa4ae687159ec1d66e0250","hash":"a6d123a5847520e8aba4143815e9b73721988490","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/ab/48d8bd5509b369970a70b46a70eec601f0baa8","hash":"2789f3d1b2c908e30c5f17fcb9f5dfed74922e59","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/b0/b3b6f7898bd59a26df15ee75d96f2683e644ed","hash":"3e5ad60d2763cf8347b16514da619fe76d5960cf","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/b2/d0f31017b4b116603426cb20e1dbab2f12c8b2","hash":"40324ea3d6d39b682d9abf9dd86faff805e0ab90","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/b2/ed996d6f94dbad2f8a848aa91d2f8280c4fb24","hash":"0f4416d03bfba658b88947596422478c6cf92b8a","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/b3/8cf75f7990428a2800c9593798d9a89e2719b0","hash":"48b25b081e82fa3117e5a45e72f2fdbeb58e039d","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/b4/61031b6360e46679202be1d2b4400a077f8156","hash":"c2ff5ed5fd18daa67c8a692c18972b1fcd7fe387","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/b6/fc1165feb5a55f6f014c40575bb7cebcc8cf12","hash":"936a45d262542af0292c5251655c2c24cd19ed9e","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/b6/ab96c3545aaefd2ab3aa12bef69b76c58fb467","hash":"629ac84a3b57042dcf326fdc953a7e136e581787","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/b9/1612776602ab892bc6ed4e8ea06a176f33cb21","hash":"0d125f341af3d694e115b3f1c87cb9865df9d11b","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/bb/6ce288c60ebfb6639c158a97b054eefc77f720","hash":"5ead335146ace1d5e11e4b6d112729c86e812fe0","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/c2/8fccba4c0515e9edd5eca8305bd8965a8e21ac","hash":"82c64a0d365c74c82ffe3909a886eaf6944b0af1","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/bc/7f313b9908b1a8c290c1740e45d2a635f4ed80","hash":"48f385c84a731d05821c4311092783d33b66bc36","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/bf/b6e6b1425a5758a858ea600d90d1d56275614c","hash":"800f8b9c6cdd4ee797deec97ea5c1a7eb5aec0a3","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/c5/c1eb56fcef43e6dd8ddaaa383f100d7ab68201","hash":"0abd1206cecbfd213bce6345ef5553fd5314b6c2","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/d0/e653ecc1421dcb48febfffb2195260d39a05ed","hash":"88274772a51a58d1ba38ead883c80d0fc1494721","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/d3/4d25043b7a9e4846b26d9cfa25096f9dd1b569","hash":"149d07bf74490cc005209a74a46949958074729b","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/d1/f173bbba31a0a83c4dab4a3b1a73438c0bc57f","hash":"394592ee7fe3b698ba3b6689ba57dc4e9e5f5dff","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/d8/3f588d03863661e590662ca6b488acfecbc8c2","hash":"aa015540f5a38d9de49b984d9ba4c978be70e7b7","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/d6/133d34e8d9fc7ec38a036f75ef2431463414ed","hash":"f853400b2a1e67f925fc28fce7ec4f395a1fe4eb","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/d8/e6f2ad652081c4d45b5139c989dd9af6f2ef16","hash":"a186f7e0e699c7b45d71d9b1b15881b2b49849cd","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/d9/6e96dbf884aa7c720842e451ca86bfa8ba27c1","hash":"36390be0f41b093cc9772b82c400d7262006c495","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/da/eefeaadd826f9a5089eb0aee25b9e0b9d5fb99","hash":"cb53340e500103ed5029ba0d5f65458d00d44fb7","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/db/90cb4b7d0dcc41fccd904d6666155856ac04cc","hash":"69b5f0da2c5a11cf9eb8bbc11e0dca1e84a4b851","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/da/65891fefba3df6d75d7fab8b311749bd688cc6","hash":"94d6299d3384a59707c34a3d3b40ef911bdfee9e","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/de/764ec4794229ee2981f158984cbc1b362d626d","hash":"a4ac3ed3245b789902d12f9ef0e7b665b63cfee5","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/df/e22c0961d77f6c42b1b57c15d6d628969ec3a0","hash":"4ae0eb6fadba91d102866c8cdf813a41e68cde41","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/e2/adc53ba9eb1c722f19125fb1365cbc286bf873","hash":"3fa213ed9d87e178b6f842828d04372d1b344028","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/e1/b47e5f96e204349db9132515674ed6a8e93ef8","hash":"6ad77a9c0148c02900e006b01de869597350a1b5","modified":1517112256000},{"_id":"themes/next-reloaded/.git/objects/e2/fcbc9ee28a6efc87d2329d8b1cd2927d31a7fd","hash":"4863a6074593337e580c4829d4cea898b2be18c7","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/ea/f9447a54155b735c5575719abdead6e48ea8bd","hash":"3b4e9377bebe357e5ed3d1009c4b08a75d735038","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/eb/801647ffa26f539ea23b8bd1b9155cd19b8180","hash":"563409daf8eb974ddc4189b1c283e7119ed10393","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/eb/764578f2e2892314e8c091bac9ba8b5d819ce0","hash":"bf1ed67131703de764f9dc7d9596a8ce0cb9d9d3","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/ef/4e42900d199b8b5d04727fc69643e8a98be84f","hash":"bc1c8beb540d28b18d4a5188b8734f57f1300549","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/eb/8df7bd6ab4c6957f2215a62d2ae1ba376ba3cd","hash":"b8f2bf69dd8e4becf11c44d27b2c6457fd60d7aa","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/f2/73c4e7cf56bb132eacb207638d1622e24c52db","hash":"39e0de5bebdd1086c9fd1e02ef3f00c29448f261","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/f6/ab9bd1de7fdc2210c9539c4140db0837b0c687","hash":"aace3564b3ce46f3f9584143fb3ae680df367f9b","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/f4/6d9aaa391aa896a3392e351e2f717209002b3d","hash":"61d62a610597167cb4a204efaadeb326b19f812c","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/f8/00b8f834708f1dddfcd8acfebc0124c563799b","hash":"6484240093d5700bc8544bb4790ad45b9ede52c2","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/fd/fe0df0bef1383baec99467696df50349a25914","hash":"2e481d93092dc59fdb2e33e2f9ac5e31addfdfbd","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/fb/373d6c2c639f44dff0a0da563dff1073bd3450","hash":"01030303883295db2a4b3f161d31a36800518ae8","modified":1517236366000},{"_id":"themes/next-reloaded/.git/objects/f9/39debcbb4b3c60dd1898261b3180e93a5dc54b","hash":"aa04a8f67c1944ad1650c8af716abf687719411c","modified":1517295031000},{"_id":"themes/next-reloaded/.git/objects/pack/pack-3cf502991c4d0f41ad8b74cd96224953f156fb28.idx","hash":"4e884290a8e3641fe253ada305bcf41b6a2adb9c","modified":1516871748000},{"_id":"themes/next-reloaded/.git/objects/pack/pack-a448d8077fa8caf6e212fdc4b790a559a924a211.idx","hash":"eca6e8e2dc818d7ff88df4af5f5c3caf5deb2310","modified":1515986136000},{"_id":"themes/next-reloaded/.git/refs/heads/master","hash":"f0d6a9cb2bb6c7b1764bc25b9b73cf601fe7bb6d","modified":1515986136000},{"_id":"themes/next-reloaded/.git/refs/tags/v6.0.2","hash":"790a4b7de8d41646b688608df0f77149d55c674b","modified":1516871749000},{"_id":"themes/next-reloaded/.git/refs/tags/v6.0.3","hash":"10dcaaf555e041cbca9fdc4a9e6e1eca54ff6756","modified":1517295032000},{"_id":"themes/next-reloaded/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"ccb287855589a4a4d3f41b67e919bb030d99d888","modified":1517467953000},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/index.swig","hash":"8b6e6603d0d98951fa6ae21594042891af83c115","modified":1517297245000},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/.DS_Store","hash":"2e2fe502b09057efe7b50f6f6738018960862c8a","modified":1517298390000},{"_id":"themes/next-reloaded/source/css/_custom/custom.styl","hash":"2dd9c678bc31ba2d6dfb09325f82db4a449dd351","modified":1516872483000},{"_id":"themes/next-reloaded/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1515985532000},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1515985532000},{"_id":"themes/next-reloaded/source/css/_variables/custom.styl","hash":"4b3e13b110420734deea605bcd5bb90d65c7e5cb","modified":1517314108000},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"6e91dec6948cf8603877ba273c1ee865a5d99e10","modified":1517314148000},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1515985532000},{"_id":"themes/next-reloaded/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/custom.js","hash":"0231b7b49aca7adce98475fa0b754db4592a16e3","modified":1516873004000},{"_id":"themes/next-reloaded/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/post-details.js","hash":"00444a118113610d22f368a270fc10bfbaa21aac","modified":1516872325000},{"_id":"themes/next-reloaded/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/zclip/clipboard.min.js","hash":"96a6f9c6c081194a8efd6fb7859ade479a7827e0","modified":1516873444000},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515986136000},{"_id":"source/_posts/2018-JanWeek2/title.png","hash":"e5767fb2816ec8df149ff7cb63db7aff4ee986e1","modified":1515985532000},{"_id":"source/_posts/“长大”/time.jpg","hash":"78ba6c6f7b32a68aa74f4d504fbd7996e989f9b2","modified":1515985532000},{"_id":"source/_posts/「CQOI2014」排序机械臂-Splay/explanation.png","hash":"52d5a442cfb120b063b3469e047ed9b75477e404","modified":1517555072000},{"_id":"themes/next-reloaded/.git/logs/refs/heads/master","hash":"92b0c7ff899aaa56004011bb57f3692995a75c91","modified":1515986136000},{"_id":"themes/next-reloaded/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515986136000},{"_id":"themes/next-reloaded/.git/refs/remotes/origin/i18n","hash":"2e279aff824345a3cb49fd7e9d3ea0f11a7d39f9","modified":1516871749000},{"_id":"themes/next-reloaded/.git/refs/remotes/origin/master","hash":"9819c44fc17b2f535c241cf5c1ca098687604e25","modified":1517295032000},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1515986136000},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/.DS_Store","hash":"ff0644525dc85e2bd5056a7e98b4d9934a3db1c0","modified":1517297386000},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"243d86332c71d028c6a0426b14f1cc870eb491b3","modified":1517295588000},{"_id":"themes/next-reloaded/source/css/_common/components/gitment.styl","hash":"8ee47202908219784daf9665d75fb27e71f1cb65","modified":1517295565000},{"_id":"themes/next-reloaded/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"dbff05af5e3a7c4f0889cdcc9027f882a246aa68","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"d204ef41e5f59aa102baf02e1751075a041ae7f4","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1515986136000},{"_id":"themes/next-reloaded/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515986136000},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515986136000},{"_id":"source/_posts/2018-JanWeek3/title.jpg","hash":"b99a9886a010c5a5df71fb9e24f25c8775ebedbb","modified":1472122262000},{"_id":"themes/next-reloaded/.git/logs/refs/remotes/origin/HEAD","hash":"92b0c7ff899aaa56004011bb57f3692995a75c91","modified":1515986136000},{"_id":"themes/next-reloaded/.git/logs/refs/remotes/origin/i18n","hash":"1e0a05bfc1021eefd58c56f7030d131a4e5b3115","modified":1516871749000},{"_id":"themes/next-reloaded/.git/logs/refs/remotes/origin/master","hash":"3156efe9fbc8e4fe7e2ac20df322d6f8aecd5904","modified":1517295032000},{"_id":"themes/next-reloaded/.git/objects/pack/pack-3cf502991c4d0f41ad8b74cd96224953f156fb28.pack","hash":"2c0f0cc3af42a688041478bae57c88452504ff4f","modified":1516871748000},{"_id":"themes/next-reloaded/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/github-banner.styl","hash":"ce77b4ff598c10aca5687e9a65387ae74684632e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-meta.styl","hash":"0abb074afb6ab7242a22fa6dc3ac688251df708a","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1517297281000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"97663b6dc7d3ba3626d5d01f95320fd59ec1b023","modified":1517297389000},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515986136000},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515986136000},{"_id":"themes/next-reloaded/source/images/avatar.jpg","hash":"be6f9d8920b4cf66042cf2146cd55de85c452ae8","modified":1515985532000},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515986136000},{"_id":"themes/next-reloaded/.git/objects/pack/pack-a448d8077fa8caf6e212fdc4b790a559a924a211.pack","hash":"f7034fa786d61879b3483485cbfbcec3b28159fa","modified":1515986136000},{"_id":"source/_posts/2018-JanWeek4-Month1/title.jpg","hash":"6c66f0074add3f9cc4d9efd3b321ae369082f053","modified":1517107039000},{"_id":"source/images/1.png","hash":"d6f503fbadc2a458d481a3cbcb320aa02407af90","modified":1518240192000},{"_id":"source/_posts/2018-FebWeek2/title.png","hash":"d6f503fbadc2a458d481a3cbcb320aa02407af90","modified":1518341998000},{"_id":"source/_posts/2018-FebWeek1/title.jpg","hash":"ccfcf88d7e63f40e7d48e00bd4f39d4cba791632","modified":1517836938000},{"_id":"source/_posts/冬令营旅游记/1.jpg","hash":"f50dc45d72e07ee22046a48201fe77b6e4916867","modified":1516881858000},{"_id":"source/_posts/冬令营旅游记/4.jpg","hash":"ab394fd4e58a0e691e4b6158bbd81ad0a89ef6e8","modified":1516881881000},{"_id":"source/_posts/冬令营旅游记/3.jpg","hash":"d9972a433aafb6c8828561f531b1d087314cef40","modified":1516881868000},{"_id":"source/_posts/冬令营旅游记/2.jpg","hash":"e27dd6a30b801a6b1df1513121a3cf7f391e79d3","modified":1516881845000}],"Category":[{"name":"总结","_id":"cjdilosew00045os6dyf091b7"},{"name":"日常","_id":"cjdilosfl000b5os691wur070"},{"name":"OI","_id":"cjdilosg6000n5os62pzor71u"}],"Data":[],"Page":[{"title":"about","date":"2017-12-04T13:37:41.000Z","_content":"\n恭喜你！发现了一个蒟蒻的Blog。\n\n某高中开始学OI的蒟蒻。\n\n现高一。\n\n不定期更新，主要看心情。\n\n\\(≧▽≦)/\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-12-04 21:37:41\n---\n\n恭喜你！发现了一个蒟蒻的Blog。\n\n某高中开始学OI的蒟蒻。\n\n现高一。\n\n不定期更新，主要看心情。\n\n\\(≧▽≦)/\n","updated":"2018-02-01T05:35:07.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjdiloseh00015os6x30sjcxd","content":"<p>恭喜你！发现了一个蒟蒻的Blog。</p>\n<p>某高中开始学OI的蒟蒻。</p>\n<p>现高一。</p>\n<p>不定期更新，主要看心情。</p>\n<p>(≧▽≦)/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>恭喜你！发现了一个蒟蒻的Blog。</p>\n<p>某高中开始学OI的蒟蒻。</p>\n<p>现高一。</p>\n<p>不定期更新，主要看心情。</p>\n<p>(≧▽≦)/</p>\n"},{"title":"分类们","date":"2017-12-05T12:59:52.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类们\ndate: 2017-12-05 20:59:52\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-01-30T07:51:38.000Z","path":"categories/index.html","layout":"page","_id":"cjdiloser00035os61qy5adyk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"恭喜你发现了这里！","date":"2018-01-14T09:29:44.000Z","sitemap":false,"comments":0,"_content":"\n给你创建的页面。\n嘿嘿。\n\n目前还没有找到一个搞出目录的办法，只好就手动添加啦。\n\n\n\n## 目录\n\n暂时还不存在哦。\n","source":"lsy/index.md","raw":"---\ntitle: 恭喜你发现了这里！\ndate: 2018-01-14 17:29:44\nsitemap: false\ncomments: false\n---\n\n给你创建的页面。\n嘿嘿。\n\n目前还没有找到一个搞出目录的办法，只好就手动添加啦。\n\n\n\n## 目录\n\n暂时还不存在哦。\n","updated":"2018-02-08T06:28:11.000Z","path":"lsy/index.html","layout":"page","_id":"cjdilosfc00065os67w1jz4kp","content":"<p>给你创建的页面。<br>嘿嘿。</p>\n<p>目前还没有找到一个搞出目录的办法，只好就手动添加啦。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>暂时还不存在哦。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给你创建的页面。<br>嘿嘿。</p>\n<p>目前还没有找到一个搞出目录的办法，只好就手动添加啦。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>暂时还不存在哦。</p>\n"},{"title":"test","date":"2018-01-14T09:18:31.000Z","tags":null,"categories":null,"sitemap":false,"visible":"hide","comments":0,"_content":"\n## test\n\n测试。\n","source":"lsy/test.md","raw":"---\ntitle: test\ndate: 2018-01-14 17:18:31\ntags:\ncategories:\nsitemap: false\nvisible: hide\ncomments: false\n---\n\n## test\n\n测试。\n","updated":"2018-01-30T07:52:03.000Z","path":"lsy/test.html","layout":"page","_id":"cjdilosfi00095os6if8kpkfi","content":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>测试。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>测试。</p>\n"},{"title":"标签们","date":"2017-12-05T13:07:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签们\ndate: 2017-12-05 21:07:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-01-30T07:51:45.000Z","path":"tags/index.html","layout":"page","_id":"cjdilosfl000c5os6pt8avh6x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018-FebWeek1","urlname":"2018-FebWeek1","date":"2018-02-05T11:05:57.000Z","visible":null,"_content":"\n## 2018年二月 第一周\n### 2018.1.29-2018.2.4\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=432511412&auto=0&height=66\"></iframe>\n\n## 正文\n这一周好像没干什么事情。\n\n学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板...过几天做几道关于最大流什么的题吧。\n\n还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题...争取下周做几道稍微难些的莫队吧。\n\n寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。\n\n不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。\n\n![](title.jpg)\n\n## TodoList\n\n### 这周完成\n+ 实现AC自动机 ✘ 优先级目前不够高\n+ 学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写...\n+ 写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了...地理作业是什么...\n+ 至少写一篇题解发到这里 ✔目前有三篇啦\n+ 出去玩```\\(≧▽≦)/``` ✔成功啦\n+ 实现了一个最大流膜版... ✔（图论太难了\n\n### 下周完成\n\n+ 完成莫队算法学习笔记（普通 待修改 强制在线 树上\n+ 写...语文作业...\n+ 接着学网络流 费用流\n+ 接着做题啦\n","source":"_posts/2018-FebWeek1.md","raw":"---\ntitle: 2018-FebWeek1\nurlname: 2018-FebWeek1\ndate: 2018-02-05 19:05:57\ntags:\ncategories: 总结\nvisible:\n---\n\n## 2018年二月 第一周\n### 2018.1.29-2018.2.4\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=432511412&auto=0&height=66\"></iframe>\n\n## 正文\n这一周好像没干什么事情。\n\n学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板...过几天做几道关于最大流什么的题吧。\n\n还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题...争取下周做几道稍微难些的莫队吧。\n\n寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。\n\n不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。\n\n![](title.jpg)\n\n## TodoList\n\n### 这周完成\n+ 实现AC自动机 ✘ 优先级目前不够高\n+ 学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写...\n+ 写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了...地理作业是什么...\n+ 至少写一篇题解发到这里 ✔目前有三篇啦\n+ 出去玩```\\(≧▽≦)/``` ✔成功啦\n+ 实现了一个最大流膜版... ✔（图论太难了\n\n### 下周完成\n\n+ 完成莫队算法学习笔记（普通 待修改 强制在线 树上\n+ 写...语文作业...\n+ 接着学网络流 费用流\n+ 接着做题啦\n","slug":"2018-FebWeek1","published":1,"updated":"2018-02-05T12:35:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilose800005os6wikbxt1v","content":"<h2 id=\"2018年二月-第一周\"><a href=\"#2018年二月-第一周\" class=\"headerlink\" title=\"2018年二月 第一周\"></a>2018年二月 第一周</h2><h3 id=\"2018-1-29-2018-2-4\"><a href=\"#2018-1-29-2018-2-4\" class=\"headerlink\" title=\"2018.1.29-2018.2.4\"></a>2018.1.29-2018.2.4</h3><a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=432511412&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>这一周好像没干什么事情。</p>\n<p>学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板…过几天做几道关于最大流什么的题吧。</p>\n<p>还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题…争取下周做几道稍微难些的莫队吧。</p>\n<p>寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。</p>\n<p>不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>实现AC自动机 ✘ 优先级目前不够高</li>\n<li>学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写…</li>\n<li>写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了…地理作业是什么…</li>\n<li>至少写一篇题解发到这里 ✔目前有三篇啦</li>\n<li>出去玩<code>\\(≧▽≦)/</code> ✔成功啦</li>\n<li>实现了一个最大流膜版… ✔（图论太难了</li>\n</ul>\n<h3 id=\"下周完成\"><a href=\"#下周完成\" class=\"headerlink\" title=\"下周完成\"></a>下周完成</h3><ul>\n<li>完成莫队算法学习笔记（普通 待修改 强制在线 树上</li>\n<li>写…语文作业…</li>\n<li>接着学网络流 费用流</li>\n<li>接着做题啦</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018年二月-第一周\"><a href=\"#2018年二月-第一周\" class=\"headerlink\" title=\"2018年二月 第一周\"></a>2018年二月 第一周</h2><h3 id=\"2018-1-29-2018-2-4\"><a href=\"#2018-1-29-2018-2-4\" class=\"headerlink\" title=\"2018.1.29-2018.2.4\"></a>2018.1.29-2018.2.4</h3>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=432511412&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>这一周好像没干什么事情。</p>\n<p>学数据结构学的不可自拔，颓出了Splay。不过这好像并不是我本来想学的东西。不过这周的后半部分主要就是在往图论的方面去转啦。刷了一些生成树和最短路的水题，莫名的就去学了最大流。然后迷迷糊糊的照着模板把代码打出来然后过了模板…过几天做几道关于最大流什么的题吧。</p>\n<p>还有一个就是莫队。坐在公交车上看到julao的莫队实现，顿时就会了莫队。然后做了几道水题…争取下周做几道稍微难些的莫队吧。</p>\n<p>寒假一半都要过去了。可怕。作业还没写到一半。更可怕了。</p>\n<p>不过天天9点起，想出去玩就出去玩的生活还是很美好的。嗯。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>实现AC自动机 ✘ 优先级目前不够高</li>\n<li>学会非旋Treap或者Splay ✔Splay成功学会 非旋Treap一直懒得写…</li>\n<li>写完至少物理、地理、一小半数学的寒假作业 ✔物理和数学颓完了…地理作业是什么…</li>\n<li>至少写一篇题解发到这里 ✔目前有三篇啦</li>\n<li>出去玩<code>\\(≧▽≦)/</code> ✔成功啦</li>\n<li>实现了一个最大流膜版… ✔（图论太难了</li>\n</ul>\n<h3 id=\"下周完成\"><a href=\"#下周完成\" class=\"headerlink\" title=\"下周完成\"></a>下周完成</h3><ul>\n<li>完成莫队算法学习笔记（普通 待修改 强制在线 树上</li>\n<li>写…语文作业…</li>\n<li>接着学网络流 费用流</li>\n<li>接着做题啦</li>\n</ul>"},{"title":"2018-FebWeek2","urlname":"2018-FebWeek2","date":"2018-02-11T08:28:27.000Z","visible":null,"_content":"\n## 2018年二月 第二周\n### 2018.2.5-2018.2.11\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=36117196&auto=0&height=66\"></iframe>\n\n## 正文\n\n这一周没干什么事...这么一想忽然就颓废了...\n\n写了几道并查集，写了几道二分图，写了几道图和树的题。仿佛就是毫无目的的一般。不过还是把看了很久的几道并查集的题给A了。还是蛮激动的。\n\n抱了洛谷的网课，于是体会到了一上午学平衡树、主席树、树套树的酸爽。好多的东西还没来得及实现，只好等一等了。不过倒是深刻意识到了自己的蒟蒻。啧啧。\n\n春节就快要到了。良宵佳节，不如好好补补作业。\n\n![](title.png)\n\n## TodoList\n\n### 这周完成\n\n+ 完成莫队算法学习笔记 ✔ 写了一篇\n+ 写...语文作业... ✔写了一点\n+ 接着学网络流 费用流 ✘并没有写费用流\n+ 接着做题啦 ✔做了几道水题...\n\n### 下周完成\n\n+ 写完语文寒假作业！！！\n{% spoiler 我觉得上面的事情够充满整整一周了嗯。 %}\n","source":"_posts/2018-FebWeek2.md","raw":"---\ntitle: 2018-FebWeek2\nurlname: 2018-FebWeek2\ndate: 2018-02-11 16:28:27\ntags: 总结\ncategories: 日常\nvisible:\n---\n\n## 2018年二月 第二周\n### 2018.2.5-2018.2.11\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=36117196&auto=0&height=66\"></iframe>\n\n## 正文\n\n这一周没干什么事...这么一想忽然就颓废了...\n\n写了几道并查集，写了几道二分图，写了几道图和树的题。仿佛就是毫无目的的一般。不过还是把看了很久的几道并查集的题给A了。还是蛮激动的。\n\n抱了洛谷的网课，于是体会到了一上午学平衡树、主席树、树套树的酸爽。好多的东西还没来得及实现，只好等一等了。不过倒是深刻意识到了自己的蒟蒻。啧啧。\n\n春节就快要到了。良宵佳节，不如好好补补作业。\n\n![](title.png)\n\n## TodoList\n\n### 这周完成\n\n+ 完成莫队算法学习笔记 ✔ 写了一篇\n+ 写...语文作业... ✔写了一点\n+ 接着学网络流 费用流 ✘并没有写费用流\n+ 接着做题啦 ✔做了几道水题...\n\n### 下周完成\n\n+ 写完语文寒假作业！！！\n{% spoiler 我觉得上面的事情够充满整整一周了嗯。 %}\n","slug":"2018-FebWeek2","published":1,"updated":"2018-02-11T09:40:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosel00025os6p0j2lgk8","content":"<h2 id=\"2018&#x5E74;&#x4E8C;&#x6708;-&#x7B2C;&#x4E8C;&#x5468;\"><a href=\"#2018&#x5E74;&#x4E8C;&#x6708;-&#x7B2C;&#x4E8C;&#x5468;\" class=\"headerlink\" title=\"2018&#x5E74;&#x4E8C;&#x6708; &#x7B2C;&#x4E8C;&#x5468;\"></a>2018&#x5E74;&#x4E8C;&#x6708; &#x7B2C;&#x4E8C;&#x5468;</h2><h3 id=\"2018-2-5-2018-2-11\"><a href=\"#2018-2-5-2018-2-11\" class=\"headerlink\" title=\"2018.2.5-2018.2.11\"></a>2018.2.5-2018.2.11</h3><a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=36117196&amp;auto=0&amp;height=66\"></iframe>\n\n<h2 id=\"&#x6B63;&#x6587;\"><a href=\"#&#x6B63;&#x6587;\" class=\"headerlink\" title=\"&#x6B63;&#x6587;\"></a>&#x6B63;&#x6587;</h2><p>&#x8FD9;&#x4E00;&#x5468;&#x6CA1;&#x5E72;&#x4EC0;&#x4E48;&#x4E8B;&#x2026;&#x8FD9;&#x4E48;&#x4E00;&#x60F3;&#x5FFD;&#x7136;&#x5C31;&#x9893;&#x5E9F;&#x4E86;&#x2026;</p>\n<p>&#x5199;&#x4E86;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x4E8C;&#x5206;&#x56FE;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x56FE;&#x548C;&#x6811;&#x7684;&#x9898;&#x3002;&#x4EFF;&#x4F5B;&#x5C31;&#x662F;&#x6BEB;&#x65E0;&#x76EE;&#x7684;&#x7684;&#x4E00;&#x822C;&#x3002;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x628A;&#x770B;&#x4E86;&#x5F88;&#x4E45;&#x7684;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x9898;&#x7ED9;A&#x4E86;&#x3002;&#x8FD8;&#x662F;&#x86EE;&#x6FC0;&#x52A8;&#x7684;&#x3002;</p>\n<p>&#x62B1;&#x4E86;&#x6D1B;&#x8C37;&#x7684;&#x7F51;&#x8BFE;&#xFF0C;&#x4E8E;&#x662F;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x4E00;&#x4E0A;&#x5348;&#x5B66;&#x5E73;&#x8861;&#x6811;&#x3001;&#x4E3B;&#x5E2D;&#x6811;&#x3001;&#x6811;&#x5957;&#x6811;&#x7684;&#x9178;&#x723D;&#x3002;&#x597D;&#x591A;&#x7684;&#x4E1C;&#x897F;&#x8FD8;&#x6CA1;&#x6765;&#x5F97;&#x53CA;&#x5B9E;&#x73B0;&#xFF0C;&#x53EA;&#x597D;&#x7B49;&#x4E00;&#x7B49;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x5012;&#x662F;&#x6DF1;&#x523B;&#x610F;&#x8BC6;&#x5230;&#x4E86;&#x81EA;&#x5DF1;&#x7684;&#x849F;&#x84BB;&#x3002;&#x5567;&#x5567;&#x3002;</p>\n<p>&#x6625;&#x8282;&#x5C31;&#x5FEB;&#x8981;&#x5230;&#x4E86;&#x3002;&#x826F;&#x5BB5;&#x4F73;&#x8282;&#xFF0C;&#x4E0D;&#x5982;&#x597D;&#x597D;&#x8865;&#x8865;&#x4F5C;&#x4E1A;&#x3002;</p>\n<p><img src=\"title.png\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"&#x8FD9;&#x5468;&#x5B8C;&#x6210;\"><a href=\"#&#x8FD9;&#x5468;&#x5B8C;&#x6210;\" class=\"headerlink\" title=\"&#x8FD9;&#x5468;&#x5B8C;&#x6210;\"></a>&#x8FD9;&#x5468;&#x5B8C;&#x6210;</h3><ul>\n<li>&#x5B8C;&#x6210;&#x83AB;&#x961F;&#x7B97;&#x6CD5;&#x5B66;&#x4E60;&#x7B14;&#x8BB0; &#x2714; &#x5199;&#x4E86;&#x4E00;&#x7BC7;</li>\n<li>&#x5199;&#x2026;&#x8BED;&#x6587;&#x4F5C;&#x4E1A;&#x2026; &#x2714;&#x5199;&#x4E86;&#x4E00;&#x70B9;</li>\n<li>&#x63A5;&#x7740;&#x5B66;&#x7F51;&#x7EDC;&#x6D41; &#x8D39;&#x7528;&#x6D41; &#x2718;&#x5E76;&#x6CA1;&#x6709;&#x5199;&#x8D39;&#x7528;&#x6D41;</li>\n<li>&#x63A5;&#x7740;&#x505A;&#x9898;&#x5566; &#x2714;&#x505A;&#x4E86;&#x51E0;&#x9053;&#x6C34;&#x9898;&#x2026;</li>\n</ul>\n<h3 id=\"&#x4E0B;&#x5468;&#x5B8C;&#x6210;\"><a href=\"#&#x4E0B;&#x5468;&#x5B8C;&#x6210;\" class=\"headerlink\" title=\"&#x4E0B;&#x5468;&#x5B8C;&#x6210;\"></a>&#x4E0B;&#x5468;&#x5B8C;&#x6210;</h3><ul>\n<li>&#x5199;&#x5B8C;&#x8BED;&#x6587;&#x5BD2;&#x5047;&#x4F5C;&#x4E1A;&#xFF01;&#xFF01;&#xFF01;<span class=\"spoiler\">&#x6211;&#x89C9;&#x5F97;&#x4E0A;&#x9762;&#x7684;&#x4E8B;&#x60C5;&#x591F;&#x5145;&#x6EE1;&#x6574;&#x6574;&#x4E00;&#x5468;&#x4E86;&#x55EF;&#x3002;\n</span>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018&#x5E74;&#x4E8C;&#x6708;-&#x7B2C;&#x4E8C;&#x5468;\"><a href=\"#2018&#x5E74;&#x4E8C;&#x6708;-&#x7B2C;&#x4E8C;&#x5468;\" class=\"headerlink\" title=\"2018&#x5E74;&#x4E8C;&#x6708; &#x7B2C;&#x4E8C;&#x5468;\"></a>2018&#x5E74;&#x4E8C;&#x6708; &#x7B2C;&#x4E8C;&#x5468;</h2><h3 id=\"2018-2-5-2018-2-11\"><a href=\"#2018-2-5-2018-2-11\" class=\"headerlink\" title=\"2018.2.5-2018.2.11\"></a>2018.2.5-2018.2.11</h3>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=36117196&amp;auto=0&amp;height=66\"></iframe>\n\n<h2 id=\"&#x6B63;&#x6587;\"><a href=\"#&#x6B63;&#x6587;\" class=\"headerlink\" title=\"&#x6B63;&#x6587;\"></a>&#x6B63;&#x6587;</h2><p>&#x8FD9;&#x4E00;&#x5468;&#x6CA1;&#x5E72;&#x4EC0;&#x4E48;&#x4E8B;&#x2026;&#x8FD9;&#x4E48;&#x4E00;&#x60F3;&#x5FFD;&#x7136;&#x5C31;&#x9893;&#x5E9F;&#x4E86;&#x2026;</p>\n<p>&#x5199;&#x4E86;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x4E8C;&#x5206;&#x56FE;&#xFF0C;&#x5199;&#x4E86;&#x51E0;&#x9053;&#x56FE;&#x548C;&#x6811;&#x7684;&#x9898;&#x3002;&#x4EFF;&#x4F5B;&#x5C31;&#x662F;&#x6BEB;&#x65E0;&#x76EE;&#x7684;&#x7684;&#x4E00;&#x822C;&#x3002;&#x4E0D;&#x8FC7;&#x8FD8;&#x662F;&#x628A;&#x770B;&#x4E86;&#x5F88;&#x4E45;&#x7684;&#x51E0;&#x9053;&#x5E76;&#x67E5;&#x96C6;&#x7684;&#x9898;&#x7ED9;A&#x4E86;&#x3002;&#x8FD8;&#x662F;&#x86EE;&#x6FC0;&#x52A8;&#x7684;&#x3002;</p>\n<p>&#x62B1;&#x4E86;&#x6D1B;&#x8C37;&#x7684;&#x7F51;&#x8BFE;&#xFF0C;&#x4E8E;&#x662F;&#x4F53;&#x4F1A;&#x5230;&#x4E86;&#x4E00;&#x4E0A;&#x5348;&#x5B66;&#x5E73;&#x8861;&#x6811;&#x3001;&#x4E3B;&#x5E2D;&#x6811;&#x3001;&#x6811;&#x5957;&#x6811;&#x7684;&#x9178;&#x723D;&#x3002;&#x597D;&#x591A;&#x7684;&#x4E1C;&#x897F;&#x8FD8;&#x6CA1;&#x6765;&#x5F97;&#x53CA;&#x5B9E;&#x73B0;&#xFF0C;&#x53EA;&#x597D;&#x7B49;&#x4E00;&#x7B49;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x5012;&#x662F;&#x6DF1;&#x523B;&#x610F;&#x8BC6;&#x5230;&#x4E86;&#x81EA;&#x5DF1;&#x7684;&#x849F;&#x84BB;&#x3002;&#x5567;&#x5567;&#x3002;</p>\n<p>&#x6625;&#x8282;&#x5C31;&#x5FEB;&#x8981;&#x5230;&#x4E86;&#x3002;&#x826F;&#x5BB5;&#x4F73;&#x8282;&#xFF0C;&#x4E0D;&#x5982;&#x597D;&#x597D;&#x8865;&#x8865;&#x4F5C;&#x4E1A;&#x3002;</p>\n<p><img src=\"title.png\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"&#x8FD9;&#x5468;&#x5B8C;&#x6210;\"><a href=\"#&#x8FD9;&#x5468;&#x5B8C;&#x6210;\" class=\"headerlink\" title=\"&#x8FD9;&#x5468;&#x5B8C;&#x6210;\"></a>&#x8FD9;&#x5468;&#x5B8C;&#x6210;</h3><ul>\n<li>&#x5B8C;&#x6210;&#x83AB;&#x961F;&#x7B97;&#x6CD5;&#x5B66;&#x4E60;&#x7B14;&#x8BB0; &#x2714; &#x5199;&#x4E86;&#x4E00;&#x7BC7;</li>\n<li>&#x5199;&#x2026;&#x8BED;&#x6587;&#x4F5C;&#x4E1A;&#x2026; &#x2714;&#x5199;&#x4E86;&#x4E00;&#x70B9;</li>\n<li>&#x63A5;&#x7740;&#x5B66;&#x7F51;&#x7EDC;&#x6D41; &#x8D39;&#x7528;&#x6D41; &#x2718;&#x5E76;&#x6CA1;&#x6709;&#x5199;&#x8D39;&#x7528;&#x6D41;</li>\n<li>&#x63A5;&#x7740;&#x505A;&#x9898;&#x5566; &#x2714;&#x505A;&#x4E86;&#x51E0;&#x9053;&#x6C34;&#x9898;&#x2026;</li>\n</ul>\n<h3 id=\"&#x4E0B;&#x5468;&#x5B8C;&#x6210;\"><a href=\"#&#x4E0B;&#x5468;&#x5B8C;&#x6210;\" class=\"headerlink\" title=\"&#x4E0B;&#x5468;&#x5B8C;&#x6210;\"></a>&#x4E0B;&#x5468;&#x5B8C;&#x6210;</h3><ul>\n<li>&#x5199;&#x5B8C;&#x8BED;&#x6587;&#x5BD2;&#x5047;&#x4F5C;&#x4E1A;&#xFF01;&#xFF01;&#xFF01;<span class=\"spoiler\">&#x6211;&#x89C9;&#x5F97;&#x4E0A;&#x9762;&#x7684;&#x4E8B;&#x60C5;&#x591F;&#x5145;&#x6EE1;&#x6574;&#x6574;&#x4E00;&#x5468;&#x4E86;&#x55EF;&#x3002;\n</span>\n</li>\n</ul>"},{"title":"2018 JanWeek2","date":"2018-01-13T07:59:08.000Z","visible":null,"urlname":"2018-JanWeek2","_content":"\n## 2018年一月 第二周\n### 2018.1.7-2018.1.14\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=34179200&auto=0&height=66\"></iframe>\n\n### 写在前面\n莫名的就突然有一种做一做总结的欲望。\n想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。\n\n## 正文\n转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。\n\n![](title.png)\n\n## TodoList\n### 这周完成\n无\n\n### 下周\n+ 复习&考好期末\n+ 考完试学：\n    + Trie\n    + Treap\n+ 出没出完的题\n+ 准备好冬令营旅游\n","source":"_posts/2018-JanWeek2.md","raw":"---\ntitle: 2018 JanWeek2\ndate: 2018-01-13 15:59:08\ntags:\ncategories: 总结\nvisible:\nurlname: 2018-JanWeek2\n---\n\n## 2018年一月 第二周\n### 2018.1.7-2018.1.14\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=34179200&auto=0&height=66\"></iframe>\n\n### 写在前面\n莫名的就突然有一种做一做总结的欲望。\n想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。\n\n## 正文\n转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。\n\n![](title.png)\n\n## TodoList\n### 这周完成\n无\n\n### 下周\n+ 复习&考好期末\n+ 考完试学：\n    + Trie\n    + Treap\n+ 出没出完的题\n+ 准备好冬令营旅游\n","slug":"2018-JanWeek2","published":1,"updated":"2018-02-01T05:27:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosf600055os6vnc4zzru","content":"<h2 id=\"2018年一月-第二周\"><a href=\"#2018年一月-第二周\" class=\"headerlink\" title=\"2018年一月 第二周\"></a>2018年一月 第二周</h2><h3 id=\"2018-1-7-2018-1-14\"><a href=\"#2018-1-7-2018-1-14\" class=\"headerlink\" title=\"2018.1.7-2018.1.14\"></a>2018.1.7-2018.1.14</h3><a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=34179200&auto=0&height=66\"></iframe>\n\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>莫名的就突然有一种做一做总结的欲望。<br>想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。</p>\n<p><img src=\"title.png\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><p>无</p>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>复习&amp;考好期末</li>\n<li>考完试学：<ul>\n<li>Trie</li>\n<li>Treap</li>\n</ul>\n</li>\n<li>出没出完的题</li>\n<li>准备好冬令营旅游</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018年一月-第二周\"><a href=\"#2018年一月-第二周\" class=\"headerlink\" title=\"2018年一月 第二周\"></a>2018年一月 第二周</h2><h3 id=\"2018-1-7-2018-1-14\"><a href=\"#2018-1-7-2018-1-14\" class=\"headerlink\" title=\"2018.1.7-2018.1.14\"></a>2018.1.7-2018.1.14</h3>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=34179200&auto=0&height=66\"></iframe>\n\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>莫名的就突然有一种做一做总结的欲望。<br>想到爸爸。以前啊，总是能看到爸爸每周做一次周报，每月做一次月报，季报，年报，诸如此类。其实也未尝不是一种好想法吧。尤其对我这种健忘的人，以后只要看看这些总结，也就能知道一些好玩的事情了。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>转眼就2018了。这一周也没干什么正事，不过是写写作业、出出题，打打游戏。期末考试前的最后一周，真的很有趣呢。第二次轮到写班级日志，也只是草草敷衍了事。这一周没有竞赛课，也就更没有时间去督促自己coding了。看着某人luogu上一条直线的刷题数量，扎心。考完试后一定要玩命的学，玩命的刷题。这半个月复习期末带来的的损失真是不小的。</p>\n<p><img src=\"title.png\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><p>无</p>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>复习&amp;考好期末</li>\n<li>考完试学：<ul>\n<li>Trie</li>\n<li>Treap</li>\n</ul>\n</li>\n<li>出没出完的题</li>\n<li>准备好冬令营旅游</li>\n</ul>"},{"title":"2018 JanWeek3","date":"2018-01-20T13:17:20.000Z","visible":null,"urlname":"2018-JanWeek3","_content":"\n## 2018年一月 第三周\n### 2018.1.15-2018.1.21\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35807133&auto=0&height=66\"></iframe>\n\n## 正文\n这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？\n这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。\n要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。\n\n![](title.jpg)\n\n## TodoList\n### 这周完成\n+ 考好期末 ✔考的还不错\n+ 考完试学：\n    + Trie ✘根本没学\n    + Treap ✘还没有实现\n+ 出没出完的题 ✘还是懒得出题\n+ 准备好冬令营旅游 ✔旅游目前顺利\n\n### 下周\n+ 愉快的度过冬令营\n+ 结课考试不爆0\n+ 每天保证3-5道的刷题效率\n+ 顺便写点寒假作业\n","source":"_posts/2018-JanWeek3.md","raw":"---\ntitle: 2018 JanWeek3\ndate: 2018-01-20 21:17:20\ntags:\ncategories: 总结\nvisible:\nurlname: 2018-JanWeek3\n---\n\n## 2018年一月 第三周\n### 2018.1.15-2018.1.21\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=35807133&auto=0&height=66\"></iframe>\n\n## 正文\n这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？\n这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。\n要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。\n\n![](title.jpg)\n\n## TodoList\n### 这周完成\n+ 考好期末 ✔考的还不错\n+ 考完试学：\n    + Trie ✘根本没学\n    + Treap ✘还没有实现\n+ 出没出完的题 ✘还是懒得出题\n+ 准备好冬令营旅游 ✔旅游目前顺利\n\n### 下周\n+ 愉快的度过冬令营\n+ 结课考试不爆0\n+ 每天保证3-5道的刷题效率\n+ 顺便写点寒假作业\n","slug":"2018-JanWeek3","published":1,"updated":"2018-02-01T05:27:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosfg00085os6o2mnri5j","content":"<h2 id=\"2018年一月-第三周\"><a href=\"#2018年一月-第三周\" class=\"headerlink\" title=\"2018年一月 第三周\"></a>2018年一月 第三周</h2><h3 id=\"2018-1-15-2018-1-21\"><a href=\"#2018-1-15-2018-1-21\" class=\"headerlink\" title=\"2018.1.15-2018.1.21\"></a>2018.1.15-2018.1.21</h3><a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=35807133&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？<br>这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。<br>要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>考好期末 ✔考的还不错</li>\n<li>考完试学：<ul>\n<li>Trie ✘根本没学</li>\n<li>Treap ✘还没有实现</li>\n</ul>\n</li>\n<li>出没出完的题 ✘还是懒得出题</li>\n<li>准备好冬令营旅游 ✔旅游目前顺利</li>\n</ul>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>愉快的度过冬令营</li>\n<li>结课考试不爆0</li>\n<li>每天保证3-5道的刷题效率</li>\n<li>顺便写点寒假作业</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018年一月-第三周\"><a href=\"#2018年一月-第三周\" class=\"headerlink\" title=\"2018年一月 第三周\"></a>2018年一月 第三周</h2><h3 id=\"2018-1-15-2018-1-21\"><a href=\"#2018-1-15-2018-1-21\" class=\"headerlink\" title=\"2018.1.15-2018.1.21\"></a>2018.1.15-2018.1.21</h3>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=35807133&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>这一周可是干了不少事。期末考试考的也还算不错，校次竟然还前进了两名。所以看来也许可以寒假认真刷题了？？？<br>这周学了不少东西。主要是线段树和状压dp，感觉也不是太难。冬令营今天是第一天，听了胡伟栋的“深度优先搜索”，估计也就是冬令营唯一能听懂的一节课了。<br>要说还有什么的话就是洛谷的AC终于到了200。不容易啊。不过马上就能到寒假了。定一个目标，寒假刷过100题吧。所以，希望寒假再回来洛谷的AC能过300吧。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>考好期末 ✔考的还不错</li>\n<li>考完试学：<ul>\n<li>Trie ✘根本没学</li>\n<li>Treap ✘还没有实现</li>\n</ul>\n</li>\n<li>出没出完的题 ✘还是懒得出题</li>\n<li>准备好冬令营旅游 ✔旅游目前顺利</li>\n</ul>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>愉快的度过冬令营</li>\n<li>结课考试不爆0</li>\n<li>每天保证3-5道的刷题效率</li>\n<li>顺便写点寒假作业</li>\n</ul>"},{"title":"2018 JanWeek4&Month1","date":"2018-01-28T01:22:46.000Z","visible":null,"urlname":"2018-JanWeek4","_content":"\n## 2018年一月 第四周 && 2018年一月\n### 2018.1.22-2018.1.28\n### 2018.1\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=416890449&auto=0&height=66\"></iframe>\n\n## 正文\n\n其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。\n\n转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。\n\n不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。\n\n这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。\n\n学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。\n\n然后高中生活就过去了。\n\n![](title.jpg)\n\n## TodoList\n### 这周完成\n\n+ 考完试学：\n    + Trie ✔成功学习\n    + Treap ✔成功实现\n+ 出没出完的题 ✔颓了一道膜版交上去了\n+ 愉快的度过冬令营 ✔旅游很顺利 愉快\n+ 结课考试不爆0 ✔5分哈哈哈\n+ 每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右\n+ 顺便写点寒假作业 ✔强行水完了化学和一半的物理作业\n\n### 下周\n\n+ 实现AC自动机\n+ 学会fhq Treap或者Splay\n+ 写完至少物理、地理、一小半数学的寒假作业\n+ 至少写一篇题解发到这里（待选主题：线段树，状压dp\n+ 出去玩```\\(≧▽≦)/```\n\n","source":"_posts/2018-JanWeek4-Month1.md","raw":"---\ntitle: 2018 JanWeek4&Month1\ndate: 2018-01-28 09:22:46\ntags:\ncategories: 总结\nvisible:\nurlname: 2018-JanWeek4\n---\n\n## 2018年一月 第四周 && 2018年一月\n### 2018.1.22-2018.1.28\n### 2018.1\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=416890449&auto=0&height=66\"></iframe>\n\n## 正文\n\n其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。\n\n转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。\n\n不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。\n\n这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。\n\n学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。\n\n然后高中生活就过去了。\n\n![](title.jpg)\n\n## TodoList\n### 这周完成\n\n+ 考完试学：\n    + Trie ✔成功学习\n    + Treap ✔成功实现\n+ 出没出完的题 ✔颓了一道膜版交上去了\n+ 愉快的度过冬令营 ✔旅游很顺利 愉快\n+ 结课考试不爆0 ✔5分哈哈哈\n+ 每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右\n+ 顺便写点寒假作业 ✔强行水完了化学和一半的物理作业\n\n### 下周\n\n+ 实现AC自动机\n+ 学会fhq Treap或者Splay\n+ 写完至少物理、地理、一小半数学的寒假作业\n+ 至少写一篇题解发到这里（待选主题：线段树，状压dp\n+ 出去玩```\\(≧▽≦)/```\n\n","slug":"2018-JanWeek4-Month1","published":1,"updated":"2018-02-05T11:13:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosfj000a5os6krcn7j5i","content":"<h2 id=\"2018年一月-第四周-amp-amp-2018年一月\"><a href=\"#2018年一月-第四周-amp-amp-2018年一月\" class=\"headerlink\" title=\"2018年一月 第四周 &amp;&amp; 2018年一月\"></a>2018年一月 第四周 &amp;&amp; 2018年一月</h2><h3 id=\"2018-1-22-2018-1-28\"><a href=\"#2018-1-22-2018-1-28\" class=\"headerlink\" title=\"2018.1.22-2018.1.28\"></a>2018.1.22-2018.1.28</h3><h3 id=\"2018-1\"><a href=\"#2018-1\" class=\"headerlink\" title=\"2018.1\"></a>2018.1</h3><a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=416890449&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。</p>\n<p>转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。</p>\n<p>不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。</p>\n<p>这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。</p>\n<p>学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。</p>\n<p>然后高中生活就过去了。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>考完试学：<ul>\n<li>Trie ✔成功学习</li>\n<li>Treap ✔成功实现</li>\n</ul>\n</li>\n<li>出没出完的题 ✔颓了一道膜版交上去了</li>\n<li>愉快的度过冬令营 ✔旅游很顺利 愉快</li>\n<li>结课考试不爆0 ✔5分哈哈哈</li>\n<li>每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右</li>\n<li>顺便写点寒假作业 ✔强行水完了化学和一半的物理作业</li>\n</ul>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>实现AC自动机</li>\n<li>学会fhq Treap或者Splay</li>\n<li>写完至少物理、地理、一小半数学的寒假作业</li>\n<li>至少写一篇题解发到这里（待选主题：线段树，状压dp</li>\n<li>出去玩<code>\\(≧▽≦)/</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"2018年一月-第四周-amp-amp-2018年一月\"><a href=\"#2018年一月-第四周-amp-amp-2018年一月\" class=\"headerlink\" title=\"2018年一月 第四周 &amp;&amp; 2018年一月\"></a>2018年一月 第四周 &amp;&amp; 2018年一月</h2><h3 id=\"2018-1-22-2018-1-28\"><a href=\"#2018-1-22-2018-1-28\" class=\"headerlink\" title=\"2018.1.22-2018.1.28\"></a>2018.1.22-2018.1.28</h3><h3 id=\"2018-1\"><a href=\"#2018-1\" class=\"headerlink\" title=\"2018.1\"></a>2018.1</h3>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=416890449&auto=0&height=66\"></iframe>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>其实本该昨天写的。但由于昨天上午考试，下午去参加一个会一直到12点，然后也就没有时间去写总结了。</p>\n<p>转眼间，一月就过去了呢。这一个月大约是高中生活以来最充实的一个月吧。截止我现在写总结的时候，寒假似乎还没有开始。前几天一直不停不停的从早上到晚课，然而今天却还是要考四个小时的试。啧啧。在一月里，期末也考完了，冬令营也搞完了，然而感觉生活还是很忙。也无比的怀念新年联欢的时候，那种轻松悠闲的感觉。而且，毕竟，那还是去年。</p>\n<p>不过忙也好，至少说明现在不是在碌碌无为。寒假也许都会这么充实下去吧。话说农历新年也快要来了，我也又要回老家了。</p>\n<p>这一周开始接着在冬令营颓废，然后去了两天学校，却还是不得已参加一坨令人无语的活动。真不知道该庆幸去了冬令营还是不去了。</p>\n<p>学期也算是正是结束了。下一个noip事实上也越来越近了。回首这一个学期，学会了很多，但同时也意识到，和高手们差的也很多。最后的十个月，我想将是不亚于中考冲刺的那10个月的一个体验吧（虽然我觉得那十个月就是颓过去的。想想也真是有趣，如果这一堆流程走完，大概也得到明年五六月份了。而那个时候，或许高三的总复习都快要开始了。</p>\n<p>然后高中生活就过去了。</p>\n<p><img src=\"title.jpg\" alt=\"\"></p>\n<h2 id=\"TodoList\"><a href=\"#TodoList\" class=\"headerlink\" title=\"TodoList\"></a>TodoList</h2><h3 id=\"这周完成\"><a href=\"#这周完成\" class=\"headerlink\" title=\"这周完成\"></a>这周完成</h3><ul>\n<li>考完试学：<ul>\n<li>Trie ✔成功学习</li>\n<li>Treap ✔成功实现</li>\n</ul>\n</li>\n<li>出没出完的题 ✔颓了一道膜版交上去了</li>\n<li>愉快的度过冬令营 ✔旅游很顺利 愉快</li>\n<li>结课考试不爆0 ✔5分哈哈哈</li>\n<li>每天保证3-5道的刷题效率 ✘大概也就每天2.5道左右</li>\n<li>顺便写点寒假作业 ✔强行水完了化学和一半的物理作业</li>\n</ul>\n<h3 id=\"下周\"><a href=\"#下周\" class=\"headerlink\" title=\"下周\"></a>下周</h3><ul>\n<li>实现AC自动机</li>\n<li>学会fhq Treap或者Splay</li>\n<li>写完至少物理、地理、一小半数学的寒假作业</li>\n<li>至少写一篇题解发到这里（待选主题：线段树，状压dp</li>\n<li>出去玩<code>\\(≧▽≦)/</code></li>\n</ul>"},{"title":"Dinic学习笔记","urlname":"dinic-notes","date":"2018-02-08T06:31:15.000Z","visible":null,"_content":"\nDinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \\times m)$，但大多数情况下会远远优于此时间复杂度。\n\n<!-- more -->\n\n## 基本概念\n\n从Menci神犇的[博客](https://oi.men.ci/dinic-notes/)复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。\n\n- 容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。\n\n- 流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。\n\n- 剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。\n\n- 反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。\n\n- 残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。\n\n- 增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。\n\n- 增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。\n\n- 层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。\n\n- 层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。\n\n## 思路\n\n用文字叙述大概如下：\n\n```\n1. 建立以出发点为源点的层次图（即源点到各店的距离）\n2. 在层次图&残量网络中寻找增广路，并增广流量\n3. 重复2直到找不到增广路\n4. 重复123直到不存在层次图\n```\n\n## 实现\n\n建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。\n具体实现的时候也有一定的技巧，在代码里面有注释。\n\n反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。\n\n有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。\n\n## 代码\n\n以[Luogu P3376](https://www.luogu.org/problemnew/show/P3376)为例\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nstruct Edge{\n    int from,to,flow,cap;\n    int next;\n}edge[201000];\nint fir[10100],dis[10100],cur[10100];\n\nint n,m,s,t,tot = 2;//tot从2开始是最舒服的，既可以直接异或，后面的终止条件也不用想来想去。\n\nbool bfs(){\n    queue<int> q;\n    memset(dis,0,sizeof(dis));\n    memcpy(cur,fir,sizeof(fir));//清空当前边\n    q.push(s);dis[s] = 1;\n    while(!q.empty()){\n        int nown = q.front();q.pop();\n        for(int nowe = fir[nown];nowe!=0;nowe = edge[nowe].next){\n            int v = edge[nowe].to;\n            if(dis[v] == 0 && edge[nowe].cap > edge[nowe].flow){\n                //两个条件：未遍历而且边可以增广\n                dis[v] = dis[nown]+1;\n                q.push(v);\n                //由于我们只沿最短路增广，所以这里就可以直接break掉了。\n                if(v == t)\n                    return dis[t];\n            }\n        }\n    }\n    return dis[t];\n}\n\nint dfs(int nown,int limit = 0x3f3f3f3f){\n    //找到终点或没得可找 这个优化很重要\n    if(nown == t || limit == 0)\n        return limit;\n    for(int &nowe = cur[nown];nowe!=0;nowe = edge[nowe].next){\n        //这里有当前弧优化\n        int v = edge[nowe].to;\n        if(dis[v] == dis[nown]+1 && edge[nowe].flow < edge[nowe].cap){\n            //满足层次图条件(沿着最短路)\n            int f = dfs(v,min(edge[nowe].cap-edge[nowe].flow,limit));\n            if(f>0){\n                //更改当前边\n                edge[nowe].flow+=f;\n                edge[nowe^1].flow-=f;\n                return f;\n            }\n        }\n    }\n    return 0;\n}\n\nint dinic(){\n    int ans = 0,f;\n    while(bfs()){//bfs是步骤1\n        while( (f = dfs(s)) > 0)//dfs是步骤2\n            ans+=f;\n    }\n    return ans;\n}\n\nvoid addedge(int a,int b,int c){\n    edge[tot].from = a;edge[tot].to = b;\n    edge[tot].cap = c;edge[tot].flow = 0;\n    edge[tot].next = fir[a];fir[a] = tot;\n    tot++;\n}\n\nint main(){\n    scanf(\"%d %d %d %d\",&n,&m,&s,&t);\n    for(int i = 0;i<m;i++){\n        int a,b,c;\n        scanf(\"%d %d %d\",&a,&b,&c);\n        addedge(a,b,c);\n        addedge(b,a,0);//需要加反向边\n    }\n    printf(\"%d\\n\",dinic());\n    return 0;\n}\n```\n\n{% endfold %}\n","source":"_posts/Dinic学习笔记.md","raw":"---\ntitle: Dinic学习笔记\nurlname: dinic-notes\ndate: 2018-02-08 14:31:15\ntags:\n- 笔记\n- 图论\n- Dinic\n- 模板\ncategories: OI\nvisible:\n---\n\nDinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \\times m)$，但大多数情况下会远远优于此时间复杂度。\n\n<!-- more -->\n\n## 基本概念\n\n从Menci神犇的[博客](https://oi.men.ci/dinic-notes/)复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。\n\n- 容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。\n\n- 流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。\n\n- 剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。\n\n- 反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。\n\n- 残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。\n\n- 增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。\n\n- 增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。\n\n- 层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。\n\n- 层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。\n\n## 思路\n\n用文字叙述大概如下：\n\n```\n1. 建立以出发点为源点的层次图（即源点到各店的距离）\n2. 在层次图&残量网络中寻找增广路，并增广流量\n3. 重复2直到找不到增广路\n4. 重复123直到不存在层次图\n```\n\n## 实现\n\n建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。\n具体实现的时候也有一定的技巧，在代码里面有注释。\n\n反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。\n\n有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。\n\n## 代码\n\n以[Luogu P3376](https://www.luogu.org/problemnew/show/P3376)为例\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nstruct Edge{\n    int from,to,flow,cap;\n    int next;\n}edge[201000];\nint fir[10100],dis[10100],cur[10100];\n\nint n,m,s,t,tot = 2;//tot从2开始是最舒服的，既可以直接异或，后面的终止条件也不用想来想去。\n\nbool bfs(){\n    queue<int> q;\n    memset(dis,0,sizeof(dis));\n    memcpy(cur,fir,sizeof(fir));//清空当前边\n    q.push(s);dis[s] = 1;\n    while(!q.empty()){\n        int nown = q.front();q.pop();\n        for(int nowe = fir[nown];nowe!=0;nowe = edge[nowe].next){\n            int v = edge[nowe].to;\n            if(dis[v] == 0 && edge[nowe].cap > edge[nowe].flow){\n                //两个条件：未遍历而且边可以增广\n                dis[v] = dis[nown]+1;\n                q.push(v);\n                //由于我们只沿最短路增广，所以这里就可以直接break掉了。\n                if(v == t)\n                    return dis[t];\n            }\n        }\n    }\n    return dis[t];\n}\n\nint dfs(int nown,int limit = 0x3f3f3f3f){\n    //找到终点或没得可找 这个优化很重要\n    if(nown == t || limit == 0)\n        return limit;\n    for(int &nowe = cur[nown];nowe!=0;nowe = edge[nowe].next){\n        //这里有当前弧优化\n        int v = edge[nowe].to;\n        if(dis[v] == dis[nown]+1 && edge[nowe].flow < edge[nowe].cap){\n            //满足层次图条件(沿着最短路)\n            int f = dfs(v,min(edge[nowe].cap-edge[nowe].flow,limit));\n            if(f>0){\n                //更改当前边\n                edge[nowe].flow+=f;\n                edge[nowe^1].flow-=f;\n                return f;\n            }\n        }\n    }\n    return 0;\n}\n\nint dinic(){\n    int ans = 0,f;\n    while(bfs()){//bfs是步骤1\n        while( (f = dfs(s)) > 0)//dfs是步骤2\n            ans+=f;\n    }\n    return ans;\n}\n\nvoid addedge(int a,int b,int c){\n    edge[tot].from = a;edge[tot].to = b;\n    edge[tot].cap = c;edge[tot].flow = 0;\n    edge[tot].next = fir[a];fir[a] = tot;\n    tot++;\n}\n\nint main(){\n    scanf(\"%d %d %d %d\",&n,&m,&s,&t);\n    for(int i = 0;i<m;i++){\n        int a,b,c;\n        scanf(\"%d %d %d\",&a,&b,&c);\n        addedge(a,b,c);\n        addedge(b,a,0);//需要加反向边\n    }\n    printf(\"%d\\n\",dinic());\n    return 0;\n}\n```\n\n{% endfold %}\n","slug":"Dinic学习笔记","published":1,"updated":"2018-02-08T07:37:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosfn000d5os6qvurcjz5","content":"<p>Dinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \\times m)$，但大多数情况下会远远优于此时间复杂度。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>从Menci神犇的<a href=\"https://oi.men.ci/dinic-notes/\" target=\"_blank\" rel=\"noopener\">博客</a>复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。</p>\n<ul>\n<li><p>容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。</p>\n</li>\n<li><p>流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。</p>\n</li>\n<li><p>剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。</p>\n</li>\n<li><p>反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。</p>\n</li>\n<li><p>残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。</p>\n</li>\n<li><p>增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。</p>\n</li>\n<li><p>增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。</p>\n</li>\n<li><p>层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。</p>\n</li>\n<li><p>层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。</p>\n</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>用文字叙述大概如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 建立以出发点为源点的层次图（即源点到各店的距离）</span><br><span class=\"line\">2. 在层次图&amp;残量网络中寻找增广路，并增广流量</span><br><span class=\"line\">3. 重复2直到找不到增广路</span><br><span class=\"line\">4. 重复123直到不存在层次图</span><br></pre></td></tr></table></figure>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。<br>具体实现的时候也有一定的技巧，在代码里面有注释。</p>\n<p>反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。</p>\n<p>有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以<a href=\"https://www.luogu.org/problemnew/show/P3376\" target=\"_blank\" rel=\"noopener\">Luogu P3376</a>为例</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,flow,cap;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">201000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[<span class=\"number\">10100</span>],dis[<span class=\"number\">10100</span>],cur[<span class=\"number\">10100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s,t,tot = <span class=\"number\">2</span>;<span class=\"comment\">//tot从2开始是最舒服的，既可以直接异或，后面的终止条件也不用想来想去。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(cur,fir,<span class=\"keyword\">sizeof</span>(fir));<span class=\"comment\">//清空当前边</span></span><br><span class=\"line\">    q.push(s);dis[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nown = q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> nowe = fir[nown];nowe!=<span class=\"number\">0</span>;nowe = edge[nowe].next)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[nowe].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[v] == <span class=\"number\">0</span> &amp;&amp; edge[nowe].cap &gt; edge[nowe].flow)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//两个条件：未遍历而且边可以增广</span></span><br><span class=\"line\">                dis[v] = dis[nown]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.push(v);</span><br><span class=\"line\">                <span class=\"comment\">//由于我们只沿最短路增广，所以这里就可以直接break掉了。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v == t)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> dis[t];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> nown,<span class=\"keyword\">int</span> limit = <span class=\"number\">0x3f3f3f3f</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//找到终点或没得可找 这个优化很重要</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nown == t || limit == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> &amp;nowe = cur[nown];nowe!=<span class=\"number\">0</span>;nowe = edge[nowe].next)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里有当前弧优化</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = edge[nowe].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dis[v] == dis[nown]+<span class=\"number\">1</span> &amp;&amp; edge[nowe].flow &lt; edge[nowe].cap)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//满足层次图条件(沿着最短路)</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> f = dfs(v,min(edge[nowe].cap-edge[nowe].flow,limit));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//更改当前边</span></span><br><span class=\"line\">                edge[nowe].flow+=f;</span><br><span class=\"line\">                edge[nowe^<span class=\"number\">1</span>].flow-=f;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,f;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(bfs())&#123;<span class=\"comment\">//bfs是步骤1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>( (f = dfs(s)) &gt; <span class=\"number\">0</span>)<span class=\"comment\">//dfs是步骤2</span></span><br><span class=\"line\">            ans+=f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[tot].from = a;edge[tot].to = b;</span><br><span class=\"line\">    edge[tot].cap = c;edge[tot].flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    edge[tot].next = fir[a];fir[a] = tot;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d %d\"</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        addedge(a,b,c);</span><br><span class=\"line\">        addedge(b,a,<span class=\"number\">0</span>);<span class=\"comment\">//需要加反向边</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,dinic());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>Dinic算法是一种用于网络流中最大流的增广路算法，其时间复杂度为$O(n^2 \\times m)$，但大多数情况下会远远优于此时间复杂度。</p>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>从Menci神犇的<a href=\"https://oi.men.ci/dinic-notes/\" target=\"_blank\" rel=\"noopener\">博客</a>复制而来。我觉得这写的是很好的一篇介绍，除了代码风格不太喜欢。</p>\n<ul>\n<li><p>容量： ${capacity}(e)$ 表示一条有向边 $e(u,v)$ 的最大允许的流量。</p>\n</li>\n<li><p>流量： ${flow}(e)$ 表示一条有向边 $e(u,v)$ 总容量中已被占用的流量。</p>\n</li>\n<li><p>剩余容量（残量）：即 $capacity(e)−flow(e)$，表示当前时刻某条有向边 $e(u,v)$ 总流量中未被占用的部分。</p>\n</li>\n<li><p>反向边：原图中每一条有向边在残量网络中都有对应的反向边，反向边的容量为$0$，容量的变化与原边相反；『反向边』的概念是相对的，即一条边的反向边的反向边是它本身。</p>\n</li>\n<li><p>残量网络：在原图的基础之上，添加每条边对应的反向边，并储存每条边的当前流量。残量网络会在算法进行的过程中被修改。</p>\n</li>\n<li><p>增广路（augmenting path）：残量网络中从源点到汇点的一条路径，增广路上所有边中最小的剩余容量为增广流量。</p>\n</li>\n<li><p>增广（augmenting）：在残量网络中寻找一条增广路，并将增广路上所有边的流量加上增广流量的过程。</p>\n</li>\n<li><p>层次： $level(u)$ 表示节点 $u$ 在层次图中与源点的距离。</p>\n</li>\n<li><p>层次图：在原残量网络中按照每个节点的层次来分层，只保留相邻两层的节点的图，满载（即流量等于容量）的边不存在于层次图中。</p>\n</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>用文字叙述大概如下：</p>\n<!--�0-->\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>建立层次图使用bfs，而寻找增广路则是使用dfs递归增广。<br>具体实现的时候也有一定的技巧，在代码里面有注释。</p>\n<p>反向边存在的意义是什么呢？形象来说其实就是给你一个后悔的机会，往一边流去之后还能再回来。注意反向边的容量在我这里初始为0。</p>\n<p>有一个优化就是当前弧优化。这个优化是很显而易见的。如果这条边在当前层次图下找不到路，那么这条边在当前层次图内就再也不会用到。所以我们单开一个cur数组，记录目前遍历到的边，这样就可以进行优化。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以<a href=\"https://www.luogu.org/problemnew/show/P3376\" target=\"_blank\" rel=\"noopener\">Luogu P3376</a>为例</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<!--�1-->\n\n</div></div>"},{"title":"Treap学习笔记","date":"2018-01-30T10:41:41.000Z","visible":null,"mathjax":true,"urlname":"treap-notes","_content":"\n闲下来了，开始写一点学习笔记，也希望能给后人造福吧。\n\n第一篇来说一说Treap。\n<!-- more -->\n\n## Treap是什么\n### Tree + Heap\n树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。\n<!-- more -->\n\n## 基本思想及操作\n一般在Treap里面维护一个最小堆。\n### 旋转\n旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。\n旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。\n\n### 按关键字寻找\n可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。\n\n### 插入\n在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。\n\n### 删除\n如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。\n\n### 查询排名\n在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。\n\n### 按排名查找\n需要对每一个节点维护一个`size`值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的`size`值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。\n\n### 前驱&后继\n在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。\n以前驱为例。\n\n如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。\n\n第一种很容易想明白，第二种稍难一些。\n\n![前驱和后继](lower_upper.gif)\n\n以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。\n\n可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。\n\n后继同理。\n\n插入、删除等以上操作的\b期望时间复杂度都是$O(\\log {n})$，因为树的期望高度h是$\\log {n}$。\n\n\n## 代码\n以[洛谷P3369 普通平衡树](https://www.luogu.org/problemnew/show/P3369)为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。\n\n（其实我还是觉得数组好写\n\n### 结构体的定义\n\n```cpp\ntemplate<typename T,size_t siz>\nstruct treap{\n    struct node_t{\n        T val;\n        int p,size,cnt;\n        node_t *son[2];\n    };\n    int treapcnt;\n    node_t pool[siz<<1],*root,*null;\n```\n\n在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。\n\n对于每一个节点，我们维护以下几个信息：\b关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。\n\n在结构体的变量中，我们维护了一个静态内存池，\b内存池已经使用的数量，根节点的指针，以及一个虚的空节点。\n\n在这里自己定义一个空节点的好处主要是可以避免`NULL`导致的`segmentation fault`，以及让函数编写变得更加简单。\n\n需要注意的是，视题目不同，`cnt`变量可能可以省去。\n\n### 一些简单函数\n\n```cpp\n    void newnode(node_t *&r){\n        r = &pool[Treapcnt++];\n        r->son[0] = r->son[1] = null;\n    }\n    void update(node_t *r){\n        r->size = r->son[0]->size + r->son[1]->size + r->cnt;\n    }\n    node_t* find_minormax(node_t *r,int tmp){//0最小 1最大\n        while(r->son[tmp]!=null)\n            r = r->son[tmp];\n        return r;\n    }\n```\n\nnewnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生`NULL`这种可怕的东西。其实在这里也可以把赋关键字、随机值、`size`值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。\n\nupdate函数在这里完成对节点`size`值的更新，很好理解。\n\nfind_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。\n\n后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。\n\n### 结构体的初始化\n\n```cpp\n    treap(){\n        treapcnt = 0;\n        newnode(null);\n        null->size = null->val = 0;\n        null->p = MAXINT;\n        root = null;\n        srand(time(NULL));\n    }\n```\n\n结构体的初始化不难，有几点需要注意：\n\b\n+ 空指针的`size`需要为0\n+ 空指针的随机值需要**足够大**（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了\n+ 最好srand一下\n\n### 旋转\n\n```cpp\n    void rotate(node_t *&r,int tmp){//0左旋，1右旋\n        node_t *t = r->son[1-tmp];\n        r->son[1-tmp] = t->son[tmp];\n        t->son[tmp] = r;\n        update(r),update(t);\n        r = t;\n    }\n```\n\n![旋转图片](rotate.gif)\n\n旋转操作的文字叙述：\n（括号里文字以左旋为例）\n\n1. 选定当前节点r *（图中的x）*\n2. 找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）*（图中的y）*\n3. 把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 *（把b接在x的右子位置上）*\n4. 把r接到t空出来的位置上 *（把x接到y的x的左子树上）*\n5. 更新`size`值 *（更新x，y的`size`）*\n\n由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。\n\n其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误\n\n但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是**引用**传递，才能修改对应父节点的儿子指针。\n\n有一点很重要的就是要维护`size`的值，而且是从下到上。\n\n### 插入\n\n```cpp\n    void __insert(node_t *&r,T v){\n        if(r == null){\n            newnode(r);\n            r->val = v,r->cnt = 1,r->p = rand();\n        }\n        else{\n            if(r->val == v)\n                r->cnt++;\n            else{\n                int tmp = r->val < v;\n                __insert(r->son[tmp],v);\n                if(r->son[tmp]->p < r->p)\n                    rotate(r,1-tmp);\n            }\n        }\n        update(r);\n    }\n```\n\n用文字说明Treap的插入策略：\n\n1. 递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点\n2. 递归添加节点，比当前节点小向左，比当前节点大向右\n3. 维护最小堆的性质\n4. 更新`size`值\n\n在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。\n\n需要注意，这里的节点是**引用**方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接\n再次重复，不要忘记更新`size`值。\n\n### 删除\n\n```cpp\n    void __erase(node_t *&r,T v){\n        if(r->val == v){\n            if(r->cnt > 1) r->cnt--;\n            else{\n                if(r->son[0]==null && r->son[1]==null){\n                    r = null;return;\n                }\n                else{//还有子节点，\n                    int tmp = r->son[1]->p < r->son[0]->p;\n                    rotate(r,1-tmp);\n                    __erase(r,v);\n                }\n            }\n        }\n        else{\n            int tmp = r->val < v;\n            __erase(r->son[tmp],v);\n        }\n        update(r);\n    }\n```\n\n用文字说明Treap的删除策略：\n\n1. 递归边界：要删除的节点没有儿子节点\n2. 寻找到当前节点，减少数量或者向下旋转\n3. 维护最小堆的性质，即把两个儿子中权值较小的旋转上来\n4. 递归删除节点**注意此处的节点指针仍是r，因为r在旋转中已经发生了变化**\n5. 更新`size`值\n\n删除的时候最需要注意的已经在上面指出。\n\n还有在旋转比较的时候一定比较的是优先级！！！\n\nTreap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。\n\n### 查询排名&排名查询\n\n```cpp\n    int __getrank(node_t *r,T v){//查找数v的排名\n        if(r->val == v||r == null)//记得判空！\n            return r->son[0]->size + 1;\n        else if(v < r->val)\n            return __getrank(r->son[0],v);\n        else\n            return __getrank(r->son[1],v) + r->son[0]->size + r->cnt;\n    }\n    node_t* __qrank(node_t *r,int rank){//查找以rank排名的数\n        rank -= r->son[0]->size;\n        if(rank<=0)\n            return __qrank(r->son[0],rank + r->son[0]->size);\n        else if(rank <= r->cnt)\n            return r;\n        else\n            return __qrank(r->son[1],rank - r->cnt);\n    }\n```\n\n这两个比较简单，而且在上面也讲的很详细了，所以就一块说。\n\n查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。\n\n### 前驱和后继\n\n```cpp\n    node_t *loworup(T v,int t){//0代表前驱，1代表后继\n        node_t *last = null,*nown = root;\n        while(nown->val!=v && nown!=null){\n            int tmp =  nown->val < v;\n            if(tmp!=t) last = nown;\n            nown = nown->son[tmp];\n        }\n        if(nown->son[t]!=null)\n            last = find_minormax(nown->son[t],1-t);\n        return last;\n    }\n```\n\n这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。\n\n思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。\n\n~~多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通~~\n\n### 输出树\n\n```cpp\n    void __print(node_t *r,int depth = 0){\n        if(r == null) return;\n        else{\n            __print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');//打印深度\n            printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r->val,r->cnt,r->size,r->p,r->son[0]!=null,r->son[1]!=null);\n            __print(r->son[1],depth+1);\n        }\n    }\n```\n\n按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。\n\n\n### 封装\n\n```cpp\n    void insert(T v){__insert(root,v);}\n    void erase(T v){__erase(root,v);}\n    int getrank(T v){return __getrank(root,v);}\n    int qrank(int rank){return __qrank(root,rank)->val;}\n    int lower(T v){return loworup(v,0)->val;}\n    int upper(T v){return loworup(v,1)->val;}\n    void print(){__print(root);}\n```\n\n封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。\n\n\n## 完整代码及注释\n\n题目：[洛谷P3369 普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#define maxint  2147483647\nusing namespace std;\n\ntemplate<typename T,size_t siz>//模版T,需要有等于不等于和小于运算符\nstruct treap{\n    private:\n    struct node_t{\n        T val;\n        int p,size,cnt;\n        node_t *son[2];\n    };\n    int treapcnt;\n    node_t pool[siz<<1],*root,*null;\n    void newnode(node_t *&r){\n        r = &pool[treapcnt++];\n        r->son[0] = r->son[1] = null;\n    }\n    void update(node_t *r){\n        r->size = r->son[0]->size+r->son[1]->size+r->cnt;\n    }\n    void rotate(node_t *&r,int tmp){//0左旋，1右旋\n        node_t *t = r->son[1-tmp];//找到需要旋上来的节点\n        r->son[1-tmp] = t->son[tmp];//将被选节点的被遮蔽的儿子交给上面的节点\n        t->son[tmp] = r;//将r作为t的儿子\n        update(r),update(t);//注意更新顺序！先儿子后父亲\n        r = t;//通过引用更改上方节点的儿子\n    }\n    void __insert(node_t *&r,T v){//r代表当前节点，v代表关键字\n        if(r == null){//如果r的地方已经没有节点\n            newnode(r);//新建节点，并通过引用添加至上面节点的儿子\n            r->val = v,r->cnt = 1,r->p = rand();//对相关信息的设置\n        }\n        else{\n            if(r->val == v) //如果已经添加过，直接给数量++\n                r->cnt++;\n            else{\n                int tmp = r->val < v;\n                __insert(r->son[tmp],v);//递归更改\n                if(r->son[tmp]->p < r->p)//维护treap性质\n                    rotate(r,1-tmp);\n            }\n        }\n        update(r);//不要忘了更新！\n    }\n    void __erase(node_t *&r,T v){\n        if(r->val == v){//已经找到\n            if(r->cnt > 1) r->cnt--;\n            else{\n                if(r->son[0]==null && r->son[1]==null){//已经没有子节点，直接删除\n                    r = null;return;\n                }\n                else{//还有子节点，\n                    int tmp = r->son[1]->p < r->son[0]->p;\n                    rotate(r,1-tmp); //找到其中随机权值较小的一个旋转替换当前节点\n                    __erase(r,v);//递归删除 注意此处r已经发生了变化\n                }\n            }\n        }\n        else{//还没找到\n            int tmp = r->val < v;\n            __erase(r->son[tmp],v);//递归寻找\n        }\n        update(r);//不要忘了更新！\n    }\n    void __print(node_t *r,int depth = 0){//调试用\n        if(r == null) return;\n        else{\n            __print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');//打印深度\n            printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r->val,r->cnt,r->size,r->p,r->son[0]!=null,r->son[1]!=null);\n            __print(r->son[1],depth+1);\n        }\n    }\n    int __getrank(node_t *r,T v){//查找数v的排名\n        if(r->val == v||r == null)//记得判空！\n            return r->son[0]->size +1;\n        else if(v < r->val)\n            return __getrank(r->son[0],v);\n        else\n            return __getrank(r->son[1],v) + r->son[0]->size + r->cnt;\n    }\n    node_t* __qrank(node_t *r,int rank){//查找以rank排名的数\n        rank -= r->son[0]->size;\n        if(rank<=0)\n            return __qrank(r->son[0],rank + r->son[0]->size);\n        else if(rank <= r->cnt)\n            return r;\n        else\n            return __qrank(r->son[1],rank - r->cnt);\n    }\n    node_t *find_minormax(node_t *r,int tmp){\n        //寻找以r为根节点的树上最大或最小节点\n        while(r->son[tmp]!=null)\n            r = r->son[tmp];\n        return r;\n    }\n    node_t *loworup(T v,int t){//0代表前驱，1代表后继\n        node_t *last = null,*nown = root;//last表示上一个没有当前寻找方向的节点\n        while(nown->val!=v && nown!=null){//记得判空!\n            int tmp =  nown->val < v;\n            if(tmp!=t) last = nown;\n            nown = nown->son[tmp];\n        }\n        if(nown->son[t]!=null)//有子节点\n            last = find_minormax(nown->son[t],1-t);//寻找对应方向子节点的最小or最大值\n        return last;\n    }\n    public:\n    treap(){\n        treapcnt = 0;\n        newnode(null);\n        null->size = null->val=0;\n        null->p = maxint;\n        root = null;\n        srand(time(NULL));\n    }\n    void insert(T v){__insert(root,v);}\n    void erase(T v){__erase(root,v);}\n    int getrank(T v){return __getrank(root,v);}\n    int qrank(int rank){return __qrank(root,rank)->val;}\n    int lower(T v){return loworup(v,0)->val;}\n    int upper(T v){return loworup(v,1)->val;}\n    void print(){__print(root);}\n};\n\ntreap<int,200000> w;\n\nint n;\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0;i<n;i++){\n        int op, x;\n        scanf(\"%d %d\",&op,&x);\n        if(op == 1)      w.insert(x);\n        else if(op == 2) w.erase(x);\n        else if(op == 3) printf(\"%d\\n\",w.getrank(x));\n        else if(op == 4) printf(\"%d\\n\",w.qrank(x));\n        else if(op == 5) printf(\"%d\\n\",w.lower(x));\n        else if(op == 6) printf(\"%d\\n\",w.upper(x));\n        else if(op == 0) w.print();\n    }\n    return 0;\n}\n```\n\n{% endfold %}\n\n## 例题\n\n待加（其实我还没怎么写过\n","source":"_posts/Treap学习笔记.md","raw":"---\ntitle: Treap学习笔记\ndate: 2018-01-30 18:41:41\ntags: \n- 数据结构\n- 平衡树\n- Treap\n- 笔记\n- 模板\ncategories: OI\nvisible:\nmathjax: true\nurlname: treap-notes\n---\n\n闲下来了，开始写一点学习笔记，也希望能给后人造福吧。\n\n第一篇来说一说Treap。\n<!-- more -->\n\n## Treap是什么\n### Tree + Heap\n树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。\n<!-- more -->\n\n## 基本思想及操作\n一般在Treap里面维护一个最小堆。\n### 旋转\n旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。\n旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。\n\n### 按关键字寻找\n可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。\n\n### 插入\n在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。\n\n### 删除\n如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。\n\n### 查询排名\n在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。\n\n### 按排名查找\n需要对每一个节点维护一个`size`值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的`size`值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。\n\n### 前驱&后继\n在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。\n以前驱为例。\n\n如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。\n\n第一种很容易想明白，第二种稍难一些。\n\n![前驱和后继](lower_upper.gif)\n\n以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。\n\n可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。\n\n后继同理。\n\n插入、删除等以上操作的\b期望时间复杂度都是$O(\\log {n})$，因为树的期望高度h是$\\log {n}$。\n\n\n## 代码\n以[洛谷P3369 普通平衡树](https://www.luogu.org/problemnew/show/P3369)为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。\n\n（其实我还是觉得数组好写\n\n### 结构体的定义\n\n```cpp\ntemplate<typename T,size_t siz>\nstruct treap{\n    struct node_t{\n        T val;\n        int p,size,cnt;\n        node_t *son[2];\n    };\n    int treapcnt;\n    node_t pool[siz<<1],*root,*null;\n```\n\n在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。\n\n对于每一个节点，我们维护以下几个信息：\b关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。\n\n在结构体的变量中，我们维护了一个静态内存池，\b内存池已经使用的数量，根节点的指针，以及一个虚的空节点。\n\n在这里自己定义一个空节点的好处主要是可以避免`NULL`导致的`segmentation fault`，以及让函数编写变得更加简单。\n\n需要注意的是，视题目不同，`cnt`变量可能可以省去。\n\n### 一些简单函数\n\n```cpp\n    void newnode(node_t *&r){\n        r = &pool[Treapcnt++];\n        r->son[0] = r->son[1] = null;\n    }\n    void update(node_t *r){\n        r->size = r->son[0]->size + r->son[1]->size + r->cnt;\n    }\n    node_t* find_minormax(node_t *r,int tmp){//0最小 1最大\n        while(r->son[tmp]!=null)\n            r = r->son[tmp];\n        return r;\n    }\n```\n\nnewnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生`NULL`这种可怕的东西。其实在这里也可以把赋关键字、随机值、`size`值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。\n\nupdate函数在这里完成对节点`size`值的更新，很好理解。\n\nfind_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。\n\n后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。\n\n### 结构体的初始化\n\n```cpp\n    treap(){\n        treapcnt = 0;\n        newnode(null);\n        null->size = null->val = 0;\n        null->p = MAXINT;\n        root = null;\n        srand(time(NULL));\n    }\n```\n\n结构体的初始化不难，有几点需要注意：\n\b\n+ 空指针的`size`需要为0\n+ 空指针的随机值需要**足够大**（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了\n+ 最好srand一下\n\n### 旋转\n\n```cpp\n    void rotate(node_t *&r,int tmp){//0左旋，1右旋\n        node_t *t = r->son[1-tmp];\n        r->son[1-tmp] = t->son[tmp];\n        t->son[tmp] = r;\n        update(r),update(t);\n        r = t;\n    }\n```\n\n![旋转图片](rotate.gif)\n\n旋转操作的文字叙述：\n（括号里文字以左旋为例）\n\n1. 选定当前节点r *（图中的x）*\n2. 找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）*（图中的y）*\n3. 把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 *（把b接在x的右子位置上）*\n4. 把r接到t空出来的位置上 *（把x接到y的x的左子树上）*\n5. 更新`size`值 *（更新x，y的`size`）*\n\n由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。\n\n其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误\n\n但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是**引用**传递，才能修改对应父节点的儿子指针。\n\n有一点很重要的就是要维护`size`的值，而且是从下到上。\n\n### 插入\n\n```cpp\n    void __insert(node_t *&r,T v){\n        if(r == null){\n            newnode(r);\n            r->val = v,r->cnt = 1,r->p = rand();\n        }\n        else{\n            if(r->val == v)\n                r->cnt++;\n            else{\n                int tmp = r->val < v;\n                __insert(r->son[tmp],v);\n                if(r->son[tmp]->p < r->p)\n                    rotate(r,1-tmp);\n            }\n        }\n        update(r);\n    }\n```\n\n用文字说明Treap的插入策略：\n\n1. 递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点\n2. 递归添加节点，比当前节点小向左，比当前节点大向右\n3. 维护最小堆的性质\n4. 更新`size`值\n\n在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。\n\n需要注意，这里的节点是**引用**方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接\n再次重复，不要忘记更新`size`值。\n\n### 删除\n\n```cpp\n    void __erase(node_t *&r,T v){\n        if(r->val == v){\n            if(r->cnt > 1) r->cnt--;\n            else{\n                if(r->son[0]==null && r->son[1]==null){\n                    r = null;return;\n                }\n                else{//还有子节点，\n                    int tmp = r->son[1]->p < r->son[0]->p;\n                    rotate(r,1-tmp);\n                    __erase(r,v);\n                }\n            }\n        }\n        else{\n            int tmp = r->val < v;\n            __erase(r->son[tmp],v);\n        }\n        update(r);\n    }\n```\n\n用文字说明Treap的删除策略：\n\n1. 递归边界：要删除的节点没有儿子节点\n2. 寻找到当前节点，减少数量或者向下旋转\n3. 维护最小堆的性质，即把两个儿子中权值较小的旋转上来\n4. 递归删除节点**注意此处的节点指针仍是r，因为r在旋转中已经发生了变化**\n5. 更新`size`值\n\n删除的时候最需要注意的已经在上面指出。\n\n还有在旋转比较的时候一定比较的是优先级！！！\n\nTreap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。\n\n### 查询排名&排名查询\n\n```cpp\n    int __getrank(node_t *r,T v){//查找数v的排名\n        if(r->val == v||r == null)//记得判空！\n            return r->son[0]->size + 1;\n        else if(v < r->val)\n            return __getrank(r->son[0],v);\n        else\n            return __getrank(r->son[1],v) + r->son[0]->size + r->cnt;\n    }\n    node_t* __qrank(node_t *r,int rank){//查找以rank排名的数\n        rank -= r->son[0]->size;\n        if(rank<=0)\n            return __qrank(r->son[0],rank + r->son[0]->size);\n        else if(rank <= r->cnt)\n            return r;\n        else\n            return __qrank(r->son[1],rank - r->cnt);\n    }\n```\n\n这两个比较简单，而且在上面也讲的很详细了，所以就一块说。\n\n查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。\n\n### 前驱和后继\n\n```cpp\n    node_t *loworup(T v,int t){//0代表前驱，1代表后继\n        node_t *last = null,*nown = root;\n        while(nown->val!=v && nown!=null){\n            int tmp =  nown->val < v;\n            if(tmp!=t) last = nown;\n            nown = nown->son[tmp];\n        }\n        if(nown->son[t]!=null)\n            last = find_minormax(nown->son[t],1-t);\n        return last;\n    }\n```\n\n这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。\n\n思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。\n\n~~多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通~~\n\n### 输出树\n\n```cpp\n    void __print(node_t *r,int depth = 0){\n        if(r == null) return;\n        else{\n            __print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');//打印深度\n            printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r->val,r->cnt,r->size,r->p,r->son[0]!=null,r->son[1]!=null);\n            __print(r->son[1],depth+1);\n        }\n    }\n```\n\n按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。\n\n\n### 封装\n\n```cpp\n    void insert(T v){__insert(root,v);}\n    void erase(T v){__erase(root,v);}\n    int getrank(T v){return __getrank(root,v);}\n    int qrank(int rank){return __qrank(root,rank)->val;}\n    int lower(T v){return loworup(v,0)->val;}\n    int upper(T v){return loworup(v,1)->val;}\n    void print(){__print(root);}\n```\n\n封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。\n\n\n## 完整代码及注释\n\n题目：[洛谷P3369 普通平衡树](https://www.luogu.org/problemnew/show/P3369)\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n#define maxint  2147483647\nusing namespace std;\n\ntemplate<typename T,size_t siz>//模版T,需要有等于不等于和小于运算符\nstruct treap{\n    private:\n    struct node_t{\n        T val;\n        int p,size,cnt;\n        node_t *son[2];\n    };\n    int treapcnt;\n    node_t pool[siz<<1],*root,*null;\n    void newnode(node_t *&r){\n        r = &pool[treapcnt++];\n        r->son[0] = r->son[1] = null;\n    }\n    void update(node_t *r){\n        r->size = r->son[0]->size+r->son[1]->size+r->cnt;\n    }\n    void rotate(node_t *&r,int tmp){//0左旋，1右旋\n        node_t *t = r->son[1-tmp];//找到需要旋上来的节点\n        r->son[1-tmp] = t->son[tmp];//将被选节点的被遮蔽的儿子交给上面的节点\n        t->son[tmp] = r;//将r作为t的儿子\n        update(r),update(t);//注意更新顺序！先儿子后父亲\n        r = t;//通过引用更改上方节点的儿子\n    }\n    void __insert(node_t *&r,T v){//r代表当前节点，v代表关键字\n        if(r == null){//如果r的地方已经没有节点\n            newnode(r);//新建节点，并通过引用添加至上面节点的儿子\n            r->val = v,r->cnt = 1,r->p = rand();//对相关信息的设置\n        }\n        else{\n            if(r->val == v) //如果已经添加过，直接给数量++\n                r->cnt++;\n            else{\n                int tmp = r->val < v;\n                __insert(r->son[tmp],v);//递归更改\n                if(r->son[tmp]->p < r->p)//维护treap性质\n                    rotate(r,1-tmp);\n            }\n        }\n        update(r);//不要忘了更新！\n    }\n    void __erase(node_t *&r,T v){\n        if(r->val == v){//已经找到\n            if(r->cnt > 1) r->cnt--;\n            else{\n                if(r->son[0]==null && r->son[1]==null){//已经没有子节点，直接删除\n                    r = null;return;\n                }\n                else{//还有子节点，\n                    int tmp = r->son[1]->p < r->son[0]->p;\n                    rotate(r,1-tmp); //找到其中随机权值较小的一个旋转替换当前节点\n                    __erase(r,v);//递归删除 注意此处r已经发生了变化\n                }\n            }\n        }\n        else{//还没找到\n            int tmp = r->val < v;\n            __erase(r->son[tmp],v);//递归寻找\n        }\n        update(r);//不要忘了更新！\n    }\n    void __print(node_t *r,int depth = 0){//调试用\n        if(r == null) return;\n        else{\n            __print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');//打印深度\n            printf(\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\",r->val,r->cnt,r->size,r->p,r->son[0]!=null,r->son[1]!=null);\n            __print(r->son[1],depth+1);\n        }\n    }\n    int __getrank(node_t *r,T v){//查找数v的排名\n        if(r->val == v||r == null)//记得判空！\n            return r->son[0]->size +1;\n        else if(v < r->val)\n            return __getrank(r->son[0],v);\n        else\n            return __getrank(r->son[1],v) + r->son[0]->size + r->cnt;\n    }\n    node_t* __qrank(node_t *r,int rank){//查找以rank排名的数\n        rank -= r->son[0]->size;\n        if(rank<=0)\n            return __qrank(r->son[0],rank + r->son[0]->size);\n        else if(rank <= r->cnt)\n            return r;\n        else\n            return __qrank(r->son[1],rank - r->cnt);\n    }\n    node_t *find_minormax(node_t *r,int tmp){\n        //寻找以r为根节点的树上最大或最小节点\n        while(r->son[tmp]!=null)\n            r = r->son[tmp];\n        return r;\n    }\n    node_t *loworup(T v,int t){//0代表前驱，1代表后继\n        node_t *last = null,*nown = root;//last表示上一个没有当前寻找方向的节点\n        while(nown->val!=v && nown!=null){//记得判空!\n            int tmp =  nown->val < v;\n            if(tmp!=t) last = nown;\n            nown = nown->son[tmp];\n        }\n        if(nown->son[t]!=null)//有子节点\n            last = find_minormax(nown->son[t],1-t);//寻找对应方向子节点的最小or最大值\n        return last;\n    }\n    public:\n    treap(){\n        treapcnt = 0;\n        newnode(null);\n        null->size = null->val=0;\n        null->p = maxint;\n        root = null;\n        srand(time(NULL));\n    }\n    void insert(T v){__insert(root,v);}\n    void erase(T v){__erase(root,v);}\n    int getrank(T v){return __getrank(root,v);}\n    int qrank(int rank){return __qrank(root,rank)->val;}\n    int lower(T v){return loworup(v,0)->val;}\n    int upper(T v){return loworup(v,1)->val;}\n    void print(){__print(root);}\n};\n\ntreap<int,200000> w;\n\nint n;\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 0;i<n;i++){\n        int op, x;\n        scanf(\"%d %d\",&op,&x);\n        if(op == 1)      w.insert(x);\n        else if(op == 2) w.erase(x);\n        else if(op == 3) printf(\"%d\\n\",w.getrank(x));\n        else if(op == 4) printf(\"%d\\n\",w.qrank(x));\n        else if(op == 5) printf(\"%d\\n\",w.lower(x));\n        else if(op == 6) printf(\"%d\\n\",w.upper(x));\n        else if(op == 0) w.print();\n    }\n    return 0;\n}\n```\n\n{% endfold %}\n\n## 例题\n\n待加（其实我还没怎么写过\n","slug":"Treap学习笔记","published":1,"updated":"2018-02-08T07:37:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosfq000f5os6wy7my4tt","content":"<p>闲下来了，开始写一点学习笔记，也希望能给后人造福吧。</p>\n<p>第一篇来说一说Treap。<br><a id=\"more\"></a></p>\n<h2 id=\"Treap是什么\"><a href=\"#Treap是什么\" class=\"headerlink\" title=\"Treap是什么\"></a>Treap是什么</h2><h3 id=\"Tree-Heap\"><a href=\"#Tree-Heap\" class=\"headerlink\" title=\"Tree + Heap\"></a>Tree + Heap</h3><p>树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。<br><!-- more --></p>\n<h2 id=\"基本思想及操作\"><a href=\"#基本思想及操作\" class=\"headerlink\" title=\"基本思想及操作\"></a>基本思想及操作</h2><p>一般在Treap里面维护一个最小堆。</p>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><p>旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。<br>旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。</p>\n<h3 id=\"按关键字寻找\"><a href=\"#按关键字寻找\" class=\"headerlink\" title=\"按关键字寻找\"></a>按关键字寻找</h3><p>可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。</p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。</p>\n<h3 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h3><p>在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。</p>\n<h3 id=\"按排名查找\"><a href=\"#按排名查找\" class=\"headerlink\" title=\"按排名查找\"></a>按排名查找</h3><p>需要对每一个节点维护一个<code>size</code>值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的<code>size</code>值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。</p>\n<h3 id=\"前驱-amp-后继\"><a href=\"#前驱-amp-后继\" class=\"headerlink\" title=\"前驱&amp;后继\"></a>前驱&amp;后继</h3><p>在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。<br>以前驱为例。</p>\n<p>如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。</p>\n<p>第一种很容易想明白，第二种稍难一些。</p>\n<p><img src=\"lower_upper.gif\" alt=\"前驱和后继\"></p>\n<p>以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。</p>\n<p>可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。</p>\n<p>后继同理。</p>\n<p>插入、删除等以上操作的\b期望时间复杂度都是$O(\\log {n})$，因为树的期望高度h是$\\log {n}$。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷P3369 普通平衡树</a>为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。</p>\n<p>（其实我还是觉得数组好写</p>\n<h3 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">size_t</span> siz&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">treap</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node_t</span>&#123;</span></span><br><span class=\"line\">        T val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p,size,cnt;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *son[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> treapcnt;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> pool[siz&lt;&lt;<span class=\"number\">1</span>],*root,*null;</span><br></pre></td></tr></table></figure>\n<p>在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。</p>\n<p>对于每一个节点，我们维护以下几个信息：\b关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。</p>\n<p>在结构体的变量中，我们维护了一个静态内存池，\b内存池已经使用的数量，根节点的指针，以及一个虚的空节点。</p>\n<p>在这里自己定义一个空节点的好处主要是可以避免<code>NULL</code>导致的<code>segmentation fault</code>，以及让函数编写变得更加简单。</p>\n<p>需要注意的是，视题目不同，<code>cnt</code>变量可能可以省去。</p>\n<h3 id=\"一些简单函数\"><a href=\"#一些简单函数\" class=\"headerlink\" title=\"一些简单函数\"></a>一些简单函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *&amp;r)</span></span>&#123;</span><br><span class=\"line\">    r = &amp;pool[Treapcnt++];</span><br><span class=\"line\">    r-&gt;son[<span class=\"number\">0</span>] = r-&gt;son[<span class=\"number\">1</span>] = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *r)</span></span>&#123;</span><br><span class=\"line\">    r-&gt;size = r-&gt;son[<span class=\"number\">0</span>]-&gt;size + r-&gt;son[<span class=\"number\">1</span>]-&gt;size + r-&gt;cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">node_t</span>* find_minormax(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> tmp)&#123;<span class=\"comment\">//0最小 1最大</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r-&gt;son[tmp]!=null)</span><br><span class=\"line\">        r = r-&gt;son[tmp];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>newnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生<code>NULL</code>这种可怕的东西。其实在这里也可以把赋关键字、随机值、<code>size</code>值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。</p>\n<p>update函数在这里完成对节点<code>size</code>值的更新，很好理解。</p>\n<p>find_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。</p>\n<p>后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。</p>\n<h3 id=\"结构体的初始化\"><a href=\"#结构体的初始化\" class=\"headerlink\" title=\"结构体的初始化\"></a>结构体的初始化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">treap()&#123;</span><br><span class=\"line\">    treapcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    newnode(null);</span><br><span class=\"line\">    null-&gt;size = null-&gt;val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    null-&gt;p = MAXINT;</span><br><span class=\"line\">    root = null;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构体的初始化不难，有几点需要注意：<br>\b</p>\n<ul>\n<li>空指针的<code>size</code>需要为0</li>\n<li>空指针的随机值需要<strong>足够大</strong>（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了</li>\n<li>最好srand一下</li>\n</ul>\n<h3 id=\"旋转-1\"><a href=\"#旋转-1\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *&amp;r,<span class=\"keyword\">int</span> tmp)</span></span>&#123;<span class=\"comment\">//0左旋，1右旋</span></span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *t = r-&gt;son[<span class=\"number\">1</span>-tmp];</span><br><span class=\"line\">    r-&gt;son[<span class=\"number\">1</span>-tmp] = t-&gt;son[tmp];</span><br><span class=\"line\">    t-&gt;son[tmp] = r;</span><br><span class=\"line\">    update(r),update(t);</span><br><span class=\"line\">    r = t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"rotate.gif\" alt=\"旋转图片\"></p>\n<p>旋转操作的文字叙述：<br>（括号里文字以左旋为例）</p>\n<ol>\n<li>选定当前节点r <em>（图中的x）</em></li>\n<li>找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）<em>（图中的y）</em></li>\n<li>把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 <em>（把b接在x的右子位置上）</em></li>\n<li>把r接到t空出来的位置上 <em>（把x接到y的x的左子树上）</em></li>\n<li>更新<code>size</code>值 <em>（更新x，y的<code>size</code>）</em></li>\n</ol>\n<p>由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。</p>\n<p>其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误</p>\n<p>但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是<strong>引用</strong>传递，才能修改对应父节点的儿子指针。</p>\n<p>有一点很重要的就是要维护<code>size</code>的值，而且是从下到上。</p>\n<h3 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> __insert(<span class=\"keyword\">node_t</span> *&amp;r,T v)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == null)&#123;</span><br><span class=\"line\">        newnode(r);</span><br><span class=\"line\">        r-&gt;val = v,r-&gt;cnt = <span class=\"number\">1</span>,r-&gt;p = rand();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r-&gt;val == v)</span><br><span class=\"line\">            r-&gt;cnt++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = r-&gt;val &lt; v;</span><br><span class=\"line\">            __insert(r-&gt;son[tmp],v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p)</span><br><span class=\"line\">                rotate(r,<span class=\"number\">1</span>-tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用文字说明Treap的插入策略：</p>\n<ol>\n<li>递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点</li>\n<li>递归添加节点，比当前节点小向左，比当前节点大向右</li>\n<li>维护最小堆的性质</li>\n<li>更新<code>size</code>值</li>\n</ol>\n<p>在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。</p>\n<p>需要注意，这里的节点是<strong>引用</strong>方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接<br>再次重复，不要忘记更新<code>size</code>值。</p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> __erase(<span class=\"keyword\">node_t</span> *&amp;r,T v)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;val == v)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r-&gt;cnt &gt; <span class=\"number\">1</span>) r-&gt;cnt--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r-&gt;son[<span class=\"number\">0</span>]==null &amp;&amp; r-&gt;son[<span class=\"number\">1</span>]==null)&#123;</span><br><span class=\"line\">                r = null;<span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//还有子节点，</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = r-&gt;son[<span class=\"number\">1</span>]-&gt;p &lt; r-&gt;son[<span class=\"number\">0</span>]-&gt;p;</span><br><span class=\"line\">                rotate(r,<span class=\"number\">1</span>-tmp);</span><br><span class=\"line\">                __erase(r,v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = r-&gt;val &lt; v;</span><br><span class=\"line\">        __erase(r-&gt;son[tmp],v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    update(r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用文字说明Treap的删除策略：</p>\n<ol>\n<li>递归边界：要删除的节点没有儿子节点</li>\n<li>寻找到当前节点，减少数量或者向下旋转</li>\n<li>维护最小堆的性质，即把两个儿子中权值较小的旋转上来</li>\n<li>递归删除节点<strong>注意此处的节点指针仍是r，因为r在旋转中已经发生了变化</strong></li>\n<li>更新<code>size</code>值</li>\n</ol>\n<p>删除的时候最需要注意的已经在上面指出。</p>\n<p>还有在旋转比较的时候一定比较的是优先级！！！</p>\n<p>Treap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。</p>\n<h3 id=\"查询排名-amp-排名查询\"><a href=\"#查询排名-amp-排名查询\" class=\"headerlink\" title=\"查询排名&amp;排名查询\"></a>查询排名&amp;排名查询</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __getrank(<span class=\"keyword\">node_t</span> *r,T v)&#123;<span class=\"comment\">//查找数v的排名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;val == v||r == null)<span class=\"comment\">//记得判空！</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> r-&gt;son[<span class=\"number\">0</span>]-&gt;size + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v &lt; r-&gt;val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __getrank(r-&gt;son[<span class=\"number\">0</span>],v);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> __getrank(r-&gt;son[<span class=\"number\">1</span>],v) + r-&gt;son[<span class=\"number\">0</span>]-&gt;size + r-&gt;cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">node_t</span>* __qrank(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> rank)&#123;<span class=\"comment\">//查找以rank排名的数</span></span><br><span class=\"line\">    rank -= r-&gt;son[<span class=\"number\">0</span>]-&gt;size;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rank&lt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __qrank(r-&gt;son[<span class=\"number\">0</span>],rank + r-&gt;son[<span class=\"number\">0</span>]-&gt;size);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank &lt;= r-&gt;cnt)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> __qrank(r-&gt;son[<span class=\"number\">1</span>],rank - r-&gt;cnt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个比较简单，而且在上面也讲的很详细了，所以就一块说。</p>\n<p>查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。</p>\n<h3 id=\"前驱和后继\"><a href=\"#前驱和后继\" class=\"headerlink\" title=\"前驱和后继\"></a>前驱和后继</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node_t</span> *loworup(T v,<span class=\"keyword\">int</span> t)&#123;<span class=\"comment\">//0代表前驱，1代表后继</span></span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *last = null,*nown = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nown-&gt;val!=v &amp;&amp; nown!=null)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp =  nown-&gt;val &lt; v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmp!=t) last = nown;</span><br><span class=\"line\">        nown = nown-&gt;son[tmp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nown-&gt;son[t]!=null)</span><br><span class=\"line\">        last = find_minormax(nown-&gt;son[t],<span class=\"number\">1</span>-t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。</p>\n<p>思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。</p>\n<p><del>多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通</del></p>\n<h3 id=\"输出树\"><a href=\"#输出树\" class=\"headerlink\" title=\"输出树\"></a>输出树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> __print(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == null) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        __print(r-&gt;son[<span class=\"number\">0</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;depth;i++) <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);<span class=\"comment\">//打印深度</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\"</span>,r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[<span class=\"number\">0</span>]!=null,r-&gt;son[<span class=\"number\">1</span>]!=null);</span><br><span class=\"line\">        __print(r-&gt;son[<span class=\"number\">1</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T v)</span></span>&#123;__insert(root,v);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">(T v)</span></span>&#123;__erase(root,v);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getrank</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> __getrank(root,v);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qrank</span><span class=\"params\">(<span class=\"keyword\">int</span> rank)</span></span>&#123;<span class=\"keyword\">return</span> __qrank(root,rank)-&gt;val;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> loworup(v,<span class=\"number\">0</span>)-&gt;val;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> loworup(v,<span class=\"number\">1</span>)-&gt;val;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;__print(root);&#125;</span><br></pre></td></tr></table></figure>\n<p>封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。</p>\n<h2 id=\"完整代码及注释\"><a href=\"#完整代码及注释\" class=\"headerlink\" title=\"完整代码及注释\"></a>完整代码及注释</h2><p>题目：<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷P3369 普通平衡树</a></p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxint  2147483647</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">size_t</span> siz&gt;<span class=\"comment\">//模版T,需要有等于不等于和小于运算符</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">treap</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node_t</span>&#123;</span></span><br><span class=\"line\">        T val;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p,size,cnt;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *son[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> treapcnt;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> pool[siz&lt;&lt;<span class=\"number\">1</span>],*root,*null;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *&amp;r)</span></span>&#123;</span><br><span class=\"line\">        r = &amp;pool[treapcnt++];</span><br><span class=\"line\">        r-&gt;son[<span class=\"number\">0</span>] = r-&gt;son[<span class=\"number\">1</span>] = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *r)</span></span>&#123;</span><br><span class=\"line\">        r-&gt;size = r-&gt;son[<span class=\"number\">0</span>]-&gt;size+r-&gt;son[<span class=\"number\">1</span>]-&gt;size+r-&gt;cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *&amp;r,<span class=\"keyword\">int</span> tmp)</span></span>&#123;<span class=\"comment\">//0左旋，1右旋</span></span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *t = r-&gt;son[<span class=\"number\">1</span>-tmp];<span class=\"comment\">//找到需要旋上来的节点</span></span><br><span class=\"line\">        r-&gt;son[<span class=\"number\">1</span>-tmp] = t-&gt;son[tmp];<span class=\"comment\">//将被选节点的被遮蔽的儿子交给上面的节点</span></span><br><span class=\"line\">        t-&gt;son[tmp] = r;<span class=\"comment\">//将r作为t的儿子</span></span><br><span class=\"line\">        update(r),update(t);<span class=\"comment\">//注意更新顺序！先儿子后父亲</span></span><br><span class=\"line\">        r = t;<span class=\"comment\">//通过引用更改上方节点的儿子</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> __insert(<span class=\"keyword\">node_t</span> *&amp;r,T v)&#123;<span class=\"comment\">//r代表当前节点，v代表关键字</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r == null)&#123;<span class=\"comment\">//如果r的地方已经没有节点</span></span><br><span class=\"line\">            newnode(r);<span class=\"comment\">//新建节点，并通过引用添加至上面节点的儿子</span></span><br><span class=\"line\">            r-&gt;val = v,r-&gt;cnt = <span class=\"number\">1</span>,r-&gt;p = rand();<span class=\"comment\">//对相关信息的设置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r-&gt;val == v) <span class=\"comment\">//如果已经添加过，直接给数量++</span></span><br><span class=\"line\">                r-&gt;cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = r-&gt;val &lt; v;</span><br><span class=\"line\">                __insert(r-&gt;son[tmp],v);<span class=\"comment\">//递归更改</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(r-&gt;son[tmp]-&gt;p &lt; r-&gt;p)<span class=\"comment\">//维护treap性质</span></span><br><span class=\"line\">                    rotate(r,<span class=\"number\">1</span>-tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        update(r);<span class=\"comment\">//不要忘了更新！</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> __erase(<span class=\"keyword\">node_t</span> *&amp;r,T v)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r-&gt;val == v)&#123;<span class=\"comment\">//已经找到</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r-&gt;cnt &gt; <span class=\"number\">1</span>) r-&gt;cnt--;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(r-&gt;son[<span class=\"number\">0</span>]==null &amp;&amp; r-&gt;son[<span class=\"number\">1</span>]==null)&#123;<span class=\"comment\">//已经没有子节点，直接删除</span></span><br><span class=\"line\">                    r = null;<span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//还有子节点，</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tmp = r-&gt;son[<span class=\"number\">1</span>]-&gt;p &lt; r-&gt;son[<span class=\"number\">0</span>]-&gt;p;</span><br><span class=\"line\">                    rotate(r,<span class=\"number\">1</span>-tmp); <span class=\"comment\">//找到其中随机权值较小的一个旋转替换当前节点</span></span><br><span class=\"line\">                    __erase(r,v);<span class=\"comment\">//递归删除 注意此处r已经发生了变化</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//还没找到</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = r-&gt;val &lt; v;</span><br><span class=\"line\">            __erase(r-&gt;son[tmp],v);<span class=\"comment\">//递归寻找</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        update(r);<span class=\"comment\">//不要忘了更新！</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> __print(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>)&#123;<span class=\"comment\">//调试用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r == null) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            __print(r-&gt;son[<span class=\"number\">0</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;depth;i++) <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);<span class=\"comment\">//打印深度</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"val:%d cnt:%d size:%d P:%d son?:%d %d\\n\"</span>,r-&gt;val,r-&gt;cnt,r-&gt;size,r-&gt;p,r-&gt;son[<span class=\"number\">0</span>]!=null,r-&gt;son[<span class=\"number\">1</span>]!=null);</span><br><span class=\"line\">            __print(r-&gt;son[<span class=\"number\">1</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> __getrank(<span class=\"keyword\">node_t</span> *r,T v)&#123;<span class=\"comment\">//查找数v的排名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r-&gt;val == v||r == null)<span class=\"comment\">//记得判空！</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> r-&gt;son[<span class=\"number\">0</span>]-&gt;size +<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(v &lt; r-&gt;val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __getrank(r-&gt;son[<span class=\"number\">0</span>],v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> __getrank(r-&gt;son[<span class=\"number\">1</span>],v) + r-&gt;son[<span class=\"number\">0</span>]-&gt;size + r-&gt;cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span>* __qrank(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> rank)&#123;<span class=\"comment\">//查找以rank排名的数</span></span><br><span class=\"line\">        rank -= r-&gt;son[<span class=\"number\">0</span>]-&gt;size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rank&lt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __qrank(r-&gt;son[<span class=\"number\">0</span>],rank + r-&gt;son[<span class=\"number\">0</span>]-&gt;size);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank &lt;= r-&gt;cnt)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> __qrank(r-&gt;son[<span class=\"number\">1</span>],rank - r-&gt;cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *find_minormax(<span class=\"keyword\">node_t</span> *r,<span class=\"keyword\">int</span> tmp)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//寻找以r为根节点的树上最大或最小节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r-&gt;son[tmp]!=null)</span><br><span class=\"line\">            r = r-&gt;son[tmp];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *loworup(T v,<span class=\"keyword\">int</span> t)&#123;<span class=\"comment\">//0代表前驱，1代表后继</span></span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *last = null,*nown = root;<span class=\"comment\">//last表示上一个没有当前寻找方向的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nown-&gt;val!=v &amp;&amp; nown!=null)&#123;<span class=\"comment\">//记得判空!</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp =  nown-&gt;val &lt; v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp!=t) last = nown;</span><br><span class=\"line\">            nown = nown-&gt;son[tmp];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nown-&gt;son[t]!=null)<span class=\"comment\">//有子节点</span></span><br><span class=\"line\">            last = find_minormax(nown-&gt;son[t],<span class=\"number\">1</span>-t);<span class=\"comment\">//寻找对应方向子节点的最小or最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    treap()&#123;</span><br><span class=\"line\">        treapcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        newnode(null);</span><br><span class=\"line\">        null-&gt;size = null-&gt;val=<span class=\"number\">0</span>;</span><br><span class=\"line\">        null-&gt;p = maxint;</span><br><span class=\"line\">        root = null;</span><br><span class=\"line\">        srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T v)</span></span>&#123;__insert(root,v);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">erase</span><span class=\"params\">(T v)</span></span>&#123;__erase(root,v);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getrank</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> __getrank(root,v);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qrank</span><span class=\"params\">(<span class=\"keyword\">int</span> rank)</span></span>&#123;<span class=\"keyword\">return</span> __qrank(root,rank)-&gt;val;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lower</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> loworup(v,<span class=\"number\">0</span>)-&gt;val;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">upper</span><span class=\"params\">(T v)</span></span>&#123;<span class=\"keyword\">return</span> loworup(v,<span class=\"number\">1</span>)-&gt;val;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;__print(root);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">treap&lt;<span class=\"keyword\">int</span>,<span class=\"number\">200000</span>&gt; w;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> op, x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;op,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)      w.insert(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) w.erase(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,w.getrank(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,w.qrank(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">5</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,w.lower(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">6</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,w.upper(x));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">0</span>) w.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>待加（其实我还没怎么写过</p>\n","site":{"data":{}},"excerpt":"<p>闲下来了，开始写一点学习笔记，也希望能给后人造福吧。</p>\n<p>第一篇来说一说Treap。<br>","more":"</p>\n<h2 id=\"Treap是什么\"><a href=\"#Treap是什么\" class=\"headerlink\" title=\"Treap是什么\"></a>Treap是什么</h2><h3 id=\"Tree-Heap\"><a href=\"#Tree-Heap\" class=\"headerlink\" title=\"Tree + Heap\"></a>Tree + Heap</h3><p>树堆（英语：Treap），是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于以随机数据插入的二叉搜索树。其基本操作的期望时间复杂度为$O(\\log {n})$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。<br><!-- more --></p>\n<h2 id=\"基本思想及操作\"><a href=\"#基本思想及操作\" class=\"headerlink\" title=\"基本思想及操作\"></a>基本思想及操作</h2><p>一般在Treap里面维护一个最小堆。</p>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><p>旋转是一种不破坏二叉搜索树性质的操作，有左旋及右旋两种。具体操作在代码部分解释。<br>旋转的时间复杂度是$O(1)$，因为只需要修改常数个指针。</p>\n<h3 id=\"按关键字寻找\"><a href=\"#按关键字寻找\" class=\"headerlink\" title=\"按关键字寻找\"></a>按关键字寻找</h3><p>可以发现，在要寻找的关键字小于当前节点关键字时，其节点只可能在当前节点的左子树中；等于时即为当前节点；大于时候在右子树中。于是可以根据关键字寻找到节点。</p>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>在Treap中，插入需要根据二叉搜索树的性质，找到能放置这个节点的空位置，给新节点随机分配一个优先值，然后调整Treap的堆性质。</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>如果需要删除一个节点，首先应当寻找到这个节点，并将这个节点旋转至最底层，即左右儿子皆为空的时候，删除该节点。并注意需要在旋转过程中维护最小堆性质。</p>\n<h3 id=\"查询排名\"><a href=\"#查询排名\" class=\"headerlink\" title=\"查询排名\"></a>查询排名</h3><p>在这里排名是指小于某数的数的个数+1。注意到在某二叉搜索树中，小于根节点的节点数目即为根节点左子树的节点数目。所以只需要按关键字查找到此节点，并如果向右搜索，就加上此节点左子树的大小和根节点的大小，进行递归搜索。</p>\n<h3 id=\"按排名查找\"><a href=\"#按排名查找\" class=\"headerlink\" title=\"按排名查找\"></a>按排名查找</h3><p>需要对每一个节点维护一个<code>size</code>值，意为以其为根节点的树的大小（包括本身）。搜索的时候，如果排名小于当前节点左子树的<code>size</code>值直接递归进入左子树；如果排名落在当前节点，则返回当前节点；否则更新排名向右子树递归。</p>\n<h3 id=\"前驱-amp-后继\"><a href=\"#前驱-amp-后继\" class=\"headerlink\" title=\"前驱&amp;后继\"></a>前驱&amp;后继</h3><p>在这里，前驱定义为小于x，且最大的数。后继同理。这个的寻找稍微复杂。<br>以前驱为例。</p>\n<p>如果寻找到的节点有左子树，那么其前驱就是左子树里面的最大值；如果没有左子树，那么其前驱就是寻找的路径上最靠近的一个向右寻找的节点。</p>\n<p>第一种很容易想明白，第二种稍难一些。</p>\n<p><img src=\"lower_upper.gif\" alt=\"前驱和后继\"></p>\n<p>以此图为例。比如我们寻找12的前驱，它没有左子树，所以它属于情况二。按照刚才提到的规则，可以发现12的前驱是11，因为11是最后一个向右寻找，即下一次寻找是其右儿子（16）的节点。</p>\n<p>可以注意到，11的左子树上的点全都比6小，不符合要求；12的左子树不存在，12的右子树上的点都比12大，而11-12的路径上的点，其应当是全都是向左寻找的，也都比12要大，而在11以上的点，应当都比12要大（11是左儿子的时候），或者比11要小（11是右儿子的时候），所以，6就是7的前驱。</p>\n<p>后继同理。</p>\n<p>插入、删除等以上操作的\b期望时间复杂度都是$O(\\log {n})$，因为树的期望高度h是$\\log {n}$。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷P3369 普通平衡树</a>为例。代码是指针版，不记录父节点，递归操作，有轻微压行，采用java换行风格。</p>\n<p>（其实我还是觉得数组好写</p>\n<h3 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h3><!--�2-->\n<p>在这里采用了模板的定义方法。T为一个模版类。需要注意这里的T模板要有小于运算符。</p>\n<p>对于每一个节点，我们维护以下几个信息：\b关键字，随机优先值，以其为根的二叉搜索树的大小，和这个关键字的数量，左儿子和右儿子的指针。默认0为左，1为右。</p>\n<p>在结构体的变量中，我们维护了一个静态内存池，\b内存池已经使用的数量，根节点的指针，以及一个虚的空节点。</p>\n<p>在这里自己定义一个空节点的好处主要是可以避免<code>NULL</code>导致的<code>segmentation fault</code>，以及让函数编写变得更加简单。</p>\n<p>需要注意的是，视题目不同，<code>cnt</code>变量可能可以省去。</p>\n<h3 id=\"一些简单函数\"><a href=\"#一些简单函数\" class=\"headerlink\" title=\"一些简单函数\"></a>一些简单函数</h3><!--�3-->\n<p>newnode函数在这里完成对节点初始化的任务，并对子节点赋值。需要注意以下，这里需要使用引用的方法，否则如果使用了返回值的办法，就不能使用newnode函数对null赋值了，因为会产生<code>NULL</code>这种可怕的东西。其实在这里也可以把赋关键字、随机值、<code>size</code>值等事情一并完成，但是我比较懒，所以就在后面手动赋值了。</p>\n<p>update函数在这里完成对节点<code>size</code>值的更新，很好理解。</p>\n<p>find_minormax函数在这里完成对以r为根节点的树上最大或最小节点的寻找。也很简单，就不解释了。</p>\n<p>后两个函数可以放到node结构体里面，但是我不太喜欢那么做，因为那样会使箭头的数目大大增多，从而导致头疼（雾。</p>\n<h3 id=\"结构体的初始化\"><a href=\"#结构体的初始化\" class=\"headerlink\" title=\"结构体的初始化\"></a>结构体的初始化</h3><!--�4-->\n<p>结构体的初始化不难，有几点需要注意：<br>\b</p>\n<ul>\n<li>空指针的<code>size</code>需要为0</li>\n<li>空指针的随机值需要<strong>足够大</strong>（最大堆中足够小，最好是maxint，否则有可能在之后的删除操作中被转上去，然后树就断了</li>\n<li>最好srand一下</li>\n</ul>\n<h3 id=\"旋转-1\"><a href=\"#旋转-1\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><!--�5-->\n<p><img src=\"rotate.gif\" alt=\"旋转图片\"></p>\n<p>旋转操作的文字叙述：<br>（括号里文字以左旋为例）</p>\n<ol>\n<li>选定当前节点r <em>（图中的x）</em></li>\n<li>找到并记录需要旋上来的节点t（左旋旋右儿子，右旋左儿子）<em>（图中的y）</em></li>\n<li>把t将要被覆盖的儿子（与旋转方向相同的儿子）接到t在r原来的位置上 <em>（把b接在x的右子位置上）</em></li>\n<li>把r接到t空出来的位置上 <em>（把x接到y的x的左子树上）</em></li>\n<li>更新<code>size</code>值 <em>（更新x，y的<code>size</code>）</em></li>\n</ol>\n<p>由于我们没有记录父节点，所以这个旋转的写法跟Splay的旋转写法不太像。但其实Splay也可以这么写，只不过没有必要。</p>\n<p>其实这个记不下来不要紧。大概有个印象，要写的时候根据二叉搜索树的性质现推也可以其实。（误</p>\n<p>但需要注意的是，旋转很有可能（就是会破坏一个合法Treap的堆性质，所以旋转在Treap中只用来维护堆的性质，而不用在其他的地方。而且这里的指针是<strong>引用</strong>传递，才能修改对应父节点的儿子指针。</p>\n<p>有一点很重要的就是要维护<code>size</code>的值，而且是从下到上。</p>\n<h3 id=\"插入-1\"><a href=\"#插入-1\" class=\"headerlink\" title=\"插入\"></a>插入</h3><!--�6-->\n<p>用文字说明Treap的插入策略：</p>\n<ol>\n<li>递归边界：寻找到节点，cnt++或者已经到达空节点，赋值一个新节点</li>\n<li>递归添加节点，比当前节点小向左，比当前节点大向右</li>\n<li>维护最小堆的性质</li>\n<li>更新<code>size</code>值</li>\n</ol>\n<p>在维护最小堆的性质的时候，如果子节点的权值较小，那我们就需要把它转上来。</p>\n<p>需要注意，这里的节点是<strong>引用</strong>方式传入，这样才能对父节点的儿子指针进行修改，从而完成树的连接<br>再次重复，不要忘记更新<code>size</code>值。</p>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><!--�7-->\n<p>用文字说明Treap的删除策略：</p>\n<ol>\n<li>递归边界：要删除的节点没有儿子节点</li>\n<li>寻找到当前节点，减少数量或者向下旋转</li>\n<li>维护最小堆的性质，即把两个儿子中权值较小的旋转上来</li>\n<li>递归删除节点<strong>注意此处的节点指针仍是r，因为r在旋转中已经发生了变化</strong></li>\n<li>更新<code>size</code>值</li>\n</ol>\n<p>删除的时候最需要注意的已经在上面指出。</p>\n<p>还有在旋转比较的时候一定比较的是优先级！！！</p>\n<p>Treap的删除和插入其实很像，只不过递归的位置相反。插入是先递归再维护，而删除是先维护再递归。</p>\n<h3 id=\"查询排名-amp-排名查询\"><a href=\"#查询排名-amp-排名查询\" class=\"headerlink\" title=\"查询排名&amp;排名查询\"></a>查询排名&amp;排名查询</h3><!--�8-->\n<p>这两个比较简单，而且在上面也讲的很详细了，所以就一块说。</p>\n<p>查询排名和排名查询其实是相反的操作，只需要注意将+1，-1和空节点等问题处理好了就可以了。</p>\n<h3 id=\"前驱和后继\"><a href=\"#前驱和后继\" class=\"headerlink\" title=\"前驱和后继\"></a>前驱和后继</h3><!--�9-->\n<p>这两个操作其实是完全相反的，所以合到了一个函数里面，在后面的进一步的封装中再分开。</p>\n<p>思路在上面已经提到，在这里只需要注意对不存在的值的前驱／后继进行处理。我们查不到不存在的值的节点，但我们可以假装那里有一个节点。因为null的孩子也是null，所以这段代码也可以直接使用在值的前驱和后继里面。</p>\n<p><del>多说一句，在Splay里面，我们可以直接把待查节点splay到根然后瞎搞一通</del></p>\n<h3 id=\"输出树\"><a href=\"#输出树\" class=\"headerlink\" title=\"输出树\"></a>输出树</h3><!--�10-->\n<p>按照中序遍历打印一棵树。主要在调试的时候用的多。有一个小技巧就是记录一个深度，然后把深度长度的空格打印出来，这样就可以更直观的看到各个节点的深度什么的。</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><!--�11-->\n<p>封装其实没有必要，可以用一些判断来代替。但是我们为了让代码更像工程的代码，而且让前面的代码更美观，更令人赏心悦目，所以我们封装一下吧。</p>\n<h2 id=\"完整代码及注释\"><a href=\"#完整代码及注释\" class=\"headerlink\" title=\"完整代码及注释\"></a>完整代码及注释</h2><p>题目：<a href=\"https://www.luogu.org/problemnew/show/P3369\" target=\"_blank\" rel=\"noopener\">洛谷P3369 普通平衡树</a></p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<!--�12-->\n\n</div></div>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>待加（其实我还没怎么写过</p>"},{"title":"“长大”","date":"2018-01-03T12:33:04.000Z","visible":null,"urlname":"grow","_content":"\n## 随谈\n\n或许，我一直认为我早就长大了吧。\n<!-- more -->\n\n![](time.jpg)\n那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。\n\n一度，我竟真的以为我长大了。\n\n那些记忆已经很模糊了，而近几天发生的事情却还历历在目。\n\n看到某位同学的随笔，某位同学的批语，又想到了好多。\n\n最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。\n\n最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。\n\n*“这不是能随心所欲的年纪。”*\n说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。\n\n这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。\n\n曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？\n\n或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。\n\n不如先滚去把作业写完。\n\n\n另祝各位2018吉祥快乐，万事如意。\n","source":"_posts/“长大”.md","raw":"---\ntitle: “长大”\ndate: 2018-01-03 20:33:04\ntags: 随笔\ncategories: 日常\nvisible:\nurlname: grow\n---\n\n## 随谈\n\n或许，我一直认为我早就长大了吧。\n<!-- more -->\n\n![](time.jpg)\n那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。\n\n一度，我竟真的以为我长大了。\n\n那些记忆已经很模糊了，而近几天发生的事情却还历历在目。\n\n看到某位同学的随笔，某位同学的批语，又想到了好多。\n\n最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。\n\n最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。\n\n*“这不是能随心所欲的年纪。”*\n说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。\n\n这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。\n\n曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？\n\n或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。\n\n不如先滚去把作业写完。\n\n\n另祝各位2018吉祥快乐，万事如意。\n","slug":"“长大”","published":1,"updated":"2018-02-01T05:24:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosfz000j5os6czdj4qm0","content":"<h2 id=\"随谈\"><a href=\"#随谈\" class=\"headerlink\" title=\"随谈\"></a>随谈</h2><p>或许，我一直认为我早就长大了吧。<br><a id=\"more\"></a></p>\n<p><img src=\"time.jpg\" alt=\"\"><br>那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。</p>\n<p>一度，我竟真的以为我长大了。</p>\n<p>那些记忆已经很模糊了，而近几天发生的事情却还历历在目。</p>\n<p>看到某位同学的随笔，某位同学的批语，又想到了好多。</p>\n<p>最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。</p>\n<p>最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。</p>\n<p><em>“这不是能随心所欲的年纪。”</em><br>说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。</p>\n<p>这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。</p>\n<p>曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？</p>\n<p>或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。</p>\n<p>不如先滚去把作业写完。</p>\n<p>另祝各位2018吉祥快乐，万事如意。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"随谈\"><a href=\"#随谈\" class=\"headerlink\" title=\"随谈\"></a>随谈</h2><p>或许，我一直认为我早就长大了吧。<br>","more":"</p>\n<p><img src=\"time.jpg\" alt=\"\"><br>那应该是在五年级的时候。我又一次去找老师，又一次没有说成我心中最为完美的想法，又一次的陷入沉思。那个时候，我真正的意识到，或许并不是所有事情，都能按照我心中最好的方式去进行吧。或许从那以后，我以为我就再也不会为了我心中的梦想的世界——或者说更美好的事情，去与人争辩了吧。而初中，也确实是，和人争辩大多也都是做错了题或者做对了题去跟同学和老师的争辩了吧。</p>\n<p>一度，我竟真的以为我长大了。</p>\n<p>那些记忆已经很模糊了，而近几天发生的事情却还历历在目。</p>\n<p>看到某位同学的随笔，某位同学的批语，又想到了好多。</p>\n<p>最近写了不少随笔，也阅了不少随笔。而我写的随笔有不少却像是“抱怨”，“抱怨”班歌比赛的劳民伤财，抱怨体育运动的不切实际，抱怨《论语》的无理考法。</p>\n<p>最近和几位同学互相批判了一番。价值观的不同其实是必然的。或许你有一身嫉世热血，或许我有一颗如冰寒心。脚踏实地还是仰望星空？向理想前行还是于现实混沌？谁又会知道呢。想了很久要不要提笔写下自己的想法，最后还是放弃了。早就应该知道，这些事情，笑笑就好，何必去劳心费神呢？但又不知道为何，最近总是想写，想去表达所有一切一切的想法，或许应该收收了吧。</p>\n<p><em>“这不是能随心所欲的年纪。”</em><br>说的真的是好啊。或许，从小学就应该想到的吧。但为什么现在又忘记了呢？谁会知道呢。也许是一颗心不再凉的彻骨，也许是一不小心就忘记了以前吧。</p>\n<p>这句话可以说是，“一语点破梦中人”。小学的无数经历让我曾以为我已经从这梦中醒来，再也不会去做那荒诞的梦；但如今发现，到底是梦还是现实却也分不太清。或许我仍然还在梦中？或许是我一直都错了？谁又知道呢。</p>\n<p>曾经以为长大，但恍然之间被人点醒，却才知道梦仍然在。有梦是不是一件好事呢？</p>\n<p>或许几年之后仍会有相同的感慨吧。但现在，真的没有时间去思考那么多。但也许julao们不一定吧。</p>\n<p>不如先滚去把作业写完。</p>\n<p>另祝各位2018吉祥快乐，万事如意。</p>"},{"title":"「CQOI2014」排序机械臂-Splay","urlname":"cqoi2014-sort","date":"2018-02-02T07:12:44.000Z","visible":null,"_content":"\n维护一个序列，第$i$次操作时寻找第i小的数的所在位置$Pi$,并将$(P\\_{i-1},P\\_{i}]$的\b区间翻转。\n\n如果有相同的数，必须保证排序后它们的相对位置关系与初始时相同。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P3165](https://www.luogu.org/problemnew/show/P3165)\n\n## 题解\n\n这道题的大意是区间\b寻找，区间翻转，所以我们\b可以用\bSplay来做，维护一个$size$值和区间翻转的$rev$标记。{% spoiler 虽然我前几天还说再也不用Splay了（逃。 %}\n\n注意到每次操作都会使第$i$个数排序完成，所以我们每次的$P\\_{i}$事实上就是数组下标的$i-1$。\n- - - \n对于区间的寻找，我们注意到可以在开始的时候就记录下来\b第$i$小的数的位置，也就是把他们的指针存在一个\b数组\b里面。\n\n![\b看不到的话假装有图吧](explanation.png)\n\n然后在查询的时候，先把第$i-1$大的节点splay到根；找到第$i$小的数对应的节点指针，寻找其在排序二叉树中的后继节点（图中红色节点），然后把\b后继splay到根的右子树。\n\n但注意在实际查找中，\b因为寻找后继会破坏根结点，所以要先找到后继节点，然后再完成上述操作。\n\n然后\b关于位置，我们可以看出，根节点左边（包括根结点），也就是图中的绿色部分应当有$i-1$个数，而其他在$i$左边（包括$i$）的数应该就是图中的蓝色部分，所以只要将蓝色部分的$size$加上一个$i-1$就是每一次操作的结果\n- - - \n翻转就是常规的区间翻转，打标记pushdown什么的。\n- - - \n为了方便满足一些\b\b它的要求，\b我还事先做了\b离散化的处理。（其实并没有什么\b用\n\n另外还有就是我写的时候还因为少`push_down`了几次被\b坑了\b一下。不过最后一次过评测还是蛮开心的。\n\n## 代码\n{% fold %}\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nstruct wupin{\n    int id,h;\n}w[100100];\n\nstruct splay_t{\n    struct node_t{\n        int val,size;\n        bool rev;\n        node_t *p,*son[2],**root,**null;\n        inline bool get_p(){return p->son[1] == this;}\n        inline void init(node_t **root,node_t **null){this->null = null,this->root = root;}\n        inline int lsize(){return son[0]->size;} inline int rsize(){return son[1]->size;}\n        inline void update(){size = lsize()+rsize()+1;}\n        inline void link(node_t *dst,int tmp){\n            dst->son[tmp] = this;\n            this->p = dst;\n        }\n        inline void push_down(){\n            if(this == *null) return;\n            if(rev){\n                swap(son[0],son[1]);\n                son[0]->rev^=1,son[1]->rev^=1;\n                rev = 0;\n            }\n        }\n        inline void rotate(){\n            p->push_down(),push_down();\n            node_t *rp = p;bool re = get_p();\n            link(rp->p,rp->get_p());\n            son[1-re]->link(rp,re);\n            rp->link(this,1-re);\n            rp->update(),update();\n            if(p == *null) *root = this;\n        }\n        inline node_t* splay(node_t *tar = NULL){\n            if(tar == NULL) tar = *null;\n            p->push_down(),push_down();\n            while(p!=tar){\n                if(p->p == tar)\n                    rotate();\n                else if(p->get_p() == get_p())\n                    p->rotate(),rotate();\n                else\n                    rotate(),rotate();\n            }\n            return this;\n        }\n        inline node_t *upper(){\n            splay();\n            node_t *r = son[1];\n            while(true){\n                r->push_down();\n                if(r->son[0] == *null) break;\n                r = r->son[0];\n            }\n            return r;\n        }\n    };\n    int cnt;\n    node_t pool[110000],*to[110000],*null,*root;\n    splay_t(){\n        cnt = 0;\n        null = newnode();\n        null->size = 0;\n    }\n    node_t *newnode(int val = 0){\n        node_t *r = &pool[cnt++];\n        r->init(&root,&null);\n        r->val = val,r->size = 1,r->rev = 0;\n        r->p = r->son[0] = r->son[1] = null;\n        return r;\n    }\n    node_t* build(wupin *a,int l,int r){\n        if(l>r) return null;\n        int mid = (l+r)>>1;\n        node_t *ret = newnode(a[mid].h);\n        to[a[mid].h] = ret;\n        build(a,l,mid-1)->link(ret,0);\n        build(a,mid+1,r)->link(ret,1);\n        ret->update();\n        return ret;\n    }\n};\n\nsplay_t s;\n\nint n;\n\nbool cmp1(wupin a,wupin b){return a.id<b.id;}\nbool cmp2(wupin a,wupin b){\n    if(a.h!=b.h) return a.h<b.h;\n    else         return a.id<b.id;\n}\n\nvoid find(){\n    for(int i = 1;i<=n;i++){\n        //找到应操作节点的后继\n        splay_t::node_t *rbound = s.to[i]->upper();\n        //把前面归位好的最后一个节点旋到根节点\n        s.to[i-1]->splay();\n        //把后继旋转到根节点的右儿子\n        rbound->splay(s.to[i-1]);\n        //打印位置\n        printf(\"%d \",i + rbound->lsize()-1);\n        //添加lazy标记\n        rbound->son[0]->rev^=1;\n    }\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 1;i<=n;i++){\n        scanf(\"%d\",&w[i].h);\n        w[i].id = i;\n    }\n    //预处理\n    sort(w+1,w+n+1,cmp2);\n    for(int i = 1;i<=n;i++)\n        w[i].h = i;\n    sort(w+1,w+n+1,cmp1);\n    w[0].h = 0;\n    w[n+1].h = n+1;\n    //正式操作\n    s.root = s.build(w,0,n+1);\n    find();\n    return 0;\n}\n```\n\n{% endfold %}\n","source":"_posts/「CQOI2014」排序机械臂-Splay.md","raw":"---\ntitle: 「CQOI2014」排序机械臂-Splay\nurlname: cqoi2014-sort\ndate: 2018-02-02 15:12:44\ntags:\n- 数据结构\n- 平衡树\n- Splay\n- 题解\ncategories: OI\nvisible:\n---\n\n维护一个序列，第$i$次操作时寻找第i小的数的所在位置$Pi$,并将$(P\\_{i-1},P\\_{i}]$的\b区间翻转。\n\n如果有相同的数，必须保证排序后它们的相对位置关系与初始时相同。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P3165](https://www.luogu.org/problemnew/show/P3165)\n\n## 题解\n\n这道题的大意是区间\b寻找，区间翻转，所以我们\b可以用\bSplay来做，维护一个$size$值和区间翻转的$rev$标记。{% spoiler 虽然我前几天还说再也不用Splay了（逃。 %}\n\n注意到每次操作都会使第$i$个数排序完成，所以我们每次的$P\\_{i}$事实上就是数组下标的$i-1$。\n- - - \n对于区间的寻找，我们注意到可以在开始的时候就记录下来\b第$i$小的数的位置，也就是把他们的指针存在一个\b数组\b里面。\n\n![\b看不到的话假装有图吧](explanation.png)\n\n然后在查询的时候，先把第$i-1$大的节点splay到根；找到第$i$小的数对应的节点指针，寻找其在排序二叉树中的后继节点（图中红色节点），然后把\b后继splay到根的右子树。\n\n但注意在实际查找中，\b因为寻找后继会破坏根结点，所以要先找到后继节点，然后再完成上述操作。\n\n然后\b关于位置，我们可以看出，根节点左边（包括根结点），也就是图中的绿色部分应当有$i-1$个数，而其他在$i$左边（包括$i$）的数应该就是图中的蓝色部分，所以只要将蓝色部分的$size$加上一个$i-1$就是每一次操作的结果\n- - - \n翻转就是常规的区间翻转，打标记pushdown什么的。\n- - - \n为了方便满足一些\b\b它的要求，\b我还事先做了\b离散化的处理。（其实并没有什么\b用\n\n另外还有就是我写的时候还因为少`push_down`了几次被\b坑了\b一下。不过最后一次过评测还是蛮开心的。\n\n## 代码\n{% fold %}\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nstruct wupin{\n    int id,h;\n}w[100100];\n\nstruct splay_t{\n    struct node_t{\n        int val,size;\n        bool rev;\n        node_t *p,*son[2],**root,**null;\n        inline bool get_p(){return p->son[1] == this;}\n        inline void init(node_t **root,node_t **null){this->null = null,this->root = root;}\n        inline int lsize(){return son[0]->size;} inline int rsize(){return son[1]->size;}\n        inline void update(){size = lsize()+rsize()+1;}\n        inline void link(node_t *dst,int tmp){\n            dst->son[tmp] = this;\n            this->p = dst;\n        }\n        inline void push_down(){\n            if(this == *null) return;\n            if(rev){\n                swap(son[0],son[1]);\n                son[0]->rev^=1,son[1]->rev^=1;\n                rev = 0;\n            }\n        }\n        inline void rotate(){\n            p->push_down(),push_down();\n            node_t *rp = p;bool re = get_p();\n            link(rp->p,rp->get_p());\n            son[1-re]->link(rp,re);\n            rp->link(this,1-re);\n            rp->update(),update();\n            if(p == *null) *root = this;\n        }\n        inline node_t* splay(node_t *tar = NULL){\n            if(tar == NULL) tar = *null;\n            p->push_down(),push_down();\n            while(p!=tar){\n                if(p->p == tar)\n                    rotate();\n                else if(p->get_p() == get_p())\n                    p->rotate(),rotate();\n                else\n                    rotate(),rotate();\n            }\n            return this;\n        }\n        inline node_t *upper(){\n            splay();\n            node_t *r = son[1];\n            while(true){\n                r->push_down();\n                if(r->son[0] == *null) break;\n                r = r->son[0];\n            }\n            return r;\n        }\n    };\n    int cnt;\n    node_t pool[110000],*to[110000],*null,*root;\n    splay_t(){\n        cnt = 0;\n        null = newnode();\n        null->size = 0;\n    }\n    node_t *newnode(int val = 0){\n        node_t *r = &pool[cnt++];\n        r->init(&root,&null);\n        r->val = val,r->size = 1,r->rev = 0;\n        r->p = r->son[0] = r->son[1] = null;\n        return r;\n    }\n    node_t* build(wupin *a,int l,int r){\n        if(l>r) return null;\n        int mid = (l+r)>>1;\n        node_t *ret = newnode(a[mid].h);\n        to[a[mid].h] = ret;\n        build(a,l,mid-1)->link(ret,0);\n        build(a,mid+1,r)->link(ret,1);\n        ret->update();\n        return ret;\n    }\n};\n\nsplay_t s;\n\nint n;\n\nbool cmp1(wupin a,wupin b){return a.id<b.id;}\nbool cmp2(wupin a,wupin b){\n    if(a.h!=b.h) return a.h<b.h;\n    else         return a.id<b.id;\n}\n\nvoid find(){\n    for(int i = 1;i<=n;i++){\n        //找到应操作节点的后继\n        splay_t::node_t *rbound = s.to[i]->upper();\n        //把前面归位好的最后一个节点旋到根节点\n        s.to[i-1]->splay();\n        //把后继旋转到根节点的右儿子\n        rbound->splay(s.to[i-1]);\n        //打印位置\n        printf(\"%d \",i + rbound->lsize()-1);\n        //添加lazy标记\n        rbound->son[0]->rev^=1;\n    }\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 1;i<=n;i++){\n        scanf(\"%d\",&w[i].h);\n        w[i].id = i;\n    }\n    //预处理\n    sort(w+1,w+n+1,cmp2);\n    for(int i = 1;i<=n;i++)\n        w[i].h = i;\n    sort(w+1,w+n+1,cmp1);\n    w[0].h = 0;\n    w[n+1].h = n+1;\n    //正式操作\n    s.root = s.build(w,0,n+1);\n    find();\n    return 0;\n}\n```\n\n{% endfold %}\n","slug":"「CQOI2014」排序机械臂-Splay","published":1,"updated":"2018-02-05T11:02:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosg2000l5os6nz3zpzl3","content":"<p>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x7B2C;$i$&#x6B21;&#x64CD;&#x4F5C;&#x65F6;&#x5BFB;&#x627E;&#x7B2C;i&#x5C0F;&#x7684;&#x6570;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;$Pi$,&#x5E76;&#x5C06;$(P_{i-1},P_{i}]$&#x7684;\b&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x6709;&#x76F8;&#x540C;&#x7684;&#x6570;&#xFF0C;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x6392;&#x5E8F;&#x540E;&#x5B83;&#x4EEC;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#x5173;&#x7CFB;&#x4E0E;&#x521D;&#x59CB;&#x65F6;&#x76F8;&#x540C;&#x3002;</p>\n<a id=\"more\"></a>\n<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P3165\" target=\"_blank\" rel=\"noopener\">Luogu P3165</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x9053;&#x9898;&#x7684;&#x5927;&#x610F;&#x662F;&#x533A;&#x95F4;\b&#x5BFB;&#x627E;&#xFF0C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;\b&#x53EF;&#x4EE5;&#x7528;\bSplay&#x6765;&#x505A;&#xFF0C;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;$size$&#x503C;&#x548C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x7684;$rev$&#x6807;&#x8BB0;&#x3002;<span class=\"spoiler\">&#x867D;&#x7136;&#x6211;&#x524D;&#x51E0;&#x5929;&#x8FD8;&#x8BF4;&#x518D;&#x4E5F;&#x4E0D;&#x7528;Splay&#x4E86;&#xFF08;&#x9003;&#x3002;\n</span></p>\n<p>&#x6CE8;&#x610F;&#x5230;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x90FD;&#x4F1A;&#x4F7F;&#x7B2C;$i$&#x4E2A;&#x6570;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6BCF;&#x6B21;&#x7684;$P_{i}$&#x4E8B;&#x5B9E;&#x4E0A;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x7684;$i-1$&#x3002;</p>\n<hr>\n<p>&#x5BF9;&#x4E8E;&#x533A;&#x95F4;&#x7684;&#x5BFB;&#x627E;&#xFF0C;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;&#x53EF;&#x4EE5;&#x5728;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;\b&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x628A;&#x4ED6;&#x4EEC;&#x7684;&#x6307;&#x9488;&#x5B58;&#x5728;&#x4E00;&#x4E2A;\b&#x6570;&#x7EC4;\b&#x91CC;&#x9762;&#x3002;</p>\n<p><img src=\"explanation.png\" alt=\"\b&#x770B;&#x4E0D;&#x5230;&#x7684;&#x8BDD;&#x5047;&#x88C5;&#x6709;&#x56FE;&#x5427;\"></p>\n<p>&#x7136;&#x540E;&#x5728;&#x67E5;&#x8BE2;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5148;&#x628A;&#x7B2C;$i-1$&#x5927;&#x7684;&#x8282;&#x70B9;splay&#x5230;&#x6839;&#xFF1B;&#x627E;&#x5230;&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x8282;&#x70B9;&#x6307;&#x9488;&#xFF0C;&#x5BFB;&#x627E;&#x5176;&#x5728;&#x6392;&#x5E8F;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF08;&#x56FE;&#x4E2D;&#x7EA2;&#x8272;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x628A;\b&#x540E;&#x7EE7;splay&#x5230;&#x6839;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x3002;</p>\n<p>&#x4F46;&#x6CE8;&#x610F;&#x5728;&#x5B9E;&#x9645;&#x67E5;&#x627E;&#x4E2D;&#xFF0C;\b&#x56E0;&#x4E3A;&#x5BFB;&#x627E;&#x540E;&#x7EE7;&#x4F1A;&#x7834;&#x574F;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x5148;&#x627E;&#x5230;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002;</p>\n<p>&#x7136;&#x540E;\b&#x5173;&#x4E8E;&#x4F4D;&#x7F6E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;&#x6839;&#x7ED3;&#x70B9;&#xFF09;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x7EFF;&#x8272;&#x90E8;&#x5206;&#x5E94;&#x5F53;&#x6709;$i-1$&#x4E2A;&#x6570;&#xFF0C;&#x800C;&#x5176;&#x4ED6;&#x5728;$i$&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;$i$&#xFF09;&#x7684;&#x6570;&#x5E94;&#x8BE5;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x84DD;&#x8272;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x8981;&#x5C06;&#x84DD;&#x8272;&#x90E8;&#x5206;&#x7684;$size$&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;$i-1$&#x5C31;&#x662F;&#x6BCF;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x7ED3;&#x679C;</p>\n<hr>\n<p>&#x7FFB;&#x8F6C;&#x5C31;&#x662F;&#x5E38;&#x89C4;&#x7684;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6253;&#x6807;&#x8BB0;pushdown&#x4EC0;&#x4E48;&#x7684;&#x3002;</p>\n<hr>\n<p>&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;\b\b&#x5B83;&#x7684;&#x8981;&#x6C42;&#xFF0C;\b&#x6211;&#x8FD8;&#x4E8B;&#x5148;&#x505A;&#x4E86;\b&#x79BB;&#x6563;&#x5316;&#x7684;&#x5904;&#x7406;&#x3002;&#xFF08;&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;\b&#x7528;</p>\n<p>&#x53E6;&#x5916;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x6211;&#x5199;&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x56E0;&#x4E3A;&#x5C11;<code>push_down</code>&#x4E86;&#x51E0;&#x6B21;&#x88AB;\b&#x5751;&#x4E86;\b&#x4E00;&#x4E0B;&#x3002;&#x4E0D;&#x8FC7;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x8FC7;&#x8BC4;&#x6D4B;&#x8FD8;&#x662F;&#x86EE;&#x5F00;&#x5FC3;&#x7684;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">wupin</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id,h;</span><br><span class=\"line\">&#125;w[<span class=\"number\">100100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">splay_t</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node_t</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,size;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> rev;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *p,*son[<span class=\"number\">2</span>],**root,**null;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">get_p</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> p-&gt;son[<span class=\"number\">1</span>] == <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">node_t</span> **root,<span class=\"keyword\">node_t</span> **null)</span></span>&#123;<span class=\"keyword\">this</span>-&gt;null = null,<span class=\"keyword\">this</span>-&gt;root = root;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lsize</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> son[<span class=\"number\">0</span>]-&gt;size;&#125; <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rsize</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> son[<span class=\"number\">1</span>]-&gt;size;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>&#123;size = lsize()+rsize()+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *dst,<span class=\"keyword\">int</span> tmp)</span></span>&#123;</span><br><span class=\"line\">            dst-&gt;son[tmp] = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;p = dst;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">push_down</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> == *null) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rev)&#123;</span><br><span class=\"line\">                swap(son[<span class=\"number\">0</span>],son[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                son[<span class=\"number\">0</span>]-&gt;rev^=<span class=\"number\">1</span>,son[<span class=\"number\">1</span>]-&gt;rev^=<span class=\"number\">1</span>;</span><br><span class=\"line\">                rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            p-&gt;push_down(),push_down();</span><br><span class=\"line\">            <span class=\"keyword\">node_t</span> *rp = p;<span class=\"keyword\">bool</span> re = get_p();</span><br><span class=\"line\">            link(rp-&gt;p,rp-&gt;get_p());</span><br><span class=\"line\">            son[<span class=\"number\">1</span>-re]-&gt;link(rp,re);</span><br><span class=\"line\">            rp-&gt;link(<span class=\"keyword\">this</span>,<span class=\"number\">1</span>-re);</span><br><span class=\"line\">            rp-&gt;update(),update();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p == *null) *root = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> node_t* <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *tar = <span class=\"literal\">NULL</span>)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tar == <span class=\"literal\">NULL</span>) tar = *null;</span><br><span class=\"line\">            p-&gt;push_down(),push_down();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=tar)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p-&gt;p == tar)</span><br><span class=\"line\">                    rotate();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p-&gt;get_p() == get_p())</span><br><span class=\"line\">                    p-&gt;rotate(),rotate();</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    rotate(),rotate();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> node_t *<span class=\"title\">upper</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            splay();</span><br><span class=\"line\">            <span class=\"keyword\">node_t</span> *r = son[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                r-&gt;push_down();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(r-&gt;son[<span class=\"number\">0</span>] == *null) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                r = r-&gt;son[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> pool[<span class=\"number\">110000</span>],*to[<span class=\"number\">110000</span>],*null,*root;</span><br><span class=\"line\">    <span class=\"keyword\">splay_t</span>()&#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        null = newnode();</span><br><span class=\"line\">        null-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *newnode(<span class=\"keyword\">int</span> val = <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *r = &amp;pool[cnt++];</span><br><span class=\"line\">        r-&gt;init(&amp;root,&amp;null);</span><br><span class=\"line\">        r-&gt;val = val,r-&gt;size = <span class=\"number\">1</span>,r-&gt;rev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        r-&gt;p = r-&gt;son[<span class=\"number\">0</span>] = r-&gt;son[<span class=\"number\">1</span>] = null;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span>* build(wupin *a,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l&gt;r) <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *ret = newnode(a[mid].h);</span><br><span class=\"line\">        to[a[mid].h] = ret;</span><br><span class=\"line\">        build(a,l,mid<span class=\"number\">-1</span>)-&gt;link(ret,<span class=\"number\">0</span>);</span><br><span class=\"line\">        build(a,mid+<span class=\"number\">1</span>,r)-&gt;link(ret,<span class=\"number\">1</span>);</span><br><span class=\"line\">        ret-&gt;update();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">splay_t</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp1</span><span class=\"params\">(wupin a,wupin b)</span></span>&#123;<span class=\"keyword\">return</span> a.id&lt;b.id;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp2</span><span class=\"params\">(wupin a,wupin b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.h!=b.h) <span class=\"keyword\">return</span> a.h&lt;b.h;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>         <span class=\"keyword\">return</span> a.id&lt;b.id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到应操作节点的后继</span></span><br><span class=\"line\">        <span class=\"keyword\">splay_t</span>::<span class=\"keyword\">node_t</span> *rbound = s.to[i]-&gt;upper();</span><br><span class=\"line\">        <span class=\"comment\">//把前面归位好的最后一个节点旋到根节点</span></span><br><span class=\"line\">        s.to[i<span class=\"number\">-1</span>]-&gt;splay();</span><br><span class=\"line\">        <span class=\"comment\">//把后继旋转到根节点的右儿子</span></span><br><span class=\"line\">        rbound-&gt;splay(s.to[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//打印位置</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,i + rbound-&gt;lsize()<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加lazy标记</span></span><br><span class=\"line\">        rbound-&gt;son[<span class=\"number\">0</span>]-&gt;rev^=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w[i].h);</span><br><span class=\"line\">        w[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//预处理</span></span><br><span class=\"line\">    sort(w+<span class=\"number\">1</span>,w+n+<span class=\"number\">1</span>,cmp2);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        w[i].h = i;</span><br><span class=\"line\">    sort(w+<span class=\"number\">1</span>,w+n+<span class=\"number\">1</span>,cmp1);</span><br><span class=\"line\">    w[<span class=\"number\">0</span>].h = <span class=\"number\">0</span>;</span><br><span class=\"line\">    w[n+<span class=\"number\">1</span>].h = n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//正式操作</span></span><br><span class=\"line\">    s.root = s.build(w,<span class=\"number\">0</span>,n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    find();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x7B2C;$i$&#x6B21;&#x64CD;&#x4F5C;&#x65F6;&#x5BFB;&#x627E;&#x7B2C;i&#x5C0F;&#x7684;&#x6570;&#x7684;&#x6240;&#x5728;&#x4F4D;&#x7F6E;$Pi$,&#x5E76;&#x5C06;$(P_{i-1},P_{i}]$&#x7684;\b&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x6709;&#x76F8;&#x540C;&#x7684;&#x6570;&#xFF0C;&#x5FC5;&#x987B;&#x4FDD;&#x8BC1;&#x6392;&#x5E8F;&#x540E;&#x5B83;&#x4EEC;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E;&#x5173;&#x7CFB;&#x4E0E;&#x521D;&#x59CB;&#x65F6;&#x76F8;&#x540C;&#x3002;</p>","more":"<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P3165\" target=\"_blank\" rel=\"noopener\">Luogu P3165</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x9053;&#x9898;&#x7684;&#x5927;&#x610F;&#x662F;&#x533A;&#x95F4;\b&#x5BFB;&#x627E;&#xFF0C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;\b&#x53EF;&#x4EE5;&#x7528;\bSplay&#x6765;&#x505A;&#xFF0C;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;$size$&#x503C;&#x548C;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#x7684;$rev$&#x6807;&#x8BB0;&#x3002;<span class=\"spoiler\">&#x867D;&#x7136;&#x6211;&#x524D;&#x51E0;&#x5929;&#x8FD8;&#x8BF4;&#x518D;&#x4E5F;&#x4E0D;&#x7528;Splay&#x4E86;&#xFF08;&#x9003;&#x3002;\n</span></p>\n<p>&#x6CE8;&#x610F;&#x5230;&#x6BCF;&#x6B21;&#x64CD;&#x4F5C;&#x90FD;&#x4F1A;&#x4F7F;&#x7B2C;$i$&#x4E2A;&#x6570;&#x6392;&#x5E8F;&#x5B8C;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6BCF;&#x6B21;&#x7684;$P_{i}$&#x4E8B;&#x5B9E;&#x4E0A;&#x5C31;&#x662F;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x7684;$i-1$&#x3002;</p>\n<hr>\n<p>&#x5BF9;&#x4E8E;&#x533A;&#x95F4;&#x7684;&#x5BFB;&#x627E;&#xFF0C;&#x6211;&#x4EEC;&#x6CE8;&#x610F;&#x5230;&#x53EF;&#x4EE5;&#x5728;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;\b&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x628A;&#x4ED6;&#x4EEC;&#x7684;&#x6307;&#x9488;&#x5B58;&#x5728;&#x4E00;&#x4E2A;\b&#x6570;&#x7EC4;\b&#x91CC;&#x9762;&#x3002;</p>\n<p><img src=\"explanation.png\" alt=\"\b&#x770B;&#x4E0D;&#x5230;&#x7684;&#x8BDD;&#x5047;&#x88C5;&#x6709;&#x56FE;&#x5427;\"></p>\n<p>&#x7136;&#x540E;&#x5728;&#x67E5;&#x8BE2;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5148;&#x628A;&#x7B2C;$i-1$&#x5927;&#x7684;&#x8282;&#x70B9;splay&#x5230;&#x6839;&#xFF1B;&#x627E;&#x5230;&#x7B2C;$i$&#x5C0F;&#x7684;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x8282;&#x70B9;&#x6307;&#x9488;&#xFF0C;&#x5BFB;&#x627E;&#x5176;&#x5728;&#x6392;&#x5E8F;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF08;&#x56FE;&#x4E2D;&#x7EA2;&#x8272;&#x8282;&#x70B9;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x628A;\b&#x540E;&#x7EE7;splay&#x5230;&#x6839;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x3002;</p>\n<p>&#x4F46;&#x6CE8;&#x610F;&#x5728;&#x5B9E;&#x9645;&#x67E5;&#x627E;&#x4E2D;&#xFF0C;\b&#x56E0;&#x4E3A;&#x5BFB;&#x627E;&#x540E;&#x7EE7;&#x4F1A;&#x7834;&#x574F;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x5148;&#x627E;&#x5230;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002;</p>\n<p>&#x7136;&#x540E;\b&#x5173;&#x4E8E;&#x4F4D;&#x7F6E;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;&#x6839;&#x7ED3;&#x70B9;&#xFF09;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x7EFF;&#x8272;&#x90E8;&#x5206;&#x5E94;&#x5F53;&#x6709;$i-1$&#x4E2A;&#x6570;&#xFF0C;&#x800C;&#x5176;&#x4ED6;&#x5728;$i$&#x5DE6;&#x8FB9;&#xFF08;&#x5305;&#x62EC;$i$&#xFF09;&#x7684;&#x6570;&#x5E94;&#x8BE5;&#x5C31;&#x662F;&#x56FE;&#x4E2D;&#x7684;&#x84DD;&#x8272;&#x90E8;&#x5206;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x8981;&#x5C06;&#x84DD;&#x8272;&#x90E8;&#x5206;&#x7684;$size$&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;$i-1$&#x5C31;&#x662F;&#x6BCF;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x7ED3;&#x679C;</p>\n<hr>\n<p>&#x7FFB;&#x8F6C;&#x5C31;&#x662F;&#x5E38;&#x89C4;&#x7684;&#x533A;&#x95F4;&#x7FFB;&#x8F6C;&#xFF0C;&#x6253;&#x6807;&#x8BB0;pushdown&#x4EC0;&#x4E48;&#x7684;&#x3002;</p>\n<hr>\n<p>&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;\b\b&#x5B83;&#x7684;&#x8981;&#x6C42;&#xFF0C;\b&#x6211;&#x8FD8;&#x4E8B;&#x5148;&#x505A;&#x4E86;\b&#x79BB;&#x6563;&#x5316;&#x7684;&#x5904;&#x7406;&#x3002;&#xFF08;&#x5176;&#x5B9E;&#x5E76;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;\b&#x7528;</p>\n<p>&#x53E6;&#x5916;&#x8FD8;&#x6709;&#x5C31;&#x662F;&#x6211;&#x5199;&#x7684;&#x65F6;&#x5019;&#x8FD8;&#x56E0;&#x4E3A;&#x5C11;<code>push_down</code>&#x4E86;&#x51E0;&#x6B21;&#x88AB;\b&#x5751;&#x4E86;\b&#x4E00;&#x4E0B;&#x3002;&#x4E0D;&#x8FC7;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x8FC7;&#x8BC4;&#x6D4B;&#x8FD8;&#x662F;&#x86EE;&#x5F00;&#x5FC3;&#x7684;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<!--�13-->\n\n</div></div>"},{"title":"「NOI2002」银河英雄传说-并查集","urlname":"noi2002-hero","date":"2018-02-11T08:27:45.000Z","visible":null,"_content":"\n初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。\n\n有两种指令：\n\n合并指令为$M\\ i\\ j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。\n\n询问指令为$C\\ i\\ j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1196](https://www.luogu.org/problemnew/show/P1196)\n\n## 题解\n\n一道并查集的题目。\n\n因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。\n\n说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。\n\n在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。\n\n合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。\n\n查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。\n\n## 代码\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 30010\nusing namespace std;\n\nint f[MAXN],d[MAXN],s[MAXN],t;\n// f 维护父亲节点，d 维护于父亲节点的距离，s 在根节点处维护集合的元素数\n\nint find(int x){\n    if(f[x] == x){\n        return x;\n    }\n    else{\n        int w = find(f[x]);\n        d[x] += d[f[x]];\n        f[x] = w;\n        return w;\n    }\n}\n\nvoid un(int x,int y){\n    int b = find(y),e = find(x);\n    if(b == e){\n        return;\n    }\n    else{\n        d[e] = s[b],d[b] = 0;\n        s[b] = s[b] + s[e],s[e] = 0;\n        f[e] = b;\n        return;\n    }\n}\n\nint main(){\n    scanf(\"%d\",&t);\n    for(int i = 1;i<MAXN;i++){\n        f[i] = i,d[i] = 0,s[i] = 1;\n    }\n    for(int i = 1;i<=t;i++){\n        char op[20];int a,b;\n        scanf(\"%s\",op);\n        scanf(\"%d %d\",&a,&b);\n        if(op[0] == 'M'){\n            un(a,b);\n        }\n        else{\n            int a1 = find(a),b1 = find(b);\n            if(a1!=b1){\n                printf(\"-1\\n\");\n            }\n            else{\n                printf(\"%d\\n\",abs(d[a]-d[b])-1);\n            }\n        }\n    }\n    return 0;\n}\n\n```\n\n{% endfold %}","source":"_posts/「NOI2002」银河英雄传说-并查集.md","raw":"---\ntitle: 「NOI2002」银河英雄传说-并查集\nurlname: noi2002-hero\ndate: 2018-02-11 16:27:45\ntags:\n- 题解\n- 数据结构\n- 并查集\ncategories: OI\nvisible:\n---\n\n初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。\n\n有两种指令：\n\n合并指令为$M\\ i\\ j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。\n\n询问指令为$C\\ i\\ j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1196](https://www.luogu.org/problemnew/show/P1196)\n\n## 题解\n\n一道并查集的题目。\n\n因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。\n\n说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。\n\n在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。\n\n合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。\n\n查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。\n\n## 代码\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define MAXN 30010\nusing namespace std;\n\nint f[MAXN],d[MAXN],s[MAXN],t;\n// f 维护父亲节点，d 维护于父亲节点的距离，s 在根节点处维护集合的元素数\n\nint find(int x){\n    if(f[x] == x){\n        return x;\n    }\n    else{\n        int w = find(f[x]);\n        d[x] += d[f[x]];\n        f[x] = w;\n        return w;\n    }\n}\n\nvoid un(int x,int y){\n    int b = find(y),e = find(x);\n    if(b == e){\n        return;\n    }\n    else{\n        d[e] = s[b],d[b] = 0;\n        s[b] = s[b] + s[e],s[e] = 0;\n        f[e] = b;\n        return;\n    }\n}\n\nint main(){\n    scanf(\"%d\",&t);\n    for(int i = 1;i<MAXN;i++){\n        f[i] = i,d[i] = 0,s[i] = 1;\n    }\n    for(int i = 1;i<=t;i++){\n        char op[20];int a,b;\n        scanf(\"%s\",op);\n        scanf(\"%d %d\",&a,&b);\n        if(op[0] == 'M'){\n            un(a,b);\n        }\n        else{\n            int a1 = find(a),b1 = find(b);\n            if(a1!=b1){\n                printf(\"-1\\n\");\n            }\n            else{\n                printf(\"%d\\n\",abs(d[a]-d[b])-1);\n            }\n        }\n    }\n    return 0;\n}\n\n```\n\n{% endfold %}","slug":"「NOI2002」银河英雄传说-并查集","published":1,"updated":"2018-02-11T08:51:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosg8000o5os63c1sejii","content":"<p>初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。</p>\n<p>有两种指令：</p>\n<p>合并指令为$M\\ i\\ j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。</p>\n<p>询问指令为$C\\ i\\ j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。</p>\n<a id=\"more\"></a>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1196\" target=\"_blank\" rel=\"noopener\">Luogu P1196</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>一道并查集的题目。</p>\n<p>因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。</p>\n<p>说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。</p>\n<p>在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。</p>\n<p>合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。</p>\n<p>查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 30010</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[MAXN],d[MAXN],s[MAXN],t;</span><br><span class=\"line\"><span class=\"comment\">// f 维护父亲节点，d 维护于父亲节点的距离，s 在根节点处维护集合的元素数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x] == x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w = find(f[x]);</span><br><span class=\"line\">        d[x] += d[f[x]];</span><br><span class=\"line\">        f[x] = w;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">un</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = find(y),e = find(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == e)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        d[e] = s[b],d[b] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        s[b] = s[b] + s[e],s[e] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        f[e] = b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;MAXN;i++)&#123;</span><br><span class=\"line\">        f[i] = i,d[i] = <span class=\"number\">0</span>,s[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=t;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> op[<span class=\"number\">20</span>];<span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,op);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;a,&amp;b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'M'</span>)&#123;</span><br><span class=\"line\">            un(a,b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a1 = find(a),b1 = find(b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a1!=b1)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"-1\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">abs</span>(d[a]-d[b])<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>","site":{"data":{}},"excerpt":"<p>初始时，第$i$号战舰处于第$i$列$(i = 1, 2, …, 30000)$。</p>\n<p>有两种指令：</p>\n<p>合并指令为$M\\ i\\ j$，含义为将第$i$号战舰所在的整个战舰队列，作为一个整体（头在前尾在后）接至第$j$号战舰所在的战舰队列的尾部。</p>\n<p>询问指令为$C\\ i\\ j$。该指令意思询问第$i$号战舰与第$j$号战舰当前是否在同一列中，如果在同一列中，那么它们之间布置有多少战舰。</p>","more":"<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1196\" target=\"_blank\" rel=\"noopener\">Luogu P1196</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>一道并查集的题目。</p>\n<p>因为快速的寻找两个战舰是否在同一列里面，我们可以使用并查集数据结构。但注意到题目还要询问两个战舰之间的距离，我们需要额外维护一些信息，所以我们需要用加权的并查集。</p>\n<p>说的加权，事实上就是在每一个节点上额外维护一些信息。在这里，我们在节点上额外维护到父节点的距离，在根节点处维护这个集合的大小。</p>\n<p>在寻找某个节点的时候，我们仍然可以进行路径压缩。只需要先对父节点递归完成后，把权值加上父节点的权值，然后就可以直接连到根上。</p>\n<p>合并操作也差不多。为了使合并操作简单，我们需要保证父节点一定在子节点前面。这样，我们找到的根节点就是每个队列的最前方的节点。然后可以将后面接上的节点的父亲指向前面的节点，距离设为前面的集合的大小，就可以维护了。</p>\n<p>查询距离的时候，只需要把两个节点到根的距离算出来，作差取绝对值，然后再减去1即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<!--�14-->\n\n</div></div>"},{"title":"「NOI2004」郁闷的出纳员-Splay","date":"2018-01-31T13:05:48.000Z","visible":null,"urlname":"noi2004-cashier","_content":"\n维护一个数列。\n现有四种命令，新加入一个数$k$，把每个数加上$k$，把每个数减去$k$，查询第$k$大的数。如果数列中的任意数小于$min$，将它立即删除。并在最后输出总共删去的数的个数$res$。\n\n如果新加入的数k的初值小于$min$，它将不会被加入数列。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1486](https://www.luogu.org/problemnew/show/P1486)\n\n## 题解\n\n这是一道经典的平衡树的题，被我用来练手Splay。\n\n{% spoiler 写完这道题之后我就觉得，我再也不会想用Splay了。debug了一天，简直浑身难受。以后尽量写旋转&非旋Treap吧。%}\n\n构建一颗Splay树。需要记录目前已经全体加过或者减过的数，也就是一个相对值。换算来说就是`树外-相对值=树内，树内+相对值=树外`。后面也就不再太多特殊说明。需要添加两个虚的最大和最小节点，也会导致排名计算的一些变化。\n\n+ 插入操作\n\n先判断是否满足插入条件，即此数是否大于$min$，然后减去相对后正常插入，`splay`至根节点。\n\n+ 加上一个数\n\n直接更改全局相对值，由于不会出现删数，不会有其他操作。\n\n+ 减去一个数\n\n首先更改全局相对值，再把小于$min$的数删除，简单的来说就是吧第一个大于等于$min$的数`splay`到根上，然后删除左子树，补上左边的最小节点。\n\n如果正好存在值为$min$的节点，就将它直接`splay`到根，完成上述操作；如果不存在，就插入一个值为$min-1$的节点，寻找它的后继，并`splay`到根，完成上述操作。这时统计$res$需要减去我们刚刚加上的节点。\n\n+ 查询第k大\n\n直接查，然后`splay`到根。只需要注意我们的数列是从小到大排列的。\n\n\n## 代码\n\n{% fold %}\n```cpp\n#include <cstdio>\n#define MAX 0x3f3f3f3f\nusing namespace std;\n\ninline int qr(){\n    int f = 1,s = 0;char ch = getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch == '-') f = -1;\n        ch = getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        s = (s<<3)+(s<<1)+ch-48;\n        ch = getchar();\n    }\n    return f*s;\n}\n\nstruct splay_t{\n    struct node_t{\n        int val,size,cnt;\n        node_t *son[2],*p;node_t **null,**root;\n        //与父亲关系\n        inline bool get_p(){return p->son[1] == this;}\n        //双向连接\n        inline void link(node_t *dst,bool re){p = dst;dst->son[re] = this;}\n        //更新size值\n        inline void update(){size = son[0]->size + son[1]->size + cnt;}\n        //初始化**root和**null\n        inline void init(node_t **null,node_t **root){this->null = null,this->root = root;}\n        //获取左右节点的大小\n        inline int lsize(){return son[0]->size;}int rsize(){return son[1]->size;}\n        //寻找节点前驱或者后继\n        node_t *uporlow(int tmp){//0前驱，1后继\n            splay();\n            node_t *t = son[tmp];\n            while(t->son[1-tmp] != *null)\n                t = t->son[1-tmp]; \n            return t;\n        }\n        //旋转\n        void rotate(){\n            bool re = get_p();node_t *rp = p;\n            link(rp->p,rp->get_p());\n            son[1-re]->link(rp,re);\n            rp->link(this,1-re);\n            rp->update();update();\n            if(p == *null) *root = this; \n        }\n        //splay操作\n        node_t* splay(node_t *tar = NULL){\n            if(this == *null) return this;\n            if(tar == NULL) tar = *null;\n            while(p!=tar){\n                if(p->p == tar) rotate();\n                else{\n                    if(p->get_p()==get_p()) p->rotate(),rotate();\n                    else rotate(),rotate();\n                }\n            }\n            return this;\n        }\n    };\n    int treecnt;\n    node_t pool[300000];\n    node_t *null,*root,*lb,*rb;//lb是左边的虚拟节点，rb同理\n    //初始化\n    splay_t(){\n        treecnt = 0;\n        newnode(null);root = null;\n        null->size = 0,null->val = 0;\n        lb = insert(-MAX);rb = insert(MAX);\n    }\n    //新建节点\n    void newnode(node_t *&r,int val = 0){\n        r = &pool[treecnt++];\n        r->val = val;\n        r->son[0] = r->son[1] = r->p = null;\n        r->cnt = r->size = 1;\n        r->init(&null,&root);\n    }\n    //寻找给定rank的数字\n    node_t* find_Kth(int rank){\n        node_t *t = root;\n        while(t!=null){\n            if(rank<t->lsize())\n                t = t->son[0];\n            else if((rank-=t->lsize())<t->cnt)\n                return t->splay();\n            else\n                rank-=t->cnt,t = t->son[1];\n        }\n        return null;\n    }\n    //按值寻找\n    node_t *find_by_val(int val){\n        node_t *t = root;\n        while(t!=null){\n            if(val<t->val)\n                t = t->son[0];\n            else if(val==t->val)\n                return t->splay();\n            else\n                t = t->son[1];\n        }\n        return null;\n    }\n    //插入给定值的节点\n    node_t* insert(int val){\n        node_t **tar = &root,*parent = null;\n        while(*tar!=null){\n            (*tar)->size++;\n            if((*tar)->val == val){\n                (*tar)->cnt++;return *tar;\n            }\n            else{\n                parent = *tar;tar = &(*tar)->son[(*tar)->val<val];\n            }\n        }\n        newnode(*tar,val);\n        (*tar)->link(parent,parent->val < val);\n        return (*tar)->splay();\n    }\n    //调试用 打印树\n    void print(node_t *r = NULL,int depth = 0){\n        if(r == NULL) r = root;\n        if(r == null) return;\n        else{\n            print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');\n            printf(\"v:%d,size:%d,cnt:%d,son:%d %d,depth:%03d\\n\",r->val,r->size,r->cnt,r->son[0]!=null,r->son[1]!=null,depth);\n            print(r->son[1],depth+1);\n        }\n    }\n};\n\nsplay_t x;int n,minn,res = 0,nowadd = 0;\n\n//插入一个数\ninline void insert(int val){if(val>=minn) x.insert(val-nowadd);}//注意要减去nowadd \n//统一加工资\ninline void add(int val){nowadd+=val;}\n//统一减公司顺便裁人\ninline void decrease(int val){\n    nowadd-=val;\n    splay_t::node_t *r = x.find_by_val(minn-nowadd);//注意要减去nowadd \n    if(r!=x.null)\n        r->splay(),res+=(x.root->lsize()-1);\n    else\n        x.insert(minn-nowadd-1)->uporlow(1)->splay(),res+=(x.root->lsize()-2);\n    x.lb->link(x.root,0);x.lb->son[1] = x.null;\n    x.root->update();\n}\n//查找工资排名K位的员工的工资\ninline int ask(int rank){\n    if(rank > x.root->size - 2) return -1;\n    return x.find_Kth(x.root->size-rank-1)->val + nowadd;//注意要加上nowadd\n}\n\nint main(){\n    n = qr();minn = qr();\n    for(int i = 0;i<n;i++){\n        char op[20];int k;\n        scanf(\"%s\",op);k = qr();\n        if(op[0] == 'A')      add(k);\n        else if(op[0] == 'S') decrease(k);\n        else if(op[0] == 'I') insert(k);\n        else if(op[0] == 'F') printf(\"%d\\n\",ask(k));\n        else if(op[0] == 'P') x.print();\n    }\n    printf(\"%d\\n\",res);\n    return 0;\n}\n```\n\n{% endfold %}\n","source":"_posts/「NOI2004」郁闷的出纳员-Splay.md","raw":"---\ntitle: 「NOI2004」郁闷的出纳员-Splay\ndate: 2018-01-31 21:05:48\ntags:\n- 题解\n- 数据结构\n- 平衡树\n- Splay\ncategories: OI\nvisible:\nurlname: noi2004-cashier\n---\n\n维护一个数列。\n现有四种命令，新加入一个数$k$，把每个数加上$k$，把每个数减去$k$，查询第$k$大的数。如果数列中的任意数小于$min$，将它立即删除。并在最后输出总共删去的数的个数$res$。\n\n如果新加入的数k的初值小于$min$，它将不会被加入数列。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1486](https://www.luogu.org/problemnew/show/P1486)\n\n## 题解\n\n这是一道经典的平衡树的题，被我用来练手Splay。\n\n{% spoiler 写完这道题之后我就觉得，我再也不会想用Splay了。debug了一天，简直浑身难受。以后尽量写旋转&非旋Treap吧。%}\n\n构建一颗Splay树。需要记录目前已经全体加过或者减过的数，也就是一个相对值。换算来说就是`树外-相对值=树内，树内+相对值=树外`。后面也就不再太多特殊说明。需要添加两个虚的最大和最小节点，也会导致排名计算的一些变化。\n\n+ 插入操作\n\n先判断是否满足插入条件，即此数是否大于$min$，然后减去相对后正常插入，`splay`至根节点。\n\n+ 加上一个数\n\n直接更改全局相对值，由于不会出现删数，不会有其他操作。\n\n+ 减去一个数\n\n首先更改全局相对值，再把小于$min$的数删除，简单的来说就是吧第一个大于等于$min$的数`splay`到根上，然后删除左子树，补上左边的最小节点。\n\n如果正好存在值为$min$的节点，就将它直接`splay`到根，完成上述操作；如果不存在，就插入一个值为$min-1$的节点，寻找它的后继，并`splay`到根，完成上述操作。这时统计$res$需要减去我们刚刚加上的节点。\n\n+ 查询第k大\n\n直接查，然后`splay`到根。只需要注意我们的数列是从小到大排列的。\n\n\n## 代码\n\n{% fold %}\n```cpp\n#include <cstdio>\n#define MAX 0x3f3f3f3f\nusing namespace std;\n\ninline int qr(){\n    int f = 1,s = 0;char ch = getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch == '-') f = -1;\n        ch = getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        s = (s<<3)+(s<<1)+ch-48;\n        ch = getchar();\n    }\n    return f*s;\n}\n\nstruct splay_t{\n    struct node_t{\n        int val,size,cnt;\n        node_t *son[2],*p;node_t **null,**root;\n        //与父亲关系\n        inline bool get_p(){return p->son[1] == this;}\n        //双向连接\n        inline void link(node_t *dst,bool re){p = dst;dst->son[re] = this;}\n        //更新size值\n        inline void update(){size = son[0]->size + son[1]->size + cnt;}\n        //初始化**root和**null\n        inline void init(node_t **null,node_t **root){this->null = null,this->root = root;}\n        //获取左右节点的大小\n        inline int lsize(){return son[0]->size;}int rsize(){return son[1]->size;}\n        //寻找节点前驱或者后继\n        node_t *uporlow(int tmp){//0前驱，1后继\n            splay();\n            node_t *t = son[tmp];\n            while(t->son[1-tmp] != *null)\n                t = t->son[1-tmp]; \n            return t;\n        }\n        //旋转\n        void rotate(){\n            bool re = get_p();node_t *rp = p;\n            link(rp->p,rp->get_p());\n            son[1-re]->link(rp,re);\n            rp->link(this,1-re);\n            rp->update();update();\n            if(p == *null) *root = this; \n        }\n        //splay操作\n        node_t* splay(node_t *tar = NULL){\n            if(this == *null) return this;\n            if(tar == NULL) tar = *null;\n            while(p!=tar){\n                if(p->p == tar) rotate();\n                else{\n                    if(p->get_p()==get_p()) p->rotate(),rotate();\n                    else rotate(),rotate();\n                }\n            }\n            return this;\n        }\n    };\n    int treecnt;\n    node_t pool[300000];\n    node_t *null,*root,*lb,*rb;//lb是左边的虚拟节点，rb同理\n    //初始化\n    splay_t(){\n        treecnt = 0;\n        newnode(null);root = null;\n        null->size = 0,null->val = 0;\n        lb = insert(-MAX);rb = insert(MAX);\n    }\n    //新建节点\n    void newnode(node_t *&r,int val = 0){\n        r = &pool[treecnt++];\n        r->val = val;\n        r->son[0] = r->son[1] = r->p = null;\n        r->cnt = r->size = 1;\n        r->init(&null,&root);\n    }\n    //寻找给定rank的数字\n    node_t* find_Kth(int rank){\n        node_t *t = root;\n        while(t!=null){\n            if(rank<t->lsize())\n                t = t->son[0];\n            else if((rank-=t->lsize())<t->cnt)\n                return t->splay();\n            else\n                rank-=t->cnt,t = t->son[1];\n        }\n        return null;\n    }\n    //按值寻找\n    node_t *find_by_val(int val){\n        node_t *t = root;\n        while(t!=null){\n            if(val<t->val)\n                t = t->son[0];\n            else if(val==t->val)\n                return t->splay();\n            else\n                t = t->son[1];\n        }\n        return null;\n    }\n    //插入给定值的节点\n    node_t* insert(int val){\n        node_t **tar = &root,*parent = null;\n        while(*tar!=null){\n            (*tar)->size++;\n            if((*tar)->val == val){\n                (*tar)->cnt++;return *tar;\n            }\n            else{\n                parent = *tar;tar = &(*tar)->son[(*tar)->val<val];\n            }\n        }\n        newnode(*tar,val);\n        (*tar)->link(parent,parent->val < val);\n        return (*tar)->splay();\n    }\n    //调试用 打印树\n    void print(node_t *r = NULL,int depth = 0){\n        if(r == NULL) r = root;\n        if(r == null) return;\n        else{\n            print(r->son[0],depth+1);\n            for(int i = 0;i<depth;i++) putchar(' ');\n            printf(\"v:%d,size:%d,cnt:%d,son:%d %d,depth:%03d\\n\",r->val,r->size,r->cnt,r->son[0]!=null,r->son[1]!=null,depth);\n            print(r->son[1],depth+1);\n        }\n    }\n};\n\nsplay_t x;int n,minn,res = 0,nowadd = 0;\n\n//插入一个数\ninline void insert(int val){if(val>=minn) x.insert(val-nowadd);}//注意要减去nowadd \n//统一加工资\ninline void add(int val){nowadd+=val;}\n//统一减公司顺便裁人\ninline void decrease(int val){\n    nowadd-=val;\n    splay_t::node_t *r = x.find_by_val(minn-nowadd);//注意要减去nowadd \n    if(r!=x.null)\n        r->splay(),res+=(x.root->lsize()-1);\n    else\n        x.insert(minn-nowadd-1)->uporlow(1)->splay(),res+=(x.root->lsize()-2);\n    x.lb->link(x.root,0);x.lb->son[1] = x.null;\n    x.root->update();\n}\n//查找工资排名K位的员工的工资\ninline int ask(int rank){\n    if(rank > x.root->size - 2) return -1;\n    return x.find_Kth(x.root->size-rank-1)->val + nowadd;//注意要加上nowadd\n}\n\nint main(){\n    n = qr();minn = qr();\n    for(int i = 0;i<n;i++){\n        char op[20];int k;\n        scanf(\"%s\",op);k = qr();\n        if(op[0] == 'A')      add(k);\n        else if(op[0] == 'S') decrease(k);\n        else if(op[0] == 'I') insert(k);\n        else if(op[0] == 'F') printf(\"%d\\n\",ask(k));\n        else if(op[0] == 'P') x.print();\n    }\n    printf(\"%d\\n\",res);\n    return 0;\n}\n```\n\n{% endfold %}\n","slug":"「NOI2004」郁闷的出纳员-Splay","published":1,"updated":"2018-02-05T11:02:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgc000r5os66hy7z6rb","content":"<p>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x6570;&#x5217;&#x3002;<br>&#x73B0;&#x6709;&#x56DB;&#x79CD;&#x547D;&#x4EE4;&#xFF0C;&#x65B0;&#x52A0;&#x5165;&#x4E00;&#x4E2A;&#x6570;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x52A0;&#x4E0A;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x51CF;&#x53BB;$k$&#xFF0C;&#x67E5;&#x8BE2;&#x7B2C;$k$&#x5927;&#x7684;&#x6570;&#x3002;&#x5982;&#x679C;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x6570;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5C06;&#x5B83;&#x7ACB;&#x5373;&#x5220;&#x9664;&#x3002;&#x5E76;&#x5728;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x603B;&#x5171;&#x5220;&#x53BB;&#x7684;&#x6570;&#x7684;&#x4E2A;&#x6570;$res$&#x3002;</p>\n<p>&#x5982;&#x679C;&#x65B0;&#x52A0;&#x5165;&#x7684;&#x6570;k&#x7684;&#x521D;&#x503C;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5B83;&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x52A0;&#x5165;&#x6570;&#x5217;&#x3002;</p>\n<a id=\"more\"></a>\n<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1486\" target=\"_blank\" rel=\"noopener\">Luogu P1486</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x7ECF;&#x5178;&#x7684;&#x5E73;&#x8861;&#x6811;&#x7684;&#x9898;&#xFF0C;&#x88AB;&#x6211;&#x7528;&#x6765;&#x7EC3;&#x624B;Splay&#x3002;</p>\n<span class=\"spoiler\">&#x5199;&#x5B8C;&#x8FD9;&#x9053;&#x9898;&#x4E4B;&#x540E;&#x6211;&#x5C31;&#x89C9;&#x5F97;&#xFF0C;&#x6211;&#x518D;&#x4E5F;&#x4E0D;&#x4F1A;&#x60F3;&#x7528;Splay&#x4E86;&#x3002;debug&#x4E86;&#x4E00;&#x5929;&#xFF0C;&#x7B80;&#x76F4;&#x6D51;&#x8EAB;&#x96BE;&#x53D7;&#x3002;&#x4EE5;&#x540E;&#x5C3D;&#x91CF;&#x5199;&#x65CB;&#x8F6C;&amp;&#x975E;&#x65CB;Treap&#x5427;&#x3002;\n</span>\n<p>&#x6784;&#x5EFA;&#x4E00;&#x9897;Splay&#x6811;&#x3002;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x5168;&#x4F53;&#x52A0;&#x8FC7;&#x6216;&#x8005;&#x51CF;&#x8FC7;&#x7684;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x503C;&#x3002;&#x6362;&#x7B97;&#x6765;&#x8BF4;&#x5C31;&#x662F;<code>&#x6811;&#x5916;-&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5185;&#xFF0C;&#x6811;&#x5185;+&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5916;</code>&#x3002;&#x540E;&#x9762;&#x4E5F;&#x5C31;&#x4E0D;&#x518D;&#x592A;&#x591A;&#x7279;&#x6B8A;&#x8BF4;&#x660E;&#x3002;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x865A;&#x7684;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#xFF0C;&#x4E5F;&#x4F1A;&#x5BFC;&#x81F4;&#x6392;&#x540D;&#x8BA1;&#x7B97;&#x7684;&#x4E00;&#x4E9B;&#x53D8;&#x5316;&#x3002;</p>\n<ul>\n<li>&#x63D2;&#x5165;&#x64CD;&#x4F5C;</li>\n</ul>\n<p>&#x5148;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x63D2;&#x5165;&#x6761;&#x4EF6;&#xFF0C;&#x5373;&#x6B64;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;$min$&#xFF0C;&#x7136;&#x540E;&#x51CF;&#x53BB;&#x76F8;&#x5BF9;&#x540E;&#x6B63;&#x5E38;&#x63D2;&#x5165;&#xFF0C;<code>splay</code>&#x81F3;&#x6839;&#x8282;&#x70B9;&#x3002;</p>\n<ul>\n<li>&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x6570;</li>\n</ul>\n<p>&#x76F4;&#x63A5;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5220;&#x6570;&#xFF0C;&#x4E0D;&#x4F1A;&#x6709;&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x3002;</p>\n<ul>\n<li>&#x51CF;&#x53BB;&#x4E00;&#x4E2A;&#x6570;</li>\n</ul>\n<p>&#x9996;&#x5148;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x518D;&#x628A;&#x5C0F;&#x4E8E;$min$&#x7684;&#x6570;&#x5220;&#x9664;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x5427;&#x7B2C;&#x4E00;&#x4E2A;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;$min$&#x7684;&#x6570;<code>splay</code>&#x5230;&#x6839;&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x5220;&#x9664;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x8865;&#x4E0A;&#x5DE6;&#x8FB9;&#x7684;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x6B63;&#x597D;&#x5B58;&#x5728;&#x503C;&#x4E3A;$min$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x5C06;&#x5B83;&#x76F4;&#x63A5;<code>splay</code>&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#xFF1B;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x503C;&#x4E3A;$min-1$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5BFB;&#x627E;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#xFF0C;&#x5E76;<code>splay</code>&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x65F6;&#x7EDF;&#x8BA1;$res$&#x9700;&#x8981;&#x51CF;&#x53BB;&#x6211;&#x4EEC;&#x521A;&#x521A;&#x52A0;&#x4E0A;&#x7684;&#x8282;&#x70B9;&#x3002;</p>\n<ul>\n<li>&#x67E5;&#x8BE2;&#x7B2C;k&#x5927;</li>\n</ul>\n<p>&#x76F4;&#x63A5;&#x67E5;&#xFF0C;&#x7136;&#x540E;<code>splay</code>&#x5230;&#x6839;&#x3002;&#x53EA;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x5217;&#x662F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5217;&#x7684;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">qr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>,s = <span class=\"number\">0</span>;<span class=\"keyword\">char</span> ch = getchar();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ch == <span class=\"string\">'-'</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">        s = (s&lt;&lt;<span class=\"number\">3</span>)+(s&lt;&lt;<span class=\"number\">1</span>)+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        ch = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f*s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">splay_t</span>&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node_t</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,size,cnt;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *son[<span class=\"number\">2</span>],*p;<span class=\"keyword\">node_t</span> **null,**root;</span><br><span class=\"line\">        <span class=\"comment\">//与父亲关系</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">get_p</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> p-&gt;son[<span class=\"number\">1</span>] == <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//双向连接</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *dst,<span class=\"keyword\">bool</span> re)</span></span>&#123;p = dst;dst-&gt;son[re] = <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新size值</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>&#123;size = son[<span class=\"number\">0</span>]-&gt;size + son[<span class=\"number\">1</span>]-&gt;size + cnt;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//初始化**root和**null</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">node_t</span> **null,<span class=\"keyword\">node_t</span> **root)</span></span>&#123;<span class=\"keyword\">this</span>-&gt;null = null,<span class=\"keyword\">this</span>-&gt;root = root;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取左右节点的大小</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lsize</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> son[<span class=\"number\">0</span>]-&gt;size;&#125;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rsize</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> son[<span class=\"number\">1</span>]-&gt;size;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//寻找节点前驱或者后继</span></span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *uporlow(<span class=\"keyword\">int</span> tmp)&#123;<span class=\"comment\">//0前驱，1后继</span></span><br><span class=\"line\">            splay();</span><br><span class=\"line\">            <span class=\"keyword\">node_t</span> *t = son[tmp];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(t-&gt;son[<span class=\"number\">1</span>-tmp] != *null)</span><br><span class=\"line\">                t = t-&gt;son[<span class=\"number\">1</span>-tmp]; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//旋转</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> re = get_p();<span class=\"keyword\">node_t</span> *rp = p;</span><br><span class=\"line\">            link(rp-&gt;p,rp-&gt;get_p());</span><br><span class=\"line\">            son[<span class=\"number\">1</span>-re]-&gt;link(rp,re);</span><br><span class=\"line\">            rp-&gt;link(<span class=\"keyword\">this</span>,<span class=\"number\">1</span>-re);</span><br><span class=\"line\">            rp-&gt;update();update();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p == *null) *root = <span class=\"keyword\">this</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//splay操作</span></span><br><span class=\"line\">        <span class=\"keyword\">node_t</span>* splay(<span class=\"keyword\">node_t</span> *tar = <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> == *null) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tar == <span class=\"literal\">NULL</span>) tar = *null;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=tar)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p-&gt;p == tar) rotate();</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p-&gt;get_p()==get_p()) p-&gt;rotate(),rotate();</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> rotate(),rotate();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> treecnt;</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> pool[<span class=\"number\">300000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *null,*root,*lb,*rb;<span class=\"comment\">//lb是左边的虚拟节点，rb同理</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">splay_t</span>()&#123;</span><br><span class=\"line\">        treecnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        newnode(null);root = null;</span><br><span class=\"line\">        null-&gt;size = <span class=\"number\">0</span>,null-&gt;val = <span class=\"number\">0</span>;</span><br><span class=\"line\">        lb = insert(-MAX);rb = insert(MAX);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//新建节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *&amp;r,<span class=\"keyword\">int</span> val = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">        r = &amp;pool[treecnt++];</span><br><span class=\"line\">        r-&gt;val = val;</span><br><span class=\"line\">        r-&gt;son[<span class=\"number\">0</span>] = r-&gt;son[<span class=\"number\">1</span>] = r-&gt;p = null;</span><br><span class=\"line\">        r-&gt;cnt = r-&gt;size = <span class=\"number\">1</span>;</span><br><span class=\"line\">        r-&gt;init(&amp;null,&amp;root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//寻找给定rank的数字</span></span><br><span class=\"line\">    <span class=\"keyword\">node_t</span>* find_Kth(<span class=\"keyword\">int</span> rank)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *t = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t!=null)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rank&lt;t-&gt;lsize())</span><br><span class=\"line\">                t = t-&gt;son[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((rank-=t-&gt;lsize())&lt;t-&gt;cnt)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t-&gt;splay();</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                rank-=t-&gt;cnt,t = t-&gt;son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//按值寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">node_t</span> *find_by_val(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> *t = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t!=null)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val&lt;t-&gt;val)</span><br><span class=\"line\">                t = t-&gt;son[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val==t-&gt;val)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t-&gt;splay();</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                t = t-&gt;son[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入给定值的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">node_t</span>* insert(<span class=\"keyword\">int</span> val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">node_t</span> **tar = &amp;root,*parent = null;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(*tar!=null)&#123;</span><br><span class=\"line\">            (*tar)-&gt;size++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((*tar)-&gt;val == val)&#123;</span><br><span class=\"line\">                (*tar)-&gt;cnt++;<span class=\"keyword\">return</span> *tar;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                parent = *tar;tar = &amp;(*tar)-&gt;son[(*tar)-&gt;val&lt;val];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newnode(*tar,val);</span><br><span class=\"line\">        (*tar)-&gt;link(parent,parent-&gt;val &lt; val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (*tar)-&gt;splay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调试用 打印树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">node_t</span> *r = <span class=\"literal\">NULL</span>,<span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r == <span class=\"literal\">NULL</span>) r = root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r == null) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            print(r-&gt;son[<span class=\"number\">0</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;depth;i++) <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"v:%d,size:%d,cnt:%d,son:%d %d,depth:%03d\\n\"</span>,r-&gt;val,r-&gt;size,r-&gt;cnt,r-&gt;son[<span class=\"number\">0</span>]!=null,r-&gt;son[<span class=\"number\">1</span>]!=null,depth);</span><br><span class=\"line\">            print(r-&gt;son[<span class=\"number\">1</span>],depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">splay_t</span> x;<span class=\"keyword\">int</span> n,minn,res = <span class=\"number\">0</span>,nowadd = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;<span class=\"keyword\">if</span>(val&gt;=minn) x.insert(val-nowadd);&#125;<span class=\"comment\">//注意要减去nowadd </span></span><br><span class=\"line\"><span class=\"comment\">//统一加工资</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;nowadd+=val;&#125;</span><br><span class=\"line\"><span class=\"comment\">//统一减公司顺便裁人</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    nowadd-=val;</span><br><span class=\"line\">    <span class=\"keyword\">splay_t</span>::<span class=\"keyword\">node_t</span> *r = x.find_by_val(minn-nowadd);<span class=\"comment\">//注意要减去nowadd </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r!=x.null)</span><br><span class=\"line\">        r-&gt;splay(),res+=(x.root-&gt;lsize()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        x.insert(minn-nowadd<span class=\"number\">-1</span>)-&gt;uporlow(<span class=\"number\">1</span>)-&gt;splay(),res+=(x.root-&gt;lsize()<span class=\"number\">-2</span>);</span><br><span class=\"line\">    x.lb-&gt;link(x.root,<span class=\"number\">0</span>);x.lb-&gt;son[<span class=\"number\">1</span>] = x.null;</span><br><span class=\"line\">    x.root-&gt;update();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找工资排名K位的员工的工资</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> rank)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rank &gt; x.root-&gt;size - <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.find_Kth(x.root-&gt;size-rank<span class=\"number\">-1</span>)-&gt;val + nowadd;<span class=\"comment\">//注意要加上nowadd</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = qr();minn = qr();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> op[<span class=\"number\">20</span>];<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,op);k = qr();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'A'</span>)      add(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'S'</span>) decrease(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'I'</span>) insert(k);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'F'</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ask(k));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">'P'</span>) x.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x6570;&#x5217;&#x3002;<br>&#x73B0;&#x6709;&#x56DB;&#x79CD;&#x547D;&#x4EE4;&#xFF0C;&#x65B0;&#x52A0;&#x5165;&#x4E00;&#x4E2A;&#x6570;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x52A0;&#x4E0A;$k$&#xFF0C;&#x628A;&#x6BCF;&#x4E2A;&#x6570;&#x51CF;&#x53BB;$k$&#xFF0C;&#x67E5;&#x8BE2;&#x7B2C;$k$&#x5927;&#x7684;&#x6570;&#x3002;&#x5982;&#x679C;&#x6570;&#x5217;&#x4E2D;&#x7684;&#x4EFB;&#x610F;&#x6570;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5C06;&#x5B83;&#x7ACB;&#x5373;&#x5220;&#x9664;&#x3002;&#x5E76;&#x5728;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x603B;&#x5171;&#x5220;&#x53BB;&#x7684;&#x6570;&#x7684;&#x4E2A;&#x6570;$res$&#x3002;</p>\n<p>&#x5982;&#x679C;&#x65B0;&#x52A0;&#x5165;&#x7684;&#x6570;k&#x7684;&#x521D;&#x503C;&#x5C0F;&#x4E8E;$min$&#xFF0C;&#x5B83;&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x52A0;&#x5165;&#x6570;&#x5217;&#x3002;</p>","more":"<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1486\" target=\"_blank\" rel=\"noopener\">Luogu P1486</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x662F;&#x4E00;&#x9053;&#x7ECF;&#x5178;&#x7684;&#x5E73;&#x8861;&#x6811;&#x7684;&#x9898;&#xFF0C;&#x88AB;&#x6211;&#x7528;&#x6765;&#x7EC3;&#x624B;Splay&#x3002;</p>\n<span class=\"spoiler\">&#x5199;&#x5B8C;&#x8FD9;&#x9053;&#x9898;&#x4E4B;&#x540E;&#x6211;&#x5C31;&#x89C9;&#x5F97;&#xFF0C;&#x6211;&#x518D;&#x4E5F;&#x4E0D;&#x4F1A;&#x60F3;&#x7528;Splay&#x4E86;&#x3002;debug&#x4E86;&#x4E00;&#x5929;&#xFF0C;&#x7B80;&#x76F4;&#x6D51;&#x8EAB;&#x96BE;&#x53D7;&#x3002;&#x4EE5;&#x540E;&#x5C3D;&#x91CF;&#x5199;&#x65CB;&#x8F6C;&amp;&#x975E;&#x65CB;Treap&#x5427;&#x3002;\n</span>\n<p>&#x6784;&#x5EFA;&#x4E00;&#x9897;Splay&#x6811;&#x3002;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x5168;&#x4F53;&#x52A0;&#x8FC7;&#x6216;&#x8005;&#x51CF;&#x8FC7;&#x7684;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x76F8;&#x5BF9;&#x503C;&#x3002;&#x6362;&#x7B97;&#x6765;&#x8BF4;&#x5C31;&#x662F;<code>&#x6811;&#x5916;-&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5185;&#xFF0C;&#x6811;&#x5185;+&#x76F8;&#x5BF9;&#x503C;=&#x6811;&#x5916;</code>&#x3002;&#x540E;&#x9762;&#x4E5F;&#x5C31;&#x4E0D;&#x518D;&#x592A;&#x591A;&#x7279;&#x6B8A;&#x8BF4;&#x660E;&#x3002;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E24;&#x4E2A;&#x865A;&#x7684;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#xFF0C;&#x4E5F;&#x4F1A;&#x5BFC;&#x81F4;&#x6392;&#x540D;&#x8BA1;&#x7B97;&#x7684;&#x4E00;&#x4E9B;&#x53D8;&#x5316;&#x3002;</p>\n<ul>\n<li>&#x63D2;&#x5165;&#x64CD;&#x4F5C;</li>\n</ul>\n<p>&#x5148;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x63D2;&#x5165;&#x6761;&#x4EF6;&#xFF0C;&#x5373;&#x6B64;&#x6570;&#x662F;&#x5426;&#x5927;&#x4E8E;$min$&#xFF0C;&#x7136;&#x540E;&#x51CF;&#x53BB;&#x76F8;&#x5BF9;&#x540E;&#x6B63;&#x5E38;&#x63D2;&#x5165;&#xFF0C;<code>splay</code>&#x81F3;&#x6839;&#x8282;&#x70B9;&#x3002;</p>\n<ul>\n<li>&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x6570;</li>\n</ul>\n<p>&#x76F4;&#x63A5;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5220;&#x6570;&#xFF0C;&#x4E0D;&#x4F1A;&#x6709;&#x5176;&#x4ED6;&#x64CD;&#x4F5C;&#x3002;</p>\n<ul>\n<li>&#x51CF;&#x53BB;&#x4E00;&#x4E2A;&#x6570;</li>\n</ul>\n<p>&#x9996;&#x5148;&#x66F4;&#x6539;&#x5168;&#x5C40;&#x76F8;&#x5BF9;&#x503C;&#xFF0C;&#x518D;&#x628A;&#x5C0F;&#x4E8E;$min$&#x7684;&#x6570;&#x5220;&#x9664;&#xFF0C;&#x7B80;&#x5355;&#x7684;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x5427;&#x7B2C;&#x4E00;&#x4E2A;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;$min$&#x7684;&#x6570;<code>splay</code>&#x5230;&#x6839;&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x5220;&#x9664;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x8865;&#x4E0A;&#x5DE6;&#x8FB9;&#x7684;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x6B63;&#x597D;&#x5B58;&#x5728;&#x503C;&#x4E3A;$min$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x5C06;&#x5B83;&#x76F4;&#x63A5;<code>splay</code>&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#xFF1B;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x503C;&#x4E3A;$min-1$&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5BFB;&#x627E;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#xFF0C;&#x5E76;<code>splay</code>&#x5230;&#x6839;&#xFF0C;&#x5B8C;&#x6210;&#x4E0A;&#x8FF0;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x65F6;&#x7EDF;&#x8BA1;$res$&#x9700;&#x8981;&#x51CF;&#x53BB;&#x6211;&#x4EEC;&#x521A;&#x521A;&#x52A0;&#x4E0A;&#x7684;&#x8282;&#x70B9;&#x3002;</p>\n<ul>\n<li>&#x67E5;&#x8BE2;&#x7B2C;k&#x5927;</li>\n</ul>\n<p>&#x76F4;&#x63A5;&#x67E5;&#xFF0C;&#x7136;&#x540E;<code>splay</code>&#x5230;&#x6839;&#x3002;&#x53EA;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x5217;&#x662F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5217;&#x7684;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<!--�15-->\n\n</div></div>"},{"title":"「SDOI2009」HH的项链-莫队or树状数组","urlname":"sdoi2009-necklace","date":"2018-02-05T10:11:47.000Z","visible":null,"_content":"\n给定一个长度为$n$的正整数序列$A$,有$m$次询问在$[l,r]$区间内有多少个不同的数。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1972](https://www.luogu.org/problemnew/show/P1972)\n\n## 题解\n\n这道题目前我只会两种离线的做法。{% spoiler （在线的主席树我还不会  %}\n\n### 做法一：莫队\n\n其实做这道题的时候我是不会莫队了。但现在会了，又想写篇莫队的笔记，所以我把这篇题解写出来了。\n\n莫队的核心思想在{% post_link 莫队算法学习笔记（一） 这篇文章 %}里面已经介绍，这道题又是非常像模版的一道题，也就不详细说了。\n\n首先对序列分块，以查询的左端点所在块的序号为第一关键字，右端点的位置为第二关键字排序，然后暴力转移。\n\n时间复杂度： $O((m+n) \\sqrt{n})$ 或者简单点： $O(n^\\frac{3}{2})$\n\n代码见最后。\n\n### 做法二：离散化+树状数组\n\n注意到，我们最重要的需要处理的就是重复的问题。如果不需要处理重复的问题，那么就可以直接用树状数组或者前缀和出解了。所以我们考虑到这样一个事情，能否使用某些~~玄学~~高端操作，使得我们不需要考虑重复的问题呢？\n\n可以发现，如果一个数已经出现，那么我们就不需要考虑这个数在其他位置上的出现。因此我们有如下的思路：\n\n把查询按照查询的右端点位置从小到大排序。为了发现某个数是否会在我们的查询的序列中出现，我们需要记录这个数最后一次在序列中出现的位置。如果查询区间的左端点在这个数的位置以左，那么查询区间内一定有这个数；而在这个数以右的话，查询区间里一定没有这个数。由于这个数出现多少次我们都只能算一次，所以这个最后出现的数就是我们判断是否含有这个数的依据。\n\n所以我们在树状数组中只给每个数最后出现的这一位赋值$1$,其余的由于上述，不能计入个数，值也就是$0$。这样操作就满足了区间可减性，然后直接树状数组前缀和相减就可以得到每次的结果。\n\n由于数字的范围较大，应该需要离散化。但由于这个跟时间复杂度关系不大，只与空间复杂度有关，所以我就没有这么写。\n\n时间复杂度：$O((m+n) \\log{n})$ 或者大体来说 $O(n \\log{n})$\n\n代码见下。\n\n## 代码\n\n这里提供两种方法的代码。\n\n莫队代码：\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nstruct Query{\n    int id,l,r;\n}query[201000];\n\nint times[1001000],res[201000],num[51000];\nint n,m,q;\n\nbool cmp(Query a,Query b){\n    if(a.l/q!=b.l/q)\n        return a.l/q<b.l/q;\n    else\n        return a.r<b.r;\n}\n\n\nint main(){\n    scanf(\"%d\",&n);\n    q = sqrt(n);//q是分块大小\n    for(int i = 1;i<=n;i++)\n        scanf(\"%d\",&num[i]);\n    scanf(\"%d\",&m);\n    for(int i = 0;i<m;i++){\n        scanf(\"%d %d\",&query[i].l,&query[i].r);\n        query[i].id = i;\n    }\n    sort(query,query+m,cmp);//排序\n    int l = 1,r = 1;\n    int ans = 1;times[num[1]]++;\n    for(int i = 0;i<m;i++){\n        int ql = query[i].l,qr = query[i].r;\n        //转移时先扩大再缩小\n        while(ql<l){\n            l--;\n            if(times[num[l]]++ == 0) ans++;\n        }\n        while(r<qr){\n            r++;\n            if(times[num[r]]++ == 0) ans++;\n        }\n        while(l<ql){\n            if(--times[num[l]] == 0) ans--;\n            l++;\n        }\n        while(qr<r){\n            if(--times[num[r]] == 0) ans--;\n            r--;\n        }\n        res[query[i].id] = ans;\n    }\n    for(int i = 0;i<m;i++)\n        printf(\"%d\\n\",res[i]);\n    return 0;\n}\n```\n\n{% endfold %}\n\n- - -\n\n离散化+树状数组代码：\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ninline int lowbit(int x){\n    return x&(-x);\n}\n\nint n,m,num[51000],ans[201000],last[1001000];\n\nint tree[201000];\n\nstruct que{\n    int id,l,r,res;\n}qq[1000000];\n\nbool cmp(que a,que b){\n    if(a.r!=b.r)\n        return a.r<b.r;\n    return a.l<b.l;\n}\n\ninline void insert(int nown,int val){\n    for(int i = nown;i<=n;i+=lowbit(i))\n        tree[i]+=val;\n}\n\ninline int query(int nown){\n    int res = 0;\n    for(int i = nown;i>0;i-=lowbit(i))\n        res += tree[i];\n    return res;\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 1;i<=n;i++)\n        scanf(\"%d\",&num[i]);\n    scanf(\"%d\",&m);\n    for(int i = 0;i<m;i++){\n        scanf(\"%d %d\",&qq[i].l,&qq[i].r);\n        qq[i].id = i;\n    }\n    sort(qq,qq+m,cmp);\n    int end = 0;\n    for(int i = 0;i<m;i++){\n        while(end<qq[i].r){//更新last&树状数组\n            end++;\n            if(last[num[end]]!=0)//原来出现过就抹去last位置的数\n                insert(last[num[end]],-1);\n            insert(end,1);//树状数组加入新标记\n            last[num[end]] = end;//更新last值\n        }\n        ans[qq[i].id] = query(qq[i].r) - query(qq[i].l-1);\n    }\n    for(int i = 0;i<m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n{% endfold %}\n","source":"_posts/「SDOI2009」HH的项链-莫队or树状数组.md","raw":"---\ntitle: 「SDOI2009」HH的项链-莫队or树状数组\nurlname: sdoi2009-necklace\ndate: 2018-02-05 18:11:47\ntags:\n- 莫队\n- 树状数组\n- 题解\ncategories: OI\nvisible:\n---\n\n给定一个长度为$n$的正整数序列$A$,有$m$次询问在$[l,r]$区间内有多少个不同的数。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P1972](https://www.luogu.org/problemnew/show/P1972)\n\n## 题解\n\n这道题目前我只会两种离线的做法。{% spoiler （在线的主席树我还不会  %}\n\n### 做法一：莫队\n\n其实做这道题的时候我是不会莫队了。但现在会了，又想写篇莫队的笔记，所以我把这篇题解写出来了。\n\n莫队的核心思想在{% post_link 莫队算法学习笔记（一） 这篇文章 %}里面已经介绍，这道题又是非常像模版的一道题，也就不详细说了。\n\n首先对序列分块，以查询的左端点所在块的序号为第一关键字，右端点的位置为第二关键字排序，然后暴力转移。\n\n时间复杂度： $O((m+n) \\sqrt{n})$ 或者简单点： $O(n^\\frac{3}{2})$\n\n代码见最后。\n\n### 做法二：离散化+树状数组\n\n注意到，我们最重要的需要处理的就是重复的问题。如果不需要处理重复的问题，那么就可以直接用树状数组或者前缀和出解了。所以我们考虑到这样一个事情，能否使用某些~~玄学~~高端操作，使得我们不需要考虑重复的问题呢？\n\n可以发现，如果一个数已经出现，那么我们就不需要考虑这个数在其他位置上的出现。因此我们有如下的思路：\n\n把查询按照查询的右端点位置从小到大排序。为了发现某个数是否会在我们的查询的序列中出现，我们需要记录这个数最后一次在序列中出现的位置。如果查询区间的左端点在这个数的位置以左，那么查询区间内一定有这个数；而在这个数以右的话，查询区间里一定没有这个数。由于这个数出现多少次我们都只能算一次，所以这个最后出现的数就是我们判断是否含有这个数的依据。\n\n所以我们在树状数组中只给每个数最后出现的这一位赋值$1$,其余的由于上述，不能计入个数，值也就是$0$。这样操作就满足了区间可减性，然后直接树状数组前缀和相减就可以得到每次的结果。\n\n由于数字的范围较大，应该需要离散化。但由于这个跟时间复杂度关系不大，只与空间复杂度有关，所以我就没有这么写。\n\n时间复杂度：$O((m+n) \\log{n})$ 或者大体来说 $O(n \\log{n})$\n\n代码见下。\n\n## 代码\n\n这里提供两种方法的代码。\n\n莫队代码：\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nstruct Query{\n    int id,l,r;\n}query[201000];\n\nint times[1001000],res[201000],num[51000];\nint n,m,q;\n\nbool cmp(Query a,Query b){\n    if(a.l/q!=b.l/q)\n        return a.l/q<b.l/q;\n    else\n        return a.r<b.r;\n}\n\n\nint main(){\n    scanf(\"%d\",&n);\n    q = sqrt(n);//q是分块大小\n    for(int i = 1;i<=n;i++)\n        scanf(\"%d\",&num[i]);\n    scanf(\"%d\",&m);\n    for(int i = 0;i<m;i++){\n        scanf(\"%d %d\",&query[i].l,&query[i].r);\n        query[i].id = i;\n    }\n    sort(query,query+m,cmp);//排序\n    int l = 1,r = 1;\n    int ans = 1;times[num[1]]++;\n    for(int i = 0;i<m;i++){\n        int ql = query[i].l,qr = query[i].r;\n        //转移时先扩大再缩小\n        while(ql<l){\n            l--;\n            if(times[num[l]]++ == 0) ans++;\n        }\n        while(r<qr){\n            r++;\n            if(times[num[r]]++ == 0) ans++;\n        }\n        while(l<ql){\n            if(--times[num[l]] == 0) ans--;\n            l++;\n        }\n        while(qr<r){\n            if(--times[num[r]] == 0) ans--;\n            r--;\n        }\n        res[query[i].id] = ans;\n    }\n    for(int i = 0;i<m;i++)\n        printf(\"%d\\n\",res[i]);\n    return 0;\n}\n```\n\n{% endfold %}\n\n- - -\n\n离散化+树状数组代码：\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ninline int lowbit(int x){\n    return x&(-x);\n}\n\nint n,m,num[51000],ans[201000],last[1001000];\n\nint tree[201000];\n\nstruct que{\n    int id,l,r,res;\n}qq[1000000];\n\nbool cmp(que a,que b){\n    if(a.r!=b.r)\n        return a.r<b.r;\n    return a.l<b.l;\n}\n\ninline void insert(int nown,int val){\n    for(int i = nown;i<=n;i+=lowbit(i))\n        tree[i]+=val;\n}\n\ninline int query(int nown){\n    int res = 0;\n    for(int i = nown;i>0;i-=lowbit(i))\n        res += tree[i];\n    return res;\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i = 1;i<=n;i++)\n        scanf(\"%d\",&num[i]);\n    scanf(\"%d\",&m);\n    for(int i = 0;i<m;i++){\n        scanf(\"%d %d\",&qq[i].l,&qq[i].r);\n        qq[i].id = i;\n    }\n    sort(qq,qq+m,cmp);\n    int end = 0;\n    for(int i = 0;i<m;i++){\n        while(end<qq[i].r){//更新last&树状数组\n            end++;\n            if(last[num[end]]!=0)//原来出现过就抹去last位置的数\n                insert(last[num[end]],-1);\n            insert(end,1);//树状数组加入新标记\n            last[num[end]] = end;//更新last值\n        }\n        ans[qq[i].id] = query(qq[i].r) - query(qq[i].l-1);\n    }\n    for(int i = 0;i<m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n\n{% endfold %}\n","slug":"「SDOI2009」HH的项链-莫队or树状数组","published":1,"updated":"2018-02-05T12:56:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgg000u5os6wh8rfoxt","content":"<p>&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;$n$&#x7684;&#x6B63;&#x6574;&#x6570;&#x5E8F;&#x5217;$A$,&#x6709;$m$&#x6B21;&#x8BE2;&#x95EE;&#x5728;$[l,r]$&#x533A;&#x95F4;&#x5185;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x3002;</p>\n<a id=\"more\"></a>\n<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1972\" target=\"_blank\" rel=\"noopener\">Luogu P1972</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x524D;&#x6211;&#x53EA;&#x4F1A;&#x4E24;&#x79CD;&#x79BB;&#x7EBF;&#x7684;&#x505A;&#x6CD5;&#x3002;<span class=\"spoiler\">&#xFF08;&#x5728;&#x7EBF;&#x7684;&#x4E3B;&#x5E2D;&#x6811;&#x6211;&#x8FD8;&#x4E0D;&#x4F1A;\n</span></p>\n<h3 id=\"&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\"><a href=\"#&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\" class=\"headerlink\" title=\"&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\"></a>&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;</h3><p>&#x5176;&#x5B9E;&#x505A;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x65F6;&#x5019;&#x6211;&#x662F;&#x4E0D;&#x4F1A;&#x83AB;&#x961F;&#x4E86;&#x3002;&#x4F46;&#x73B0;&#x5728;&#x4F1A;&#x4E86;&#xFF0C;&#x53C8;&#x60F3;&#x5199;&#x7BC7;&#x83AB;&#x961F;&#x7684;&#x7B14;&#x8BB0;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x628A;&#x8FD9;&#x7BC7;&#x9898;&#x89E3;&#x5199;&#x51FA;&#x6765;&#x4E86;&#x3002;</p>\n<p>&#x83AB;&#x961F;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x5728;<a href=\"/20180205-mo-algorithm-1/\" title=\"&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;\">&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;</a>&#x91CC;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x53C8;&#x662F;&#x975E;&#x5E38;&#x50CF;&#x6A21;&#x7248;&#x7684;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x4E5F;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x8BF4;&#x4E86;&#x3002;</p>\n<p>&#x9996;&#x5148;&#x5BF9;&#x5E8F;&#x5217;&#x5206;&#x5757;&#xFF0C;&#x4EE5;&#x67E5;&#x8BE2;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x6240;&#x5728;&#x5757;&#x7684;&#x5E8F;&#x53F7;&#x4E3A;&#x7B2C;&#x4E00;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;&#x7B2C;&#x4E8C;&#x5173;&#x952E;&#x5B57;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x66B4;&#x529B;&#x8F6C;&#x79FB;&#x3002;</p>\n<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A; $O((m+n) \\sqrt{n})$ &#x6216;&#x8005;&#x7B80;&#x5355;&#x70B9;&#xFF1A; $O(n^\\frac{3}{2})$</p>\n<p>&#x4EE3;&#x7801;&#x89C1;&#x6700;&#x540E;&#x3002;</p>\n<h3 id=\"&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;-&#x6811;&#x72B6;&#x6570;&#x7EC4;\"><a href=\"#&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;-&#x6811;&#x72B6;&#x6570;&#x7EC4;\" class=\"headerlink\" title=\"&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;\"></a>&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;</h3><p>&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x91CD;&#x8981;&#x7684;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x5C31;&#x662F;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x9700;&#x8981;&#x5904;&#x7406;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x7528;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6216;&#x8005;&#x524D;&#x7F00;&#x548C;&#x51FA;&#x89E3;&#x4E86;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x5230;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x4E8B;&#x60C5;&#xFF0C;&#x80FD;&#x5426;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;<del>&#x7384;&#x5B66;</del>&#x9AD8;&#x7AEF;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x5462;&#xFF1F;</p>\n<p>&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x51FA;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x6570;&#x5728;&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x51FA;&#x73B0;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x6709;&#x5982;&#x4E0B;&#x7684;&#x601D;&#x8DEF;&#xFF1A;</p>\n<p>&#x628A;&#x67E5;&#x8BE2;&#x6309;&#x7167;&#x67E5;&#x8BE2;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#x4F4D;&#x7F6E;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002;&#x4E3A;&#x4E86;&#x53D1;&#x73B0;&#x67D0;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x4F1A;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x67E5;&#x8BE2;&#x7684;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x5728;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#x4EE5;&#x5DE6;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x5185;&#x4E00;&#x5B9A;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#xFF1B;&#x800C;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x4EE5;&#x53F3;&#x7684;&#x8BDD;&#xFF0C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x91CC;&#x4E00;&#x5B9A;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x51FA;&#x73B0;&#x591A;&#x5C11;&#x6B21;&#x6211;&#x4EEC;&#x90FD;&#x53EA;&#x80FD;&#x7B97;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x6570;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5224;&#x65AD;&#x662F;&#x5426;&#x542B;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F9D;&#x636E;&#x3002;</p>\n<p>&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5728;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4E2D;&#x53EA;&#x7ED9;&#x6BCF;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x8FD9;&#x4E00;&#x4F4D;&#x8D4B;&#x503C;$1$,&#x5176;&#x4F59;&#x7684;&#x7531;&#x4E8E;&#x4E0A;&#x8FF0;&#xFF0C;&#x4E0D;&#x80FD;&#x8BA1;&#x5165;&#x4E2A;&#x6570;&#xFF0C;&#x503C;&#x4E5F;&#x5C31;&#x662F;$0$&#x3002;&#x8FD9;&#x6837;&#x64CD;&#x4F5C;&#x5C31;&#x6EE1;&#x8DB3;&#x4E86;&#x533A;&#x95F4;&#x53EF;&#x51CF;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x524D;&#x7F00;&#x548C;&#x76F8;&#x51CF;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6BCF;&#x6B21;&#x7684;&#x7ED3;&#x679C;&#x3002;</p>\n<p>&#x7531;&#x4E8E;&#x6570;&#x5B57;&#x7684;&#x8303;&#x56F4;&#x8F83;&#x5927;&#xFF0C;&#x5E94;&#x8BE5;&#x9700;&#x8981;&#x79BB;&#x6563;&#x5316;&#x3002;&#x4F46;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x8DDF;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5173;&#x7CFB;&#x4E0D;&#x5927;&#xFF0C;&#x53EA;&#x4E0E;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6709;&#x5173;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5199;&#x3002;</p>\n<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O((m+n) \\log{n})$ &#x6216;&#x8005;&#x5927;&#x4F53;&#x6765;&#x8BF4; $O(n \\log{n})$</p>\n<p>&#x4EE3;&#x7801;&#x89C1;&#x4E0B;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><p>&#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x4EE3;&#x7801;&#x3002;</p>\n<p>&#x83AB;&#x961F;&#x4EE3;&#x7801;&#xFF1A;</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Query</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id,l,r;</span><br><span class=\"line\">&#125;query[<span class=\"number\">201000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> times[<span class=\"number\">1001000</span>],res[<span class=\"number\">201000</span>],num[<span class=\"number\">51000</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Query a,Query b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.l/q!=b.l/q)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.l/q&lt;b.l/q;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.r&lt;b.r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    q = <span class=\"built_in\">sqrt</span>(n);<span class=\"comment\">//q是分块大小</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num[i]);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;query[i].l,&amp;query[i].r);</span><br><span class=\"line\">        query[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(query,query+m,cmp);<span class=\"comment\">//排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>,r = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1</span>;times[num[<span class=\"number\">1</span>]]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ql = query[i].l,qr = query[i].r;</span><br><span class=\"line\">        <span class=\"comment\">//转移时先扩大再缩小</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(ql&lt;l)&#123;</span><br><span class=\"line\">            l--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(times[num[l]]++ == <span class=\"number\">0</span>) ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r&lt;qr)&#123;</span><br><span class=\"line\">            r++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(times[num[r]]++ == <span class=\"number\">0</span>) ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;ql)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(--times[num[l]] == <span class=\"number\">0</span>) ans--;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(qr&lt;r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(--times[num[r]] == <span class=\"number\">0</span>) ans--;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res[query[i].id] = ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,res[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n<hr>\n<p>&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4EE3;&#x7801;&#xFF1A;</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,num[<span class=\"number\">51000</span>],ans[<span class=\"number\">201000</span>],last[<span class=\"number\">1001000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> tree[<span class=\"number\">201000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">que</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id,l,r,res;</span><br><span class=\"line\">&#125;qq[<span class=\"number\">1000000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(que a,que b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.r!=b.r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.r&lt;b.r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.l&lt;b.l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> nown,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = nown;i&lt;=n;i+=lowbit(i))</span><br><span class=\"line\">        tree[i]+=val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> nown)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = nown;i&gt;<span class=\"number\">0</span>;i-=lowbit(i))</span><br><span class=\"line\">        res += tree[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num[i]);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;qq[i].l,&amp;qq[i].r);</span><br><span class=\"line\">        qq[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(qq,qq+m,cmp);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(end&lt;qq[i].r)&#123;<span class=\"comment\">//更新last&amp;树状数组</span></span><br><span class=\"line\">            end++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(last[num[end]]!=<span class=\"number\">0</span>)<span class=\"comment\">//原来出现过就抹去last位置的数</span></span><br><span class=\"line\">                insert(last[num[end]],<span class=\"number\">-1</span>);</span><br><span class=\"line\">            insert(end,<span class=\"number\">1</span>);<span class=\"comment\">//树状数组加入新标记</span></span><br><span class=\"line\">            last[num[end]] = end;<span class=\"comment\">//更新last值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[qq[i].id] = query(qq[i].r) - query(qq[i].l<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;$n$&#x7684;&#x6B63;&#x6574;&#x6570;&#x5E8F;&#x5217;$A$,&#x6709;$m$&#x6B21;&#x8BE2;&#x95EE;&#x5728;$[l,r]$&#x533A;&#x95F4;&#x5185;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x3002;</p>","more":"<h2 id=\"&#x94FE;&#x63A5;\"><a href=\"#&#x94FE;&#x63A5;\" class=\"headerlink\" title=\"&#x94FE;&#x63A5;\"></a>&#x94FE;&#x63A5;</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1972\" target=\"_blank\" rel=\"noopener\">Luogu P1972</a></p>\n<h2 id=\"&#x9898;&#x89E3;\"><a href=\"#&#x9898;&#x89E3;\" class=\"headerlink\" title=\"&#x9898;&#x89E3;\"></a>&#x9898;&#x89E3;</h2><p>&#x8FD9;&#x9053;&#x9898;&#x76EE;&#x524D;&#x6211;&#x53EA;&#x4F1A;&#x4E24;&#x79CD;&#x79BB;&#x7EBF;&#x7684;&#x505A;&#x6CD5;&#x3002;<span class=\"spoiler\">&#xFF08;&#x5728;&#x7EBF;&#x7684;&#x4E3B;&#x5E2D;&#x6811;&#x6211;&#x8FD8;&#x4E0D;&#x4F1A;\n</span></p>\n<h3 id=\"&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\"><a href=\"#&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\" class=\"headerlink\" title=\"&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;\"></a>&#x505A;&#x6CD5;&#x4E00;&#xFF1A;&#x83AB;&#x961F;</h3><p>&#x5176;&#x5B9E;&#x505A;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x65F6;&#x5019;&#x6211;&#x662F;&#x4E0D;&#x4F1A;&#x83AB;&#x961F;&#x4E86;&#x3002;&#x4F46;&#x73B0;&#x5728;&#x4F1A;&#x4E86;&#xFF0C;&#x53C8;&#x60F3;&#x5199;&#x7BC7;&#x83AB;&#x961F;&#x7684;&#x7B14;&#x8BB0;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x628A;&#x8FD9;&#x7BC7;&#x9898;&#x89E3;&#x5199;&#x51FA;&#x6765;&#x4E86;&#x3002;</p>\n<p>&#x83AB;&#x961F;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x5728;<a href=\"/20180205-mo-algorithm-1/\" title=\"&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;\">&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;</a>&#x91CC;&#x9762;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#xFF0C;&#x8FD9;&#x9053;&#x9898;&#x53C8;&#x662F;&#x975E;&#x5E38;&#x50CF;&#x6A21;&#x7248;&#x7684;&#x4E00;&#x9053;&#x9898;&#xFF0C;&#x4E5F;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x8BF4;&#x4E86;&#x3002;</p>\n<p>&#x9996;&#x5148;&#x5BF9;&#x5E8F;&#x5217;&#x5206;&#x5757;&#xFF0C;&#x4EE5;&#x67E5;&#x8BE2;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x6240;&#x5728;&#x5757;&#x7684;&#x5E8F;&#x53F7;&#x4E3A;&#x7B2C;&#x4E00;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E3A;&#x7B2C;&#x4E8C;&#x5173;&#x952E;&#x5B57;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x66B4;&#x529B;&#x8F6C;&#x79FB;&#x3002;</p>\n<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A; $O((m+n) \\sqrt{n})$ &#x6216;&#x8005;&#x7B80;&#x5355;&#x70B9;&#xFF1A; $O(n^\\frac{3}{2})$</p>\n<p>&#x4EE3;&#x7801;&#x89C1;&#x6700;&#x540E;&#x3002;</p>\n<h3 id=\"&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;-&#x6811;&#x72B6;&#x6570;&#x7EC4;\"><a href=\"#&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;-&#x6811;&#x72B6;&#x6570;&#x7EC4;\" class=\"headerlink\" title=\"&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;\"></a>&#x505A;&#x6CD5;&#x4E8C;&#xFF1A;&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;</h3><p>&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x6211;&#x4EEC;&#x6700;&#x91CD;&#x8981;&#x7684;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x5C31;&#x662F;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x9700;&#x8981;&#x5904;&#x7406;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x7528;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x6216;&#x8005;&#x524D;&#x7F00;&#x548C;&#x51FA;&#x89E3;&#x4E86;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x5230;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x4E8B;&#x60C5;&#xFF0C;&#x80FD;&#x5426;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;<del>&#x7384;&#x5B66;</del>&#x9AD8;&#x7AEF;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x91CD;&#x590D;&#x7684;&#x95EE;&#x9898;&#x5462;&#xFF1F;</p>\n<p>&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6570;&#x5DF2;&#x7ECF;&#x51FA;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x6570;&#x5728;&#x5176;&#x4ED6;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x51FA;&#x73B0;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x6709;&#x5982;&#x4E0B;&#x7684;&#x601D;&#x8DEF;&#xFF1A;</p>\n<p>&#x628A;&#x67E5;&#x8BE2;&#x6309;&#x7167;&#x67E5;&#x8BE2;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#x4F4D;&#x7F6E;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002;&#x4E3A;&#x4E86;&#x53D1;&#x73B0;&#x67D0;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x4F1A;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x67E5;&#x8BE2;&#x7684;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x4E00;&#x6B21;&#x5728;&#x5E8F;&#x5217;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#x4EE5;&#x5DE6;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x5185;&#x4E00;&#x5B9A;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#xFF1B;&#x800C;&#x5728;&#x8FD9;&#x4E2A;&#x6570;&#x4EE5;&#x53F3;&#x7684;&#x8BDD;&#xFF0C;&#x67E5;&#x8BE2;&#x533A;&#x95F4;&#x91CC;&#x4E00;&#x5B9A;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x6570;&#x51FA;&#x73B0;&#x591A;&#x5C11;&#x6B21;&#x6211;&#x4EEC;&#x90FD;&#x53EA;&#x80FD;&#x7B97;&#x4E00;&#x6B21;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x6570;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5224;&#x65AD;&#x662F;&#x5426;&#x542B;&#x6709;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F9D;&#x636E;&#x3002;</p>\n<p>&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x5728;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4E2D;&#x53EA;&#x7ED9;&#x6BCF;&#x4E2A;&#x6570;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x8FD9;&#x4E00;&#x4F4D;&#x8D4B;&#x503C;$1$,&#x5176;&#x4F59;&#x7684;&#x7531;&#x4E8E;&#x4E0A;&#x8FF0;&#xFF0C;&#x4E0D;&#x80FD;&#x8BA1;&#x5165;&#x4E2A;&#x6570;&#xFF0C;&#x503C;&#x4E5F;&#x5C31;&#x662F;$0$&#x3002;&#x8FD9;&#x6837;&#x64CD;&#x4F5C;&#x5C31;&#x6EE1;&#x8DB3;&#x4E86;&#x533A;&#x95F4;&#x53EF;&#x51CF;&#x6027;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x524D;&#x7F00;&#x548C;&#x76F8;&#x51CF;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6BCF;&#x6B21;&#x7684;&#x7ED3;&#x679C;&#x3002;</p>\n<p>&#x7531;&#x4E8E;&#x6570;&#x5B57;&#x7684;&#x8303;&#x56F4;&#x8F83;&#x5927;&#xFF0C;&#x5E94;&#x8BE5;&#x9700;&#x8981;&#x79BB;&#x6563;&#x5316;&#x3002;&#x4F46;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x8DDF;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5173;&#x7CFB;&#x4E0D;&#x5927;&#xFF0C;&#x53EA;&#x4E0E;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x6709;&#x5173;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x5C31;&#x6CA1;&#x6709;&#x8FD9;&#x4E48;&#x5199;&#x3002;</p>\n<p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;$O((m+n) \\log{n})$ &#x6216;&#x8005;&#x5927;&#x4F53;&#x6765;&#x8BF4; $O(n \\log{n})$</p>\n<p>&#x4EE3;&#x7801;&#x89C1;&#x4E0B;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;\"><a href=\"#&#x4EE3;&#x7801;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;\"></a>&#x4EE3;&#x7801;</h2><p>&#x8FD9;&#x91CC;&#x63D0;&#x4F9B;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x4EE3;&#x7801;&#x3002;</p>\n<p>&#x83AB;&#x961F;&#x4EE3;&#x7801;&#xFF1A;</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<!--�16-->\n\n</div></div>\n<hr>\n<p>&#x79BB;&#x6563;&#x5316;+&#x6811;&#x72B6;&#x6570;&#x7EC4;&#x4EE3;&#x7801;&#xFF1A;</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">&#x70B9;&#x51FB;&#x5207;&#x6362;&#x663E;&#x793A;&#x72B6;&#x6001; </div></div><div class=\"fold\">\n<!--�17-->\n\n</div></div>"},{"title":"「ZJOI2009」假期的宿舍-二分图匹配","urlname":"zjoi2009-vacation","date":"2018-02-07T23:48:00.000Z","visible":null,"_content":"\n有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P2055](https://www.luogu.org/problemnew/show/P2055)\n\n## 题解\n\n这道题其实\b可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有\b本校学生床放在二分图另一侧，再将认识的人&床连边（包括自己和自己的床），注意上面的\b人不包括回家的人。\n\n然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&当前弧优化。\n\n然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。\b\b\b最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。\b缘妙不可言啊。\n\n## 代码\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nstruct Edge{\n    int from,to,flow,cap;\n    int next;\n}edge[20000];\n\nint fir[300],dis[300],cur[300];\nint n,T,home[300],local[300],s,t,tot;\n\nbool bfs(){\n    queue<int> q;\n    memset(dis,0,sizeof(dis));\n    memcpy(cur,fir,sizeof(fir));\n    q.push(s);dis[s] = 1;\n    while(!q.empty()){\n        int nown = q.front();q.pop();\n        for(int e = fir[nown];e!=0;e = edge[e].next){\n            int v = edge[e].to;\n            if(dis[v] == 0 && edge[e].cap > edge[e].flow){\n                dis[v] = dis[nown]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dis[t];\n}\n\nint dfs(int nown,int limit = 0x3f3f3f3f){\n    if(nown == t || limit == 0) return limit;\n    for(int &e = cur[nown];e!=0;e = edge[e].next){\n        int f,v = edge[e].to;\n        if(dis[v] == dis[nown]+1&&edge[e].flow <edge[e].cap){\n            int f = dfs(v,min(edge[e].cap-edge[e].flow,limit));\n            if(f>0){\n                edge[e].flow+=f;\n                edge[e^1].flow-=f;\n                return f;\n            }\n        }\n    }\n    return 0;\n}\n\nint dinic(){\n    int ans = 0,f;\n    while(bfs()){\n        while((f = dfs(s)>0))\n            ans+=f;\n    }\n    return ans;\n}\n\nvoid addedge(int from,int to,int c){\n    edge[tot].from = from;edge[tot].to = to;\n    edge[tot].cap = c;edge[tot].flow = 0;\n    edge[tot].next = fir[from];fir[from] = tot;\n    tot++;\n}\n\nint main(){\n    scanf(\"%d\",&T);\n    for(int i = 1;i<=T;i++){\n        scanf(\"%d\",&n);\n        //清零\n        memset(edge,0,sizeof(edge));\n        memset(home,0,sizeof(home));\n        memset(local,0,sizeof(local));\n        memset(fir,0,sizeof(fir));\n        tot = 2;int cnt = 0;\n        s = 2*n+1,t = 2*n+2;\n        //是否\b本校\n        for(int i = 1;i<=n;i++){\n            scanf(\"%d\",&local[i]);\n        }\n        //是否回家\n        for(int i = 1;i<=n;i++){\n            scanf(\"%d\",&home[i]);\n            if(local[i] == 0) home[i] = 0;\n        }\n        //是否认识且符合条件\n        for(int i = 1;i<=n;i++){\n            for(int j = 1;j<=n;j++){\n                int tmp;scanf(\"%d\",&tmp);\n                if(i == j) tmp = 1;\n                if(home[i] == 1||local[j] == 0||tmp == 0)\n                    continue;\n                else addedge(i,j+n,1),addedge(j+n,i,0);\n            }\n        }\n        //超级源点&&汇点\n        for(int i = 1;i<=n;i++){\n            if(home[i] == 0)\n                addedge(s,i,1),addedge(i,s,0),cnt++;\n            if(local[i] == 1)\n                addedge(i+n,t,1),addedge(t,i+n,0);\n        }\n        if(dinic()==cnt) printf(\"^_^\\n\");\n        else printf(\"T_T\\n\");\n    }\n    return 0;\n}\n```\n\n{% endfold %}\n","source":"_posts/「ZJOI2009」假期的宿舍-二分图匹配.md","raw":"---\ntitle: 「ZJOI2009」假期的宿舍-二分图匹配\nurlname: zjoi2009-vacation\ndate: 2018-02-08 07:48:00\ntags:\n- 题解\n- 图论\n- 二分图匹配\n- Dinic\ncategories: OI\nvisible:\n---\n\n有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。\n\n<!-- more -->\n\n## 链接\n\n[Luogu P2055](https://www.luogu.org/problemnew/show/P2055)\n\n## 题解\n\n这道题其实\b可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有\b本校学生床放在二分图另一侧，再将认识的人&床连边（包括自己和自己的床），注意上面的\b人不包括回家的人。\n\n然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&当前弧优化。\n\n然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。\b\b\b最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。\b缘妙不可言啊。\n\n## 代码\n\n{% fold %}\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nstruct Edge{\n    int from,to,flow,cap;\n    int next;\n}edge[20000];\n\nint fir[300],dis[300],cur[300];\nint n,T,home[300],local[300],s,t,tot;\n\nbool bfs(){\n    queue<int> q;\n    memset(dis,0,sizeof(dis));\n    memcpy(cur,fir,sizeof(fir));\n    q.push(s);dis[s] = 1;\n    while(!q.empty()){\n        int nown = q.front();q.pop();\n        for(int e = fir[nown];e!=0;e = edge[e].next){\n            int v = edge[e].to;\n            if(dis[v] == 0 && edge[e].cap > edge[e].flow){\n                dis[v] = dis[nown]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dis[t];\n}\n\nint dfs(int nown,int limit = 0x3f3f3f3f){\n    if(nown == t || limit == 0) return limit;\n    for(int &e = cur[nown];e!=0;e = edge[e].next){\n        int f,v = edge[e].to;\n        if(dis[v] == dis[nown]+1&&edge[e].flow <edge[e].cap){\n            int f = dfs(v,min(edge[e].cap-edge[e].flow,limit));\n            if(f>0){\n                edge[e].flow+=f;\n                edge[e^1].flow-=f;\n                return f;\n            }\n        }\n    }\n    return 0;\n}\n\nint dinic(){\n    int ans = 0,f;\n    while(bfs()){\n        while((f = dfs(s)>0))\n            ans+=f;\n    }\n    return ans;\n}\n\nvoid addedge(int from,int to,int c){\n    edge[tot].from = from;edge[tot].to = to;\n    edge[tot].cap = c;edge[tot].flow = 0;\n    edge[tot].next = fir[from];fir[from] = tot;\n    tot++;\n}\n\nint main(){\n    scanf(\"%d\",&T);\n    for(int i = 1;i<=T;i++){\n        scanf(\"%d\",&n);\n        //清零\n        memset(edge,0,sizeof(edge));\n        memset(home,0,sizeof(home));\n        memset(local,0,sizeof(local));\n        memset(fir,0,sizeof(fir));\n        tot = 2;int cnt = 0;\n        s = 2*n+1,t = 2*n+2;\n        //是否\b本校\n        for(int i = 1;i<=n;i++){\n            scanf(\"%d\",&local[i]);\n        }\n        //是否回家\n        for(int i = 1;i<=n;i++){\n            scanf(\"%d\",&home[i]);\n            if(local[i] == 0) home[i] = 0;\n        }\n        //是否认识且符合条件\n        for(int i = 1;i<=n;i++){\n            for(int j = 1;j<=n;j++){\n                int tmp;scanf(\"%d\",&tmp);\n                if(i == j) tmp = 1;\n                if(home[i] == 1||local[j] == 0||tmp == 0)\n                    continue;\n                else addedge(i,j+n,1),addedge(j+n,i,0);\n            }\n        }\n        //超级源点&&汇点\n        for(int i = 1;i<=n;i++){\n            if(home[i] == 0)\n                addedge(s,i,1),addedge(i,s,0),cnt++;\n            if(local[i] == 1)\n                addedge(i+n,t,1),addedge(t,i+n,0);\n        }\n        if(dinic()==cnt) printf(\"^_^\\n\");\n        else printf(\"T_T\\n\");\n    }\n    return 0;\n}\n```\n\n{% endfold %}\n","slug":"「ZJOI2009」假期的宿舍-二分图匹配","published":1,"updated":"2018-02-08T08:53:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgk000x5os6hkglnr1l","content":"<p>有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。</p>\n<a id=\"more\"></a>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P2055\" target=\"_blank\" rel=\"noopener\">Luogu P2055</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这道题其实\b可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有\b本校学生床放在二分图另一侧，再将认识的人&amp;床连边（包括自己和自己的床），注意上面的\b人不包括回家的人。</p>\n<p>然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&amp;当前弧优化。</p>\n<p>然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。\b\b\b最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。\b缘妙不可言啊。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> from,to,flow,cap;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next;</span><br><span class=\"line\">&#125;edge[<span class=\"number\">20000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fir[<span class=\"number\">300</span>],dis[<span class=\"number\">300</span>],cur[<span class=\"number\">300</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,T,home[<span class=\"number\">300</span>],local[<span class=\"number\">300</span>],s,t,tot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(cur,fir,<span class=\"keyword\">sizeof</span>(fir));</span><br><span class=\"line\">    q.push(s);dis[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.empty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nown = q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e = fir[nown];e!=<span class=\"number\">0</span>;e = edge[e].next)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v = edge[e].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[v] == <span class=\"number\">0</span> &amp;&amp; edge[e].cap &gt; edge[e].flow)&#123;</span><br><span class=\"line\">                dis[v] = dis[nown]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                q.push(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> nown,<span class=\"keyword\">int</span> limit = <span class=\"number\">0x3f3f3f3f</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nown == t || limit == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> &amp;e = cur[nown];e!=<span class=\"number\">0</span>;e = edge[e].next)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f,v = edge[e].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dis[v] == dis[nown]+<span class=\"number\">1</span>&amp;&amp;edge[e].flow &lt;edge[e].cap)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> f = dfs(v,min(edge[e].cap-edge[e].flow,limit));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                edge[e].flow+=f;</span><br><span class=\"line\">                edge[e^<span class=\"number\">1</span>].flow-=f;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,f;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(bfs())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((f = dfs(s)&gt;<span class=\"number\">0</span>))</span><br><span class=\"line\">            ans+=f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    edge[tot].from = from;edge[tot].to = to;</span><br><span class=\"line\">    edge[tot].cap = c;edge[tot].flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    edge[tot].next = fir[from];fir[from] = tot;</span><br><span class=\"line\">    tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=T;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">        <span class=\"comment\">//清零</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(edge,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(edge));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(home,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(home));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(local,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(local));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(fir,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(fir));</span><br><span class=\"line\">        tot = <span class=\"number\">2</span>;<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        s = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>,t = <span class=\"number\">2</span>*n+<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//是否\b本校</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;local[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//是否回家</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;home[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(local[i] == <span class=\"number\">0</span>) home[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//是否认识且符合条件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;tmp);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i == j) tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(home[i] == <span class=\"number\">1</span>||local[j] == <span class=\"number\">0</span>||tmp == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> addedge(i,j+n,<span class=\"number\">1</span>),addedge(j+n,i,<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//超级源点&amp;&amp;汇点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(home[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                addedge(s,i,<span class=\"number\">1</span>),addedge(i,s,<span class=\"number\">0</span>),cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(local[i] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                addedge(i+n,t,<span class=\"number\">1</span>),addedge(t,i+n,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dinic()==cnt) <span class=\"built_in\">printf</span>(<span class=\"string\">\"^_^\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"T_T\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。我们假设每个人只能睡和自己直接认识的人的床。我们已知一共有$n$个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。</p>","more":"<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P2055\" target=\"_blank\" rel=\"noopener\">Luogu P2055</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这道题其实\b可以转化成二分图匹配的问题。如果把所有不回家的在校生和前来探访的朋友放在二分图一侧，所有\b本校学生床放在二分图另一侧，再将认识的人&amp;床连边（包括自己和自己的床），注意上面的\b人不包括回家的人。</p>\n<p>然后就是一个模版的二分图匹配了。然而我只会写网络流，所以写了一个$Dinic$上去，使用了单路增广&amp;当前弧优化。</p>\n<p>然而开始调了一个下午也没调对。然而回家调了一个晚上也没调对。\b\b\b最后还算是调对了。奇怪的是我今天又敲了另一个$Dinic$，然后竟然1次AC了。\b缘妙不可言啊。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<!--�18-->\n\n</div></div>"},{"title":"「洛谷P1043」数字游戏-dp","date":"2017-12-23T05:15:19.000Z","visible":null,"urlname":"luogu-p1043","_content":"\n在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。\n<!-- more -->\n\n例如，对于下面这圈数字（$n$=4，$m$=2）：\n\n![](description.png)\n\n要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。\n\n丁丁请你编写程序帮他赢得这个游戏。\n\n## 链接\n\n[Luogu P1043](https://www.luogu.org/problemnew/show/P1043)\n\n## 题解\n很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。\n\n\n## 代码\n\n{% fold  %}\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nlong long num[150],dp_1[150],dp_2[150];//_1放最大值,_2放最小值\n\nint n,m;\n\ninline int mod(long long nnn){//mod函数\n    int w = int(floor(double(nnn)/10));\n    return nnn - w*10;\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i = 1;i<=n;i++){//断环为链的准备\n        scanf(\"%lld\",&(num[i]));\n        num[i+n] = num[i];\n    }\n    for(int i = 1;i<=2*n;i++)//前缀和的处理\n        num[i] = num[i-1]+num[i];\n    //正经dp\n    long long maxn = -1,minn = 0x3f3f3f3f;\n    for(int s = 1;s<=n;s++){//枚举起点\n        memset(dp_1,0,sizeof(dp_1));//清零dp数组\n        memset(dp_2,0,sizeof(dp_2));\n        for(int j = 0;j<m;j++){//板子由少到多\n            for(int i = s;i<=s+n;i++){//上一个插板子的地方\n                if(j == 0){//j==0的时候的处理，其实也可以叫初始化\n                    dp_1[i] = dp_2[i] = mod(num[s+n]-num[i]);\n                    continue;\n                }\n                long long maxtmp = -1,mintmp = 0x3f3f3f3f;//对所有可能下一状态的遍历，并取最大或最小值\n                for(int x = i+1;x<=s+n-j-1;x++){\n                    maxtmp = max(maxtmp,dp_1[x]*mod(num[x]-num[i]));\n                    mintmp = min(mintmp,dp_2[x]*mod(num[x]-num[i]));\n                }\n                dp_1[i] = maxtmp;//取最大最小值\n                dp_2[i] = mintmp;\n            }\n        }\n        maxn = max(dp_1[s],maxn);//对于起点不同的最大最小值进行更新\n        minn = min(dp_2[s],minn);\n    }\n    printf(\"%lld\\n%lld\\n\",minn,maxn);\n    return 0;\n}\n```\n{% endfold %}\n\n","source":"_posts/「洛谷P1043」数字游戏-dp.md","raw":"---\ntitle: 「洛谷P1043」数字游戏-dp\ndate: 2017-12-23 13:15:19\ntags:\n- 洛谷\n- 动态规划\n- 题解\ncategories: OI\nvisible:\nurlname: luogu-p1043\n---\n\n在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。\n<!-- more -->\n\n例如，对于下面这圈数字（$n$=4，$m$=2）：\n\n![](description.png)\n\n要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。\n\n丁丁请你编写程序帮他赢得这个游戏。\n\n## 链接\n\n[Luogu P1043](https://www.luogu.org/problemnew/show/P1043)\n\n## 题解\n很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。\n\n\n## 代码\n\n{% fold  %}\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nlong long num[150],dp_1[150],dp_2[150];//_1放最大值,_2放最小值\n\nint n,m;\n\ninline int mod(long long nnn){//mod函数\n    int w = int(floor(double(nnn)/10));\n    return nnn - w*10;\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    for(int i = 1;i<=n;i++){//断环为链的准备\n        scanf(\"%lld\",&(num[i]));\n        num[i+n] = num[i];\n    }\n    for(int i = 1;i<=2*n;i++)//前缀和的处理\n        num[i] = num[i-1]+num[i];\n    //正经dp\n    long long maxn = -1,minn = 0x3f3f3f3f;\n    for(int s = 1;s<=n;s++){//枚举起点\n        memset(dp_1,0,sizeof(dp_1));//清零dp数组\n        memset(dp_2,0,sizeof(dp_2));\n        for(int j = 0;j<m;j++){//板子由少到多\n            for(int i = s;i<=s+n;i++){//上一个插板子的地方\n                if(j == 0){//j==0的时候的处理，其实也可以叫初始化\n                    dp_1[i] = dp_2[i] = mod(num[s+n]-num[i]);\n                    continue;\n                }\n                long long maxtmp = -1,mintmp = 0x3f3f3f3f;//对所有可能下一状态的遍历，并取最大或最小值\n                for(int x = i+1;x<=s+n-j-1;x++){\n                    maxtmp = max(maxtmp,dp_1[x]*mod(num[x]-num[i]));\n                    mintmp = min(mintmp,dp_2[x]*mod(num[x]-num[i]));\n                }\n                dp_1[i] = maxtmp;//取最大最小值\n                dp_2[i] = mintmp;\n            }\n        }\n        maxn = max(dp_1[s],maxn);//对于起点不同的最大最小值进行更新\n        minn = min(dp_2[s],minn);\n    }\n    printf(\"%lld\\n%lld\\n\",minn,maxn);\n    return 0;\n}\n```\n{% endfold %}\n\n","slug":"「洛谷P1043」数字游戏-dp","published":1,"updated":"2018-02-05T11:04:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgp00105os6jhpmgm1b","content":"<p>在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。<br><a id=\"more\"></a></p>\n<p>例如，对于下面这圈数字（$n$=4，$m$=2）：</p>\n<p><img src=\"description.png\" alt=\"\"></p>\n<p>要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。</p>\n<p>丁丁请你编写程序帮他赢得这个游戏。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1043\" target=\"_blank\" rel=\"noopener\">Luogu P1043</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> num[<span class=\"number\">150</span>],dp_1[<span class=\"number\">150</span>],dp_2[<span class=\"number\">150</span>];<span class=\"comment\">//_1放最大值,_2放最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">mod</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> nnn)</span></span>&#123;<span class=\"comment\">//mod函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> w = <span class=\"keyword\">int</span>(<span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span>(nnn)/<span class=\"number\">10</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nnn - w*<span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)&#123;<span class=\"comment\">//断环为链的准备</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;(num[i]));</span><br><span class=\"line\">        num[i+n] = num[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=<span class=\"number\">2</span>*n;i++)<span class=\"comment\">//前缀和的处理</span></span><br><span class=\"line\">        num[i] = num[i<span class=\"number\">-1</span>]+num[i];</span><br><span class=\"line\">    <span class=\"comment\">//正经dp</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxn = <span class=\"number\">-1</span>,minn = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> s = <span class=\"number\">1</span>;s&lt;=n;s++)&#123;<span class=\"comment\">//枚举起点</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp_1,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp_1));<span class=\"comment\">//清零dp数组</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp_2,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp_2));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;m;j++)&#123;<span class=\"comment\">//板子由少到多</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = s;i&lt;=s+n;i++)&#123;<span class=\"comment\">//上一个插板子的地方</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//j==0的时候的处理，其实也可以叫初始化</span></span><br><span class=\"line\">                    dp_1[i] = dp_2[i] = mod(num[s+n]-num[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> maxtmp = <span class=\"number\">-1</span>,mintmp = <span class=\"number\">0x3f3f3f3f</span>;<span class=\"comment\">//对所有可能下一状态的遍历，并取最大或最小值</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = i+<span class=\"number\">1</span>;x&lt;=s+n-j<span class=\"number\">-1</span>;x++)&#123;</span><br><span class=\"line\">                    maxtmp = max(maxtmp,dp_1[x]*mod(num[x]-num[i]));</span><br><span class=\"line\">                    mintmp = min(mintmp,dp_2[x]*mod(num[x]-num[i]));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp_1[i] = maxtmp;<span class=\"comment\">//取最大最小值</span></span><br><span class=\"line\">                dp_2[i] = mintmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxn = max(dp_1[s],maxn);<span class=\"comment\">//对于起点不同的最大最小值进行更新</span></span><br><span class=\"line\">        minn = min(dp_2[s],minn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n%lld\\n\"</span>,minn,maxn);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n","site":{"data":{}},"excerpt":"<p>在你面前有一圈整数（一共$n$个），你要按顺序将其分为$m$个部分，各部分内的数字相加，相加所得的$m$个结果对10取模后再相乘，最终得到一个数$k$。游戏的要求是使你所得的$k$最大或者最小。<br>","more":"</p>\n<p>例如，对于下面这圈数字（$n$=4，$m$=2）：</p>\n<p><img src=\"description.png\" alt=\"\"></p>\n<p>要求最小值时，$((2-1) mod 10)×((4+3) mod 10)=1×7=7$，要求最大值时，为$((2+4+3) mod 10)×(-1 mod 10)=9×9=81$。特别值得注意的是，无论是负数还是正数，对$10$取模的结果均为非负值。</p>\n<p>丁丁请你编写程序帮他赢得这个游戏。</p>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://www.luogu.org/problemnew/show/P1043\" target=\"_blank\" rel=\"noopener\">Luogu P1043</a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>很水的一道$dp$题目。只要知道断环为链剩下的也都不难。题解洛谷没给过，现在也找不到了，只有代码还剩了下来。代码里面也有注释，凑活看看也可以。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><div><div class=\"fold_hider\"><div class=\"close hider_title\">点击切换显示状态 </div></div><div class=\"fold\">\n<!--�19-->\n\n</div></div>"},{"title":"冬令营旅游记","date":"2018-01-25T10:38:19.000Z","visible":null,"urlname":"bjwc2018-trip","_content":"\n今年冬天，去了趟北京冬令营旅游。\n<!-- more -->\n其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。\n\n## Day1\n\n![](1.jpg)\n冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。\n\n下午是胡伟栋老师的课，讲的是深搜。\n“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。\n\n## Day2\n\n第一次考试。\n看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。\n\n下午开始讲题。\n首先看了看程序，40／400。被std十倍杀。不过也很正常。\n这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。\n![](2.jpg)\n## Day3\n第二天考试。\n还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。\n考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。\n\n下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫......\n\n回家居然水过了Treap，值得庆贺。\n\n## Day4\n第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。\n\n下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。\n\n回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。\n\n\n## Day5\n最后一天考试。\n一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。\n\n下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。\n\n\n## 啧啧\n![](3.jpg)\n\n总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。\n\n和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。\n\n省一看起来不像是难事，可省队，实在是遥不可及。\n\n如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。\n\n我永远都不会认输的。\n\n明年，再来。\n\n![](4.jpg)\n","source":"_posts/冬令营旅游记.md","raw":"---\ntitle: 冬令营旅游记\ndate: 2018-01-25 18:38:19\ntags:\n- 冬令营\ncategories: OI\nvisible:\nurlname: bjwc2018-trip\n---\n\n今年冬天，去了趟北京冬令营旅游。\n<!-- more -->\n其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。\n\n## Day1\n\n![](1.jpg)\n冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。\n\n下午是胡伟栋老师的课，讲的是深搜。\n“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。\n\n## Day2\n\n第一次考试。\n看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。\n\n下午开始讲题。\n首先看了看程序，40／400。被std十倍杀。不过也很正常。\n这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。\n![](2.jpg)\n## Day3\n第二天考试。\n还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。\n考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。\n\n下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫......\n\n回家居然水过了Treap，值得庆贺。\n\n## Day4\n第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。\n\n下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。\n\n回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。\n\n\n## Day5\n最后一天考试。\n一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。\n\n下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。\n\n\n## 啧啧\n![](3.jpg)\n\n总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。\n\n和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。\n\n省一看起来不像是难事，可省队，实在是遥不可及。\n\n如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。\n\n我永远都不会认输的。\n\n明年，再来。\n\n![](4.jpg)\n","slug":"冬令营旅游记","published":1,"updated":"2018-02-01T05:28:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgr00135os6wzgn30md","content":"<p>今年冬天，去了趟北京冬令营旅游。<br><a id=\"more\"></a><br>其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。</p>\n<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h2><p><img src=\"1.jpg\" alt=\"\"><br>冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。</p>\n<p>下午是胡伟栋老师的课，讲的是深搜。<br>“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。</p>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>第一次考试。<br>看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。</p>\n<p>下午开始讲题。<br>首先看了看程序，40／400。被std十倍杀。不过也很正常。<br>这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。<br><img src=\"2.jpg\" alt=\"\"></p>\n<h2 id=\"Day3\"><a href=\"#Day3\" class=\"headerlink\" title=\"Day3\"></a>Day3</h2><p>第二天考试。<br>还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。<br>考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。</p>\n<p>下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫……</p>\n<p>回家居然水过了Treap，值得庆贺。</p>\n<h2 id=\"Day4\"><a href=\"#Day4\" class=\"headerlink\" title=\"Day4\"></a>Day4</h2><p>第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。</p>\n<p>下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。</p>\n<p>回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。</p>\n<h2 id=\"Day5\"><a href=\"#Day5\" class=\"headerlink\" title=\"Day5\"></a>Day5</h2><p>最后一天考试。<br>一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。</p>\n<p>下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。</p>\n<h2 id=\"啧啧\"><a href=\"#啧啧\" class=\"headerlink\" title=\"啧啧\"></a>啧啧</h2><p><img src=\"3.jpg\" alt=\"\"></p>\n<p>总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。</p>\n<p>和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。</p>\n<p>省一看起来不像是难事，可省队，实在是遥不可及。</p>\n<p>如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。</p>\n<p>我永远都不会认输的。</p>\n<p>明年，再来。</p>\n<p><img src=\"4.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今年冬天，去了趟北京冬令营旅游。<br>","more":"<br>其实本就没有抱着什么信心。NOIP只考了二等奖，好多提高组的基础知识都没有学完。但还是义无反顾的去了。也许早就知道会是这个样子。</p>\n<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h2><p><img src=\"1.jpg\" alt=\"\"><br>冬令营在北师大附中。虽然是去过的地方，然而还是十分迷茫的找啊找。第一天主要是颁奖仪式等等。第一次体会到如坐针毡的感觉。深刻的觉得，旁边的人哪个都好像那么巨，而自己，却是那么蒟蒻。生怕做错哪怕一点事情，而同班的OIer却还没有来冬令营。万幸，找到了几个看着还比较眼熟的，果然是同学。</p>\n<p>下午是胡伟栋老师的课，讲的是深搜。<br>“这也许是某些人冬令营唯一能听懂的一节课。”或许就是我吧。讲的的确不难，而且还是蛮有趣的。果然很厉害呢。</p>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>第一次考试。<br>看到题瞬间懵逼。一道题都不会做呢。只好随便写了几个暴力骗分，发了条pyq之后就开始玩跳一跳。坐在我旁边的貌似是小学六年级。不得不感叹，年轻真好。如果能来五年冬令营还进不了省队，说什么我都不相信。祝他有光明的前途吧。</p>\n<p>下午开始讲题。<br>首先看了看程序，40／400。被std十倍杀。不过也很正常。<br>这天下午的讲课似乎还比较友善，好像主要讲了贪心和归纳的思想。我个人认为讲的还是不错的，我也忍住了，没有睡着。讲的例题我竟然也能听懂。不容易。<br><img src=\"2.jpg\" alt=\"\"></p>\n<h2 id=\"Day3\"><a href=\"#Day3\" class=\"headerlink\" title=\"Day3\"></a>Day3</h2><p>第二天考试。<br>还是一道题都不会。依旧是，暴力骗分然后就玩跳一跳。我现在也依然认为，如果冬令营再多几天，没准我的跳一跳水平还能有长足的进步。<br>考完试才知道，第一道题原来只是有技巧的打表。果然还是too naive呢。不过同来的两位同学也没能做出后面的题，还是有了一点心理安慰的呢。不过最后只考了20分。扎心。</p>\n<p>下午讲的是国家集训队自选题。其实我都不记得讲的是什么了。只记得也是好难。无奈只好打起了世征。居然打过了一个征服。噫……</p>\n<p>回家居然水过了Treap，值得庆贺。</p>\n<h2 id=\"Day4\"><a href=\"#Day4\" class=\"headerlink\" title=\"Day4\"></a>Day4</h2><p>第三天考试。今天竟然恍惚的以为自己做出来了一道贪心。然而我还是太天真。std竟是什么我都没有听说过的费用流。不过勉强骗到了30分还是50分。后面几道题接着无穷骗分，跳一跳。最后居然骗上了100分。不错不错。</p>\n<p>下午好像讲的是国家集训队的自选题。实在实在好难。听着听着实在听不懂，于是开始学上午考到的KMP。然而写了好久还没有写对。最后到家再写还是没有写对。最后发现把一个int数组不小心开成了char。我大概是个傻子吧。</p>\n<p>回家不知道为什么脑子抽风了，稀里糊涂的总共坐了四趟公交才到家。坐了好久都没坐过的无轨电车。终于体会到在冷风中瑟瑟发抖的等公交车的感觉。诶。回到家都一个半小时了。</p>\n<h2 id=\"Day5\"><a href=\"#Day5\" class=\"headerlink\" title=\"Day5\"></a>Day5</h2><p>最后一天考试。<br>一看到题，就觉得可以暴力打表。然并卵。调一个暴力程序调了一个小时才终于调对。然后打表两分钟。啧啧啧。后面第二道题最后半个小时才开始写，写了个暴力打表。然而最后只打到30分都不到。据说还有人查OEIS的？？？我怎么没想到？？？非常有趣。学习了一个新技能。最后一道题好像颇为吐槽。反正我也不会做。</p>\n<p>下午讲高精度，我也没听，也只是记得巨佬1300多行的高精度膜版。终于把第三道线段树的题给出完了。下午回家去坐了特4，一路坐着回家很excited。啧啧啧。</p>\n<h2 id=\"啧啧\"><a href=\"#啧啧\" class=\"headerlink\" title=\"啧啧\"></a>啧啧</h2><p><img src=\"3.jpg\" alt=\"\"></p>\n<p>总结一下吧。去了趟冬令营，考了四天试，得分250/1400。啧啧。某d姓人大概考了1000分吧。差距固然存在，也就告诉了我前进该向何方，到了什么程度才能算强者吧。</p>\n<p>和某人晚上谈论了一下。某人这一段时间好像经常听我的感慨吧，谢谢你。还吐槽了我的“强弱”标准。但的确是，每进入一个阶段，总会觉得自己很弱，而强者遥不可及。但尤其在我认真对待的OI里，目标的无望却真的有些让人绝望。OI在高考里不会考到，选择了这项，那是真的真的喜欢。但似乎真的有点晚了。</p>\n<p>省一看起来不像是难事，可省队，实在是遥不可及。</p>\n<p>如果不进队，那么竞赛好像用处也不是很大。可我毕竟选择它，除了竞赛，更多的也是喜欢吧。</p>\n<p>我永远都不会认输的。</p>\n<p>明年，再来。</p>\n<p><img src=\"4.jpg\" alt=\"\"></p>"},{"title":"可能是最简单的线段树介绍","date":"2017-12-18T13:19:58.000Z","visible":"hide","urlname":"segment-tree","_content":"\n看了网上的各种线段树介绍，实在是觉得有点复杂。所以先开一个坑，慢慢填。\n\n## 0x00 概述\n\n本文将从是什么、为什么、怎么做、有什么用这几个方面来介绍一下线段树这一重要的数据结构。\n\n<!-- more -->\n\n## 0x01 什么是线段树\n\n为了学习线段树这样一个数据结构，我们需要先搞明白这是一个什么东西。\n\n线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些区间，每个单元区间对应线段树中的一个叶结点。\n\n而每一个节点所包含的区间恰好被其子节点均分为两半。\n\n## 0x02 线段树有什么用呢\n\n一句话：在O(log n)的对数时间维护和查询某段区间的诸如和，最小值，最大值等信息。\n\n权且猜测读者已经了解了树状数组。在树状数组的学习中，我们会知道，树状数组的出现其实是为了平衡前缀和、普通数组这两种数据结构，它能做到的就是在O(log n)的对数时间内求一段区间的和，以及改变某个数的值。\n\n但是倘若需要对区间进行操作该怎么办呢？如果我将区间中的每一个数都进行操作的话，那么时间复杂度已经达到了O(n)，显然是我们不能承受之慢。如果不使用差分版的树状数组这个时候，我们就需要下面即将介绍的——线段树。\n\n\n## 0x03 操作\n\n开始是打算直接讲lazy标记的，但感觉没有代码讲数据结构简直是耍流氓，所以我们先来看一个简单的线段树的代码。\n\n首先明确我们的需求：能够实现一个支持区间加法，区间求和的线段树。\n\n### 头文件部分\n```cpp\n#define ll long long\n#define lson (nown<<1)\n#define rson (nown<<1|1)\n#define mid ((l+r)>>1)\n#define MAXN 100005\n\nll sumn[MAXN<<2],addn[MAXN<<2];\n```\n我一般喜欢把这几个东西先define出来，这样以后的代码能简洁很多。\n\n在这里，我使用的数组来模拟树形结构。`nown`代表当前节点，规定nown*2为左子节点，nown*2+1为为右子节点。\n\n\n### 函数1：push_up\n\n```cpp\nvoid push_up(int nown){\n    sumn[nown] = sumn[lson] + sumn[rson];\n}\n```\n\n### ...\n\n\n## 0x04 怎么做到的呢\n\n这一部分主要分为以下几个部分\n\n说到线段树，就不得不说——\n\n### 线段树的核心思想——懒惰（lazy）标记\n\n为什么叫lazy标记呢？顾名思义，也就是为了使我们的修改操作更加的快速，我们会犯一些懒。主要来说，就是不做完所有的区间修改。我们如果发现我们目前要修改的这个区间完全被线段树某个节点对应的区间包含，那么我们就可以意识到，这个区间里的每一个点，我们都需要做这样一个修改。那么我们就会给这个区间打上一个lazy标记，标志着，我知道这个区间要改，我还没有改完这个区间以下的子区间。\n\n\n### 帮助理解lazy标记的重要性质\n\n性质：我们可以认为，在线段树这样的树状结构上，lazy标记以上的部分的信息都是完全准确的。\n\n\n\n\n(to be finished)\n\n","source":"_posts/可能是最简单的线段树介绍.md","raw":"---\ntitle: 可能是最简单的线段树介绍\ndate: 2017-12-18 21:19:58\ntags: 介绍\ncategories: OI\nvisible: hide\nurlname: segment-tree\n---\n\n看了网上的各种线段树介绍，实在是觉得有点复杂。所以先开一个坑，慢慢填。\n\n## 0x00 概述\n\n本文将从是什么、为什么、怎么做、有什么用这几个方面来介绍一下线段树这一重要的数据结构。\n\n<!-- more -->\n\n## 0x01 什么是线段树\n\n为了学习线段树这样一个数据结构，我们需要先搞明白这是一个什么东西。\n\n线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些区间，每个单元区间对应线段树中的一个叶结点。\n\n而每一个节点所包含的区间恰好被其子节点均分为两半。\n\n## 0x02 线段树有什么用呢\n\n一句话：在O(log n)的对数时间维护和查询某段区间的诸如和，最小值，最大值等信息。\n\n权且猜测读者已经了解了树状数组。在树状数组的学习中，我们会知道，树状数组的出现其实是为了平衡前缀和、普通数组这两种数据结构，它能做到的就是在O(log n)的对数时间内求一段区间的和，以及改变某个数的值。\n\n但是倘若需要对区间进行操作该怎么办呢？如果我将区间中的每一个数都进行操作的话，那么时间复杂度已经达到了O(n)，显然是我们不能承受之慢。如果不使用差分版的树状数组这个时候，我们就需要下面即将介绍的——线段树。\n\n\n## 0x03 操作\n\n开始是打算直接讲lazy标记的，但感觉没有代码讲数据结构简直是耍流氓，所以我们先来看一个简单的线段树的代码。\n\n首先明确我们的需求：能够实现一个支持区间加法，区间求和的线段树。\n\n### 头文件部分\n```cpp\n#define ll long long\n#define lson (nown<<1)\n#define rson (nown<<1|1)\n#define mid ((l+r)>>1)\n#define MAXN 100005\n\nll sumn[MAXN<<2],addn[MAXN<<2];\n```\n我一般喜欢把这几个东西先define出来，这样以后的代码能简洁很多。\n\n在这里，我使用的数组来模拟树形结构。`nown`代表当前节点，规定nown*2为左子节点，nown*2+1为为右子节点。\n\n\n### 函数1：push_up\n\n```cpp\nvoid push_up(int nown){\n    sumn[nown] = sumn[lson] + sumn[rson];\n}\n```\n\n### ...\n\n\n## 0x04 怎么做到的呢\n\n这一部分主要分为以下几个部分\n\n说到线段树，就不得不说——\n\n### 线段树的核心思想——懒惰（lazy）标记\n\n为什么叫lazy标记呢？顾名思义，也就是为了使我们的修改操作更加的快速，我们会犯一些懒。主要来说，就是不做完所有的区间修改。我们如果发现我们目前要修改的这个区间完全被线段树某个节点对应的区间包含，那么我们就可以意识到，这个区间里的每一个点，我们都需要做这样一个修改。那么我们就会给这个区间打上一个lazy标记，标志着，我知道这个区间要改，我还没有改完这个区间以下的子区间。\n\n\n### 帮助理解lazy标记的重要性质\n\n性质：我们可以认为，在线段树这样的树状结构上，lazy标记以上的部分的信息都是完全准确的。\n\n\n\n\n(to be finished)\n\n","slug":"可能是最简单的线段树介绍","published":1,"updated":"2018-02-05T12:58:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgu00155os6i5ocops4","content":"<p>看了网上的各种线段树介绍，实在是觉得有点复杂。所以先开一个坑，慢慢填。</p>\n<h2 id=\"0x00-概述\"><a href=\"#0x00-概述\" class=\"headerlink\" title=\"0x00 概述\"></a>0x00 概述</h2><p>本文将从是什么、为什么、怎么做、有什么用这几个方面来介绍一下线段树这一重要的数据结构。</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-什么是线段树\"><a href=\"#0x01-什么是线段树\" class=\"headerlink\" title=\"0x01 什么是线段树\"></a>0x01 什么是线段树</h2><p>为了学习线段树这样一个数据结构，我们需要先搞明白这是一个什么东西。</p>\n<p>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些区间，每个单元区间对应线段树中的一个叶结点。</p>\n<p>而每一个节点所包含的区间恰好被其子节点均分为两半。</p>\n<h2 id=\"0x02-线段树有什么用呢\"><a href=\"#0x02-线段树有什么用呢\" class=\"headerlink\" title=\"0x02 线段树有什么用呢\"></a>0x02 线段树有什么用呢</h2><p>一句话：在O(log n)的对数时间维护和查询某段区间的诸如和，最小值，最大值等信息。</p>\n<p>权且猜测读者已经了解了树状数组。在树状数组的学习中，我们会知道，树状数组的出现其实是为了平衡前缀和、普通数组这两种数据结构，它能做到的就是在O(log n)的对数时间内求一段区间的和，以及改变某个数的值。</p>\n<p>但是倘若需要对区间进行操作该怎么办呢？如果我将区间中的每一个数都进行操作的话，那么时间复杂度已经达到了O(n)，显然是我们不能承受之慢。如果不使用差分版的树状数组这个时候，我们就需要下面即将介绍的——线段树。</p>\n<h2 id=\"0x03-操作\"><a href=\"#0x03-操作\" class=\"headerlink\" title=\"0x03 操作\"></a>0x03 操作</h2><p>开始是打算直接讲lazy标记的，但感觉没有代码讲数据结构简直是耍流氓，所以我们先来看一个简单的线段树的代码。</p>\n<p>首先明确我们的需求：能够实现一个支持区间加法，区间求和的线段树。</p>\n<h3 id=\"头文件部分\"><a href=\"#头文件部分\" class=\"headerlink\" title=\"头文件部分\"></a>头文件部分</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson (nown&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson (nown&lt;&lt;1|1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 100005</span></span><br><span class=\"line\"></span><br><span class=\"line\">ll sumn[MAXN&lt;&lt;<span class=\"number\">2</span>],addn[MAXN&lt;&lt;<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<p>我一般喜欢把这几个东西先define出来，这样以后的代码能简洁很多。</p>\n<p>在这里，我使用的数组来模拟树形结构。<code>nown</code>代表当前节点，规定nown<em>2为左子节点，nown</em>2+1为为右子节点。</p>\n<h3 id=\"函数1：push-up\"><a href=\"#函数1：push-up\" class=\"headerlink\" title=\"函数1：push_up\"></a>函数1：push_up</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"keyword\">int</span> nown)</span></span>&#123;</span><br><span class=\"line\">    sumn[nown] = sumn[lson] + sumn[rson];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"…\"><a href=\"#…\" class=\"headerlink\" title=\"…\"></a>…</h3><h2 id=\"0x04-怎么做到的呢\"><a href=\"#0x04-怎么做到的呢\" class=\"headerlink\" title=\"0x04 怎么做到的呢\"></a>0x04 怎么做到的呢</h2><p>这一部分主要分为以下几个部分</p>\n<p>说到线段树，就不得不说——</p>\n<h3 id=\"线段树的核心思想——懒惰（lazy）标记\"><a href=\"#线段树的核心思想——懒惰（lazy）标记\" class=\"headerlink\" title=\"线段树的核心思想——懒惰（lazy）标记\"></a>线段树的核心思想——懒惰（lazy）标记</h3><p>为什么叫lazy标记呢？顾名思义，也就是为了使我们的修改操作更加的快速，我们会犯一些懒。主要来说，就是不做完所有的区间修改。我们如果发现我们目前要修改的这个区间完全被线段树某个节点对应的区间包含，那么我们就可以意识到，这个区间里的每一个点，我们都需要做这样一个修改。那么我们就会给这个区间打上一个lazy标记，标志着，我知道这个区间要改，我还没有改完这个区间以下的子区间。</p>\n<h3 id=\"帮助理解lazy标记的重要性质\"><a href=\"#帮助理解lazy标记的重要性质\" class=\"headerlink\" title=\"帮助理解lazy标记的重要性质\"></a>帮助理解lazy标记的重要性质</h3><p>性质：我们可以认为，在线段树这样的树状结构上，lazy标记以上的部分的信息都是完全准确的。</p>\n<p>(to be finished)</p>\n","site":{"data":{}},"excerpt":"<p>看了网上的各种线段树介绍，实在是觉得有点复杂。所以先开一个坑，慢慢填。</p>\n<h2 id=\"0x00-概述\"><a href=\"#0x00-概述\" class=\"headerlink\" title=\"0x00 概述\"></a>0x00 概述</h2><p>本文将从是什么、为什么、怎么做、有什么用这几个方面来介绍一下线段树这一重要的数据结构。</p>","more":"<h2 id=\"0x01-什么是线段树\"><a href=\"#0x01-什么是线段树\" class=\"headerlink\" title=\"0x01 什么是线段树\"></a>0x01 什么是线段树</h2><p>为了学习线段树这样一个数据结构，我们需要先搞明白这是一个什么东西。</p>\n<p>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些区间，每个单元区间对应线段树中的一个叶结点。</p>\n<p>而每一个节点所包含的区间恰好被其子节点均分为两半。</p>\n<h2 id=\"0x02-线段树有什么用呢\"><a href=\"#0x02-线段树有什么用呢\" class=\"headerlink\" title=\"0x02 线段树有什么用呢\"></a>0x02 线段树有什么用呢</h2><p>一句话：在O(log n)的对数时间维护和查询某段区间的诸如和，最小值，最大值等信息。</p>\n<p>权且猜测读者已经了解了树状数组。在树状数组的学习中，我们会知道，树状数组的出现其实是为了平衡前缀和、普通数组这两种数据结构，它能做到的就是在O(log n)的对数时间内求一段区间的和，以及改变某个数的值。</p>\n<p>但是倘若需要对区间进行操作该怎么办呢？如果我将区间中的每一个数都进行操作的话，那么时间复杂度已经达到了O(n)，显然是我们不能承受之慢。如果不使用差分版的树状数组这个时候，我们就需要下面即将介绍的——线段树。</p>\n<h2 id=\"0x03-操作\"><a href=\"#0x03-操作\" class=\"headerlink\" title=\"0x03 操作\"></a>0x03 操作</h2><p>开始是打算直接讲lazy标记的，但感觉没有代码讲数据结构简直是耍流氓，所以我们先来看一个简单的线段树的代码。</p>\n<p>首先明确我们的需求：能够实现一个支持区间加法，区间求和的线段树。</p>\n<h3 id=\"头文件部分\"><a href=\"#头文件部分\" class=\"headerlink\" title=\"头文件部分\"></a>头文件部分</h3><!--�20-->\n<p>我一般喜欢把这几个东西先define出来，这样以后的代码能简洁很多。</p>\n<p>在这里，我使用的数组来模拟树形结构。<code>nown</code>代表当前节点，规定nown<em>2为左子节点，nown</em>2+1为为右子节点。</p>\n<h3 id=\"函数1：push-up\"><a href=\"#函数1：push-up\" class=\"headerlink\" title=\"函数1：push_up\"></a>函数1：push_up</h3><!--�21-->\n<h3 id=\"…\"><a href=\"#…\" class=\"headerlink\" title=\"…\"></a>…</h3><h2 id=\"0x04-怎么做到的呢\"><a href=\"#0x04-怎么做到的呢\" class=\"headerlink\" title=\"0x04 怎么做到的呢\"></a>0x04 怎么做到的呢</h2><p>这一部分主要分为以下几个部分</p>\n<p>说到线段树，就不得不说——</p>\n<h3 id=\"线段树的核心思想——懒惰（lazy）标记\"><a href=\"#线段树的核心思想——懒惰（lazy）标记\" class=\"headerlink\" title=\"线段树的核心思想——懒惰（lazy）标记\"></a>线段树的核心思想——懒惰（lazy）标记</h3><p>为什么叫lazy标记呢？顾名思义，也就是为了使我们的修改操作更加的快速，我们会犯一些懒。主要来说，就是不做完所有的区间修改。我们如果发现我们目前要修改的这个区间完全被线段树某个节点对应的区间包含，那么我们就可以意识到，这个区间里的每一个点，我们都需要做这样一个修改。那么我们就会给这个区间打上一个lazy标记，标志着，我知道这个区间要改，我还没有改完这个区间以下的子区间。</p>\n<h3 id=\"帮助理解lazy标记的重要性质\"><a href=\"#帮助理解lazy标记的重要性质\" class=\"headerlink\" title=\"帮助理解lazy标记的重要性质\"></a>帮助理解lazy标记的重要性质</h3><p>性质：我们可以认为，在线段树这样的树状结构上，lazy标记以上的部分的信息都是完全准确的。</p>\n<p>(to be finished)</p>"},{"title":"日常颓废","date":"2017-12-05T12:51:27.000Z","urlname":20171205,"_content":"\n## 颓...颓废？？？\n<!-- more -->\n\n啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。\n\n但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。\n不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。\n\n愿明天生物统练不爆炸。\n","source":"_posts/日常颓废.md","raw":"---\ntitle: 日常颓废\ndate: 2017-12-05 20:51:27\ncategories: 日常\nurlname: 20171205\n---\n\n## 颓...颓废？？？\n<!-- more -->\n\n啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。\n\n但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。\n不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。\n\n愿明天生物统练不爆炸。\n","slug":"日常颓废","published":1,"updated":"2018-02-01T05:31:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosgv00185os6icg9oi9l","content":"<h2 id=\"颓…颓废？？？\"><a href=\"#颓…颓废？？？\" class=\"headerlink\" title=\"颓…颓废？？？\"></a>颓…颓废？？？</h2><a id=\"more\"></a>\n<p>啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。</p>\n<p>但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。<br>不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。</p>\n<p>愿明天生物统练不爆炸。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"颓…颓废？？？\"><a href=\"#颓…颓废？？？\" class=\"headerlink\" title=\"颓…颓废？？？\"></a>颓…颓废？？？</h2>","more":"<p>啧啧。今天真的来写一写吧。明天也许是周三了吧（捂脸），久违的统练就要来了呢。</p>\n<p>但一不小心就又开始了日常颓废。先是生物练习册错一大堆，数学练习册错一大堆。看了看背后正在落灰的算法导论。不是很令人开心的一天。<br>不过今天达成了一个成就，把同桌成功拉去打了一会乒乓球。非常的有趣。</p>\n<p>愿明天生物统练不爆炸。</p>"},{"title":"洛谷大事记","date":"2017-12-13T14:10:57.000Z","visible":"hide","urlname":"luogu-milestone","_content":"## 里程碑\n<!-- more -->\n2017-09-14 20:32 注册\n\n2017-10-17 21:00 AC*1\n\n2017-10-23 08:50 第一次蓝名\n\n2017-10-29 10:05 第一次绿名\n\n2017-11-01 20:07 AC*50\n\n2017-11-11&12    NOIp2017 tg观光游省二\n\n2017-11-19 16:37 新手村AC\n\n2017-11-25 11:51 AC*100\n\n2017-11-29 17:55 第一次橙名\n\n2017-12-17 22:28 AC*150\n\n2017-12-22 21:03 提交*500\n\n2018-01-03 19:16 第一次红名\n\n2018-01-20 20:34 AC*200\n\n2018-01-20~27 第一次冬令营观光游\n","source":"_posts/洛谷大事记.md","raw":"---\ntitle: 洛谷大事记\ndate: 2017-12-13 22:10:57\ntags: 洛谷\ncategories: OI\nvisible: hide\nurlname: luogu-milestone\n---\n## 里程碑\n<!-- more -->\n2017-09-14 20:32 注册\n\n2017-10-17 21:00 AC*1\n\n2017-10-23 08:50 第一次蓝名\n\n2017-10-29 10:05 第一次绿名\n\n2017-11-01 20:07 AC*50\n\n2017-11-11&12    NOIp2017 tg观光游省二\n\n2017-11-19 16:37 新手村AC\n\n2017-11-25 11:51 AC*100\n\n2017-11-29 17:55 第一次橙名\n\n2017-12-17 22:28 AC*150\n\n2017-12-22 21:03 提交*500\n\n2018-01-03 19:16 第一次红名\n\n2018-01-20 20:34 AC*200\n\n2018-01-20~27 第一次冬令营观光游\n","slug":"洛谷大事记","published":1,"updated":"2018-02-05T12:58:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosh1001b5os6ekewvyot","content":"<h2 id=\"里程碑\"><a href=\"#里程碑\" class=\"headerlink\" title=\"里程碑\"></a>里程碑</h2><a id=\"more\"></a>\n<p>2017-09-14 20:32 注册</p>\n<p>2017-10-17 21:00 AC*1</p>\n<p>2017-10-23 08:50 第一次蓝名</p>\n<p>2017-10-29 10:05 第一次绿名</p>\n<p>2017-11-01 20:07 AC*50</p>\n<p>2017-11-11&amp;12    NOIp2017 tg观光游省二</p>\n<p>2017-11-19 16:37 新手村AC</p>\n<p>2017-11-25 11:51 AC*100</p>\n<p>2017-11-29 17:55 第一次橙名</p>\n<p>2017-12-17 22:28 AC*150</p>\n<p>2017-12-22 21:03 提交*500</p>\n<p>2018-01-03 19:16 第一次红名</p>\n<p>2018-01-20 20:34 AC*200</p>\n<p>2018-01-20~27 第一次冬令营观光游</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"里程碑\"><a href=\"#里程碑\" class=\"headerlink\" title=\"里程碑\"></a>里程碑</h2>","more":"<p>2017-09-14 20:32 注册</p>\n<p>2017-10-17 21:00 AC*1</p>\n<p>2017-10-23 08:50 第一次蓝名</p>\n<p>2017-10-29 10:05 第一次绿名</p>\n<p>2017-11-01 20:07 AC*50</p>\n<p>2017-11-11&amp;12    NOIp2017 tg观光游省二</p>\n<p>2017-11-19 16:37 新手村AC</p>\n<p>2017-11-25 11:51 AC*100</p>\n<p>2017-11-29 17:55 第一次橙名</p>\n<p>2017-12-17 22:28 AC*150</p>\n<p>2017-12-22 21:03 提交*500</p>\n<p>2018-01-03 19:16 第一次红名</p>\n<p>2018-01-20 20:34 AC*200</p>\n<p>2018-01-20~27 第一次冬令营观光游</p>"},{"title":"测试一下","date":"2017-12-04T11:51:00.000Z","urlname":"test","_content":"## 第一篇文章\n\n或许这就是我的第一篇文章了？？？\n<!--more-->\n\n瞎搞一番果然颇有乐趣哈哈哈哈.以后不定期更新题解和算法什么乱七八糟的{% spoiler 没准也有我的吐槽哈哈哈。%}\n","source":"_posts/测试一下.md","raw":"---\ntitle: 测试一下\ndate: 2017-12-04 19:51:00\ncategories:\nurlname: test\n---\n## 第一篇文章\n\n或许这就是我的第一篇文章了？？？\n<!--more-->\n\n瞎搞一番果然颇有乐趣哈哈哈哈.以后不定期更新题解和算法什么乱七八糟的{% spoiler 没准也有我的吐槽哈哈哈。%}\n","slug":"测试一下","published":1,"updated":"2018-02-01T05:28:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosh4001e5os6s6q9g7p9","content":"<h2 id=\"&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\"><a href=\"#&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\" class=\"headerlink\" title=\"&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\"></a>&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;</h2><p>&#x6216;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;<br><a id=\"more\"></a></p>\n<p>&#x778E;&#x641E;&#x4E00;&#x756A;&#x679C;&#x7136;&#x9887;&#x6709;&#x4E50;&#x8DA3;&#x54C8;&#x54C8;&#x54C8;&#x54C8;.&#x4EE5;&#x540E;&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;&#x9898;&#x89E3;&#x548C;&#x7B97;&#x6CD5;&#x4EC0;&#x4E48;&#x4E71;&#x4E03;&#x516B;&#x7CDF;&#x7684;<span class=\"spoiler\">&#x6CA1;&#x51C6;&#x4E5F;&#x6709;&#x6211;&#x7684;&#x5410;&#x69FD;&#x54C8;&#x54C8;&#x54C8;&#x3002;\n</span></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\"><a href=\"#&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\" class=\"headerlink\" title=\"&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;\"></a>&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;</h2><p>&#x6216;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x7684;&#x7B2C;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x4E86;&#xFF1F;&#xFF1F;&#xFF1F;<br>","more":"</p>\n<p>&#x778E;&#x641E;&#x4E00;&#x756A;&#x679C;&#x7136;&#x9887;&#x6709;&#x4E50;&#x8DA3;&#x54C8;&#x54C8;&#x54C8;&#x54C8;.&#x4EE5;&#x540E;&#x4E0D;&#x5B9A;&#x671F;&#x66F4;&#x65B0;&#x9898;&#x89E3;&#x548C;&#x7B97;&#x6CD5;&#x4EC0;&#x4E48;&#x4E71;&#x4E03;&#x516B;&#x7CDF;&#x7684;<span class=\"spoiler\">&#x6CA1;&#x51C6;&#x4E5F;&#x6709;&#x6211;&#x7684;&#x5410;&#x69FD;&#x54C8;&#x54C8;&#x54C8;&#x3002;\n</span></p>"},{"title":"考试前要看的东西","date":"2018-01-28T02:38:30.000Z","visible":null,"urlname":"notes-for-test","_content":"\n## OI考试前最好来看一看\n<!--more-->\n\n会不断的补充。\n\n### 考前\n+ 带好需要的东西\n    + 笔\n    + 纸\n    + 水\n    + 吃的\n    + 适量的衣服\n+ 复习以下膜版\n    + 线段树&树状数组\n    + 平衡树\n    + dp\n    + 图论\n    + 数学\n    + ......（来日补充\n+ 早点睡\n+ 吃点好的\n\n### 考中\n\n+ 思路放开\n+ 不要鄙视暴力\n+ 不要给自己太大压力\n+ 多喝水\n+ 多上厕所（学习d姓大神\n+ 遇到不会做的题目时的checklist：\n    + 看下数据范围和题目要求 尝试对算法入座\n    + 先敲个30分左右的暴力\n    + 仔细回顾一遍学过的所有数据结构如上面所列\n    + 没准可以打个表？？\n    + 评估一下思考的代价和不做的代价\n    + 后面的题如果有思路可以先做\n    + 不要慌\n    + 再做不出来去玩局初级扫雷平静一下\n+ 写暴力对拍\n+ 最后检查**两遍**文件输入输出\n+ 除非一点都不会 不能不写\n\n### 考后\n\n+ 吃顿好的。\n+ 拉个人出去玩。\n+ 再吃顿好的。\n+ 忘掉比赛。\n","source":"_posts/考试前要看的东西.md","raw":"---\ntitle: 考试前要看的东西\ndate: 2018-01-28 10:38:30\ntags:\ncategories: OI\nvisible:\nurlname: notes-for-test\n---\n\n## OI考试前最好来看一看\n<!--more-->\n\n会不断的补充。\n\n### 考前\n+ 带好需要的东西\n    + 笔\n    + 纸\n    + 水\n    + 吃的\n    + 适量的衣服\n+ 复习以下膜版\n    + 线段树&树状数组\n    + 平衡树\n    + dp\n    + 图论\n    + 数学\n    + ......（来日补充\n+ 早点睡\n+ 吃点好的\n\n### 考中\n\n+ 思路放开\n+ 不要鄙视暴力\n+ 不要给自己太大压力\n+ 多喝水\n+ 多上厕所（学习d姓大神\n+ 遇到不会做的题目时的checklist：\n    + 看下数据范围和题目要求 尝试对算法入座\n    + 先敲个30分左右的暴力\n    + 仔细回顾一遍学过的所有数据结构如上面所列\n    + 没准可以打个表？？\n    + 评估一下思考的代价和不做的代价\n    + 后面的题如果有思路可以先做\n    + 不要慌\n    + 再做不出来去玩局初级扫雷平静一下\n+ 写暴力对拍\n+ 最后检查**两遍**文件输入输出\n+ 除非一点都不会 不能不写\n\n### 考后\n\n+ 吃顿好的。\n+ 拉个人出去玩。\n+ 再吃顿好的。\n+ 忘掉比赛。\n","slug":"考试前要看的东西","published":1,"updated":"2018-02-01T05:29:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosh6001i5os6ucns5tmw","content":"<h2 id=\"OI考试前最好来看一看\"><a href=\"#OI考试前最好来看一看\" class=\"headerlink\" title=\"OI考试前最好来看一看\"></a>OI考试前最好来看一看</h2><a id=\"more\"></a>\n<p>会不断的补充。</p>\n<h3 id=\"考前\"><a href=\"#考前\" class=\"headerlink\" title=\"考前\"></a>考前</h3><ul>\n<li>带好需要的东西<ul>\n<li>笔</li>\n<li>纸</li>\n<li>水</li>\n<li>吃的</li>\n<li>适量的衣服</li>\n</ul>\n</li>\n<li>复习以下膜版<ul>\n<li>线段树&amp;树状数组</li>\n<li>平衡树</li>\n<li>dp</li>\n<li>图论</li>\n<li>数学</li>\n<li>……（来日补充</li>\n</ul>\n</li>\n<li>早点睡</li>\n<li>吃点好的</li>\n</ul>\n<h3 id=\"考中\"><a href=\"#考中\" class=\"headerlink\" title=\"考中\"></a>考中</h3><ul>\n<li>思路放开</li>\n<li>不要鄙视暴力</li>\n<li>不要给自己太大压力</li>\n<li>多喝水</li>\n<li>多上厕所（学习d姓大神</li>\n<li>遇到不会做的题目时的checklist：<ul>\n<li>看下数据范围和题目要求 尝试对算法入座</li>\n<li>先敲个30分左右的暴力</li>\n<li>仔细回顾一遍学过的所有数据结构如上面所列</li>\n<li>没准可以打个表？？</li>\n<li>评估一下思考的代价和不做的代价</li>\n<li>后面的题如果有思路可以先做</li>\n<li>不要慌</li>\n<li>再做不出来去玩局初级扫雷平静一下</li>\n</ul>\n</li>\n<li>写暴力对拍</li>\n<li>最后检查<strong>两遍</strong>文件输入输出</li>\n<li>除非一点都不会 不能不写</li>\n</ul>\n<h3 id=\"考后\"><a href=\"#考后\" class=\"headerlink\" title=\"考后\"></a>考后</h3><ul>\n<li>吃顿好的。</li>\n<li>拉个人出去玩。</li>\n<li>再吃顿好的。</li>\n<li>忘掉比赛。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"OI考试前最好来看一看\"><a href=\"#OI考试前最好来看一看\" class=\"headerlink\" title=\"OI考试前最好来看一看\"></a>OI考试前最好来看一看</h2>","more":"<p>会不断的补充。</p>\n<h3 id=\"考前\"><a href=\"#考前\" class=\"headerlink\" title=\"考前\"></a>考前</h3><ul>\n<li>带好需要的东西<ul>\n<li>笔</li>\n<li>纸</li>\n<li>水</li>\n<li>吃的</li>\n<li>适量的衣服</li>\n</ul>\n</li>\n<li>复习以下膜版<ul>\n<li>线段树&amp;树状数组</li>\n<li>平衡树</li>\n<li>dp</li>\n<li>图论</li>\n<li>数学</li>\n<li>……（来日补充</li>\n</ul>\n</li>\n<li>早点睡</li>\n<li>吃点好的</li>\n</ul>\n<h3 id=\"考中\"><a href=\"#考中\" class=\"headerlink\" title=\"考中\"></a>考中</h3><ul>\n<li>思路放开</li>\n<li>不要鄙视暴力</li>\n<li>不要给自己太大压力</li>\n<li>多喝水</li>\n<li>多上厕所（学习d姓大神</li>\n<li>遇到不会做的题目时的checklist：<ul>\n<li>看下数据范围和题目要求 尝试对算法入座</li>\n<li>先敲个30分左右的暴力</li>\n<li>仔细回顾一遍学过的所有数据结构如上面所列</li>\n<li>没准可以打个表？？</li>\n<li>评估一下思考的代价和不做的代价</li>\n<li>后面的题如果有思路可以先做</li>\n<li>不要慌</li>\n<li>再做不出来去玩局初级扫雷平静一下</li>\n</ul>\n</li>\n<li>写暴力对拍</li>\n<li>最后检查<strong>两遍</strong>文件输入输出</li>\n<li>除非一点都不会 不能不写</li>\n</ul>\n<h3 id=\"考后\"><a href=\"#考后\" class=\"headerlink\" title=\"考后\"></a>考后</h3><ul>\n<li>吃顿好的。</li>\n<li>拉个人出去玩。</li>\n<li>再吃顿好的。</li>\n<li>忘掉比赛。</li>\n</ul>"},{"title":"莫队算法学习笔记（一）","urlname":"mo-algorithm-1","date":"2018-02-05T11:54:29.000Z","visible":null,"_content":"\n这篇\b主要介绍在序列上的无修改以及带修改的离线莫队算法。\n\n<!-- more -->\n## 简介\n\n莫队算法是一个充满着暴力美学的算法。\n\n莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。\n\n## 莫队算法\n\n### 核心思想\n\n首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。\n\n> 有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链)\n\n一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。\n\n- - -\n\n但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。\n\n所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。\n\n- - -\n\n这个时候就要用莫队的思想来简化这个时间复杂度。\n\n我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些**相邻**的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的**相邻**的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。\n\n我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\\frac{n}{Q}$个块。**分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序**。这句话很重要，其实就是莫队的核心实现吧。\n\n然后，暴力转移。\n\n- - - \n\n然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\\frac{n}{Q}$个块，所以右端点的移动总共就是$\\frac{n^2}{Q}$次。\n\n总共合起来，时间复杂度就是$O(T\\times(\\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些~~基础~~复杂的数学知识，可以发现当$Q = \\sqrt{n}$的时候，这个式子的值最小，是$O(T\\times(m+n)\\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\\sqrt{n}$\b未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。\n\n### 具体实现\n\n\b莫队的实现超级简单。\b不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。\n\n代码如下。\n\n```cpp\n//ql,qr 为查询区间，l,r为当前区间\n//add 和 del 是自定义的转移函数\n//注意自增自减的时间\nwhile(ql<l)\n    add(--l);\nwhile(r<qr)\n    add(++r);\nwhile(l<ql)\n    del(l++);\nwhile(qr<r)\n    del(r--);\n```\n\n超级简单吧！\n\n值的一提的是，在我去北京冬令营的时候，台上的神犇说：\n\n> 莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！\n\n听起来很有道理，但我没有试过。\n\n### 例题\n\n{%post_link 「SDOI2009」HH的项链-莫队or树状数组 「SDOI2009」HH的项链  %}\n\n[国家集训队]小Z的袜子 （题解待补\n\n## 带修改莫队算法\n\n待修改的莫队就是可以支持一些简单的修改的莫队算法。\n\n### 核心思想\n\n基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是**分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。**\n\n这里我们取分块的大小为$n^{\\frac{2}{3}}$，那么有$n^{\\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \\times n^{\\frac{5}{3}})$。（然而并不太懂怎么推出来这个的...哪位巨佬知道请教一下 非常感谢\n\n### 具体实现\n\n类似，不写了。\n\n```cpp\n//一段时间复杂度为O(n^5/3)的代码。\n```\n\n需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。\n\n### 例题\n\n[国家集训队]数颜色 （题解待补\n","source":"_posts/莫队算法学习笔记（一）.md","raw":"---\ntitle: 莫队算法学习笔记（一）\nurlname: mo-algorithm-1\ndate: 2018-02-05 19:54:29\ntags:\n- 莫队\n- 笔记\n- 模板\ncategories: OI\nvisible:\n---\n\n这篇\b主要介绍在序列上的无修改以及带修改的离线莫队算法。\n\n<!-- more -->\n## 简介\n\n莫队算法是一个充满着暴力美学的算法。\n\n莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。\n\n## 莫队算法\n\n### 核心思想\n\n首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。\n\n> 有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链)\n\n一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。\n\n- - -\n\n但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。\n\n所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。\n\n- - -\n\n这个时候就要用莫队的思想来简化这个时间复杂度。\n\n我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些**相邻**的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的**相邻**的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。\n\n我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\\frac{n}{Q}$个块。**分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序**。这句话很重要，其实就是莫队的核心实现吧。\n\n然后，暴力转移。\n\n- - - \n\n然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\\frac{n}{Q}$个块，所以右端点的移动总共就是$\\frac{n^2}{Q}$次。\n\n总共合起来，时间复杂度就是$O(T\\times(\\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些~~基础~~复杂的数学知识，可以发现当$Q = \\sqrt{n}$的时候，这个式子的值最小，是$O(T\\times(m+n)\\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\\sqrt{n}$\b未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。\n\n### 具体实现\n\n\b莫队的实现超级简单。\b不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。\n\n代码如下。\n\n```cpp\n//ql,qr 为查询区间，l,r为当前区间\n//add 和 del 是自定义的转移函数\n//注意自增自减的时间\nwhile(ql<l)\n    add(--l);\nwhile(r<qr)\n    add(++r);\nwhile(l<ql)\n    del(l++);\nwhile(qr<r)\n    del(r--);\n```\n\n超级简单吧！\n\n值的一提的是，在我去北京冬令营的时候，台上的神犇说：\n\n> 莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！\n\n听起来很有道理，但我没有试过。\n\n### 例题\n\n{%post_link 「SDOI2009」HH的项链-莫队or树状数组 「SDOI2009」HH的项链  %}\n\n[国家集训队]小Z的袜子 （题解待补\n\n## 带修改莫队算法\n\n待修改的莫队就是可以支持一些简单的修改的莫队算法。\n\n### 核心思想\n\n基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是**分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。**\n\n这里我们取分块的大小为$n^{\\frac{2}{3}}$，那么有$n^{\\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \\times n^{\\frac{5}{3}})$。（然而并不太懂怎么推出来这个的...哪位巨佬知道请教一下 非常感谢\n\n### 具体实现\n\n类似，不写了。\n\n```cpp\n//一段时间复杂度为O(n^5/3)的代码。\n```\n\n需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。\n\n### 例题\n\n[国家集训队]数颜色 （题解待补\n","slug":"莫队算法学习笔记（一）","published":1,"updated":"2018-02-08T07:37:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosh8001l5os6oz213dqk","content":"<p>这篇\b主要介绍在序列上的无修改以及带修改的离线莫队算法。</p>\n<a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>莫队算法是一个充满着暴力美学的算法。</p>\n<p>莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。</p>\n<h2 id=\"莫队算法\"><a href=\"#莫队算法\" class=\"headerlink\" title=\"莫队算法\"></a>莫队算法</h2><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。</p>\n<blockquote>\n<p>有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链)</p>\n</blockquote>\n<p>一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。</p>\n<hr>\n<p>但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。</p>\n<p>所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。</p>\n<hr>\n<p>这个时候就要用莫队的思想来简化这个时间复杂度。</p>\n<p>我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些<strong>相邻</strong>的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的<strong>相邻</strong>的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。</p>\n<p>我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\\frac{n}{Q}$个块。<strong>分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序</strong>。这句话很重要，其实就是莫队的核心实现吧。</p>\n<p>然后，暴力转移。</p>\n<hr>\n<p>然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\\frac{n}{Q}$个块，所以右端点的移动总共就是$\\frac{n^2}{Q}$次。</p>\n<p>总共合起来，时间复杂度就是$O(T\\times(\\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些<del>基础</del>复杂的数学知识，可以发现当$Q = \\sqrt{n}$的时候，这个式子的值最小，是$O(T\\times(m+n)\\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\\sqrt{n}$\b未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>\b莫队的实现超级简单。\b不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。</p>\n<p>代码如下。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ql,qr 为查询区间，l,r为当前区间</span></span><br><span class=\"line\"><span class=\"comment\">//add 和 del 是自定义的转移函数</span></span><br><span class=\"line\"><span class=\"comment\">//注意自增自减的时间</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(ql&lt;l)</span><br><span class=\"line\">    add(--l);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(r&lt;qr)</span><br><span class=\"line\">    add(++r);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(l&lt;ql)</span><br><span class=\"line\">    del(l++);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(qr&lt;r)</span><br><span class=\"line\">    del(r--);</span><br></pre></td></tr></table></figure>\n<p>超级简单吧！</p>\n<p>值的一提的是，在我去北京冬令营的时候，台上的神犇说：</p>\n<blockquote>\n<p>莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！</p>\n</blockquote>\n<p>听起来很有道理，但我没有试过。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><a href=\"/20180205-sdoi2009-necklace/\" title=\"「SDOI2009」HH的项链\">「SDOI2009」HH的项链</a>\n<p>[国家集训队]小Z的袜子 （题解待补</p>\n<h2 id=\"带修改莫队算法\"><a href=\"#带修改莫队算法\" class=\"headerlink\" title=\"带修改莫队算法\"></a>带修改莫队算法</h2><p>待修改的莫队就是可以支持一些简单的修改的莫队算法。</p>\n<h3 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是<strong>分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。</strong></p>\n<p>这里我们取分块的大小为$n^{\\frac{2}{3}}$，那么有$n^{\\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \\times n^{\\frac{5}{3}})$。（然而并不太懂怎么推出来这个的…哪位巨佬知道请教一下 非常感谢</p>\n<h3 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>类似，不写了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一段时间复杂度为O(n^5/3)的代码。</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>[国家集训队]数颜色 （题解待补</p>\n","site":{"data":{}},"excerpt":"<p>这篇\b主要介绍在序列上的无修改以及带修改的离线莫队算法。</p>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>莫队算法是一个充满着暴力美学的算法。</p>\n<p>莫队算法主要是用来解决一些离线无修改的区间查询问题，实现起来相比比较的简单。而莫队算法的主要用在线段树等数据结构无法在很短时间内实现区间信息合并的情况。</p>\n<h2 id=\"莫队算法\"><a href=\"#莫队算法\" class=\"headerlink\" title=\"莫队算法\"></a>莫队算法</h2><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>首先莫队算法的使用情景在上面已经提及。那么接下来让我们以一个实例来理解莫队算法。</p>\n<blockquote>\n<p>有一个正整数序列$A$，$m$次询问在$[l,r]$区间内有多少个不同的数。(HH的项链)</p>\n</blockquote>\n<p>一般来说，我们会想到使用线段树，但这种情况下，我们并不能很快（比如$O(1)$ ）的完成两个区间信息的合并，所以说线段树在这里是起不了作用的。</p>\n<hr>\n<p>但是，我们注意到，如果采用适当的方法，我们可以在常数时间内由$[l,r]$区间得到$[l-1,r]$和$[l,r+1]$的信息，只需要记录一下这个数出现的次数，然后增加的时候判一下是否为空即可。同理，略加思考，我们也可以发现从$[l,r]$区间得到$[l+1,r]$和$[l,r-1]$的信息的方法。</p>\n<p>所以如果我们直接对左端点排序，然后暴力转移的话，那么这个算法的时间复杂度在最坏情况下是$O(n^2)$的。</p>\n<hr>\n<p>这个时候就要用莫队的思想来简化这个时间复杂度。</p>\n<p>我们注意到，在$O(n^2)$算法中，每一次的左右端点最坏要移动$n$次。能不能想一个办法，让这个移动次数变小呢？如果通过某种方法排序后，能够使得某些<strong>相邻</strong>的查询移动变小，那么我们可以优化时间复杂度。但同时注意到，优化了一个移动的同时，会导致那些被排除出上文提到的<strong>相邻</strong>的查询之间的移动变大一些。所以事实上我们是在寻求一个平衡。</p>\n<p>我们可以采用分块的办法。假设我们的分块大小是$Q$,那么应该一共有$\\frac{n}{Q}$个块。<strong>分块之后，按照左端点所在的块的序号为第一关键字，右端点的位置为第二关键字排序</strong>。这句话很重要，其实就是莫队的核心实现吧。</p>\n<p>然后，暴力转移。</p>\n<hr>\n<p>然后可以注意到，不论是在同一个块内的移动，还是跨块的移动，左端点最多转移的次数是在$Q$的级别的，一共$m$次查询，那么总共转移$mQ$次。而右端点的移动，在一个块内的时候，由于肯定是单调递增，所以每查询过一个块，左端点转移$n$次，一共有$\\frac{n}{Q}$个块，所以右端点的移动总共就是$\\frac{n^2}{Q}$次。</p>\n<p>总共合起来，时间复杂度就是$O(T\\times(\\frac{n^2}{Q}+mQ))$，T为一次状态转移的时间。利用一些<del>基础</del>复杂的数学知识，可以发现当$Q = \\sqrt{n}$的时候，这个式子的值最小，是$O(T\\times(m+n)\\sqrt{n})$，这也就是基础莫队算法的时间复杂度。不过在具体实现中，精确的$\\sqrt{n}$\b未必就是最快的，有可能需要乘个常数啥的。不过大致是吧。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>\b莫队的实现超级简单。\b不过我因为我太蒻了，开始还是没有想明白。其实就是先扩大，后缩小，一个一个暴力转移。</p>\n<p>代码如下。</p>\n<!--�22-->\n<p>超级简单吧！</p>\n<p>值的一提的是，在我去北京冬令营的时候，台上的神犇说：</p>\n<blockquote>\n<p>莫队的卡常有个小技巧：你奇数的右端点正序排，偶数的右端点逆序排，就可以压掉一半的常数了！</p>\n</blockquote>\n<p>听起来很有道理，但我没有试过。</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><a href=\"/20180205-sdoi2009-necklace/\" title=\"「SDOI2009」HH的项链\">「SDOI2009」HH的项链</a>\n<p>[国家集训队]小Z的袜子 （题解待补</p>\n<h2 id=\"带修改莫队算法\"><a href=\"#带修改莫队算法\" class=\"headerlink\" title=\"带修改莫队算法\"></a>带修改莫队算法</h2><p>待修改的莫队就是可以支持一些简单的修改的莫队算法。</p>\n<h3 id=\"核心思想-1\"><a href=\"#核心思想-1\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>基本上与前面的基础算法类似。假设这里的修改有$t$次。这里的排序一般是<strong>分块之后，按照左端点所在的块的序号为第一关键字，右端点所在的块的序号为第二关键字，更改的次数为第三关键字排序。</strong></p>\n<p>这里我们取分块的大小为$n^{\\frac{2}{3}}$，那么有$n^{\\frac{1}{3}}$个块，可以算出算法的时间复杂度是$O(T \\times n^{\\frac{5}{3}})$。（然而并不太懂怎么推出来这个的…哪位巨佬知道请教一下 非常感谢</p>\n<h3 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>类似，不写了。</p>\n<!--�23-->\n<p>需要注意，如果单点修改有一个小技巧，就是每次不是更改成待更改数，而是swap当前数和待更改数，这样就可以简单的做更改了。</p>\n<h3 id=\"例题-1\"><a href=\"#例题-1\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>[国家集训队]数颜色 （题解待补</p>"},{"title":"[转载]达拉崩吧-OI版","date":"2017-12-16T06:55:42.000Z","visible":null,"urlname":"dalabengba-oi","_content":"\n## 原文地址：[点此查看](https://www.luogu.org/discuss/show?postid=29677)\n\n很久很久以前 算法突然出现\n\n带来导论 带走了智商又消失不见\n<!-- more -->\n\n编程十分危险 世间谁最勇敢\n\n一位懵逼儿赶来 大声喊\n\n我要写出最高的树 打出最大的表\n\n搜进最深的递归 把AC带回到面前\n\n老师非常高兴 忙问他的技能\n\n年轻人想了想 他说\n\n老师我会 非确定性有穷状态决策自动机\n\n再来一次 非确定性有穷状态决策自动机\n\n是不是 非确定性有穷状态决策自动机\n\n对对是 非确定性有穷状态决策自动机\n\n懵逼无名少年 捧着算法导论\n\n带着大家的希望 从学校里出发\n\n战胜BUG来袭 获得调试神技\n\n无数代码见证 他慢慢升级\n\n偏远论坛角落 参与所有话题\n\n一路排序 伴随指引前路的单链表\n\n进入决赛考场 比赛和可怕难题\n\n少年打开IDE 难题道\n\n我是 Floyd区间DP均衡红黑树\n\n再来一次 Floyd区间DP均衡红黑树\n\n是不是 Kruskal一维DP二叉排序树\n\n不对是 Floyd区间DP均衡红黑树\n\n于是 非确定性有限状态决策自动机\n\n打出 深度搜索模拟枚举单源最短路\n\n应用 拓扑排序Trie结构Polya定律\n\n套入 Dijkasta联通分量BellmanFord\n\n最后 非确定性有限状态决策自动机\n\n他使用了 IO优化树链剖分输出random\n\n调用了 矩阵速幂虚二叉树行列式消元\n\n完成了 凸包扫描后缀数组网络最大流\n\n老师听说 非确定性有限状态决策自动机\n\n他忘了写 #include<stdio> freopen\n\n就让 非确定性有限状态决策自动机\n\n全手写 map/set稳定婚姻KMP实现\n\n啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍\n\n他发明了一个算法 也在天天渐渐复杂\n\n为了避免以后麻烦 算法叫做暴力法\n\n它的全名十分难念 我不想说一遍\n\n","source":"_posts/转载-达拉崩吧OI版.md","raw":"---\ntitle: '[转载]达拉崩吧-OI版'\ndate: 2017-12-16 14:55:42\ntags: 歌曲\ncategories: OI\nvisible:\nurlname: dalabengba-oi\n---\n\n## 原文地址：[点此查看](https://www.luogu.org/discuss/show?postid=29677)\n\n很久很久以前 算法突然出现\n\n带来导论 带走了智商又消失不见\n<!-- more -->\n\n编程十分危险 世间谁最勇敢\n\n一位懵逼儿赶来 大声喊\n\n我要写出最高的树 打出最大的表\n\n搜进最深的递归 把AC带回到面前\n\n老师非常高兴 忙问他的技能\n\n年轻人想了想 他说\n\n老师我会 非确定性有穷状态决策自动机\n\n再来一次 非确定性有穷状态决策自动机\n\n是不是 非确定性有穷状态决策自动机\n\n对对是 非确定性有穷状态决策自动机\n\n懵逼无名少年 捧着算法导论\n\n带着大家的希望 从学校里出发\n\n战胜BUG来袭 获得调试神技\n\n无数代码见证 他慢慢升级\n\n偏远论坛角落 参与所有话题\n\n一路排序 伴随指引前路的单链表\n\n进入决赛考场 比赛和可怕难题\n\n少年打开IDE 难题道\n\n我是 Floyd区间DP均衡红黑树\n\n再来一次 Floyd区间DP均衡红黑树\n\n是不是 Kruskal一维DP二叉排序树\n\n不对是 Floyd区间DP均衡红黑树\n\n于是 非确定性有限状态决策自动机\n\n打出 深度搜索模拟枚举单源最短路\n\n应用 拓扑排序Trie结构Polya定律\n\n套入 Dijkasta联通分量BellmanFord\n\n最后 非确定性有限状态决策自动机\n\n他使用了 IO优化树链剖分输出random\n\n调用了 矩阵速幂虚二叉树行列式消元\n\n完成了 凸包扫描后缀数组网络最大流\n\n老师听说 非确定性有限状态决策自动机\n\n他忘了写 #include<stdio> freopen\n\n就让 非确定性有限状态决策自动机\n\n全手写 map/set稳定婚姻KMP实现\n\n啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍\n\n他发明了一个算法 也在天天渐渐复杂\n\n为了避免以后麻烦 算法叫做暴力法\n\n它的全名十分难念 我不想说一遍\n\n","slug":"转载-达拉崩吧OI版","published":1,"updated":"2018-02-01T05:33:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdilosha001o5os6ldi4v9ob","content":"<h2 id=\"原文地址：点此查看\"><a href=\"#原文地址：点此查看\" class=\"headerlink\" title=\"原文地址：点此查看\"></a>原文地址：<a href=\"https://www.luogu.org/discuss/show?postid=29677\" target=\"_blank\" rel=\"noopener\">点此查看</a></h2><p>很久很久以前 算法突然出现</p>\n<p>带来导论 带走了智商又消失不见<br><a id=\"more\"></a></p>\n<p>编程十分危险 世间谁最勇敢</p>\n<p>一位懵逼儿赶来 大声喊</p>\n<p>我要写出最高的树 打出最大的表</p>\n<p>搜进最深的递归 把AC带回到面前</p>\n<p>老师非常高兴 忙问他的技能</p>\n<p>年轻人想了想 他说</p>\n<p>老师我会 非确定性有穷状态决策自动机</p>\n<p>再来一次 非确定性有穷状态决策自动机</p>\n<p>是不是 非确定性有穷状态决策自动机</p>\n<p>对对是 非确定性有穷状态决策自动机</p>\n<p>懵逼无名少年 捧着算法导论</p>\n<p>带着大家的希望 从学校里出发</p>\n<p>战胜BUG来袭 获得调试神技</p>\n<p>无数代码见证 他慢慢升级</p>\n<p>偏远论坛角落 参与所有话题</p>\n<p>一路排序 伴随指引前路的单链表</p>\n<p>进入决赛考场 比赛和可怕难题</p>\n<p>少年打开IDE 难题道</p>\n<p>我是 Floyd区间DP均衡红黑树</p>\n<p>再来一次 Floyd区间DP均衡红黑树</p>\n<p>是不是 Kruskal一维DP二叉排序树</p>\n<p>不对是 Floyd区间DP均衡红黑树</p>\n<p>于是 非确定性有限状态决策自动机</p>\n<p>打出 深度搜索模拟枚举单源最短路</p>\n<p>应用 拓扑排序Trie结构Polya定律</p>\n<p>套入 Dijkasta联通分量BellmanFord</p>\n<p>最后 非确定性有限状态决策自动机</p>\n<p>他使用了 IO优化树链剖分输出random</p>\n<p>调用了 矩阵速幂虚二叉树行列式消元</p>\n<p>完成了 凸包扫描后缀数组网络最大流</p>\n<p>老师听说 非确定性有限状态决策自动机</p>\n<p>他忘了写 #include<stdio> freopen</stdio></p>\n<p>就让 非确定性有限状态决策自动机</p>\n<p>全手写 map/set稳定婚姻KMP实现</p>\n<p>啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍</p>\n<p>他发明了一个算法 也在天天渐渐复杂</p>\n<p>为了避免以后麻烦 算法叫做暴力法</p>\n<p>它的全名十分难念 我不想说一遍</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"原文地址：点此查看\"><a href=\"#原文地址：点此查看\" class=\"headerlink\" title=\"原文地址：点此查看\"></a>原文地址：<a href=\"https://www.luogu.org/discuss/show?postid=29677\" target=\"_blank\" rel=\"noopener\">点此查看</a></h2><p>很久很久以前 算法突然出现</p>\n<p>带来导论 带走了智商又消失不见<br>","more":"</p>\n<p>编程十分危险 世间谁最勇敢</p>\n<p>一位懵逼儿赶来 大声喊</p>\n<p>我要写出最高的树 打出最大的表</p>\n<p>搜进最深的递归 把AC带回到面前</p>\n<p>老师非常高兴 忙问他的技能</p>\n<p>年轻人想了想 他说</p>\n<p>老师我会 非确定性有穷状态决策自动机</p>\n<p>再来一次 非确定性有穷状态决策自动机</p>\n<p>是不是 非确定性有穷状态决策自动机</p>\n<p>对对是 非确定性有穷状态决策自动机</p>\n<p>懵逼无名少年 捧着算法导论</p>\n<p>带着大家的希望 从学校里出发</p>\n<p>战胜BUG来袭 获得调试神技</p>\n<p>无数代码见证 他慢慢升级</p>\n<p>偏远论坛角落 参与所有话题</p>\n<p>一路排序 伴随指引前路的单链表</p>\n<p>进入决赛考场 比赛和可怕难题</p>\n<p>少年打开IDE 难题道</p>\n<p>我是 Floyd区间DP均衡红黑树</p>\n<p>再来一次 Floyd区间DP均衡红黑树</p>\n<p>是不是 Kruskal一维DP二叉排序树</p>\n<p>不对是 Floyd区间DP均衡红黑树</p>\n<p>于是 非确定性有限状态决策自动机</p>\n<p>打出 深度搜索模拟枚举单源最短路</p>\n<p>应用 拓扑排序Trie结构Polya定律</p>\n<p>套入 Dijkasta联通分量BellmanFord</p>\n<p>最后 非确定性有限状态决策自动机</p>\n<p>他使用了 IO优化树链剖分输出random</p>\n<p>调用了 矩阵速幂虚二叉树行列式消元</p>\n<p>完成了 凸包扫描后缀数组网络最大流</p>\n<p>老师听说 非确定性有限状态决策自动机</p>\n<p>他忘了写 #include<stdio> freopen</stdio></p>\n<p>就让 非确定性有限状态决策自动机</p>\n<p>全手写 map/set稳定婚姻KMP实现</p>\n<p>啦啦 懵逼少年 敲着键盘 Ctrl+V来几遍</p>\n<p>他发明了一个算法 也在天天渐渐复杂</p>\n<p>为了避免以后麻烦 算法叫做暴力法</p>\n<p>它的全名十分难念 我不想说一遍</p>"}],"PostAsset":[{"_id":"source/_posts/Treap学习笔记/lower_upper.gif","slug":"lower_upper.gif","post":"cjdilosfq000f5os6wy7my4tt","modified":0,"renderable":0},{"_id":"source/_posts/Treap学习笔记/rotate.gif","slug":"rotate.gif","post":"cjdilosfq000f5os6wy7my4tt","modified":0,"renderable":0},{"_id":"source/_posts/「洛谷P1043」数字游戏-dp/description.png","slug":"description.png","post":"cjdilosgp00105os6jhpmgm1b","modified":0,"renderable":0},{"_id":"source/_posts/2018-JanWeek2/title.png","slug":"title.png","post":"cjdilosf600055os6vnc4zzru","modified":1,"renderable":0},{"_id":"source/_posts/“长大”/time.jpg","slug":"time.jpg","post":"cjdilosfz000j5os6czdj4qm0","modified":1,"renderable":0},{"_id":"source/_posts/「CQOI2014」排序机械臂-Splay/explanation.png","slug":"explanation.png","post":"cjdilosg2000l5os6nz3zpzl3","modified":1,"renderable":0},{"_id":"source/_posts/2018-JanWeek3/title.jpg","slug":"title.jpg","post":"cjdilosfg00085os6o2mnri5j","modified":1,"renderable":0},{"_id":"source/_posts/2018-JanWeek4-Month1/title.jpg","slug":"title.jpg","post":"cjdilosfj000a5os6krcn7j5i","modified":1,"renderable":0},{"_id":"source/_posts/2018-FebWeek2/title.png","slug":"title.png","post":"cjdilosel00025os6p0j2lgk8","modified":1,"renderable":0},{"_id":"source/_posts/2018-FebWeek1/title.jpg","slug":"title.jpg","post":"cjdilose800005os6wikbxt1v","modified":1,"renderable":0},{"_id":"source/_posts/冬令营旅游记/1.jpg","slug":"1.jpg","post":"cjdilosgr00135os6wzgn30md","modified":1,"renderable":0},{"_id":"source/_posts/冬令营旅游记/4.jpg","slug":"4.jpg","post":"cjdilosgr00135os6wzgn30md","modified":1,"renderable":0},{"_id":"source/_posts/冬令营旅游记/3.jpg","slug":"3.jpg","post":"cjdilosgr00135os6wzgn30md","modified":1,"renderable":0},{"_id":"source/_posts/冬令营旅游记/2.jpg","slug":"2.jpg","post":"cjdilosgr00135os6wzgn30md","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjdilosfg00085os6o2mnri5j","category_id":"cjdilosew00045os6dyf091b7","_id":"cjdilosfs000g5os6bg05yp2e"},{"post_id":"cjdilose800005os6wikbxt1v","category_id":"cjdilosew00045os6dyf091b7","_id":"cjdilosg0000k5os6z3ouwrb1"},{"post_id":"cjdilosfj000a5os6krcn7j5i","category_id":"cjdilosew00045os6dyf091b7","_id":"cjdilosg4000m5os6152eaeru"},{"post_id":"cjdilosel00025os6p0j2lgk8","category_id":"cjdilosfl000b5os691wur070","_id":"cjdilosga000q5os6ckn3q5q8"},{"post_id":"cjdilosfz000j5os6czdj4qm0","category_id":"cjdilosfl000b5os691wur070","_id":"cjdilosge000s5os6u38q7b9n"},{"post_id":"cjdilosf600055os6vnc4zzru","category_id":"cjdilosew00045os6dyf091b7","_id":"cjdilosgi000v5os6uf6seowc"},{"post_id":"cjdilosg8000o5os63c1sejii","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosgm000y5os6megttlvx"},{"post_id":"cjdilosfn000d5os6qvurcjz5","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosgq00115os6v75h7dml"},{"post_id":"cjdilosgc000r5os66hy7z6rb","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosgt00145os6qavu68h0"},{"post_id":"cjdilosgg000u5os6wh8rfoxt","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosgv00165os6bpvd0g0t"},{"post_id":"cjdilosfq000f5os6wy7my4tt","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosgy00195os6ckk8a106"},{"post_id":"cjdilosgk000x5os6hkglnr1l","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosh2001c5os6xywrncxj"},{"post_id":"cjdilosgp00105os6jhpmgm1b","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosh6001g5os61kglqshx"},{"post_id":"cjdilosg2000l5os6nz3zpzl3","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosh7001j5os6tprvooxy"},{"post_id":"cjdilosgr00135os6wzgn30md","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdilosh9001m5os6sysy7rp3"},{"post_id":"cjdilosgu00155os6i5ocops4","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdiloshb001p5os62bls9tpb"},{"post_id":"cjdilosgv00185os6icg9oi9l","category_id":"cjdilosfl000b5os691wur070","_id":"cjdiloshc001q5os6clp75a4w"},{"post_id":"cjdilosh1001b5os6ekewvyot","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdiloshd001s5os6fj1k94ab"},{"post_id":"cjdilosh6001i5os6ucns5tmw","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdiloshd001t5os62r3fel3y"},{"post_id":"cjdilosh8001l5os6oz213dqk","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdiloshe001v5os6pe2spra8"},{"post_id":"cjdilosha001o5os6ldi4v9ob","category_id":"cjdilosg6000n5os62pzor71u","_id":"cjdiloshf001w5os6wm2t0jrj"}],"PostTag":[{"post_id":"cjdilosel00025os6p0j2lgk8","tag_id":"cjdilosfg00075os62tpdq8qu","_id":"cjdilosfq000e5os6hyoj5gck"},{"post_id":"cjdilosfn000d5os6qvurcjz5","tag_id":"cjdilosfx000i5os6twwpgoo5","_id":"cjdilosh0001a5os6v6we9vge"},{"post_id":"cjdilosfn000d5os6qvurcjz5","tag_id":"cjdilosga000p5os6uvvh36rb","_id":"cjdilosh4001d5os64wj37ozw"},{"post_id":"cjdilosfn000d5os6qvurcjz5","tag_id":"cjdilosgi000w5os65sffiq35","_id":"cjdilosh6001h5os6a8fw1zf6"},{"post_id":"cjdilosfn000d5os6qvurcjz5","tag_id":"cjdilosgr00125os6ctcxopq7","_id":"cjdilosh7001k5os6355220v7"},{"post_id":"cjdilosfq000f5os6wy7my4tt","tag_id":"cjdilosgv00175os652dn8nxe","_id":"cjdiloshf001y5os6sfv5u1sx"},{"post_id":"cjdilosfq000f5os6wy7my4tt","tag_id":"cjdilosh5001f5os6yadqju2e","_id":"cjdiloshg001z5os6dlqllzp7"},{"post_id":"cjdilosfq000f5os6wy7my4tt","tag_id":"cjdilosha001n5os6uvvsqytu","_id":"cjdiloshh00215os6umixth8z"},{"post_id":"cjdilosfq000f5os6wy7my4tt","tag_id":"cjdilosfx000i5os6twwpgoo5","_id":"cjdiloshh00225os6jh039zk7"},{"post_id":"cjdilosfq000f5os6wy7my4tt","tag_id":"cjdilosgr00125os6ctcxopq7","_id":"cjdiloshi00245os6qa8phdnv"},{"post_id":"cjdilosfz000j5os6czdj4qm0","tag_id":"cjdiloshf001x5os68msfu5j6","_id":"cjdiloshi00255os6pet0ek7q"},{"post_id":"cjdilosg2000l5os6nz3zpzl3","tag_id":"cjdilosgv00175os652dn8nxe","_id":"cjdiloshj00295os65keo4mm5"},{"post_id":"cjdilosg2000l5os6nz3zpzl3","tag_id":"cjdilosh5001f5os6yadqju2e","_id":"cjdiloshk002a5os6m6eydlox"},{"post_id":"cjdilosg2000l5os6nz3zpzl3","tag_id":"cjdiloshi00265os6yov3h2f8","_id":"cjdiloshl002c5os6t485rkjm"},{"post_id":"cjdilosg2000l5os6nz3zpzl3","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdiloshl002d5os6j7aevaui"},{"post_id":"cjdilosg8000o5os63c1sejii","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdiloshm002g5os64auqvbkk"},{"post_id":"cjdilosg8000o5os63c1sejii","tag_id":"cjdilosgv00175os652dn8nxe","_id":"cjdiloshn002h5os669r4gq6t"},{"post_id":"cjdilosg8000o5os63c1sejii","tag_id":"cjdiloshl002e5os6ytusj8vy","_id":"cjdiloshn002j5os6jecssnu0"},{"post_id":"cjdilosgc000r5os66hy7z6rb","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdiloshq002n5os6kachz0bn"},{"post_id":"cjdilosgc000r5os66hy7z6rb","tag_id":"cjdilosgv00175os652dn8nxe","_id":"cjdiloshq002o5os67aecp17m"},{"post_id":"cjdilosgc000r5os66hy7z6rb","tag_id":"cjdilosh5001f5os6yadqju2e","_id":"cjdiloshq002q5os6cyupqi6s"},{"post_id":"cjdilosgc000r5os66hy7z6rb","tag_id":"cjdiloshi00265os6yov3h2f8","_id":"cjdiloshq002r5os6jfimakhe"},{"post_id":"cjdilosgg000u5os6wh8rfoxt","tag_id":"cjdiloshp002m5os61d0kbnsx","_id":"cjdiloshv002u5os6hph8ldn0"},{"post_id":"cjdilosgg000u5os6wh8rfoxt","tag_id":"cjdiloshq002p5os65bieumo1","_id":"cjdiloshv002v5os6no1k5c5h"},{"post_id":"cjdilosgg000u5os6wh8rfoxt","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdiloshw002x5os69frncdsj"},{"post_id":"cjdilosgk000x5os6hkglnr1l","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdiloshx002z5os6f4je6hf5"},{"post_id":"cjdilosgk000x5os6hkglnr1l","tag_id":"cjdilosga000p5os6uvvh36rb","_id":"cjdiloshx00305os6msi6jggd"},{"post_id":"cjdilosgk000x5os6hkglnr1l","tag_id":"cjdiloshw002w5os6gmyqc9oe","_id":"cjdiloshy00325os6thl86d6i"},{"post_id":"cjdilosgk000x5os6hkglnr1l","tag_id":"cjdilosgi000w5os65sffiq35","_id":"cjdiloshy00335os60kcaa0ie"},{"post_id":"cjdilosgp00105os6jhpmgm1b","tag_id":"cjdiloshx002y5os6s5i2uiba","_id":"cjdilosi000365os6wdz2wamx"},{"post_id":"cjdilosgp00105os6jhpmgm1b","tag_id":"cjdiloshy00315os6wa26oqtt","_id":"cjdilosi100375os6ndnrk0ad"},{"post_id":"cjdilosgp00105os6jhpmgm1b","tag_id":"cjdiloshi00275os6gdatyjaa","_id":"cjdilosi200395os6o27pv82d"},{"post_id":"cjdilosgr00135os6wzgn30md","tag_id":"cjdilosi000355os63ys0jujn","_id":"cjdilosi3003a5os6u7sgzcym"},{"post_id":"cjdilosgu00155os6i5ocops4","tag_id":"cjdilosi100385os6u0li40cw","_id":"cjdilosi4003c5os6d8lbgpn8"},{"post_id":"cjdilosh1001b5os6ekewvyot","tag_id":"cjdiloshx002y5os6s5i2uiba","_id":"cjdilosi5003e5os6ldynzyv7"},{"post_id":"cjdilosh8001l5os6oz213dqk","tag_id":"cjdiloshp002m5os61d0kbnsx","_id":"cjdilosi6003g5os64hr0zkzw"},{"post_id":"cjdilosh8001l5os6oz213dqk","tag_id":"cjdilosfx000i5os6twwpgoo5","_id":"cjdilosi6003h5os6w09elk6e"},{"post_id":"cjdilosh8001l5os6oz213dqk","tag_id":"cjdilosgr00125os6ctcxopq7","_id":"cjdilosi6003i5os6pid4zdx8"},{"post_id":"cjdilosha001o5os6ldi4v9ob","tag_id":"cjdilosi5003f5os682pv9d5z","_id":"cjdilosi6003j5os68stolo30"}],"Tag":[{"name":"总结","_id":"cjdilosfg00075os62tpdq8qu"},{"name":"笔记","_id":"cjdilosfx000i5os6twwpgoo5"},{"name":"图论","_id":"cjdilosga000p5os6uvvh36rb"},{"name":"Dinic","_id":"cjdilosgi000w5os65sffiq35"},{"name":"模板","_id":"cjdilosgr00125os6ctcxopq7"},{"name":"数据结构","_id":"cjdilosgv00175os652dn8nxe"},{"name":"平衡树","_id":"cjdilosh5001f5os6yadqju2e"},{"name":"Treap","_id":"cjdilosha001n5os6uvvsqytu"},{"name":"随笔","_id":"cjdiloshf001x5os68msfu5j6"},{"name":"Splay","_id":"cjdiloshi00265os6yov3h2f8"},{"name":"题解","_id":"cjdiloshi00275os6gdatyjaa"},{"name":"并查集","_id":"cjdiloshl002e5os6ytusj8vy"},{"name":"莫队","_id":"cjdiloshp002m5os61d0kbnsx"},{"name":"树状数组","_id":"cjdiloshq002p5os65bieumo1"},{"name":"二分图匹配","_id":"cjdiloshw002w5os6gmyqc9oe"},{"name":"洛谷","_id":"cjdiloshx002y5os6s5i2uiba"},{"name":"动态规划","_id":"cjdiloshy00315os6wa26oqtt"},{"name":"冬令营","_id":"cjdilosi000355os63ys0jujn"},{"name":"介绍","_id":"cjdilosi100385os6u0li40cw"},{"name":"歌曲","_id":"cjdilosi5003f5os682pv9d5z"}]}}